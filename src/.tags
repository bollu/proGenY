!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	include/SFML/Window/Keyboard.hpp	/^        A = 0,        \/\/\/< The A key$/;"	e	enum:sf::Keyboard::Key
Accepted	include/SFML/Network/Http.hpp	/^            Accepted       = 202, \/\/\/< The request has been accepted, but will be processed later by the server$/;"	e	enum:sf::Http::Response::Status
Add	include/Box2D/Dynamics/b2Island.h	/^	void Add(b2Body* body)$/;"	f	class:b2Island
Add	include/Box2D/Dynamics/b2Island.h	/^	void Add(b2Contact* contact)$/;"	f	class:b2Island
Add	include/Box2D/Dynamics/b2Island.h	/^	void Add(b2Joint* joint)$/;"	f	class:b2Island
Add	include/SFML/Window/Keyboard.hpp	/^        Add,          \/\/\/< The + key$/;"	e	enum:sf::Keyboard::Key
AddPair	include/Box2D/Dynamics/b2ContactManager.cpp	/^void b2ContactManager::AddPair(void* proxyUserDataA, void* proxyUserDataB)$/;"	f	class:b2ContactManager
AddType	include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^void b2Contact::AddType(b2ContactCreateFcn* createFcn, b2ContactDestroyFcn* destoryFcn,$/;"	f	class:b2Contact
Advance	include/Box2D/Common/b2Math.h	/^inline void b2Sweep::Advance(float32 alpha)$/;"	f	class:b2Sweep
Advance	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::Advance(float32 alpha)$/;"	f	class:b2Body
Allocate	include/Box2D/Common/b2BlockAllocator.cpp	/^void* b2BlockAllocator::Allocate(int32 size)$/;"	f	class:b2BlockAllocator
Allocate	include/Box2D/Common/b2StackAllocator.cpp	/^void* b2StackAllocator::Allocate(int32 size)$/;"	f	class:b2StackAllocator
AllocateNode	include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::AllocateNode()$/;"	f	class:b2DynamicTree
AnyPort	include/SFML/Network/Socket.hpp	/^        AnyPort = 0 \/\/\/< Special value that tells the system to pick any available port$/;"	e	enum:sf::Socket::__anon2
AppendFlags	include/Box2D/Common/b2Draw.cpp	/^void b2Draw::AppendFlags(uint32 flags)$/;"	f	class:b2Draw
ApplyAngularImpulse	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::ApplyAngularImpulse(float32 impulse)$/;"	f	class:b2Body
ApplyForce	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::ApplyForce(const b2Vec2& force, const b2Vec2& point)$/;"	f	class:b2Body
ApplyForceToCenter	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::ApplyForceToCenter(const b2Vec2& force)$/;"	f	class:b2Body
ApplyLinearImpulse	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::ApplyLinearImpulse(const b2Vec2& impulse, const b2Vec2& point)$/;"	f	class:b2Body
ApplyTorque	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::ApplyTorque(float32 torque)$/;"	f	class:b2Body
Ascii	include/SFML/Network/Ftp.hpp	/^        Ascii,  \/\/\/< Text mode using ASCII encoding$/;"	e	enum:sf::Ftp::TransferMode
Axis	include/SFML/Window/Joystick.hpp	/^    enum Axis$/;"	g	class:sf::Joystick
AxisCount	include/SFML/Window/Joystick.hpp	/^        AxisCount   = 8   \/\/\/< Maximum number of supported axes$/;"	e	enum:sf::Joystick::__anon5
B	include/SFML/Window/Keyboard.hpp	/^        B,            \/\/\/< The B key$/;"	e	enum:sf::Keyboard::Key
B2_BLOCK_ALLOCATOR_H	include/Box2D/Common/b2BlockAllocator.h	20;"	d
B2_BODY_H	include/Box2D/Dynamics/b2Body.h	20;"	d
B2_BROAD_PHASE_H	include/Box2D/Collision/b2BroadPhase.h	20;"	d
B2_CHAIN_AND_CIRCLE_CONTACT_H	include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.h	20;"	d
B2_CHAIN_AND_POLYGON_CONTACT_H	include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.h	20;"	d
B2_CHAIN_SHAPE_H	include/Box2D/Collision/Shapes/b2ChainShape.h	20;"	d
B2_CIRCLE_CONTACT_H	include/Box2D/Dynamics/Contacts/b2CircleContact.h	20;"	d
B2_CIRCLE_SHAPE_H	include/Box2D/Collision/Shapes/b2CircleShape.h	20;"	d
B2_COLLISION_H	include/Box2D/Collision/b2Collision.h	20;"	d
B2_CONTACT_H	include/Box2D/Dynamics/Contacts/b2Contact.h	20;"	d
B2_CONTACT_MANAGER_H	include/Box2D/Dynamics/b2ContactManager.h	20;"	d
B2_CONTACT_SOLVER_H	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	20;"	d
B2_DEBUG_SOLVER	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	27;"	d	file:
B2_DISTANCE_H	include/Box2D/Collision/b2Distance.h	21;"	d
B2_DISTANCE_JOINT_H	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	20;"	d
B2_DYNAMIC_TREE_H	include/Box2D/Collision/b2DynamicTree.h	20;"	d
B2_EDGE_AND_CIRCLE_CONTACT_H	include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.h	20;"	d
B2_EDGE_AND_POLYGON_CONTACT_H	include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.h	20;"	d
B2_EDGE_SHAPE_H	include/Box2D/Collision/Shapes/b2EdgeShape.h	20;"	d
B2_FIXTURE_H	include/Box2D/Dynamics/b2Fixture.h	20;"	d
B2_FRICTION_JOINT_H	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	20;"	d
B2_GEAR_JOINT_H	include/Box2D/Dynamics/Joints/b2GearJoint.h	20;"	d
B2_GROWABLE_STACK_H	include/Box2D/Common/b2GrowableStack.h	20;"	d
B2_ISLAND_H	include/Box2D/Dynamics/b2Island.h	20;"	d
B2_JOINT_H	include/Box2D/Dynamics/Joints/b2Joint.h	20;"	d
B2_MATH_H	include/Box2D/Common/b2Math.h	20;"	d
B2_MOUSE_JOINT_H	include/Box2D/Dynamics/Joints/b2MouseJoint.h	20;"	d
B2_NOT_USED	include/Box2D/Common/b2Settings.h	25;"	d
B2_POLYGON_AND_CIRCLE_CONTACT_H	include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.h	20;"	d
B2_POLYGON_CONTACT_H	include/Box2D/Dynamics/Contacts/b2PolygonContact.h	20;"	d
B2_POLYGON_SHAPE_H	include/Box2D/Collision/Shapes/b2PolygonShape.h	20;"	d
B2_PRISMATIC_JOINT_H	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	20;"	d
B2_PULLEY_JOINT_H	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	20;"	d
B2_REVOLUTE_JOINT_H	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	20;"	d
B2_ROPE_H	include/Box2D/Rope/b2Rope.h	20;"	d
B2_ROPE_JOINT_H	include/Box2D/Dynamics/Joints/b2RopeJoint.h	20;"	d
B2_SETTINGS_H	include/Box2D/Common/b2Settings.h	20;"	d
B2_SHAPE_H	include/Box2D/Collision/Shapes/b2Shape.h	20;"	d
B2_STACK_ALLOCATOR_H	include/Box2D/Common/b2StackAllocator.h	20;"	d
B2_TIME_OF_IMPACT_H	include/Box2D/Collision/b2TimeOfImpact.h	20;"	d
B2_TIME_STEP_H	include/Box2D/Dynamics/b2TimeStep.h	20;"	d
B2_WELD_JOINT_H	include/Box2D/Dynamics/Joints/b2WeldJoint.h	20;"	d
B2_WHEEL_JOINT_H	include/Box2D/Dynamics/Joints/b2WheelJoint.h	20;"	d
B2_WORLD_CALLBACKS_H	include/Box2D/Dynamics/b2WorldCallbacks.h	20;"	d
B2_WORLD_H	include/Box2D/Dynamics/b2World.h	20;"	d
BOX2D_H	include/Box2D/Box2D.h	20;"	d
BackSlash	include/SFML/Window/Keyboard.hpp	/^        BackSlash,    \/\/\/< The \\ key$/;"	e	enum:sf::Keyboard::Key
BackSpace	include/SFML/Window/Keyboard.hpp	/^        BackSpace,    \/\/\/< The Backspace key$/;"	e	enum:sf::Keyboard::Key
BadCommandSequence	include/SFML/Network/Ftp.hpp	/^            BadCommandSequence      = 503, \/\/\/< Bad sequence of commands$/;"	e	enum:sf::Ftp::Response::Status
BadGateway	include/SFML/Network/Http.hpp	/^            BadGateway          = 502, \/\/\/< The gateway server has received an error from the source server$/;"	e	enum:sf::Http::Response::Status
BadRequest	include/SFML/Network/Http.hpp	/^            BadRequest          = 400, \/\/\/< The server couldn't understand the request (syntax error)$/;"	e	enum:sf::Http::Response::Status
Balance	include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::Balance(int32 iA)$/;"	f	class:b2DynamicTree
BeginContact	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual void BeginContact(b2Contact* contact) { B2_NOT_USED(contact); }$/;"	f	class:b2ContactListener
Binary	include/SFML/Network/Ftp.hpp	/^        Binary, \/\/\/< Binary mode (file is transfered as a sequence of bytes)$/;"	e	enum:sf::Ftp::TransferMode
Black	include/SFML/Graphics/Color.hpp	/^    static const Color Black;       \/\/\/< Black predefined color$/;"	m	class:sf::Color
BlendAdd	include/SFML/Graphics/BlendMode.hpp	/^    BlendAdd,      \/\/\/< Pixel = Source + Dest$/;"	e	enum:sf::BlendMode
BlendAlpha	include/SFML/Graphics/BlendMode.hpp	/^    BlendAlpha,    \/\/\/< Pixel = Source * Source.a + Dest * (1 - Source.a)$/;"	e	enum:sf::BlendMode
BlendMode	include/SFML/Graphics/BlendMode.hpp	/^enum BlendMode$/;"	g	namespace:sf
BlendMultiply	include/SFML/Graphics/BlendMode.hpp	/^    BlendMultiply, \/\/\/< Pixel = Source * Dest$/;"	e	enum:sf::BlendMode
BlendNone	include/SFML/Graphics/BlendMode.hpp	/^    BlendNone      \/\/\/< Pixel = Source$/;"	e	enum:sf::BlendMode
Blue	include/SFML/Graphics/Color.hpp	/^    static const Color Blue;        \/\/\/< Blue predefined color$/;"	m	class:sf::Color
Bold	include/SFML/Graphics/Text.hpp	/^        Bold       = 1 << 0, \/\/\/< Bold characters$/;"	e	enum:sf::Text::Style
BoolType	include/SFML/Network/Packet.hpp	/^    typedef bool (Packet::*BoolType)(std::size_t);$/;"	t	class:sf::Packet
Broadcast	include/SFML/Network/IpAddress.hpp	/^    static const IpAddress Broadcast; \/\/\/< The "broadcast" address (for sending UDP messages to everyone on a local network)$/;"	m	class:sf::IpAddress
BufferCount	include/SFML/Audio/SoundStream.hpp	/^        BufferCount = 3 \/\/\/< Number of audio buffers used by the streaming loop$/;"	e	enum:sf::SoundStream::__anon7
BufferMove	include/Box2D/Collision/b2BroadPhase.cpp	/^void b2BroadPhase::BufferMove(int32 proxyId)$/;"	f	class:b2BroadPhase
Button	include/SFML/Window/Mouse.hpp	/^    enum Button$/;"	g	class:sf::Mouse
ButtonCount	include/SFML/Window/Joystick.hpp	/^        ButtonCount = 32, \/\/\/< Maximum number of supported buttons$/;"	e	enum:sf::Joystick::__anon5
ButtonCount	include/SFML/Window/Mouse.hpp	/^        ButtonCount \/\/\/< Keep last -- the total number of mouse buttons$/;"	e	enum:sf::Mouse::Button
C	include/SFML/Window/Keyboard.hpp	/^        C,            \/\/\/< The C key$/;"	e	enum:sf::Keyboard::Key
Chunk	include/SFML/Audio/SoundStream.hpp	/^    struct Chunk$/;"	s	class:sf::SoundStream
CircleShape	include/SFML/Graphics/CircleShape.hpp	/^class SFML_GRAPHICS_API CircleShape : public Shape$/;"	c	namespace:sf
Clear	include/Box2D/Common/b2BlockAllocator.cpp	/^void b2BlockAllocator::Clear()$/;"	f	class:b2BlockAllocator
Clear	include/Box2D/Dynamics/b2Island.h	/^	void Clear()$/;"	f	class:b2Island
ClearFlags	include/Box2D/Common/b2Draw.cpp	/^void b2Draw::ClearFlags(uint32 flags)$/;"	f	class:b2Draw
ClearForces	include/Box2D/Dynamics/b2World.cpp	/^void b2World::ClearForces()$/;"	f	class:b2World
Clock	include/SFML/System/Clock.hpp	/^class SFML_SYSTEM_API Clock$/;"	c	namespace:sf
Clone	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^b2Shape* b2ChainShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2ChainShape
Clone	include/Box2D/Collision/Shapes/b2CircleShape.cpp	/^b2Shape* b2CircleShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2CircleShape
Clone	include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^b2Shape* b2EdgeShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2EdgeShape
Clone	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^b2Shape* b2PolygonShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2PolygonShape
Close	include/SFML/Window/WindowStyle.hpp	/^        Close      = 1 << 2, \/\/\/< Titlebar + close button$/;"	e	enum:sf::Style::__anon3
Closed	include/SFML/Window/Event.hpp	/^        Closed,                 \/\/\/< The window requested to be closed (no data)$/;"	e	enum:sf::Event::EventType
ClosingConnection	include/SFML/Network/Ftp.hpp	/^            ClosingConnection     = 221, \/\/\/< Service closing control connection$/;"	e	enum:sf::Ftp::Response::Status
ClosingDataConnection	include/SFML/Network/Ftp.hpp	/^            ClosingDataConnection = 226, \/\/\/< Closing data connection, requested file action successful$/;"	e	enum:sf::Ftp::Response::Status
Collide	include/Box2D/Collision/b2CollideEdge.cpp	/^void b2EPCollider::Collide(b2Manifold* manifold, const b2EdgeShape* edgeA, const b2Transform& xfA,$/;"	f	class:b2EPCollider
Collide	include/Box2D/Dynamics/b2ContactManager.cpp	/^void b2ContactManager::Collide()$/;"	f	class:b2ContactManager
Color	include/SFML/Graphics/Color.hpp	/^class SFML_GRAPHICS_API Color$/;"	c	namespace:sf
Combine	include/Box2D/Collision/b2Collision.h	/^	void Combine(const b2AABB& aabb)$/;"	f	struct:b2AABB
Combine	include/Box2D/Collision/b2Collision.h	/^	void Combine(const b2AABB& aabb1, const b2AABB& aabb2)$/;"	f	struct:b2AABB
Comma	include/SFML/Window/Keyboard.hpp	/^        Comma,        \/\/\/< The , key$/;"	e	enum:sf::Keyboard::Key
CommandNotImplemented	include/SFML/Network/Ftp.hpp	/^            CommandNotImplemented   = 502, \/\/\/< Command not implemented$/;"	e	enum:sf::Ftp::Response::Status
CommandUnknown	include/SFML/Network/Ftp.hpp	/^            CommandUnknown          = 500, \/\/\/< Syntax error, command unrecognized$/;"	e	enum:sf::Ftp::Response::Status
ComputeAABB	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const$/;"	f	class:b2ChainShape
ComputeAABB	include/Box2D/Collision/Shapes/b2CircleShape.cpp	/^void b2CircleShape::ComputeAABB(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const$/;"	f	class:b2CircleShape
ComputeAABB	include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^void b2EdgeShape::ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const$/;"	f	class:b2EdgeShape
ComputeAABB	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const$/;"	f	class:b2PolygonShape
ComputeCentroid	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^static b2Vec2 ComputeCentroid(const b2Vec2* vs, int32 count)$/;"	f	file:
ComputeEdgeSeparation	include/Box2D/Collision/b2CollideEdge.cpp	/^b2EPAxis b2EPCollider::ComputeEdgeSeparation()$/;"	f	class:b2EPCollider
ComputeHeight	include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::ComputeHeight() const$/;"	f	class:b2DynamicTree
ComputeHeight	include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::ComputeHeight(int32 nodeId) const$/;"	f	class:b2DynamicTree
ComputeMass	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2ChainShape
ComputeMass	include/Box2D/Collision/Shapes/b2CircleShape.cpp	/^void b2CircleShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2CircleShape
ComputeMass	include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^void b2EdgeShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2EdgeShape
ComputeMass	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2PolygonShape
ComputePolygonSeparation	include/Box2D/Collision/b2CollideEdge.cpp	/^b2EPAxis b2EPCollider::ComputePolygonSeparation()$/;"	f	class:b2EPCollider
ConnectionClosed	include/SFML/Network/Ftp.hpp	/^            ConnectionClosed = 1002, \/\/\/< Connection with server closed$/;"	e	enum:sf::Ftp::Response::Status
ConnectionFailed	include/SFML/Network/Ftp.hpp	/^            ConnectionFailed = 1001, \/\/\/< Connection with server failed$/;"	e	enum:sf::Ftp::Response::Status
ConnectionFailed	include/SFML/Network/Http.hpp	/^            ConnectionFailed = 1001  \/\/\/< Connection with server failed$/;"	e	enum:sf::Http::Response::Status
ConstIterator	include/SFML/System/String.hpp	/^    typedef std::basic_string<Uint32>::const_iterator ConstIterator; \/\/\/< Constant iterator type$/;"	t	class:sf::String
Contains	include/Box2D/Collision/b2Collision.h	/^	bool Contains(const b2AABB& aabb) const$/;"	f	struct:b2AABB
Context	include/SFML/Window/Context.hpp	/^class SFML_WINDOW_API Context : GlResource, NonCopyable$/;"	c	namespace:sf
ContextSettings	include/SFML/Window/ContextSettings.hpp	/^    explicit ContextSettings(unsigned int depth = 0, unsigned int stencil = 0, unsigned int antialiasing = 0, unsigned int major = 2, unsigned int minor = 0) :$/;"	f	struct:sf::ContextSettings
ContextSettings	include/SFML/Window/ContextSettings.hpp	/^struct ContextSettings$/;"	s	namespace:sf
ConvexShape	include/SFML/Graphics/ConvexShape.hpp	/^class SFML_GRAPHICS_API ConvexShape : public Shape$/;"	c	namespace:sf
CoordinateType	include/SFML/Graphics/Texture.hpp	/^    enum CoordinateType$/;"	g	class:sf::Texture
Count	include/SFML/Window/Event.hpp	/^        Count                   \/\/\/< Keep last -- the total number of event types$/;"	e	enum:sf::Event::EventType
Count	include/SFML/Window/Joystick.hpp	/^        Count       = 8,  \/\/\/< Maximum number of supported joysticks$/;"	e	enum:sf::Joystick::__anon5
Create	include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.cpp	/^b2Contact* b2ChainAndCircleContact::Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndCircleContact
Create	include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.cpp	/^b2Contact* b2ChainAndPolygonContact::Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndPolygonContact
Create	include/Box2D/Dynamics/Contacts/b2CircleContact.cpp	/^b2Contact* b2CircleContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2CircleContact
Create	include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^b2Contact* b2Contact::Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)$/;"	f	class:b2Contact
Create	include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.cpp	/^b2Contact* b2EdgeAndCircleContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndCircleContact
Create	include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.cpp	/^b2Contact* b2EdgeAndPolygonContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndPolygonContact
Create	include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.cpp	/^b2Contact* b2PolygonAndCircleContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonAndCircleContact
Create	include/Box2D/Dynamics/Contacts/b2PolygonContact.cpp	/^b2Contact* b2PolygonContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonContact
Create	include/Box2D/Dynamics/Joints/b2Joint.cpp	/^b2Joint* b2Joint::Create(const b2JointDef* def, b2BlockAllocator* allocator)$/;"	f	class:b2Joint
Create	include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::Create(b2BlockAllocator* allocator, b2Body* body, const b2FixtureDef* def)$/;"	f	class:b2Fixture
CreateBody	include/Box2D/Dynamics/b2World.cpp	/^b2Body* b2World::CreateBody(const b2BodyDef* def)$/;"	f	class:b2World
CreateChain	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::CreateChain(const b2Vec2* vertices, int32 count)$/;"	f	class:b2ChainShape
CreateFixture	include/Box2D/Dynamics/b2Body.cpp	/^b2Fixture* b2Body::CreateFixture(const b2FixtureDef* def)$/;"	f	class:b2Body
CreateFixture	include/Box2D/Dynamics/b2Body.cpp	/^b2Fixture* b2Body::CreateFixture(const b2Shape* shape, float32 density)$/;"	f	class:b2Body
CreateJoint	include/Box2D/Dynamics/b2World.cpp	/^b2Joint* b2World::CreateJoint(const b2JointDef* def)$/;"	f	class:b2World
CreateLoop	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::CreateLoop(const b2Vec2* vertices, int32 count)$/;"	f	class:b2ChainShape
CreateProxies	include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::CreateProxies(b2BroadPhase* broadPhase, const b2Transform& xf)$/;"	f	class:b2Fixture
CreateProxy	include/Box2D/Collision/b2BroadPhase.cpp	/^int32 b2BroadPhase::CreateProxy(const b2AABB& aabb, void* userData)$/;"	f	class:b2BroadPhase
CreateProxy	include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::CreateProxy(const b2AABB& aabb, void* userData)$/;"	f	class:b2DynamicTree
Created	include/SFML/Network/Http.hpp	/^            Created        = 201, \/\/\/< The resource has successfully been created$/;"	e	enum:sf::Http::Response::Status
CurrentTexture	include/SFML/Graphics/Shader.hpp	/^    static CurrentTextureType CurrentTexture;$/;"	m	class:sf::Shader
CurrentTextureType	include/SFML/Graphics/Shader.hpp	/^    struct CurrentTextureType {};$/;"	s	class:sf::Shader
Cyan	include/SFML/Graphics/Color.hpp	/^    static const Color Cyan;        \/\/\/< Cyan predefined color$/;"	m	class:sf::Color
D	include/SFML/Window/Keyboard.hpp	/^        D,            \/\/\/< The D key$/;"	e	enum:sf::Keyboard::Key
Dash	include/SFML/Window/Keyboard.hpp	/^        Dash,         \/\/\/< The - key$/;"	e	enum:sf::Keyboard::Key
Data	include/SFML/Network/TcpSocket.hpp	/^        std::vector<char> Data;         \/\/\/< Data of the packet$/;"	m	struct:sf::TcpSocket::PendingPacket
DataConnectionAlreadyOpened	include/SFML/Network/Ftp.hpp	/^            DataConnectionAlreadyOpened = 125, \/\/\/< Data connection already opened, transfer starting$/;"	e	enum:sf::Ftp::Response::Status
DataConnectionOpened	include/SFML/Network/Ftp.hpp	/^            DataConnectionOpened  = 225, \/\/\/< Data connection open, no transfer in progress$/;"	e	enum:sf::Ftp::Response::Status
DataConnectionUnavailable	include/SFML/Network/Ftp.hpp	/^            DataConnectionUnavailable = 425, \/\/\/< Can't open data connection$/;"	e	enum:sf::Ftp::Response::Status
Default	include/SFML/Graphics/RenderStates.hpp	/^    static const RenderStates Default; \/\/\/< Special instance holding the default render states$/;"	m	class:sf::RenderStates
Default	include/SFML/Window/WindowStyle.hpp	/^        Default = Titlebar | Resize | Close \/\/\/< Default window style$/;"	e	enum:sf::Style::__anon3
Delete	include/SFML/Window/Keyboard.hpp	/^        Delete,       \/\/\/< The Delete key$/;"	e	enum:sf::Keyboard::Key
Destroy	include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.cpp	/^void b2ChainAndCircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndCircleContact
Destroy	include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.cpp	/^void b2ChainAndPolygonContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndPolygonContact
Destroy	include/Box2D/Dynamics/Contacts/b2CircleContact.cpp	/^void b2CircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2CircleContact
Destroy	include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^void b2Contact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2Contact
Destroy	include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.cpp	/^void b2EdgeAndCircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndCircleContact
Destroy	include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.cpp	/^void b2EdgeAndPolygonContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndPolygonContact
Destroy	include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.cpp	/^void b2PolygonAndCircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonAndCircleContact
Destroy	include/Box2D/Dynamics/Contacts/b2PolygonContact.cpp	/^void b2PolygonContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonContact
Destroy	include/Box2D/Dynamics/Joints/b2Joint.cpp	/^void b2Joint::Destroy(b2Joint* joint, b2BlockAllocator* allocator)$/;"	f	class:b2Joint
Destroy	include/Box2D/Dynamics/b2ContactManager.cpp	/^void b2ContactManager::Destroy(b2Contact* c)$/;"	f	class:b2ContactManager
Destroy	include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::Destroy(b2BlockAllocator* allocator)$/;"	f	class:b2Fixture
DestroyBody	include/Box2D/Dynamics/b2World.cpp	/^void b2World::DestroyBody(b2Body* b)$/;"	f	class:b2World
DestroyFixture	include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::DestroyFixture(b2Fixture* fixture)$/;"	f	class:b2Body
DestroyJoint	include/Box2D/Dynamics/b2World.cpp	/^void b2World::DestroyJoint(b2Joint* j)$/;"	f	class:b2World
DestroyProxies	include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::DestroyProxies(b2BroadPhase* broadPhase)$/;"	f	class:b2Fixture
DestroyProxy	include/Box2D/Collision/b2BroadPhase.cpp	/^void b2BroadPhase::DestroyProxy(int32 proxyId)$/;"	f	class:b2BroadPhase
DestroyProxy	include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::DestroyProxy(int32 proxyId)$/;"	f	class:b2DynamicTree
DirectoryOk	include/SFML/Network/Ftp.hpp	/^            DirectoryOk           = 257, \/\/\/< PATHNAME created$/;"	e	enum:sf::Ftp::Response::Status
DirectoryResponse	include/SFML/Network/Ftp.hpp	/^    class SFML_NETWORK_API DirectoryResponse : public Response$/;"	c	class:sf::Ftp
DirectoryStatus	include/SFML/Network/Ftp.hpp	/^            DirectoryStatus       = 212, \/\/\/< Directory status$/;"	e	enum:sf::Ftp::Response::Status
Disconnected	include/SFML/Network/Socket.hpp	/^        Disconnected, \/\/\/< The TCP socket has been disconnected$/;"	e	enum:sf::Socket::Status
Divide	include/SFML/Window/Keyboard.hpp	/^        Divide,       \/\/\/< The \/ key$/;"	e	enum:sf::Keyboard::Key
Done	include/SFML/Network/Socket.hpp	/^        Done,         \/\/\/< The socket has sent \/ received the data$/;"	e	enum:sf::Socket::Status
Down	include/SFML/Window/Keyboard.hpp	/^        Down,         \/\/\/< Down arrow$/;"	e	enum:sf::Keyboard::Key
Draw	include/Box2D/Rope/b2Rope.cpp	/^void b2Rope::Draw(b2Draw* draw) const$/;"	f	class:b2Rope
DrawDebugData	include/Box2D/Dynamics/b2World.cpp	/^void b2World::DrawDebugData()$/;"	f	class:b2World
DrawJoint	include/Box2D/Dynamics/b2World.cpp	/^void b2World::DrawJoint(b2Joint* joint)$/;"	f	class:b2World
DrawShape	include/Box2D/Dynamics/b2World.cpp	/^void b2World::DrawShape(b2Fixture* fixture, const b2Transform& xf, const b2Color& color)$/;"	f	class:b2World
Drawable	include/SFML/Graphics/Drawable.hpp	/^class SFML_GRAPHICS_API Drawable$/;"	c	namespace:sf
Dump	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^void b2DistanceJoint::Dump()$/;"	f	class:b2DistanceJoint
Dump	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::Dump()$/;"	f	class:b2FrictionJoint
Dump	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^void b2GearJoint::Dump()$/;"	f	class:b2GearJoint
Dump	include/Box2D/Dynamics/Joints/b2Joint.h	/^	virtual void Dump() { b2Log("\/\/ Dump is not supported for this joint type.\\n"); }$/;"	f	class:b2Joint
Dump	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	void Dump() { b2Log("Mouse joint dumping is not supported.\\n"); }$/;"	f	class:b2MouseJoint
Dump	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::Dump()$/;"	f	class:b2PrismaticJoint
Dump	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^void b2PulleyJoint::Dump()$/;"	f	class:b2PulleyJoint
Dump	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::Dump()$/;"	f	class:b2RevoluteJoint
Dump	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^void b2RopeJoint::Dump()$/;"	f	class:b2RopeJoint
Dump	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^void b2WeldJoint::Dump()$/;"	f	class:b2WeldJoint
Dump	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::Dump()$/;"	f	class:b2WheelJoint
Dump	include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::Dump()$/;"	f	class:b2Body
Dump	include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::Dump(int32 bodyIndex)$/;"	f	class:b2Fixture
Dump	include/Box2D/Dynamics/b2World.cpp	/^void b2World::Dump()$/;"	f	class:b2World
E	include/SFML/Window/Keyboard.hpp	/^        E,            \/\/\/< The E key$/;"	e	enum:sf::Keyboard::Key
Ebcdic	include/SFML/Network/Ftp.hpp	/^        Ebcdic  \/\/\/< Text mode using EBCDIC encoding$/;"	e	enum:sf::Ftp::TransferMode
EnableLimit	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::EnableLimit(bool flag)$/;"	f	class:b2PrismaticJoint
EnableLimit	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::EnableLimit(bool flag)$/;"	f	class:b2RevoluteJoint
EnableMotor	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::EnableMotor(bool flag)$/;"	f	class:b2PrismaticJoint
EnableMotor	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::EnableMotor(bool flag)$/;"	f	class:b2RevoluteJoint
EnableMotor	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::EnableMotor(bool flag)$/;"	f	class:b2WheelJoint
End	include/SFML/Window/Keyboard.hpp	/^        End,          \/\/\/< The End key$/;"	e	enum:sf::Keyboard::Key
EndContact	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual void EndContact(b2Contact* contact) { B2_NOT_USED(contact); }$/;"	f	class:b2ContactListener
EnteringPassiveMode	include/SFML/Network/Ftp.hpp	/^            EnteringPassiveMode   = 227, \/\/\/< Entering passive mode$/;"	e	enum:sf::Ftp::Response::Status
Equal	include/SFML/Window/Keyboard.hpp	/^        Equal,        \/\/\/< The = key$/;"	e	enum:sf::Keyboard::Key
Error	include/SFML/Network/Socket.hpp	/^        Error         \/\/\/< An unexpected error happened$/;"	e	enum:sf::Socket::Status
Escape	include/SFML/Window/Keyboard.hpp	/^        Escape,       \/\/\/< The Escape key$/;"	e	enum:sf::Keyboard::Key
Evaluate	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	float32 Evaluate(int32 indexA, int32 indexB, float32 t) const$/;"	f	struct:b2SeparationFunction
Evaluate	include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.cpp	/^void b2ChainAndCircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2ChainAndCircleContact
Evaluate	include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.cpp	/^void b2ChainAndPolygonContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2ChainAndPolygonContact
Evaluate	include/Box2D/Dynamics/Contacts/b2CircleContact.cpp	/^void b2CircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2CircleContact
Evaluate	include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.cpp	/^void b2EdgeAndCircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2EdgeAndCircleContact
Evaluate	include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.cpp	/^void b2EdgeAndPolygonContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2EdgeAndPolygonContact
Evaluate	include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.cpp	/^void b2PolygonAndCircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2PolygonAndCircleContact
Evaluate	include/Box2D/Dynamics/Contacts/b2PolygonContact.cpp	/^void b2PolygonContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2PolygonContact
Event	include/SFML/Window/Event.hpp	/^class Event$/;"	c	namespace:sf
EventType	include/SFML/Window/Event.hpp	/^    enum EventType$/;"	g	class:sf::Event
F	include/SFML/Window/Keyboard.hpp	/^        F,            \/\/\/< The F key$/;"	e	enum:sf::Keyboard::Key
F1	include/SFML/Window/Keyboard.hpp	/^        F1,           \/\/\/< The F1 key$/;"	e	enum:sf::Keyboard::Key
F10	include/SFML/Window/Keyboard.hpp	/^        F10,          \/\/\/< The F10 key$/;"	e	enum:sf::Keyboard::Key
F11	include/SFML/Window/Keyboard.hpp	/^        F11,          \/\/\/< The F11 key$/;"	e	enum:sf::Keyboard::Key
F12	include/SFML/Window/Keyboard.hpp	/^        F12,          \/\/\/< The F12 key$/;"	e	enum:sf::Keyboard::Key
F13	include/SFML/Window/Keyboard.hpp	/^        F13,          \/\/\/< The F13 key$/;"	e	enum:sf::Keyboard::Key
F14	include/SFML/Window/Keyboard.hpp	/^        F14,          \/\/\/< The F14 key$/;"	e	enum:sf::Keyboard::Key
F15	include/SFML/Window/Keyboard.hpp	/^        F15,          \/\/\/< The F15 key$/;"	e	enum:sf::Keyboard::Key
F2	include/SFML/Window/Keyboard.hpp	/^        F2,           \/\/\/< The F2 key$/;"	e	enum:sf::Keyboard::Key
F3	include/SFML/Window/Keyboard.hpp	/^        F3,           \/\/\/< The F3 key$/;"	e	enum:sf::Keyboard::Key
F4	include/SFML/Window/Keyboard.hpp	/^        F4,           \/\/\/< The F4 key$/;"	e	enum:sf::Keyboard::Key
F5	include/SFML/Window/Keyboard.hpp	/^        F5,           \/\/\/< The F5 key$/;"	e	enum:sf::Keyboard::Key
F6	include/SFML/Window/Keyboard.hpp	/^        F6,           \/\/\/< The F6 key$/;"	e	enum:sf::Keyboard::Key
F7	include/SFML/Window/Keyboard.hpp	/^        F7,           \/\/\/< The F7 key$/;"	e	enum:sf::Keyboard::Key
F8	include/SFML/Window/Keyboard.hpp	/^        F8,           \/\/\/< The F8 key$/;"	e	enum:sf::Keyboard::Key
F9	include/SFML/Window/Keyboard.hpp	/^        F9,           \/\/\/< The F9 key$/;"	e	enum:sf::Keyboard::Key
FieldTable	include/SFML/Network/Http.hpp	/^        typedef std::map<std::string, std::string> FieldTable;$/;"	t	class:sf::Http::Request
FieldTable	include/SFML/Network/Http.hpp	/^        typedef std::map<std::string, std::string> FieldTable;$/;"	t	class:sf::Http::Response
FileActionAborted	include/SFML/Network/Ftp.hpp	/^            FileActionAborted         = 450, \/\/\/< Requested file action not taken$/;"	e	enum:sf::Ftp::Response::Status
FileActionOk	include/SFML/Network/Ftp.hpp	/^            FileActionOk          = 250, \/\/\/< Requested file action ok$/;"	e	enum:sf::Ftp::Response::Status
FileStatus	include/SFML/Network/Ftp.hpp	/^            FileStatus            = 213, \/\/\/< File status$/;"	e	enum:sf::Ftp::Response::Status
FileUnavailable	include/SFML/Network/Ftp.hpp	/^            FileUnavailable         = 550, \/\/\/< Requested action not taken, file unavailable$/;"	e	enum:sf::Ftp::Response::Status
FilenameNotAllowed	include/SFML/Network/Ftp.hpp	/^            FilenameNotAllowed      = 553, \/\/\/< Requested action not taken, file name not allowed$/;"	e	enum:sf::Ftp::Response::Status
FindMinSeparation	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	float32 FindMinSeparation(int32* indexA, int32* indexB, float32 t) const$/;"	f	struct:b2SeparationFunction
FindNewContacts	include/Box2D/Dynamics/b2ContactManager.cpp	/^void b2ContactManager::FindNewContacts()$/;"	f	class:b2ContactManager
FlagForFiltering	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::FlagForFiltering()$/;"	f	class:b2Contact
FloatRect	include/SFML/Graphics/Rect.hpp	/^typedef Rect<float> FloatRect;$/;"	t	namespace:sf
Font	include/SFML/Graphics/Font.hpp	/^class SFML_GRAPHICS_API Font$/;"	c	namespace:sf
Forbidden	include/SFML/Network/Http.hpp	/^            Forbidden           = 403, \/\/\/< The requested page cannot be accessed at all, even with authentification$/;"	e	enum:sf::Http::Response::Status
Fragment	include/SFML/Graphics/Shader.hpp	/^        Fragment \/\/\/< Fragment (pixel) shader$/;"	e	enum:sf::Shader::Type
Free	include/Box2D/Common/b2BlockAllocator.cpp	/^void b2BlockAllocator::Free(void* p, int32 size)$/;"	f	class:b2BlockAllocator
Free	include/Box2D/Common/b2StackAllocator.cpp	/^void b2StackAllocator::Free(void* p)$/;"	f	class:b2StackAllocator
FreeNode	include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::FreeNode(int32 nodeId)$/;"	f	class:b2DynamicTree
Ftp	include/SFML/Network/Ftp.hpp	/^class SFML_NETWORK_API Ftp : NonCopyable$/;"	c	namespace:sf
Fullscreen	include/SFML/Window/WindowStyle.hpp	/^        Fullscreen = 1 << 3, \/\/\/< Fullscreen mode (this flag and all others are mutually exclusive)$/;"	e	enum:sf::Style::__anon3
G	include/SFML/Window/Keyboard.hpp	/^        G,            \/\/\/< The G key$/;"	e	enum:sf::Keyboard::Key
GainedFocus	include/SFML/Window/Event.hpp	/^        GainedFocus,            \/\/\/< The window gained the focus (no data)$/;"	e	enum:sf::Event::EventType
GatewayTimeout	include/SFML/Network/Http.hpp	/^            GatewayTimeout      = 504, \/\/\/< The gateway server couldn't receive a response from the source server$/;"	e	enum:sf::Http::Response::Status
Get	include/SFML/Network/Http.hpp	/^            Get,  \/\/\/< Request in get mode, standard method to retrieve a page$/;"	e	enum:sf::Http::Request::Method
GetAABB	include/Box2D/Dynamics/b2Fixture.h	/^inline const b2AABB& b2Fixture::GetAABB(int32 childIndex) const$/;"	f	class:b2Fixture
GetAllowSleeping	include/Box2D/Dynamics/b2World.h	/^	bool GetAllowSleeping() const { return m_allowSleep; }$/;"	f	class:b2World
GetAnchorA	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^b2Vec2 b2DistanceJoint::GetAnchorA() const$/;"	f	class:b2DistanceJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^b2Vec2 b2FrictionJoint::GetAnchorA() const$/;"	f	class:b2FrictionJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^b2Vec2 b2GearJoint::GetAnchorA() const$/;"	f	class:b2GearJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^b2Vec2 b2MouseJoint::GetAnchorA() const$/;"	f	class:b2MouseJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^b2Vec2 b2PrismaticJoint::GetAnchorA() const$/;"	f	class:b2PrismaticJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetAnchorA() const$/;"	f	class:b2PulleyJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^b2Vec2 b2RevoluteJoint::GetAnchorA() const$/;"	f	class:b2RevoluteJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^b2Vec2 b2RopeJoint::GetAnchorA() const$/;"	f	class:b2RopeJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^b2Vec2 b2WeldJoint::GetAnchorA() const$/;"	f	class:b2WeldJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^b2Vec2 b2WheelJoint::GetAnchorA() const$/;"	f	class:b2WheelJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^b2Vec2 b2DistanceJoint::GetAnchorB() const$/;"	f	class:b2DistanceJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^b2Vec2 b2FrictionJoint::GetAnchorB() const$/;"	f	class:b2FrictionJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^b2Vec2 b2GearJoint::GetAnchorB() const$/;"	f	class:b2GearJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^b2Vec2 b2MouseJoint::GetAnchorB() const$/;"	f	class:b2MouseJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^b2Vec2 b2PrismaticJoint::GetAnchorB() const$/;"	f	class:b2PrismaticJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetAnchorB() const$/;"	f	class:b2PulleyJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^b2Vec2 b2RevoluteJoint::GetAnchorB() const$/;"	f	class:b2RevoluteJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^b2Vec2 b2RopeJoint::GetAnchorB() const$/;"	f	class:b2RopeJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^b2Vec2 b2WeldJoint::GetAnchorB() const$/;"	f	class:b2WeldJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^b2Vec2 b2WheelJoint::GetAnchorB() const$/;"	f	class:b2WheelJoint
GetAngle	include/Box2D/Common/b2Math.h	/^	float32 GetAngle() const$/;"	f	struct:b2Rot
GetAngle	include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetAngle() const$/;"	f	class:b2Body
GetAngularDamping	include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetAngularDamping() const$/;"	f	class:b2Body
GetAngularVelocity	include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetAngularVelocity() const$/;"	f	class:b2Body
GetAreaRatio	include/Box2D/Collision/b2DynamicTree.cpp	/^float32 b2DynamicTree::GetAreaRatio() const$/;"	f	class:b2DynamicTree
GetAutoClearForces	include/Box2D/Dynamics/b2World.h	/^inline bool b2World::GetAutoClearForces() const$/;"	f	class:b2World
GetBody	include/Box2D/Dynamics/b2Fixture.h	/^inline b2Body* b2Fixture::GetBody()$/;"	f	class:b2Fixture
GetBody	include/Box2D/Dynamics/b2Fixture.h	/^inline const b2Body* b2Fixture::GetBody() const$/;"	f	class:b2Fixture
GetBodyA	include/Box2D/Dynamics/Joints/b2Joint.h	/^inline b2Body* b2Joint::GetBodyA()$/;"	f	class:b2Joint
GetBodyB	include/Box2D/Dynamics/Joints/b2Joint.h	/^inline b2Body* b2Joint::GetBodyB()$/;"	f	class:b2Joint
GetBodyCount	include/Box2D/Dynamics/b2World.h	/^inline int32 b2World::GetBodyCount() const$/;"	f	class:b2World
GetBodyList	include/Box2D/Dynamics/b2World.h	/^inline b2Body* b2World::GetBodyList()$/;"	f	class:b2World
GetBodyList	include/Box2D/Dynamics/b2World.h	/^inline const b2Body* b2World::GetBodyList() const$/;"	f	class:b2World
GetCenter	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 GetCenter() const$/;"	f	struct:b2AABB
GetChildCount	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^int32 b2ChainShape::GetChildCount() const$/;"	f	class:b2ChainShape
GetChildCount	include/Box2D/Collision/Shapes/b2CircleShape.cpp	/^int32 b2CircleShape::GetChildCount() const$/;"	f	class:b2CircleShape
GetChildCount	include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^int32 b2EdgeShape::GetChildCount() const$/;"	f	class:b2EdgeShape
GetChildCount	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^int32 b2PolygonShape::GetChildCount() const$/;"	f	class:b2PolygonShape
GetChildEdge	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::GetChildEdge(b2EdgeShape* edge, int32 index) const$/;"	f	class:b2ChainShape
GetChildIndexA	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline int32 b2Contact::GetChildIndexA() const$/;"	f	class:b2Contact
GetChildIndexB	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline int32 b2Contact::GetChildIndexB() const$/;"	f	class:b2Contact
GetClosestPoint	include/Box2D/Collision/b2Distance.cpp	/^	b2Vec2 GetClosestPoint() const$/;"	f	struct:b2Simplex
GetCollideConnected	include/Box2D/Dynamics/Joints/b2Joint.h	/^inline bool b2Joint::GetCollideConnected() const$/;"	f	class:b2Joint
GetContactCount	include/Box2D/Dynamics/b2World.h	/^inline int32 b2World::GetContactCount() const$/;"	f	class:b2World
GetContactList	include/Box2D/Dynamics/b2Body.h	/^inline b2ContactEdge* b2Body::GetContactList()$/;"	f	class:b2Body
GetContactList	include/Box2D/Dynamics/b2Body.h	/^inline const b2ContactEdge* b2Body::GetContactList() const$/;"	f	class:b2Body
GetContactList	include/Box2D/Dynamics/b2World.h	/^inline b2Contact* b2World::GetContactList()$/;"	f	class:b2World
GetContactList	include/Box2D/Dynamics/b2World.h	/^inline const b2Contact* b2World::GetContactList() const$/;"	f	class:b2World
GetContactManager	include/Box2D/Dynamics/b2World.h	/^inline const b2ContactManager& b2World::GetContactManager() const$/;"	f	class:b2World
GetContinuousPhysics	include/Box2D/Dynamics/b2World.h	/^	bool GetContinuousPhysics() const { return m_continuousPhysics; }$/;"	f	class:b2World
GetCount	include/Box2D/Common/b2GrowableStack.h	/^	int32 GetCount()$/;"	f	class:b2GrowableStack
GetDampingRatio	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^inline float32 b2DistanceJoint::GetDampingRatio() const$/;"	f	class:b2DistanceJoint
GetDampingRatio	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^float32 b2MouseJoint::GetDampingRatio() const$/;"	f	class:b2MouseJoint
GetDampingRatio	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 GetDampingRatio() const { return m_dampingRatio; }$/;"	f	class:b2WeldJoint
GetDensity	include/Box2D/Dynamics/b2Fixture.h	/^inline float32 b2Fixture::GetDensity() const$/;"	f	class:b2Fixture
GetExtents	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 GetExtents() const$/;"	f	struct:b2AABB
GetFatAABB	include/Box2D/Collision/b2BroadPhase.h	/^inline const b2AABB& b2BroadPhase::GetFatAABB(int32 proxyId) const$/;"	f	class:b2BroadPhase
GetFatAABB	include/Box2D/Collision/b2DynamicTree.h	/^inline const b2AABB& b2DynamicTree::GetFatAABB(int32 proxyId) const$/;"	f	class:b2DynamicTree
GetFilterData	include/Box2D/Dynamics/b2Fixture.h	/^inline const b2Filter& b2Fixture::GetFilterData() const$/;"	f	class:b2Fixture
GetFixtureA	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline b2Fixture* b2Contact::GetFixtureA()$/;"	f	class:b2Contact
GetFixtureA	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline const b2Fixture* b2Contact::GetFixtureA() const$/;"	f	class:b2Contact
GetFixtureB	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline b2Fixture* b2Contact::GetFixtureB()$/;"	f	class:b2Contact
GetFixtureB	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline const b2Fixture* b2Contact::GetFixtureB() const$/;"	f	class:b2Contact
GetFixtureList	include/Box2D/Dynamics/b2Body.h	/^inline b2Fixture* b2Body::GetFixtureList()$/;"	f	class:b2Body
GetFixtureList	include/Box2D/Dynamics/b2Body.h	/^inline const b2Fixture* b2Body::GetFixtureList() const$/;"	f	class:b2Body
GetFlags	include/Box2D/Common/b2Draw.cpp	/^uint32 b2Draw::GetFlags() const$/;"	f	class:b2Draw
GetFrequency	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^inline float32 b2DistanceJoint::GetFrequency() const$/;"	f	class:b2DistanceJoint
GetFrequency	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^float32 b2MouseJoint::GetFrequency() const$/;"	f	class:b2MouseJoint
GetFrequency	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 GetFrequency() const { return m_frequencyHz; }$/;"	f	class:b2WeldJoint
GetFriction	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline float32 b2Contact::GetFriction() const$/;"	f	class:b2Contact
GetFriction	include/Box2D/Dynamics/b2Fixture.h	/^inline float32 b2Fixture::GetFriction() const$/;"	f	class:b2Fixture
GetGravity	include/Box2D/Dynamics/b2World.h	/^inline b2Vec2 b2World::GetGravity() const$/;"	f	class:b2World
GetGravityScale	include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetGravityScale() const$/;"	f	class:b2Body
GetGroundAnchorA	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetGroundAnchorA() const$/;"	f	class:b2PulleyJoint
GetGroundAnchorB	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetGroundAnchorB() const$/;"	f	class:b2PulleyJoint
GetHeight	include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::GetHeight() const$/;"	f	class:b2DynamicTree
GetInertia	include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetInertia() const$/;"	f	class:b2Body
GetInverse	include/Box2D/Common/b2Math.h	/^	b2Mat22 GetInverse() const$/;"	f	struct:b2Mat22
GetInverse22	include/Box2D/Common/b2Math.cpp	/^void b2Mat33::GetInverse22(b2Mat33* M) const$/;"	f	class:b2Mat33
GetJoint1	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Joint* GetJoint1() { return m_joint1; }$/;"	f	class:b2GearJoint
GetJoint2	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Joint* GetJoint2() { return m_joint2; }$/;"	f	class:b2GearJoint
GetJointAngle	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetJointAngle() const$/;"	f	class:b2RevoluteJoint
GetJointCount	include/Box2D/Dynamics/b2World.h	/^inline int32 b2World::GetJointCount() const$/;"	f	class:b2World
GetJointList	include/Box2D/Dynamics/b2Body.h	/^inline b2JointEdge* b2Body::GetJointList()$/;"	f	class:b2Body
GetJointList	include/Box2D/Dynamics/b2Body.h	/^inline const b2JointEdge* b2Body::GetJointList() const$/;"	f	class:b2Body
GetJointList	include/Box2D/Dynamics/b2World.h	/^inline b2Joint* b2World::GetJointList()$/;"	f	class:b2World
GetJointList	include/Box2D/Dynamics/b2World.h	/^inline const b2Joint* b2World::GetJointList() const$/;"	f	class:b2World
GetJointSpeed	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetJointSpeed() const$/;"	f	class:b2PrismaticJoint
GetJointSpeed	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetJointSpeed() const$/;"	f	class:b2RevoluteJoint
GetJointSpeed	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^float32 b2WheelJoint::GetJointSpeed() const$/;"	f	class:b2WheelJoint
GetJointTranslation	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetJointTranslation() const$/;"	f	class:b2PrismaticJoint
GetJointTranslation	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^float32 b2WheelJoint::GetJointTranslation() const$/;"	f	class:b2WheelJoint
GetLength	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^inline float32 b2DistanceJoint::GetLength() const$/;"	f	class:b2DistanceJoint
GetLengthA	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetLengthA() const$/;"	f	class:b2PulleyJoint
GetLengthB	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetLengthB() const$/;"	f	class:b2PulleyJoint
GetLimitState	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^b2LimitState b2RopeJoint::GetLimitState() const$/;"	f	class:b2RopeJoint
GetLinearDamping	include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetLinearDamping() const$/;"	f	class:b2Body
GetLinearVelocity	include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLinearVelocity() const$/;"	f	class:b2Body
GetLinearVelocityFromLocalPoint	include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2& localPoint) const$/;"	f	class:b2Body
GetLinearVelocityFromWorldPoint	include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2& worldPoint) const$/;"	f	class:b2Body
GetLocalAnchorA	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2DistanceJoint
GetLocalAnchorA	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2FrictionJoint
GetLocalAnchorA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2PrismaticJoint
GetLocalAnchorA	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2RevoluteJoint
GetLocalAnchorA	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2RopeJoint
GetLocalAnchorA	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2WeldJoint
GetLocalAnchorA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2WheelJoint
GetLocalAnchorB	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2DistanceJoint
GetLocalAnchorB	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2FrictionJoint
GetLocalAnchorB	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2PrismaticJoint
GetLocalAnchorB	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2RevoluteJoint
GetLocalAnchorB	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2RopeJoint
GetLocalAnchorB	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2WeldJoint
GetLocalAnchorB	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2WheelJoint
GetLocalAxisA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	const b2Vec2& GetLocalAxisA() const { return m_localXAxisA; }$/;"	f	class:b2PrismaticJoint
GetLocalAxisA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	const b2Vec2& GetLocalAxisA() const { return m_localXAxisA; }$/;"	f	class:b2WheelJoint
GetLocalCenter	include/Box2D/Dynamics/b2Body.h	/^inline const b2Vec2& b2Body::GetLocalCenter() const$/;"	f	class:b2Body
GetLocalPoint	include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLocalPoint(const b2Vec2& worldPoint) const$/;"	f	class:b2Body
GetLocalVector	include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLocalVector(const b2Vec2& worldVector) const$/;"	f	class:b2Body
GetLowerLimit	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetLowerLimit() const$/;"	f	class:b2PrismaticJoint
GetLowerLimit	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetLowerLimit() const$/;"	f	class:b2RevoluteJoint
GetManifold	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline b2Manifold* b2Contact::GetManifold()$/;"	f	class:b2Contact
GetManifold	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline const b2Manifold* b2Contact::GetManifold() const$/;"	f	class:b2Contact
GetMass	include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetMass() const$/;"	f	class:b2Body
GetMassData	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::GetMassData(b2MassData* data) const$/;"	f	class:b2Body
GetMassData	include/Box2D/Dynamics/b2Fixture.h	/^inline void b2Fixture::GetMassData(b2MassData* massData) const$/;"	f	class:b2Fixture
GetMaxAllocation	include/Box2D/Common/b2StackAllocator.cpp	/^int32 b2StackAllocator::GetMaxAllocation() const$/;"	f	class:b2StackAllocator
GetMaxBalance	include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::GetMaxBalance() const$/;"	f	class:b2DynamicTree
GetMaxForce	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^float32 b2FrictionJoint::GetMaxForce() const$/;"	f	class:b2FrictionJoint
GetMaxForce	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^float32 b2MouseJoint::GetMaxForce() const$/;"	f	class:b2MouseJoint
GetMaxLength	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^float32 b2RopeJoint::GetMaxLength() const$/;"	f	class:b2RopeJoint
GetMaxMotorForce	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 GetMaxMotorForce() const { return m_maxMotorForce; }$/;"	f	class:b2PrismaticJoint
GetMaxMotorTorque	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 GetMaxMotorTorque() const { return m_maxMotorTorque; }$/;"	f	class:b2RevoluteJoint
GetMaxMotorTorque	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^inline float32 b2WheelJoint::GetMaxMotorTorque() const$/;"	f	class:b2WheelJoint
GetMaxTorque	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^float32 b2FrictionJoint::GetMaxTorque() const$/;"	f	class:b2FrictionJoint
GetMetric	include/Box2D/Collision/b2Distance.cpp	/^	float32 GetMetric() const$/;"	f	struct:b2Simplex
GetMilliseconds	include/Box2D/Common/b2Timer.cpp	/^float32 b2Timer::GetMilliseconds() const$/;"	f	class:b2Timer
GetMotorForce	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetMotorForce(float32 inv_dt) const$/;"	f	class:b2PrismaticJoint
GetMotorSpeed	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^inline float32 b2PrismaticJoint::GetMotorSpeed() const$/;"	f	class:b2PrismaticJoint
GetMotorSpeed	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^inline float32 b2RevoluteJoint::GetMotorSpeed() const$/;"	f	class:b2RevoluteJoint
GetMotorSpeed	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^inline float32 b2WheelJoint::GetMotorSpeed() const$/;"	f	class:b2WheelJoint
GetMotorTorque	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetMotorTorque(float32 inv_dt) const$/;"	f	class:b2RevoluteJoint
GetMotorTorque	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^float32 b2WheelJoint::GetMotorTorque(float32 inv_dt) const$/;"	f	class:b2WheelJoint
GetNext	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline b2Contact* b2Contact::GetNext()$/;"	f	class:b2Contact
GetNext	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline const b2Contact* b2Contact::GetNext() const$/;"	f	class:b2Contact
GetNext	include/Box2D/Dynamics/Joints/b2Joint.h	/^inline b2Joint* b2Joint::GetNext()$/;"	f	class:b2Joint
GetNext	include/Box2D/Dynamics/Joints/b2Joint.h	/^inline const b2Joint* b2Joint::GetNext() const$/;"	f	class:b2Joint
GetNext	include/Box2D/Dynamics/b2Body.h	/^inline b2Body* b2Body::GetNext()$/;"	f	class:b2Body
GetNext	include/Box2D/Dynamics/b2Body.h	/^inline const b2Body* b2Body::GetNext() const$/;"	f	class:b2Body
GetNext	include/Box2D/Dynamics/b2Fixture.h	/^inline b2Fixture* b2Fixture::GetNext()$/;"	f	class:b2Fixture
GetNext	include/Box2D/Dynamics/b2Fixture.h	/^inline const b2Fixture* b2Fixture::GetNext() const$/;"	f	class:b2Fixture
GetPerimeter	include/Box2D/Collision/b2Collision.h	/^	float32 GetPerimeter() const$/;"	f	struct:b2AABB
GetPosition	include/Box2D/Dynamics/b2Body.h	/^inline const b2Vec2& b2Body::GetPosition() const$/;"	f	class:b2Body
GetProfile	include/Box2D/Dynamics/b2World.h	/^inline const b2Profile& b2World::GetProfile() const$/;"	f	class:b2World
GetProxyCount	include/Box2D/Collision/b2BroadPhase.h	/^inline int32 b2BroadPhase::GetProxyCount() const$/;"	f	class:b2BroadPhase
GetProxyCount	include/Box2D/Dynamics/b2World.cpp	/^int32 b2World::GetProxyCount() const$/;"	f	class:b2World
GetRatio	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^float32 b2GearJoint::GetRatio() const$/;"	f	class:b2GearJoint
GetRatio	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetRatio() const$/;"	f	class:b2PulleyJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^b2Vec2 b2DistanceJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2DistanceJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^b2Vec2 b2FrictionJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2FrictionJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^b2Vec2 b2GearJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2GearJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^b2Vec2 b2MouseJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2MouseJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^b2Vec2 b2PrismaticJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2PrismaticJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2PulleyJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^b2Vec2 b2RevoluteJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2RevoluteJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^b2Vec2 b2RopeJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2RopeJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^b2Vec2 b2WeldJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2WeldJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^b2Vec2 b2WheelJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2WheelJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^float32 b2DistanceJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2DistanceJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^float32 b2FrictionJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2FrictionJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^float32 b2GearJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2GearJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^float32 b2MouseJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2MouseJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2PrismaticJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2PulleyJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2RevoluteJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^float32 b2RopeJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2RopeJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^float32 b2WeldJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2WeldJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^float32 b2WheelJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2WheelJoint
GetReferenceAngle	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 GetReferenceAngle() const { return m_referenceAngle; }$/;"	f	class:b2PrismaticJoint
GetReferenceAngle	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 GetReferenceAngle() const { return m_referenceAngle; }$/;"	f	class:b2RevoluteJoint
GetReferenceAngle	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 GetReferenceAngle() const { return m_referenceAngle; }$/;"	f	class:b2WeldJoint
GetRestitution	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline float32 b2Contact::GetRestitution() const$/;"	f	class:b2Contact
GetRestitution	include/Box2D/Dynamics/b2Fixture.h	/^inline float32 b2Fixture::GetRestitution() const$/;"	f	class:b2Fixture
GetSearchDirection	include/Box2D/Collision/b2Distance.cpp	/^	b2Vec2 GetSearchDirection() const$/;"	f	struct:b2Simplex
GetShape	include/Box2D/Dynamics/b2Fixture.h	/^inline b2Shape* b2Fixture::GetShape()$/;"	f	class:b2Fixture
GetShape	include/Box2D/Dynamics/b2Fixture.h	/^inline const b2Shape* b2Fixture::GetShape() const$/;"	f	class:b2Fixture
GetSpringDampingRatio	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^inline float32 b2WheelJoint::GetSpringDampingRatio() const$/;"	f	class:b2WheelJoint
GetSpringFrequencyHz	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^inline float32 b2WheelJoint::GetSpringFrequencyHz() const$/;"	f	class:b2WheelJoint
GetSubStepping	include/Box2D/Dynamics/b2World.h	/^	bool GetSubStepping() const { return m_subStepping; }$/;"	f	class:b2World
GetSupport	include/Box2D/Collision/Shapes/b2CircleShape.h	/^inline int32 b2CircleShape::GetSupport(const b2Vec2 &d) const$/;"	f	class:b2CircleShape
GetSupport	include/Box2D/Collision/b2Distance.h	/^inline int32 b2DistanceProxy::GetSupport(const b2Vec2& d) const$/;"	f	class:b2DistanceProxy
GetSupportVertex	include/Box2D/Collision/Shapes/b2CircleShape.h	/^inline const b2Vec2& b2CircleShape::GetSupportVertex(const b2Vec2 &d) const$/;"	f	class:b2CircleShape
GetSupportVertex	include/Box2D/Collision/b2Distance.h	/^inline const b2Vec2& b2DistanceProxy::GetSupportVertex(const b2Vec2& d) const$/;"	f	class:b2DistanceProxy
GetSymInverse33	include/Box2D/Common/b2Math.cpp	/^void b2Mat33::GetSymInverse33(b2Mat33* M) const$/;"	f	class:b2Mat33
GetTarget	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^const b2Vec2& b2MouseJoint::GetTarget() const$/;"	f	class:b2MouseJoint
GetTransform	include/Box2D/Common/b2Math.h	/^inline void b2Sweep::GetTransform(b2Transform* xf, float32 beta) const$/;"	f	class:b2Sweep
GetTransform	include/Box2D/Dynamics/b2Body.h	/^inline const b2Transform& b2Body::GetTransform() const$/;"	f	class:b2Body
GetTreeBalance	include/Box2D/Collision/b2BroadPhase.h	/^inline int32 b2BroadPhase::GetTreeBalance() const$/;"	f	class:b2BroadPhase
GetTreeBalance	include/Box2D/Dynamics/b2World.cpp	/^int32 b2World::GetTreeBalance() const$/;"	f	class:b2World
GetTreeHeight	include/Box2D/Collision/b2BroadPhase.h	/^inline int32 b2BroadPhase::GetTreeHeight() const$/;"	f	class:b2BroadPhase
GetTreeHeight	include/Box2D/Dynamics/b2World.cpp	/^int32 b2World::GetTreeHeight() const$/;"	f	class:b2World
GetTreeQuality	include/Box2D/Collision/b2BroadPhase.h	/^inline float32 b2BroadPhase::GetTreeQuality() const$/;"	f	class:b2BroadPhase
GetTreeQuality	include/Box2D/Dynamics/b2World.cpp	/^float32 b2World::GetTreeQuality() const$/;"	f	class:b2World
GetType	include/Box2D/Collision/Shapes/b2Shape.h	/^inline b2Shape::Type b2Shape::GetType() const$/;"	f	class:b2Shape
GetType	include/Box2D/Dynamics/Joints/b2Joint.h	/^inline b2JointType b2Joint::GetType() const$/;"	f	class:b2Joint
GetType	include/Box2D/Dynamics/b2Body.h	/^inline b2BodyType b2Body::GetType() const$/;"	f	class:b2Body
GetType	include/Box2D/Dynamics/b2Fixture.h	/^inline b2Shape::Type b2Fixture::GetType() const$/;"	f	class:b2Fixture
GetUpperLimit	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetUpperLimit() const$/;"	f	class:b2PrismaticJoint
GetUpperLimit	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetUpperLimit() const$/;"	f	class:b2RevoluteJoint
GetUserData	include/Box2D/Collision/b2BroadPhase.h	/^inline void* b2BroadPhase::GetUserData(int32 proxyId) const$/;"	f	class:b2BroadPhase
GetUserData	include/Box2D/Collision/b2DynamicTree.h	/^inline void* b2DynamicTree::GetUserData(int32 proxyId) const$/;"	f	class:b2DynamicTree
GetUserData	include/Box2D/Dynamics/Joints/b2Joint.h	/^inline void* b2Joint::GetUserData() const$/;"	f	class:b2Joint
GetUserData	include/Box2D/Dynamics/b2Body.h	/^inline void* b2Body::GetUserData() const$/;"	f	class:b2Body
GetUserData	include/Box2D/Dynamics/b2Fixture.h	/^inline void* b2Fixture::GetUserData() const$/;"	f	class:b2Fixture
GetVertex	include/Box2D/Collision/Shapes/b2CircleShape.h	/^inline const b2Vec2& b2CircleShape::GetVertex(int32 index) const$/;"	f	class:b2CircleShape
GetVertex	include/Box2D/Collision/Shapes/b2PolygonShape.h	/^inline const b2Vec2& b2PolygonShape::GetVertex(int32 index) const$/;"	f	class:b2PolygonShape
GetVertex	include/Box2D/Collision/b2Distance.h	/^inline const b2Vec2& b2DistanceProxy::GetVertex(int32 index) const$/;"	f	class:b2DistanceProxy
GetVertexCount	include/Box2D/Collision/Shapes/b2CircleShape.h	/^	int32 GetVertexCount() const { return 1; }$/;"	f	class:b2CircleShape
GetVertexCount	include/Box2D/Collision/Shapes/b2PolygonShape.h	/^	int32 GetVertexCount() const { return m_vertexCount; }$/;"	f	class:b2PolygonShape
GetVertexCount	include/Box2D/Collision/b2Distance.h	/^inline int32 b2DistanceProxy::GetVertexCount() const$/;"	f	class:b2DistanceProxy
GetVertexCount	include/Box2D/Rope/b2Rope.h	/^	int32 GetVertexCount() const$/;"	f	class:b2Rope
GetVertices	include/Box2D/Rope/b2Rope.h	/^	const b2Vec2* GetVertices() const$/;"	f	class:b2Rope
GetWarmStarting	include/Box2D/Dynamics/b2World.h	/^	bool GetWarmStarting() const { return m_warmStarting; }$/;"	f	class:b2World
GetWitnessPoints	include/Box2D/Collision/b2Distance.cpp	/^	void GetWitnessPoints(b2Vec2* pA, b2Vec2* pB) const$/;"	f	struct:b2Simplex
GetWorld	include/Box2D/Dynamics/b2Body.h	/^inline b2World* b2Body::GetWorld()$/;"	f	class:b2Body
GetWorld	include/Box2D/Dynamics/b2Body.h	/^inline const b2World* b2Body::GetWorld() const$/;"	f	class:b2Body
GetWorldCenter	include/Box2D/Dynamics/b2Body.h	/^inline const b2Vec2& b2Body::GetWorldCenter() const$/;"	f	class:b2Body
GetWorldManifold	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::GetWorldManifold(b2WorldManifold* worldManifold) const$/;"	f	class:b2Contact
GetWorldPoint	include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetWorldPoint(const b2Vec2& localPoint) const$/;"	f	class:b2Body
GetWorldVector	include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetWorldVector(const b2Vec2& localVector) const$/;"	f	class:b2Body
GetXAxis	include/Box2D/Common/b2Math.h	/^	b2Vec2 GetXAxis() const$/;"	f	struct:b2Rot
GetYAxis	include/Box2D/Common/b2Math.h	/^	b2Vec2 GetYAxis() const$/;"	f	struct:b2Rot
GlResource	include/SFML/Window/GlResource.hpp	/^class SFML_WINDOW_API GlResource$/;"	c	namespace:sf
Glyph	include/SFML/Graphics/Glyph.hpp	/^    Glyph() : advance(0) {}$/;"	f	class:sf::Glyph
Glyph	include/SFML/Graphics/Glyph.hpp	/^class SFML_GRAPHICS_API Glyph$/;"	c	namespace:sf
GlyphTable	include/SFML/Graphics/Font.hpp	/^    typedef std::map<Uint32, Glyph> GlyphTable; \/\/\/< Table mapping a codepoint to its glyph$/;"	t	class:sf::Font
Green	include/SFML/Graphics/Color.hpp	/^    static const Color Green;       \/\/\/< Green predefined color$/;"	m	class:sf::Color
H	include/SFML/Window/Keyboard.hpp	/^        H,            \/\/\/< The H key$/;"	e	enum:sf::Keyboard::Key
Hash	core/Hash.cpp	/^Hash::Hash(std::string &str, unsigned int seed){$/;"	f	class:Hash
Hash	core/Hash.h	/^class Hash{$/;"	c
HashMap	core/Hash.h	/^	typedef std::map<std::string, Hash* > HashMap; $/;"	t	class:Hash
Head	include/SFML/Network/Http.hpp	/^            Head  \/\/\/< Request a page's header only$/;"	e	enum:sf::Http::Request::Method
HelpMessage	include/SFML/Network/Ftp.hpp	/^            HelpMessage           = 214, \/\/\/< Help message$/;"	e	enum:sf::Ftp::Response::Status
Home	include/SFML/Window/Keyboard.hpp	/^        Home,         \/\/\/< The Home key$/;"	e	enum:sf::Keyboard::Key
Http	include/SFML/Network/Http.hpp	/^class SFML_NETWORK_API Http : NonCopyable$/;"	c	namespace:sf
I	include/Box2D/Collision/Shapes/b2Shape.h	/^	float32 I;$/;"	m	struct:b2MassData
I	include/SFML/Window/Keyboard.hpp	/^        I,            \/\/\/< The I key$/;"	e	enum:sf::Keyboard::Key
Identity	include/SFML/Graphics/Transform.hpp	/^    static const Transform Identity; \/\/\/< The identity transform (does nothing)$/;"	m	class:sf::Transform
Image	include/SFML/Graphics/Image.hpp	/^class SFML_GRAPHICS_API Image$/;"	c	namespace:sf
Init	core/objectProcessor.h	/^	void Init(const objectList *objList){$/;"	f	class:objectProcessor
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^void b2DistanceJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2DistanceJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2FrictionJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^void b2GearJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2GearJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2MouseJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PrismaticJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^void b2PulleyJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PulleyJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RevoluteJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^void b2RopeJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RopeJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^void b2WeldJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WeldJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WheelJoint
Initialize	include/Box2D/Collision/b2Collision.cpp	/^void b2WorldManifold::Initialize(const b2Manifold* manifold,$/;"	f	class:b2WorldManifold
Initialize	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	float32 Initialize(const b2SimplexCache* cache,$/;"	f	struct:b2SeparationFunction
Initialize	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	void Initialize(b2ContactPositionConstraint* pc, const b2Transform& xfA, const b2Transform& xfB, int32 index)$/;"	f	struct:b2PositionSolverManifold
Initialize	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^void b2DistanceJointDef::Initialize(b2Body* b1, b2Body* b2,$/;"	f	class:b2DistanceJointDef
Initialize	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor)$/;"	f	class:b2FrictionJointDef
Initialize	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor, const b2Vec2& axis)$/;"	f	class:b2PrismaticJointDef
Initialize	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^void b2PulleyJointDef::Initialize(b2Body* bA, b2Body* bB,$/;"	f	class:b2PulleyJointDef
Initialize	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor)$/;"	f	class:b2RevoluteJointDef
Initialize	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^void b2WeldJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor)$/;"	f	class:b2WeldJointDef
Initialize	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor, const b2Vec2& axis)$/;"	f	class:b2WheelJointDef
Initialize	include/Box2D/Rope/b2Rope.cpp	/^void b2Rope::Initialize(const b2RopeDef* def)$/;"	f	class:b2Rope
InitializeRegisters	include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^void b2Contact::InitializeRegisters()$/;"	f	class:b2Contact
InitializeVelocityConstraints	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^void b2ContactSolver::InitializeVelocityConstraints()$/;"	f	class:b2ContactSolver
InputStream	include/SFML/System/InputStream.hpp	/^class InputStream$/;"	c	namespace:sf
Insert	include/SFML/Window/Keyboard.hpp	/^        Insert,       \/\/\/< The Insert key$/;"	e	enum:sf::Keyboard::Key
InsertLeaf	include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::InsertLeaf(int32 leaf)$/;"	f	class:b2DynamicTree
InsufficientStorageSpace	include/SFML/Network/Ftp.hpp	/^            InsufficientStorageSpace  = 452, \/\/\/< Requested action not taken; insufficient storage space in system, file unavailable$/;"	e	enum:sf::Ftp::Response::Status
Int16	include/SFML/Config.hpp	/^    typedef signed   short Int16;$/;"	t	namespace:sf
Int32	include/SFML/Config.hpp	/^    typedef signed   int Int32;$/;"	t	namespace:sf
Int64	include/SFML/Config.hpp	/^        typedef signed   __int64 Int64;$/;"	t	namespace:sf
Int64	include/SFML/Config.hpp	/^        typedef signed   long long Int64;$/;"	t	namespace:sf
Int8	include/SFML/Config.hpp	/^    typedef signed   char Int8;$/;"	t	namespace:sf
IntRect	include/SFML/Graphics/Rect.hpp	/^typedef Rect<int>   IntRect;$/;"	t	namespace:sf
InternalServerError	include/SFML/Network/Http.hpp	/^            InternalServerError = 500, \/\/\/< The server encountered an unexpected error$/;"	e	enum:sf::Http::Response::Status
InvalidFile	include/SFML/Network/Ftp.hpp	/^            InvalidFile      = 1003  \/\/\/< Invalid file to upload \/ download$/;"	e	enum:sf::Ftp::Response::Status
InvalidPos	include/SFML/System/String.hpp	/^    static const std::size_t InvalidPos; \/\/\/< Represents an invalid position in the string$/;"	m	class:sf::String
InvalidResponse	include/SFML/Network/Ftp.hpp	/^            InvalidResponse  = 1000, \/\/\/< Response is not a valid FTP one$/;"	e	enum:sf::Ftp::Response::Status
InvalidResponse	include/SFML/Network/Http.hpp	/^            InvalidResponse  = 1000, \/\/\/< Response is not a valid HTTP one$/;"	e	enum:sf::Http::Response::Status
IpAddress	include/SFML/Network/IpAddress.hpp	/^class SFML_NETWORK_API IpAddress$/;"	c	namespace:sf
IsActive	include/Box2D/Dynamics/Joints/b2Joint.cpp	/^bool b2Joint::IsActive() const$/;"	f	class:b2Joint
IsActive	include/Box2D/Dynamics/b2Body.h	/^inline bool b2Body::IsActive() const$/;"	f	class:b2Body
IsAwake	include/Box2D/Dynamics/b2Body.h	/^inline bool b2Body::IsAwake() const$/;"	f	class:b2Body
IsBullet	include/Box2D/Dynamics/b2Body.h	/^inline bool b2Body::IsBullet() const$/;"	f	class:b2Body
IsEnabled	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline bool b2Contact::IsEnabled() const$/;"	f	class:b2Contact
IsFixedRotation	include/Box2D/Dynamics/b2Body.h	/^inline bool b2Body::IsFixedRotation() const$/;"	f	class:b2Body
IsLeaf	include/Box2D/Collision/b2DynamicTree.h	/^	bool IsLeaf() const$/;"	f	struct:b2TreeNode
IsLimitEnabled	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^bool b2PrismaticJoint::IsLimitEnabled() const$/;"	f	class:b2PrismaticJoint
IsLimitEnabled	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^bool b2RevoluteJoint::IsLimitEnabled() const$/;"	f	class:b2RevoluteJoint
IsLocked	include/Box2D/Dynamics/b2World.h	/^inline bool b2World::IsLocked() const$/;"	f	class:b2World
IsMotorEnabled	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^bool b2PrismaticJoint::IsMotorEnabled() const$/;"	f	class:b2PrismaticJoint
IsMotorEnabled	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^bool b2RevoluteJoint::IsMotorEnabled() const$/;"	f	class:b2RevoluteJoint
IsMotorEnabled	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^bool b2WheelJoint::IsMotorEnabled() const$/;"	f	class:b2WheelJoint
IsSensor	include/Box2D/Dynamics/b2Fixture.h	/^inline bool b2Fixture::IsSensor() const$/;"	f	class:b2Fixture
IsSleepingAllowed	include/Box2D/Dynamics/b2Body.h	/^inline bool b2Body::IsSleepingAllowed() const$/;"	f	class:b2Body
IsTouching	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline bool b2Contact::IsTouching() const$/;"	f	class:b2Contact
IsValid	include/Box2D/Collision/b2Collision.h	/^inline bool b2AABB::IsValid() const$/;"	f	class:b2AABB
IsValid	include/Box2D/Common/b2Math.h	/^	bool IsValid() const$/;"	f	struct:b2Vec2
Italic	include/SFML/Graphics/Text.hpp	/^        Italic     = 1 << 1, \/\/\/< Italic characters$/;"	e	enum:sf::Text::Style
Iterator	include/SFML/System/String.hpp	/^    typedef std::basic_string<Uint32>::iterator       Iterator;      \/\/\/< Iterator type$/;"	t	class:sf::String
J	include/SFML/Window/Keyboard.hpp	/^        J,            \/\/\/< The J key$/;"	e	enum:sf::Keyboard::Key
Joystick	include/SFML/Window/Joystick.hpp	/^class SFML_WINDOW_API Joystick$/;"	c	namespace:sf
JoystickButtonEvent	include/SFML/Window/Event.hpp	/^    struct JoystickButtonEvent$/;"	s	class:sf::Event
JoystickButtonPressed	include/SFML/Window/Event.hpp	/^        JoystickButtonPressed,  \/\/\/< A joystick button was pressed (data in event.joystickButton)$/;"	e	enum:sf::Event::EventType
JoystickButtonReleased	include/SFML/Window/Event.hpp	/^        JoystickButtonReleased, \/\/\/< A joystick button was released (data in event.joystickButton)$/;"	e	enum:sf::Event::EventType
JoystickConnectEvent	include/SFML/Window/Event.hpp	/^    struct JoystickConnectEvent$/;"	s	class:sf::Event
JoystickConnected	include/SFML/Window/Event.hpp	/^        JoystickConnected,      \/\/\/< A joystick was connected (data in event.joystickConnect)$/;"	e	enum:sf::Event::EventType
JoystickDisconnected	include/SFML/Window/Event.hpp	/^        JoystickDisconnected,   \/\/\/< A joystick was disconnected (data in event.joystickConnect)$/;"	e	enum:sf::Event::EventType
JoystickMoveEvent	include/SFML/Window/Event.hpp	/^    struct JoystickMoveEvent$/;"	s	class:sf::Event
JoystickMoved	include/SFML/Window/Event.hpp	/^        JoystickMoved,          \/\/\/< The joystick moved along an axis (data in event.joystickMove)$/;"	e	enum:sf::Event::EventType
K	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Mat22 K;$/;"	m	struct:b2ContactVelocityConstraint
K	include/SFML/Window/Keyboard.hpp	/^        K,            \/\/\/< The K key$/;"	e	enum:sf::Keyboard::Key
Key	include/SFML/Window/Keyboard.hpp	/^    enum Key$/;"	g	class:sf::Keyboard
KeyCount	include/SFML/Window/Keyboard.hpp	/^        KeyCount      \/\/\/< Keep last -- the total number of keyboard keys$/;"	e	enum:sf::Keyboard::Key
KeyEvent	include/SFML/Window/Event.hpp	/^    struct KeyEvent$/;"	s	class:sf::Event
KeyPressed	include/SFML/Window/Event.hpp	/^        KeyPressed,             \/\/\/< A key was pressed (data in event.key)$/;"	e	enum:sf::Event::EventType
KeyReleased	include/SFML/Window/Event.hpp	/^        KeyReleased,            \/\/\/< A key was released (data in event.key)$/;"	e	enum:sf::Event::EventType
Keyboard	include/SFML/Window/Keyboard.hpp	/^class SFML_WINDOW_API Keyboard$/;"	c	namespace:sf
L	include/SFML/Window/Keyboard.hpp	/^        L,            \/\/\/< The L key$/;"	e	enum:sf::Keyboard::Key
LAlt	include/SFML/Window/Keyboard.hpp	/^        LAlt,         \/\/\/< The left Alt key$/;"	e	enum:sf::Keyboard::Key
LBracket	include/SFML/Window/Keyboard.hpp	/^        LBracket,     \/\/\/< The [ key$/;"	e	enum:sf::Keyboard::Key
LControl	include/SFML/Window/Keyboard.hpp	/^        LControl,     \/\/\/< The left Control key$/;"	e	enum:sf::Keyboard::Key
LShift	include/SFML/Window/Keyboard.hpp	/^        LShift,       \/\/\/< The left Shift key$/;"	e	enum:sf::Keyboard::Key
LSystem	include/SFML/Window/Keyboard.hpp	/^        LSystem,      \/\/\/< The left OS specific key: window (Windows and Linux), apple (MacOS X), ...$/;"	e	enum:sf::Keyboard::Key
Left	include/SFML/Window/Keyboard.hpp	/^        Left,         \/\/\/< Left arrow$/;"	e	enum:sf::Keyboard::Key
Left	include/SFML/Window/Mouse.hpp	/^        Left,       \/\/\/< The left mouse button$/;"	e	enum:sf::Mouse::Button
Length	include/Box2D/Common/b2Math.h	/^	float32 Length() const$/;"	f	struct:b2Vec2
LengthSquared	include/Box2D/Common/b2Math.h	/^	float32 LengthSquared() const$/;"	f	struct:b2Vec2
Lines	include/SFML/Graphics/PrimitiveType.hpp	/^    Lines,          \/\/\/< List of individual lines$/;"	e	enum:sf::PrimitiveType
LinesStrip	include/SFML/Graphics/PrimitiveType.hpp	/^    LinesStrip,     \/\/\/< List of connected lines, a point uses the previous point to form a line$/;"	e	enum:sf::PrimitiveType
Listener	include/SFML/Audio/Listener.hpp	/^class SFML_AUDIO_API Listener$/;"	c	namespace:sf
ListingResponse	include/SFML/Network/Ftp.hpp	/^    class SFML_NETWORK_API ListingResponse : public Response$/;"	c	class:sf::Ftp
LocalError	include/SFML/Network/Ftp.hpp	/^            LocalError                = 451, \/\/\/< Requested action aborted, local error in processing$/;"	e	enum:sf::Ftp::Response::Status
LocalHost	include/SFML/Network/IpAddress.hpp	/^    static const IpAddress LocalHost; \/\/\/< The "localhost" address (for connecting a computer to itself locally)$/;"	m	class:sf::IpAddress
Lock	include/SFML/System/Lock.hpp	/^class SFML_SYSTEM_API Lock : NonCopyable$/;"	c	namespace:sf
LoggedIn	include/SFML/Network/Ftp.hpp	/^            LoggedIn              = 230, \/\/\/< User logged in, proceed. Logged out if appropriate$/;"	e	enum:sf::Ftp::Response::Status
LostFocus	include/SFML/Window/Event.hpp	/^        LostFocus,              \/\/\/< The window lost the focus (no data)$/;"	e	enum:sf::Event::EventType
M	include/SFML/Window/Keyboard.hpp	/^        M,            \/\/\/< The M key$/;"	e	enum:sf::Keyboard::Key
Magenta	include/SFML/Graphics/Color.hpp	/^    static const Color Magenta;     \/\/\/< Magenta predefined color$/;"	m	class:sf::Color
MaxDatagramSize	include/SFML/Network/UdpSocket.hpp	/^        MaxDatagramSize = 65507 \/\/\/< The maximum number of bytes that can be sent in a single UDP datagram$/;"	e	enum:sf::UdpSocket::__anon1
Menu	include/SFML/Window/Keyboard.hpp	/^        Menu,         \/\/\/< The Menu key$/;"	e	enum:sf::Keyboard::Key
Method	include/SFML/Network/Http.hpp	/^        enum Method$/;"	g	class:sf::Http::Request
Middle	include/SFML/Window/Mouse.hpp	/^        Middle,     \/\/\/< The middle (wheel) mouse button$/;"	e	enum:sf::Mouse::Button
Mouse	include/SFML/Window/Mouse.hpp	/^class SFML_WINDOW_API Mouse$/;"	c	namespace:sf
MouseButtonEvent	include/SFML/Window/Event.hpp	/^    struct MouseButtonEvent$/;"	s	class:sf::Event
MouseButtonPressed	include/SFML/Window/Event.hpp	/^        MouseButtonPressed,     \/\/\/< A mouse button was pressed (data in event.mouseButton)$/;"	e	enum:sf::Event::EventType
MouseButtonReleased	include/SFML/Window/Event.hpp	/^        MouseButtonReleased,    \/\/\/< A mouse button was released (data in event.mouseButton)$/;"	e	enum:sf::Event::EventType
MouseEntered	include/SFML/Window/Event.hpp	/^        MouseEntered,           \/\/\/< The mouse cursor entered the area of the window (no data)$/;"	e	enum:sf::Event::EventType
MouseLeft	include/SFML/Window/Event.hpp	/^        MouseLeft,              \/\/\/< The mouse cursor left the area of the window (no data)$/;"	e	enum:sf::Event::EventType
MouseMoveEvent	include/SFML/Window/Event.hpp	/^    struct MouseMoveEvent$/;"	s	class:sf::Event
MouseMoved	include/SFML/Window/Event.hpp	/^        MouseMoved,             \/\/\/< The mouse cursor moved (data in event.mouseMove)$/;"	e	enum:sf::Event::EventType
MouseWheelEvent	include/SFML/Window/Event.hpp	/^    struct MouseWheelEvent$/;"	s	class:sf::Event
MouseWheelMoved	include/SFML/Window/Event.hpp	/^        MouseWheelMoved,        \/\/\/< The mouse wheel was scrolled (data in event.mouseWheel)$/;"	e	enum:sf::Event::EventType
MoveProxy	include/Box2D/Collision/b2BroadPhase.cpp	/^void b2BroadPhase::MoveProxy(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)$/;"	f	class:b2BroadPhase
MoveProxy	include/Box2D/Collision/b2DynamicTree.cpp	/^bool b2DynamicTree::MoveProxy(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)$/;"	f	class:b2DynamicTree
MovedPermanently	include/SFML/Network/Http.hpp	/^            MovedPermanently = 301, \/\/\/< The requested page has permanently moved to a new location$/;"	e	enum:sf::Http::Response::Status
MovedTemporarily	include/SFML/Network/Http.hpp	/^            MovedTemporarily = 302, \/\/\/< The requested page has temporarily moved to a new location$/;"	e	enum:sf::Http::Response::Status
MultipleChoices	include/SFML/Network/Http.hpp	/^            MultipleChoices  = 300, \/\/\/< The requested page can be accessed from several locations$/;"	e	enum:sf::Http::Response::Status
Multiply	include/SFML/Window/Keyboard.hpp	/^        Multiply,     \/\/\/< The * key$/;"	e	enum:sf::Keyboard::Key
Music	include/SFML/Audio/Music.hpp	/^class SFML_AUDIO_API Music : public SoundStream$/;"	c	namespace:sf
Mutex	include/SFML/System/Mutex.hpp	/^class SFML_SYSTEM_API Mutex : NonCopyable$/;"	c	namespace:sf
N	include/SFML/Window/Keyboard.hpp	/^        N,            \/\/\/< The N key$/;"	e	enum:sf::Keyboard::Key
NOMINMAX	include/SFML/Config.hpp	44;"	d
NeedAccountToLogIn	include/SFML/Network/Ftp.hpp	/^            NeedAccountToLogIn = 332, \/\/\/< Need account for login$/;"	e	enum:sf::Ftp::Response::Status
NeedAccountToStore	include/SFML/Network/Ftp.hpp	/^            NeedAccountToStore      = 532, \/\/\/< Need account for storing files$/;"	e	enum:sf::Ftp::Response::Status
NeedInformation	include/SFML/Network/Ftp.hpp	/^            NeedInformation    = 350, \/\/\/< Requested file action pending further information$/;"	e	enum:sf::Ftp::Response::Status
NeedPassword	include/SFML/Network/Ftp.hpp	/^            NeedPassword       = 331, \/\/\/< User name ok, need password$/;"	e	enum:sf::Ftp::Response::Status
NoContent	include/SFML/Network/Http.hpp	/^            NoContent      = 204, \/\/\/< The server didn't send any data in return$/;"	e	enum:sf::Http::Response::Status
NonCopyable	include/SFML/System/NonCopyable.hpp	/^    NonCopyable() {}$/;"	f	class:sf::NonCopyable
NonCopyable	include/SFML/System/NonCopyable.hpp	/^class SFML_SYSTEM_API NonCopyable$/;"	c	namespace:sf
None	include/SFML/Network/IpAddress.hpp	/^    static const IpAddress None;      \/\/\/< Value representing an empty\/invalid address$/;"	m	class:sf::IpAddress
None	include/SFML/Window/WindowStyle.hpp	/^        None       = 0,      \/\/\/< No border \/ title bar (this flag and all others are mutually exclusive)$/;"	e	enum:sf::Style::__anon3
Normalize	include/Box2D/Common/b2Math.h	/^	float32 Normalize()$/;"	f	struct:b2Vec2
Normalize	include/Box2D/Common/b2Math.h	/^inline void b2Sweep::Normalize()$/;"	f	class:b2Sweep
Normalized	include/SFML/Graphics/Texture.hpp	/^        Normalized, \/\/\/< Texture coordinates in range [0 .. 1]$/;"	e	enum:sf::Texture::CoordinateType
NotEnoughMemory	include/SFML/Network/Ftp.hpp	/^            NotEnoughMemory         = 552, \/\/\/< Requested file action aborted, exceeded storage allocation$/;"	e	enum:sf::Ftp::Response::Status
NotFound	include/SFML/Network/Http.hpp	/^            NotFound            = 404, \/\/\/< The requested page doesn't exist$/;"	e	enum:sf::Http::Response::Status
NotImplemented	include/SFML/Network/Http.hpp	/^            NotImplemented      = 501, \/\/\/< The server doesn't implement a requested feature$/;"	e	enum:sf::Http::Response::Status
NotLoggedIn	include/SFML/Network/Ftp.hpp	/^            NotLoggedIn             = 530, \/\/\/< Not logged in$/;"	e	enum:sf::Ftp::Response::Status
NotModified	include/SFML/Network/Http.hpp	/^            NotModified      = 304, \/\/\/< For conditionnal requests, means the requested page hasn't changed and doesn't need to be refreshed$/;"	e	enum:sf::Http::Response::Status
NotReady	include/SFML/Network/Socket.hpp	/^        NotReady,     \/\/\/< The socket is not ready to send \/ receive data yet$/;"	e	enum:sf::Socket::Status
Num0	include/SFML/Window/Keyboard.hpp	/^        Num0,         \/\/\/< The 0 key$/;"	e	enum:sf::Keyboard::Key
Num1	include/SFML/Window/Keyboard.hpp	/^        Num1,         \/\/\/< The 1 key$/;"	e	enum:sf::Keyboard::Key
Num2	include/SFML/Window/Keyboard.hpp	/^        Num2,         \/\/\/< The 2 key$/;"	e	enum:sf::Keyboard::Key
Num3	include/SFML/Window/Keyboard.hpp	/^        Num3,         \/\/\/< The 3 key$/;"	e	enum:sf::Keyboard::Key
Num4	include/SFML/Window/Keyboard.hpp	/^        Num4,         \/\/\/< The 4 key$/;"	e	enum:sf::Keyboard::Key
Num5	include/SFML/Window/Keyboard.hpp	/^        Num5,         \/\/\/< The 5 key$/;"	e	enum:sf::Keyboard::Key
Num6	include/SFML/Window/Keyboard.hpp	/^        Num6,         \/\/\/< The 6 key$/;"	e	enum:sf::Keyboard::Key
Num7	include/SFML/Window/Keyboard.hpp	/^        Num7,         \/\/\/< The 7 key$/;"	e	enum:sf::Keyboard::Key
Num8	include/SFML/Window/Keyboard.hpp	/^        Num8,         \/\/\/< The 8 key$/;"	e	enum:sf::Keyboard::Key
Num9	include/SFML/Window/Keyboard.hpp	/^        Num9,         \/\/\/< The 9 key$/;"	e	enum:sf::Keyboard::Key
Numpad0	include/SFML/Window/Keyboard.hpp	/^        Numpad0,      \/\/\/< The numpad 0 key$/;"	e	enum:sf::Keyboard::Key
Numpad1	include/SFML/Window/Keyboard.hpp	/^        Numpad1,      \/\/\/< The numpad 1 key$/;"	e	enum:sf::Keyboard::Key
Numpad2	include/SFML/Window/Keyboard.hpp	/^        Numpad2,      \/\/\/< The numpad 2 key$/;"	e	enum:sf::Keyboard::Key
Numpad3	include/SFML/Window/Keyboard.hpp	/^        Numpad3,      \/\/\/< The numpad 3 key$/;"	e	enum:sf::Keyboard::Key
Numpad4	include/SFML/Window/Keyboard.hpp	/^        Numpad4,      \/\/\/< The numpad 4 key$/;"	e	enum:sf::Keyboard::Key
Numpad5	include/SFML/Window/Keyboard.hpp	/^        Numpad5,      \/\/\/< The numpad 5 key$/;"	e	enum:sf::Keyboard::Key
Numpad6	include/SFML/Window/Keyboard.hpp	/^        Numpad6,      \/\/\/< The numpad 6 key$/;"	e	enum:sf::Keyboard::Key
Numpad7	include/SFML/Window/Keyboard.hpp	/^        Numpad7,      \/\/\/< The numpad 7 key$/;"	e	enum:sf::Keyboard::Key
Numpad8	include/SFML/Window/Keyboard.hpp	/^        Numpad8,      \/\/\/< The numpad 8 key$/;"	e	enum:sf::Keyboard::Key
Numpad9	include/SFML/Window/Keyboard.hpp	/^        Numpad9,      \/\/\/< The numpad 9 key$/;"	e	enum:sf::Keyboard::Key
O	include/SFML/Window/Keyboard.hpp	/^        O,            \/\/\/< The O key$/;"	e	enum:sf::Keyboard::Key
Object	core/Object.h	/^class Object{$/;"	c
Ok	include/SFML/Network/Ftp.hpp	/^            Ok                    = 200, \/\/\/< Command ok$/;"	e	enum:sf::Ftp::Response::Status
Ok	include/SFML/Network/Http.hpp	/^            Ok             = 200, \/\/\/< Most common code returned when operation was successful$/;"	e	enum:sf::Http::Response::Status
OpeningDataConnection	include/SFML/Network/Ftp.hpp	/^            OpeningDataConnection       = 150, \/\/\/< File status ok, about to open data connection$/;"	e	enum:sf::Ftp::Response::Status
P	include/SFML/Window/Keyboard.hpp	/^        P,            \/\/\/< The P key$/;"	e	enum:sf::Keyboard::Key
Packet	include/SFML/Network/Packet.hpp	/^class SFML_NETWORK_API Packet$/;"	c	namespace:sf
Page	include/SFML/Graphics/Font.hpp	/^    struct Page$/;"	s	class:sf::Font
PageDown	include/SFML/Window/Keyboard.hpp	/^        PageDown,     \/\/\/< The Page down key$/;"	e	enum:sf::Keyboard::Key
PageTable	include/SFML/Graphics/Font.hpp	/^    typedef std::map<unsigned int, Page> PageTable; \/\/\/< Table mapping a character size to its page (texture)$/;"	t	class:sf::Font
PageTypeUnknown	include/SFML/Network/Ftp.hpp	/^            PageTypeUnknown         = 551, \/\/\/< Requested action aborted, page type unknown$/;"	e	enum:sf::Ftp::Response::Status
PageUp	include/SFML/Window/Keyboard.hpp	/^        PageUp,       \/\/\/< The Page up key$/;"	e	enum:sf::Keyboard::Key
ParameterNotImplemented	include/SFML/Network/Ftp.hpp	/^            ParameterNotImplemented = 504, \/\/\/< Command not implemented for that parameter$/;"	e	enum:sf::Ftp::Response::Status
ParametersUnknown	include/SFML/Network/Ftp.hpp	/^            ParametersUnknown       = 501, \/\/\/< Syntax error in parameters or arguments$/;"	e	enum:sf::Ftp::Response::Status
PartialContent	include/SFML/Network/Http.hpp	/^            PartialContent = 206, \/\/\/< The server has sent a part of the resource, as a response to a partial GET request$/;"	e	enum:sf::Http::Response::Status
Pause	include/SFML/Window/Keyboard.hpp	/^        Pause,        \/\/\/< The Pause key$/;"	e	enum:sf::Keyboard::Key
Paused	include/SFML/Audio/SoundSource.hpp	/^        Paused,  \/\/\/< Sound is paused$/;"	e	enum:sf::SoundSource::Status
PendingPacket	include/SFML/Network/TcpSocket.hpp	/^    struct PendingPacket$/;"	s	class:sf::TcpSocket
Period	include/SFML/Window/Keyboard.hpp	/^        Period,       \/\/\/< The . key$/;"	e	enum:sf::Keyboard::Key
Pixels	include/SFML/Graphics/Texture.hpp	/^        Pixels      \/\/\/< Texture coordinates in range [0 .. size]$/;"	e	enum:sf::Texture::CoordinateType
Playing	include/SFML/Audio/SoundSource.hpp	/^        Playing  \/\/\/< Sound is playing$/;"	e	enum:sf::SoundSource::Status
PointlessCommand	include/SFML/Network/Ftp.hpp	/^            PointlessCommand      = 202, \/\/\/< Command not implemented$/;"	e	enum:sf::Ftp::Response::Status
Points	include/SFML/Graphics/PrimitiveType.hpp	/^    Points,         \/\/\/< List of individual points$/;"	e	enum:sf::PrimitiveType
Pop	include/Box2D/Common/b2GrowableStack.h	/^	T Pop()$/;"	f	class:b2GrowableStack
Post	include/SFML/Network/Http.hpp	/^            Post, \/\/\/< Request in post mode, usually to send data to a page$/;"	e	enum:sf::Http::Request::Method
PostSolve	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual void PostSolve(b2Contact* contact, const b2ContactImpulse* impulse)$/;"	f	class:b2ContactListener
PovX	include/SFML/Window/Joystick.hpp	/^        PovX, \/\/\/< The X axis of the point-of-view hat$/;"	e	enum:sf::Joystick::Axis
PovY	include/SFML/Window/Joystick.hpp	/^        PovY  \/\/\/< The Y axis of the point-of-view hat$/;"	e	enum:sf::Joystick::Axis
PreSolve	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual void PreSolve(b2Contact* contact, const b2Manifold* oldManifold)$/;"	f	class:b2ContactListener
PrimitiveType	include/SFML/Graphics/PrimitiveType.hpp	/^enum PrimitiveType$/;"	g	namespace:sf
Process	core/objectMgr.h	/^	void Process(){$/;"	f	class:objectMgr
Property	core/Property.h	/^	Property(T value){$/;"	f	class:Property
Property	core/Property.h	/^class Property : public baseProperty{$/;"	c
Push	include/Box2D/Common/b2GrowableStack.h	/^	void Push(const T& element)$/;"	f	class:b2GrowableStack
Q	include/SFML/Window/Keyboard.hpp	/^        Q,            \/\/\/< The Q key$/;"	e	enum:sf::Keyboard::Key
Quads	include/SFML/Graphics/PrimitiveType.hpp	/^    Quads           \/\/\/< List of individual quads$/;"	e	enum:sf::PrimitiveType
Query	include/Box2D/Collision/b2BroadPhase.h	/^inline void b2BroadPhase::Query(T* callback, const b2AABB& aabb) const$/;"	f	class:b2BroadPhase
Query	include/Box2D/Collision/b2DynamicTree.h	/^inline void b2DynamicTree::Query(T* callback, const b2AABB& aabb) const$/;"	f	class:b2DynamicTree
QueryAABB	include/Box2D/Dynamics/b2World.cpp	/^void b2World::QueryAABB(b2QueryCallback* callback, const b2AABB& aabb) const$/;"	f	class:b2World
QueryCallback	include/Box2D/Collision/b2BroadPhase.cpp	/^bool b2BroadPhase::QueryCallback(int32 proxyId)$/;"	f	class:b2BroadPhase
QueryCallback	include/Box2D/Dynamics/b2World.cpp	/^	bool QueryCallback(int32 proxyId)$/;"	f	struct:b2WorldQueryWrapper
Quote	include/SFML/Window/Keyboard.hpp	/^        Quote,        \/\/\/< The ' key$/;"	e	enum:sf::Keyboard::Key
R	include/SFML/Window/Joystick.hpp	/^        R,    \/\/\/< The R axis$/;"	e	enum:sf::Joystick::Axis
R	include/SFML/Window/Keyboard.hpp	/^        R,            \/\/\/< The R key$/;"	e	enum:sf::Keyboard::Key
RAlt	include/SFML/Window/Keyboard.hpp	/^        RAlt,         \/\/\/< The right Alt key$/;"	e	enum:sf::Keyboard::Key
RBracket	include/SFML/Window/Keyboard.hpp	/^        RBracket,     \/\/\/< The ] key$/;"	e	enum:sf::Keyboard::Key
RControl	include/SFML/Window/Keyboard.hpp	/^        RControl,     \/\/\/< The right Control key$/;"	e	enum:sf::Keyboard::Key
RShift	include/SFML/Window/Keyboard.hpp	/^        RShift,       \/\/\/< The right Shift key$/;"	e	enum:sf::Keyboard::Key
RSystem	include/SFML/Window/Keyboard.hpp	/^        RSystem,      \/\/\/< The right OS specific key: window (Windows and Linux), apple (MacOS X), ...$/;"	e	enum:sf::Keyboard::Key
RangeNotSatisfiable	include/SFML/Network/Http.hpp	/^            RangeNotSatisfiable = 407, \/\/\/< The server can't satisfy the partial GET request (with a "Range" header field)$/;"	e	enum:sf::Http::Response::Status
RayCast	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^bool b2ChainShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2ChainShape
RayCast	include/Box2D/Collision/Shapes/b2CircleShape.cpp	/^bool b2CircleShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2CircleShape
RayCast	include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^bool b2EdgeShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2EdgeShape
RayCast	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^bool b2PolygonShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2PolygonShape
RayCast	include/Box2D/Collision/b2BroadPhase.h	/^inline void b2BroadPhase::RayCast(T* callback, const b2RayCastInput& input) const$/;"	f	class:b2BroadPhase
RayCast	include/Box2D/Collision/b2Collision.cpp	/^bool b2AABB::RayCast(b2RayCastOutput* output, const b2RayCastInput& input) const$/;"	f	class:b2AABB
RayCast	include/Box2D/Collision/b2DynamicTree.h	/^inline void b2DynamicTree::RayCast(T* callback, const b2RayCastInput& input) const$/;"	f	class:b2DynamicTree
RayCast	include/Box2D/Dynamics/b2Fixture.h	/^inline bool b2Fixture::RayCast(b2RayCastOutput* output, const b2RayCastInput& input, int32 childIndex) const$/;"	f	class:b2Fixture
RayCast	include/Box2D/Dynamics/b2World.cpp	/^void b2World::RayCast(b2RayCastCallback* callback, const b2Vec2& point1, const b2Vec2& point2) const$/;"	f	class:b2World
RayCastCallback	include/Box2D/Dynamics/b2World.cpp	/^	float32 RayCastCallback(const b2RayCastInput& input, int32 proxyId)$/;"	f	struct:b2WorldRayCastWrapper
ReadCache	include/Box2D/Collision/b2Distance.cpp	/^	void ReadCache(	const b2SimplexCache* cache,$/;"	f	struct:b2Simplex
RebuildBottomUp	include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::RebuildBottomUp()$/;"	f	class:b2DynamicTree
Rect	include/SFML/Graphics/Rect.hpp	/^class Rect$/;"	c	namespace:sf
RectangleShape	include/SFML/Graphics/RectangleShape.hpp	/^class SFML_GRAPHICS_API RectangleShape : public Shape$/;"	c	namespace:sf
Red	include/SFML/Graphics/Color.hpp	/^    static const Color Red;         \/\/\/< Red predefined color$/;"	m	class:sf::Color
Refilter	include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::Refilter()$/;"	f	class:b2Fixture
Regular	include/SFML/Graphics/Text.hpp	/^        Regular    = 0,      \/\/\/< Regular characters, no style$/;"	e	enum:sf::Text::Style
RemoveLeaf	include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::RemoveLeaf(int32 leaf)$/;"	f	class:b2DynamicTree
RenderStates	include/SFML/Graphics/RenderStates.hpp	/^class SFML_GRAPHICS_API RenderStates$/;"	c	namespace:sf
RenderTarget	include/SFML/Graphics/RenderTarget.hpp	/^class SFML_GRAPHICS_API RenderTarget : NonCopyable$/;"	c	namespace:sf
RenderTexture	include/SFML/Graphics/RenderTexture.hpp	/^class SFML_GRAPHICS_API RenderTexture : public RenderTarget$/;"	c	namespace:sf
RenderWindow	include/SFML/Graphics/RenderWindow.hpp	/^class SFML_GRAPHICS_API RenderWindow : public Window, public RenderTarget$/;"	c	namespace:sf
Report	include/Box2D/Dynamics/b2Island.cpp	/^void b2Island::Report(const b2ContactVelocityConstraint* constraints)$/;"	f	class:b2Island
Request	include/SFML/Network/Http.hpp	/^    class SFML_NETWORK_API Request$/;"	c	class:sf::Http
Reset	include/Box2D/Common/b2Timer.cpp	/^void b2Timer::Reset()$/;"	f	class:b2Timer
ResetContent	include/SFML/Network/Http.hpp	/^            ResetContent   = 205, \/\/\/< The server informs the client that it should clear the view (form) that caused the request to be sent$/;"	e	enum:sf::Http::Response::Status
ResetFriction	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::ResetFriction()$/;"	f	class:b2Contact
ResetMassData	include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::ResetMassData()$/;"	f	class:b2Body
ResetRestitution	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::ResetRestitution()$/;"	f	class:b2Contact
Resize	include/SFML/Window/WindowStyle.hpp	/^        Resize     = 1 << 1, \/\/\/< Titlebar + resizable border + maximize button$/;"	e	enum:sf::Style::__anon3
Resized	include/SFML/Window/Event.hpp	/^        Resized,                \/\/\/< The window was resized (data in event.size)$/;"	e	enum:sf::Event::EventType
Response	include/SFML/Network/Ftp.hpp	/^    class SFML_NETWORK_API Response$/;"	c	class:sf::Ftp
Response	include/SFML/Network/Http.hpp	/^    class SFML_NETWORK_API Response$/;"	c	class:sf::Http
RestartMarkerReply	include/SFML/Network/Ftp.hpp	/^            RestartMarkerReply          = 110, \/\/\/< Restart marker reply$/;"	e	enum:sf::Ftp::Response::Status
Return	include/SFML/Window/Keyboard.hpp	/^        Return,       \/\/\/< The Return key$/;"	e	enum:sf::Keyboard::Key
Right	include/SFML/Window/Keyboard.hpp	/^        Right,        \/\/\/< Right arrow$/;"	e	enum:sf::Keyboard::Key
Right	include/SFML/Window/Mouse.hpp	/^        Right,      \/\/\/< The right mouse button$/;"	e	enum:sf::Mouse::Button
Row	include/SFML/Graphics/Font.hpp	/^        Row(unsigned int rowTop, unsigned int rowHeight) : width(0), top(rowTop), height(rowHeight) {}$/;"	f	struct:sf::Font::Row
Row	include/SFML/Graphics/Font.hpp	/^    struct Row$/;"	s	class:sf::Font
S	include/SFML/Window/Keyboard.hpp	/^        S,            \/\/\/< The S key$/;"	e	enum:sf::Keyboard::Key
SFML_API_EXPORT	include/SFML/Config.hpp	104;"	d
SFML_API_EXPORT	include/SFML/Config.hpp	110;"	d
SFML_API_EXPORT	include/SFML/Config.hpp	120;"	d
SFML_API_EXPORT	include/SFML/Config.hpp	88;"	d
SFML_API_IMPORT	include/SFML/Config.hpp	105;"	d
SFML_API_IMPORT	include/SFML/Config.hpp	111;"	d
SFML_API_IMPORT	include/SFML/Config.hpp	121;"	d
SFML_API_IMPORT	include/SFML/Config.hpp	89;"	d
SFML_AUDIO_API	include/SFML/Audio/Export.hpp	39;"	d
SFML_AUDIO_API	include/SFML/Audio/Export.hpp	43;"	d
SFML_AUDIO_EXPORT_HPP	include/SFML/Audio/Export.hpp	26;"	d
SFML_AUDIO_HPP	include/SFML/Audio.hpp	26;"	d
SFML_BLENDMODE_HPP	include/SFML/Graphics/BlendMode.hpp	26;"	d
SFML_CIRCLESHAPE_HPP	include/SFML/Graphics/CircleShape.hpp	26;"	d
SFML_CLOCK_HPP	include/SFML/System/Clock.hpp	26;"	d
SFML_COLOR_HPP	include/SFML/Graphics/Color.hpp	26;"	d
SFML_CONFIG_HPP	include/SFML/Config.hpp	26;"	d
SFML_CONTEXTSETTINGS_HPP	include/SFML/Window/ContextSettings.hpp	26;"	d
SFML_CONTEXT_HPP	include/SFML/Window/Context.hpp	26;"	d
SFML_CONVEXSHAPE_HPP	include/SFML/Graphics/ConvexShape.hpp	26;"	d
SFML_DEBUG	include/SFML/Config.hpp	75;"	d
SFML_DRAWABLE_HPP	include/SFML/Graphics/Drawable.hpp	26;"	d
SFML_ERR_HPP	include/SFML/System/Err.hpp	26;"	d
SFML_EVENT_HPP	include/SFML/Window/Event.hpp	26;"	d
SFML_FONT_HPP	include/SFML/Graphics/Font.hpp	26;"	d
SFML_FTP_HPP	include/SFML/Network/Ftp.hpp	26;"	d
SFML_GLRESOURCE_HPP	include/SFML/Window/GlResource.hpp	26;"	d
SFML_GLYPH_HPP	include/SFML/Graphics/Glyph.hpp	26;"	d
SFML_GRAPHICS_API	include/SFML/Graphics/Export.hpp	39;"	d
SFML_GRAPHICS_API	include/SFML/Graphics/Export.hpp	43;"	d
SFML_GRAPHICS_EXPORT_HPP	include/SFML/Graphics/Export.hpp	26;"	d
SFML_GRAPHICS_HPP	include/SFML/Graphics.hpp	26;"	d
SFML_HTTP_HPP	include/SFML/Network/Http.hpp	26;"	d
SFML_IMAGE_HPP	include/SFML/Graphics/Image.hpp	26;"	d
SFML_INPUTSTREAM_HPP	include/SFML/System/InputStream.hpp	26;"	d
SFML_IPADDRESS_HPP	include/SFML/Network/IpAddress.hpp	26;"	d
SFML_JOYSTICK_HPP	include/SFML/Window/Joystick.hpp	26;"	d
SFML_KEYBOARD_HPP	include/SFML/Window/Keyboard.hpp	26;"	d
SFML_LISTENER_HPP	include/SFML/Audio/Listener.hpp	26;"	d
SFML_LOCK_HPP	include/SFML/System/Lock.hpp	26;"	d
SFML_MOUSE_HPP	include/SFML/Window/Mouse.hpp	26;"	d
SFML_MUSIC_HPP	include/SFML/Audio/Music.hpp	26;"	d
SFML_MUTEX_HPP	include/SFML/System/Mutex.hpp	26;"	d
SFML_NETWORK_API	include/SFML/Network/Export.hpp	39;"	d
SFML_NETWORK_API	include/SFML/Network/Export.hpp	43;"	d
SFML_NETWORK_EXPORT_HPP	include/SFML/Network/Export.hpp	26;"	d
SFML_NETWORK_HPP	include/SFML/Network.hpp	26;"	d
SFML_NONCOPYABLE_HPP	include/SFML/System/NonCopyable.hpp	26;"	d
SFML_OPENGL_HPP	include/SFML/OpenGL.hpp	26;"	d
SFML_PACKET_HPP	include/SFML/Network/Packet.hpp	26;"	d
SFML_PRIMITIVETYPE_HPP	include/SFML/Graphics/PrimitiveType.hpp	26;"	d
SFML_RECTANGLESHAPE_HPP	include/SFML/Graphics/RectangleShape.hpp	26;"	d
SFML_RECT_HPP	include/SFML/Graphics/Rect.hpp	26;"	d
SFML_RENDERSTATES_HPP	include/SFML/Graphics/RenderStates.hpp	26;"	d
SFML_RENDERTARGET_HPP	include/SFML/Graphics/RenderTarget.hpp	26;"	d
SFML_RENDERTEXTURE_HPP	include/SFML/Graphics/RenderTexture.hpp	26;"	d
SFML_RENDERWINDOW_HPP	include/SFML/Graphics/RenderWindow.hpp	26;"	d
SFML_SFML_WINDOW_HPP	include/SFML/Window.hpp	26;"	d
SFML_SHADER_HPP	include/SFML/Graphics/Shader.hpp	26;"	d
SFML_SHAPE_HPP	include/SFML/Graphics/Shape.hpp	26;"	d
SFML_SLEEP_HPP	include/SFML/System/Sleep.hpp	26;"	d
SFML_SOCKETHANDLE_HPP	include/SFML/Network/SocketHandle.hpp	26;"	d
SFML_SOCKETSELECTOR_HPP	include/SFML/Network/SocketSelector.hpp	26;"	d
SFML_SOCKET_HPP	include/SFML/Network/Socket.hpp	26;"	d
SFML_SOUNDBUFFERRECORDER_HPP	include/SFML/Audio/SoundBufferRecorder.hpp	26;"	d
SFML_SOUNDBUFFER_HPP	include/SFML/Audio/SoundBuffer.hpp	26;"	d
SFML_SOUNDRECORDER_HPP	include/SFML/Audio/SoundRecorder.hpp	26;"	d
SFML_SOUNDSOURCE_HPP	include/SFML/Audio/SoundSource.hpp	26;"	d
SFML_SOUNDSTREAM_HPP	include/SFML/Audio/SoundStream.hpp	26;"	d
SFML_SOUND_HPP	include/SFML/Audio/Sound.hpp	26;"	d
SFML_SPRITE_HPP	include/SFML/Graphics/Sprite.hpp	26;"	d
SFML_STRING_HPP	include/SFML/System/String.hpp	26;"	d
SFML_SYSTEM_API	include/SFML/System/Export.hpp	39;"	d
SFML_SYSTEM_API	include/SFML/System/Export.hpp	43;"	d
SFML_SYSTEM_EXPORT_HPP	include/SFML/System/Export.hpp	26;"	d
SFML_SYSTEM_FREEBSD	include/SFML/Config.hpp	60;"	d
SFML_SYSTEM_HPP	include/SFML/System.hpp	26;"	d
SFML_SYSTEM_LINUX	include/SFML/Config.hpp	50;"	d
SFML_SYSTEM_MACOS	include/SFML/Config.hpp	55;"	d
SFML_SYSTEM_WINDOWS	include/SFML/Config.hpp	42;"	d
SFML_TCPLISTENER_HPP	include/SFML/Network/TcpListener.hpp	26;"	d
SFML_TCPSOCKET_HPP	include/SFML/Network/TcpSocket.hpp	26;"	d
SFML_TEXTURE_HPP	include/SFML/Graphics/Texture.hpp	26;"	d
SFML_TEXT_HPP	include/SFML/Graphics/Text.hpp	26;"	d
SFML_THREADLOCALPTR_HPP	include/SFML/System/ThreadLocalPtr.hpp	26;"	d
SFML_THREADLOCAL_HPP	include/SFML/System/ThreadLocal.hpp	26;"	d
SFML_THREAD_HPP	include/SFML/System/Thread.hpp	26;"	d
SFML_TIME_HPP	include/SFML/System/Time.hpp	26;"	d
SFML_TRANSFORMABLE_HPP	include/SFML/Graphics/Transformable.hpp	26;"	d
SFML_TRANSFORM_HPP	include/SFML/Graphics/Transform.hpp	26;"	d
SFML_UDPSOCKET_HPP	include/SFML/Network/UdpSocket.hpp	26;"	d
SFML_UTF_HPP	include/SFML/System/Utf.hpp	26;"	d
SFML_VECTOR2_HPP	include/SFML/System/Vector2.hpp	26;"	d
SFML_VECTOR3_HPP	include/SFML/System/Vector3.hpp	26;"	d
SFML_VERSION_MAJOR	include/SFML/Config.hpp	32;"	d
SFML_VERSION_MINOR	include/SFML/Config.hpp	33;"	d
SFML_VERTEXARRAY_HPP	include/SFML/Graphics/VertexArray.hpp	26;"	d
SFML_VERTEX_HPP	include/SFML/Graphics/Vertex.hpp	26;"	d
SFML_VIDEOMODE_HPP	include/SFML/Window/VideoMode.hpp	26;"	d
SFML_VIEW_HPP	include/SFML/Graphics/View.hpp	26;"	d
SFML_WINDOWHANDLE_HPP	include/SFML/Window/WindowHandle.hpp	26;"	d
SFML_WINDOWSTYLE_HPP	include/SFML/Window/WindowStyle.hpp	26;"	d
SFML_WINDOW_API	include/SFML/Window/Export.hpp	39;"	d
SFML_WINDOW_API	include/SFML/Window/Export.hpp	43;"	d
SFML_WINDOW_EXPORT_HPP	include/SFML/Window/Export.hpp	26;"	d
SFML_WINDOW_HPP	include/SFML/Window/Window.hpp	26;"	d
SemiColon	include/SFML/Window/Keyboard.hpp	/^        SemiColon,    \/\/\/< The ; key$/;"	e	enum:sf::Keyboard::Key
ServiceNotAvailable	include/SFML/Network/Http.hpp	/^            ServiceNotAvailable = 503, \/\/\/< The server is temporarily unavailable (overloaded, in maintenance, ...)$/;"	e	enum:sf::Http::Response::Status
ServiceReady	include/SFML/Network/Ftp.hpp	/^            ServiceReady          = 220, \/\/\/< Service ready for new user$/;"	e	enum:sf::Ftp::Response::Status
ServiceReadySoon	include/SFML/Network/Ftp.hpp	/^            ServiceReadySoon            = 120, \/\/\/< Service ready in N minutes$/;"	e	enum:sf::Ftp::Response::Status
ServiceUnavailable	include/SFML/Network/Ftp.hpp	/^            ServiceUnavailable        = 421, \/\/\/< Service not available, closing control connection$/;"	e	enum:sf::Ftp::Response::Status
Set	include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^void b2EdgeShape::Set(const b2Vec2& v1, const b2Vec2& v2)$/;"	f	class:b2EdgeShape
Set	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::Set(const b2Vec2* vertices, int32 count)$/;"	f	class:b2PolygonShape
Set	include/Box2D/Collision/b2Distance.cpp	/^void b2DistanceProxy::Set(const b2Shape* shape, int32 index)$/;"	f	class:b2DistanceProxy
Set	include/Box2D/Common/b2Draw.h	/^	void Set(float32 ri, float32 gi, float32 bi) { r = ri; g = gi; b = bi; }$/;"	f	struct:b2Color
Set	include/Box2D/Common/b2Math.h	/^	void Set(const b2Vec2& c1, const b2Vec2& c2)$/;"	f	struct:b2Mat22
Set	include/Box2D/Common/b2Math.h	/^	void Set(const b2Vec2& position, float32 angle)$/;"	f	struct:b2Transform
Set	include/Box2D/Common/b2Math.h	/^	void Set(float32 angle)$/;"	f	struct:b2Rot
Set	include/Box2D/Common/b2Math.h	/^	void Set(float32 x_, float32 y_) { x = x_; y = y_; }$/;"	f	struct:b2Vec2
Set	include/Box2D/Common/b2Math.h	/^	void Set(float32 x_, float32 y_, float32 z_) { x = x_; y = y_; z = z_; }$/;"	f	struct:b2Vec3
SetActive	include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::SetActive(bool flag)$/;"	f	class:b2Body
SetAllowSleeping	include/Box2D/Dynamics/b2World.cpp	/^void b2World::SetAllowSleeping(bool flag)$/;"	f	class:b2World
SetAngle	include/Box2D/Rope/b2Rope.cpp	/^void b2Rope::SetAngle(float32 angle)$/;"	f	class:b2Rope
SetAngularDamping	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetAngularDamping(float32 angularDamping)$/;"	f	class:b2Body
SetAngularVelocity	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetAngularVelocity(float32 w)$/;"	f	class:b2Body
SetAsBox	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::SetAsBox(float32 hx, float32 hy)$/;"	f	class:b2PolygonShape
SetAsBox	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::SetAsBox(float32 hx, float32 hy, const b2Vec2& center, float32 angle)$/;"	f	class:b2PolygonShape
SetAutoClearForces	include/Box2D/Dynamics/b2World.h	/^inline void b2World::SetAutoClearForces(bool flag)$/;"	f	class:b2World
SetAwake	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetAwake(bool flag)$/;"	f	class:b2Body
SetBullet	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetBullet(bool flag)$/;"	f	class:b2Body
SetContactFilter	include/Box2D/Dynamics/b2World.cpp	/^void b2World::SetContactFilter(b2ContactFilter* filter)$/;"	f	class:b2World
SetContactListener	include/Box2D/Dynamics/b2World.cpp	/^void b2World::SetContactListener(b2ContactListener* listener)$/;"	f	class:b2World
SetContinuousPhysics	include/Box2D/Dynamics/b2World.h	/^	void SetContinuousPhysics(bool flag) { m_continuousPhysics = flag; }$/;"	f	class:b2World
SetDampingRatio	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^inline void b2DistanceJoint::SetDampingRatio(float32 ratio)$/;"	f	class:b2DistanceJoint
SetDampingRatio	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SetDampingRatio(float32 ratio)$/;"	f	class:b2MouseJoint
SetDampingRatio	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	void SetDampingRatio(float32 ratio) { m_dampingRatio = ratio; }$/;"	f	class:b2WeldJoint
SetDebugDraw	include/Box2D/Dynamics/b2World.cpp	/^void b2World::SetDebugDraw(b2Draw* debugDraw)$/;"	f	class:b2World
SetDensity	include/Box2D/Dynamics/b2Fixture.h	/^inline void b2Fixture::SetDensity(float32 density)$/;"	f	class:b2Fixture
SetDestructionListener	include/Box2D/Dynamics/b2World.cpp	/^void b2World::SetDestructionListener(b2DestructionListener* listener)$/;"	f	class:b2World
SetEnabled	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::SetEnabled(bool flag)$/;"	f	class:b2Contact
SetFilterData	include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::SetFilterData(const b2Filter& filter)$/;"	f	class:b2Fixture
SetFixedRotation	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetFixedRotation(bool flag)$/;"	f	class:b2Body
SetFlags	include/Box2D/Common/b2Draw.cpp	/^void b2Draw::SetFlags(uint32 flags)$/;"	f	class:b2Draw
SetFrequency	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^inline void b2DistanceJoint::SetFrequency(float32 hz)$/;"	f	class:b2DistanceJoint
SetFrequency	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SetFrequency(float32 hz)$/;"	f	class:b2MouseJoint
SetFrequency	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	void SetFrequency(float32 hz) { m_frequencyHz = hz; }$/;"	f	class:b2WeldJoint
SetFriction	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::SetFriction(float32 friction)$/;"	f	class:b2Contact
SetFriction	include/Box2D/Dynamics/b2Fixture.h	/^inline void b2Fixture::SetFriction(float32 friction)$/;"	f	class:b2Fixture
SetGravity	include/Box2D/Dynamics/b2World.h	/^inline void b2World::SetGravity(const b2Vec2& gravity)$/;"	f	class:b2World
SetGravityScale	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetGravityScale(float32 scale)$/;"	f	class:b2Body
SetIdentity	include/Box2D/Common/b2Math.h	/^	void SetIdentity()$/;"	f	struct:b2Mat22
SetIdentity	include/Box2D/Common/b2Math.h	/^	void SetIdentity()$/;"	f	struct:b2Rot
SetIdentity	include/Box2D/Common/b2Math.h	/^	void SetIdentity()$/;"	f	struct:b2Transform
SetLength	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^inline void b2DistanceJoint::SetLength(float32 length)$/;"	f	class:b2DistanceJoint
SetLimits	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SetLimits(float32 lower, float32 upper)$/;"	f	class:b2PrismaticJoint
SetLimits	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SetLimits(float32 lower, float32 upper)$/;"	f	class:b2RevoluteJoint
SetLinearDamping	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetLinearDamping(float32 linearDamping)$/;"	f	class:b2Body
SetLinearVelocity	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetLinearVelocity(const b2Vec2& v)$/;"	f	class:b2Body
SetMassData	include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::SetMassData(const b2MassData* massData)$/;"	f	class:b2Body
SetMaxForce	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::SetMaxForce(float32 force)$/;"	f	class:b2FrictionJoint
SetMaxForce	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SetMaxForce(float32 force)$/;"	f	class:b2MouseJoint
SetMaxLength	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	void SetMaxLength(float32 length) { m_maxLength = length; }$/;"	f	class:b2RopeJoint
SetMaxMotorForce	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SetMaxMotorForce(float32 force)$/;"	f	class:b2PrismaticJoint
SetMaxMotorTorque	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SetMaxMotorTorque(float32 torque)$/;"	f	class:b2RevoluteJoint
SetMaxMotorTorque	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::SetMaxMotorTorque(float32 torque)$/;"	f	class:b2WheelJoint
SetMaxTorque	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::SetMaxTorque(float32 torque)$/;"	f	class:b2FrictionJoint
SetMotorSpeed	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SetMotorSpeed(float32 speed)$/;"	f	class:b2PrismaticJoint
SetMotorSpeed	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SetMotorSpeed(float32 speed)$/;"	f	class:b2RevoluteJoint
SetMotorSpeed	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::SetMotorSpeed(float32 speed)$/;"	f	class:b2WheelJoint
SetNextVertex	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::SetNextVertex(const b2Vec2& nextVertex)$/;"	f	class:b2ChainShape
SetPrevVertex	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::SetPrevVertex(const b2Vec2& prevVertex)$/;"	f	class:b2ChainShape
SetRatio	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^void b2GearJoint::SetRatio(float32 ratio)$/;"	f	class:b2GearJoint
SetRestitution	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::SetRestitution(float32 restitution)$/;"	f	class:b2Contact
SetRestitution	include/Box2D/Dynamics/b2Fixture.h	/^inline void b2Fixture::SetRestitution(float32 restitution)$/;"	f	class:b2Fixture
SetSensor	include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::SetSensor(bool sensor)$/;"	f	class:b2Fixture
SetSleepingAllowed	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetSleepingAllowed(bool flag)$/;"	f	class:b2Body
SetSpringDampingRatio	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^inline void b2WheelJoint::SetSpringDampingRatio(float32 ratio)$/;"	f	class:b2WheelJoint
SetSpringFrequencyHz	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^inline void b2WheelJoint::SetSpringFrequencyHz(float32 hz)$/;"	f	class:b2WheelJoint
SetSubStepping	include/Box2D/Dynamics/b2World.h	/^	void SetSubStepping(bool flag) { m_subStepping = flag; }$/;"	f	class:b2World
SetTarget	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SetTarget(const b2Vec2& target)$/;"	f	class:b2MouseJoint
SetTransform	include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::SetTransform(const b2Vec2& position, float32 angle)$/;"	f	class:b2Body
SetType	include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::SetType(b2BodyType type)$/;"	f	class:b2Body
SetUserData	include/Box2D/Dynamics/Joints/b2Joint.h	/^inline void b2Joint::SetUserData(void* data)$/;"	f	class:b2Joint
SetUserData	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetUserData(void* data)$/;"	f	class:b2Body
SetUserData	include/Box2D/Dynamics/b2Fixture.h	/^inline void b2Fixture::SetUserData(void* data)$/;"	f	class:b2Fixture
SetWarmStarting	include/Box2D/Dynamics/b2World.h	/^	void SetWarmStarting(bool flag) { m_warmStarting = flag; }$/;"	f	class:b2World
SetZero	include/Box2D/Common/b2Math.h	/^	void SetZero() { x = 0.0f; y = 0.0f; z = 0.0f; }$/;"	f	struct:b2Vec3
SetZero	include/Box2D/Common/b2Math.h	/^	void SetZero() { x = 0.0f; y = 0.0f; }$/;"	f	struct:b2Vec2
SetZero	include/Box2D/Common/b2Math.h	/^	void SetZero()$/;"	f	struct:b2Mat22
SetZero	include/Box2D/Common/b2Math.h	/^	void SetZero()$/;"	f	struct:b2Mat33
Shader	include/SFML/Graphics/Shader.hpp	/^class SFML_GRAPHICS_API Shader : GlResource, NonCopyable$/;"	c	namespace:sf
Shape	include/SFML/Graphics/Shape.hpp	/^class SFML_GRAPHICS_API Shape : public Drawable, public Transformable$/;"	c	namespace:sf
ShouldCollide	include/Box2D/Dynamics/b2Body.cpp	/^bool b2Body::ShouldCollide(const b2Body* other) const$/;"	f	class:b2Body
ShouldCollide	include/Box2D/Dynamics/b2WorldCallbacks.cpp	/^bool b2ContactFilter::ShouldCollide(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2ContactFilter
Size	include/SFML/Network/TcpSocket.hpp	/^        Uint32            Size;         \/\/\/< Data of packet size$/;"	m	struct:sf::TcpSocket::PendingPacket
SizeEvent	include/SFML/Window/Event.hpp	/^    struct SizeEvent$/;"	s	class:sf::Event
SizeReceived	include/SFML/Network/TcpSocket.hpp	/^        std::size_t       SizeReceived; \/\/\/< Number of size bytes received so far$/;"	m	struct:sf::TcpSocket::PendingPacket
Skew	include/Box2D/Common/b2Math.h	/^	b2Vec2 Skew() const$/;"	f	struct:b2Vec2
Slash	include/SFML/Window/Keyboard.hpp	/^        Slash,        \/\/\/< The \/ key$/;"	e	enum:sf::Keyboard::Key
Socket	include/SFML/Network/Socket.hpp	/^class SFML_NETWORK_API Socket : NonCopyable$/;"	c	namespace:sf
SocketHandle	include/SFML/Network/SocketHandle.hpp	/^    typedef UINT_PTR SocketHandle;$/;"	t	namespace:sf
SocketSelector	include/SFML/Network/SocketSelector.hpp	/^class SFML_NETWORK_API SocketSelector$/;"	c	namespace:sf
Solve	include/Box2D/Common/b2Math.h	/^	b2Vec2 Solve(const b2Vec2& b) const$/;"	f	struct:b2Mat22
Solve	include/Box2D/Dynamics/b2Island.cpp	/^void b2Island::Solve(b2Profile* profile, const b2TimeStep& step, const b2Vec2& gravity, bool allowSleep)$/;"	f	class:b2Island
Solve	include/Box2D/Dynamics/b2World.cpp	/^void b2World::Solve(const b2TimeStep& step)$/;"	f	class:b2World
Solve2	include/Box2D/Collision/b2Distance.cpp	/^void b2Simplex::Solve2()$/;"	f	class:b2Simplex
Solve22	include/Box2D/Common/b2Math.cpp	/^b2Vec2 b2Mat33::Solve22(const b2Vec2& b) const$/;"	f	class:b2Mat33
Solve3	include/Box2D/Collision/b2Distance.cpp	/^void b2Simplex::Solve3()$/;"	f	class:b2Simplex
Solve33	include/Box2D/Common/b2Math.cpp	/^b2Vec3 b2Mat33::Solve33(const b2Vec3& b) const$/;"	f	class:b2Mat33
SolveC2	include/Box2D/Rope/b2Rope.cpp	/^void b2Rope::SolveC2()$/;"	f	class:b2Rope
SolveC3	include/Box2D/Rope/b2Rope.cpp	/^void b2Rope::SolveC3()$/;"	f	class:b2Rope
SolvePositionConstraints	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^bool b2ContactSolver::SolvePositionConstraints()$/;"	f	class:b2ContactSolver
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^bool b2DistanceJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2DistanceJoint
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^bool b2FrictionJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2FrictionJoint
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^bool b2GearJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2GearJoint
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^bool b2MouseJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2MouseJoint
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^bool b2PrismaticJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2PrismaticJoint
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^bool b2PulleyJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2PulleyJoint
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^bool b2RevoluteJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2RevoluteJoint
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^bool b2RopeJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2RopeJoint
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^bool b2WeldJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2WeldJoint
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^bool b2WheelJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2WheelJoint
SolveTOI	include/Box2D/Dynamics/b2Island.cpp	/^void b2Island::SolveTOI(const b2TimeStep& subStep, int32 toiIndexA, int32 toiIndexB)$/;"	f	class:b2Island
SolveTOI	include/Box2D/Dynamics/b2World.cpp	/^void b2World::SolveTOI(const b2TimeStep& step)$/;"	f	class:b2World
SolveTOIPositionConstraints	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^bool b2ContactSolver::SolveTOIPositionConstraints(int32 toiIndexA, int32 toiIndexB)$/;"	f	class:b2ContactSolver
SolveVelocityConstraints	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^void b2ContactSolver::SolveVelocityConstraints()$/;"	f	class:b2ContactSolver
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^void b2DistanceJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2DistanceJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2FrictionJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^void b2GearJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2GearJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2MouseJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PrismaticJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^void b2PulleyJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PulleyJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RevoluteJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^void b2RopeJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RopeJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^void b2WeldJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WeldJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WheelJoint
Sound	include/SFML/Audio/Sound.hpp	/^class SFML_AUDIO_API Sound : public SoundSource$/;"	c	namespace:sf
SoundBuffer	include/SFML/Audio/SoundBuffer.hpp	/^class SFML_AUDIO_API SoundBuffer$/;"	c	namespace:sf
SoundBufferRecorder	include/SFML/Audio/SoundBufferRecorder.hpp	/^class SFML_AUDIO_API SoundBufferRecorder : public SoundRecorder$/;"	c	namespace:sf
SoundList	include/SFML/Audio/SoundBuffer.hpp	/^    typedef std::set<Sound*> SoundList; \/\/\/< Set of unique sound instances$/;"	t	class:sf::SoundBuffer
SoundRecorder	include/SFML/Audio/SoundRecorder.hpp	/^class SFML_AUDIO_API SoundRecorder$/;"	c	namespace:sf
SoundSource	include/SFML/Audio/SoundSource.hpp	/^class SFML_AUDIO_API SoundSource$/;"	c	namespace:sf
SoundStream	include/SFML/Audio/SoundStream.hpp	/^class SFML_AUDIO_API SoundStream : public SoundSource$/;"	c	namespace:sf
Space	include/SFML/Window/Keyboard.hpp	/^        Space,        \/\/\/< The Space key$/;"	e	enum:sf::Keyboard::Key
Sprite	include/SFML/Graphics/Sprite.hpp	/^class SFML_GRAPHICS_API Sprite : public Drawable, public Transformable$/;"	c	namespace:sf
State	include/Box2D/Collision/b2TimeOfImpact.h	/^	enum State$/;"	g	struct:b2TOIOutput
StatesCache	include/SFML/Graphics/RenderTarget.hpp	/^    struct StatesCache$/;"	s	class:sf::RenderTarget
Status	include/SFML/Audio/SoundSource.hpp	/^    enum Status$/;"	g	class:sf::SoundSource
Status	include/SFML/Network/Ftp.hpp	/^        enum Status$/;"	g	class:sf::Ftp::Response
Status	include/SFML/Network/Http.hpp	/^        enum Status$/;"	g	class:sf::Http::Response
Status	include/SFML/Network/Socket.hpp	/^    enum Status$/;"	g	class:sf::Socket
Step	include/Box2D/Dynamics/b2World.cpp	/^void b2World::Step(float32 dt, int32 velocityIterations, int32 positionIterations)$/;"	f	class:b2World
Step	include/Box2D/Rope/b2Rope.cpp	/^void b2Rope::Step(float32 h, int32 iterations)$/;"	f	class:b2Rope
Stopped	include/SFML/Audio/SoundSource.hpp	/^        Stopped, \/\/\/< Sound is not playing$/;"	e	enum:sf::SoundSource::Status
StoreImpulses	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^void b2ContactSolver::StoreImpulses()$/;"	f	class:b2ContactSolver
String	include/SFML/System/String.hpp	/^class SFML_SYSTEM_API String$/;"	c	namespace:sf
Style	include/SFML/Graphics/Text.hpp	/^    enum Style$/;"	g	class:sf::Text
Style	include/SFML/Window/WindowStyle.hpp	/^namespace Style$/;"	n	namespace:sf
Subtract	include/SFML/Window/Keyboard.hpp	/^        Subtract,     \/\/\/< The - key$/;"	e	enum:sf::Keyboard::Key
Synchronize	include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::Synchronize(b2BroadPhase* broadPhase, const b2Transform& transform1, const b2Transform& transform2)$/;"	f	class:b2Fixture
SynchronizeFixtures	include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::SynchronizeFixtures()$/;"	f	class:b2Body
SynchronizeTransform	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SynchronizeTransform()$/;"	f	class:b2Body
SystemStatus	include/SFML/Network/Ftp.hpp	/^            SystemStatus          = 211, \/\/\/< System status, or system help reply$/;"	e	enum:sf::Ftp::Response::Status
SystemType	include/SFML/Network/Ftp.hpp	/^            SystemType            = 215, \/\/\/< NAME system type, where NAME is an official system name from the list in the Assigned Numbers document$/;"	e	enum:sf::Ftp::Response::Status
T	include/SFML/Window/Keyboard.hpp	/^        T,            \/\/\/< The T key$/;"	e	enum:sf::Keyboard::Key
TYPE_FLOAT	core/Property.h	/^	TYPE_FLOAT,$/;"	e	enum:propertyType
TYPE_INT	core/Property.h	/^	TYPE_INT = 0,$/;"	e	enum:propertyType
TYPE_STRING	core/Property.h	/^	TYPE_STRING,$/;"	e	enum:propertyType
Tab	include/SFML/Window/Keyboard.hpp	/^        Tab,          \/\/\/< The Tabulation key$/;"	e	enum:sf::Keyboard::Key
Tcp	include/SFML/Network/Socket.hpp	/^        Tcp, \/\/\/< TCP protocol$/;"	e	enum:sf::Socket::Type
TcpListener	include/SFML/Network/TcpListener.hpp	/^class SFML_NETWORK_API TcpListener : public Socket$/;"	c	namespace:sf
TcpSocket	include/SFML/Network/TcpSocket.hpp	/^class SFML_NETWORK_API TcpSocket : public Socket$/;"	c	namespace:sf
TestOverlap	include/Box2D/Collision/b2BroadPhase.h	/^inline bool b2BroadPhase::TestOverlap(int32 proxyIdA, int32 proxyIdB) const$/;"	f	class:b2BroadPhase
TestPoint	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^bool b2ChainShape::TestPoint(const b2Transform& xf, const b2Vec2& p) const$/;"	f	class:b2ChainShape
TestPoint	include/Box2D/Collision/Shapes/b2CircleShape.cpp	/^bool b2CircleShape::TestPoint(const b2Transform& transform, const b2Vec2& p) const$/;"	f	class:b2CircleShape
TestPoint	include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^bool b2EdgeShape::TestPoint(const b2Transform& xf, const b2Vec2& p) const$/;"	f	class:b2EdgeShape
TestPoint	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^bool b2PolygonShape::TestPoint(const b2Transform& xf, const b2Vec2& p) const$/;"	f	class:b2PolygonShape
TestPoint	include/Box2D/Dynamics/b2Fixture.h	/^inline bool b2Fixture::TestPoint(const b2Vec2& p) const$/;"	f	class:b2Fixture
Text	include/SFML/Graphics/Text.hpp	/^class SFML_GRAPHICS_API Text : public Drawable, public Transformable$/;"	c	namespace:sf
TextEntered	include/SFML/Window/Event.hpp	/^        TextEntered,            \/\/\/< A character was entered (data in event.text)$/;"	e	enum:sf::Event::EventType
TextEvent	include/SFML/Window/Event.hpp	/^    struct TextEvent$/;"	s	class:sf::Event
Texture	include/SFML/Graphics/Texture.hpp	/^class SFML_GRAPHICS_API Texture : GlResource$/;"	c	namespace:sf
TextureTable	include/SFML/Graphics/Shader.hpp	/^    typedef std::map<int, const Texture*> TextureTable;$/;"	t	class:sf::Shader
Thread	include/SFML/System/Thread.hpp	/^class SFML_SYSTEM_API Thread : NonCopyable$/;"	c	namespace:sf
ThreadLocal	include/SFML/System/ThreadLocal.hpp	/^class SFML_SYSTEM_API ThreadLocal : NonCopyable$/;"	c	namespace:sf
ThreadLocalPtr	include/SFML/System/ThreadLocalPtr.hpp	/^class ThreadLocalPtr : private ThreadLocal$/;"	c	namespace:sf
Tilde	include/SFML/Window/Keyboard.hpp	/^        Tilde,        \/\/\/< The ~ key$/;"	e	enum:sf::Keyboard::Key
Time	include/SFML/System/Time.hpp	/^class SFML_SYSTEM_API Time$/;"	c	namespace:sf
Titlebar	include/SFML/Window/WindowStyle.hpp	/^        Titlebar   = 1 << 0, \/\/\/< Title bar + fixed border$/;"	e	enum:sf::Style::__anon3
TouchProxy	include/Box2D/Collision/b2BroadPhase.cpp	/^void b2BroadPhase::TouchProxy(int32 proxyId)$/;"	f	class:b2BroadPhase
TransferAborted	include/SFML/Network/Ftp.hpp	/^            TransferAborted           = 426, \/\/\/< Connection closed, transfer aborted$/;"	e	enum:sf::Ftp::Response::Status
TransferMode	include/SFML/Network/Ftp.hpp	/^    enum TransferMode$/;"	g	class:sf::Ftp
Transform	include/SFML/Graphics/Transform.hpp	/^class SFML_GRAPHICS_API Transform$/;"	c	namespace:sf
Transformable	include/SFML/Graphics/Transformable.hpp	/^class SFML_GRAPHICS_API Transformable$/;"	c	namespace:sf
Transparent	include/SFML/Graphics/Color.hpp	/^    static const Color Transparent; \/\/\/< Transparent (black) predefined color$/;"	m	class:sf::Color
Triangles	include/SFML/Graphics/PrimitiveType.hpp	/^    Triangles,      \/\/\/< List of individual triangles$/;"	e	enum:sf::PrimitiveType
TrianglesFan	include/SFML/Graphics/PrimitiveType.hpp	/^    TrianglesFan,   \/\/\/< List of connected triangles, a point uses the common center and the previous point to form a triangle$/;"	e	enum:sf::PrimitiveType
TrianglesStrip	include/SFML/Graphics/PrimitiveType.hpp	/^    TrianglesStrip, \/\/\/< List of connected triangles, a point uses the two previous points to form a triangle$/;"	e	enum:sf::PrimitiveType
Type	include/Box2D/Collision/Shapes/b2Shape.h	/^	enum Type$/;"	g	class:b2Shape
Type	include/Box2D/Collision/b2CollideEdge.cpp	/^	enum Type$/;"	g	struct:b2EPAxis	file:
Type	include/Box2D/Collision/b2Collision.h	/^	enum Type$/;"	g	struct:b2ContactFeature
Type	include/Box2D/Collision/b2Collision.h	/^	enum Type$/;"	g	struct:b2Manifold
Type	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	enum Type$/;"	g	struct:b2SeparationFunction	file:
Type	include/SFML/Graphics/Shader.hpp	/^    enum Type$/;"	g	class:sf::Shader
Type	include/SFML/Network/Socket.hpp	/^    enum Type$/;"	g	class:sf::Socket
U	include/SFML/Window/Joystick.hpp	/^        U,    \/\/\/< The U axis$/;"	e	enum:sf::Joystick::Axis
U	include/SFML/Window/Keyboard.hpp	/^        U,            \/\/\/< The U key$/;"	e	enum:sf::Keyboard::Key
Udp	include/SFML/Network/Socket.hpp	/^        Udp  \/\/\/< UDP protocol$/;"	e	enum:sf::Socket::Type
UdpSocket	include/SFML/Network/UdpSocket.hpp	/^class SFML_NETWORK_API UdpSocket : public Socket$/;"	c	namespace:sf
Uint16	include/SFML/Config.hpp	/^    typedef unsigned short Uint16;$/;"	t	namespace:sf
Uint32	include/SFML/Config.hpp	/^    typedef unsigned int Uint32;$/;"	t	namespace:sf
Uint64	include/SFML/Config.hpp	/^        typedef unsigned __int64 Uint64;$/;"	t	namespace:sf
Uint64	include/SFML/Config.hpp	/^        typedef unsigned long long Uint64;$/;"	t	namespace:sf
Uint8	include/SFML/Config.hpp	/^    typedef unsigned char Uint8;$/;"	t	namespace:sf
UnBufferMove	include/Box2D/Collision/b2BroadPhase.cpp	/^void b2BroadPhase::UnBufferMove(int32 proxyId)$/;"	f	class:b2BroadPhase
Unauthorized	include/SFML/Network/Http.hpp	/^            Unauthorized        = 401, \/\/\/< The requested page needs an authentification to be accessed$/;"	e	enum:sf::Http::Response::Status
Underlined	include/SFML/Graphics/Text.hpp	/^        Underlined = 1 << 2  \/\/\/< Underlined characters$/;"	e	enum:sf::Text::Style
Unknown	include/SFML/Window/Keyboard.hpp	/^        Unknown = -1, \/\/\/< Unhandled key$/;"	e	enum:sf::Keyboard::Key
Up	include/SFML/Window/Keyboard.hpp	/^        Up,           \/\/\/< Up arrow$/;"	e	enum:sf::Keyboard::Key
Update	include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^void b2Contact::Update(b2ContactListener* listener)$/;"	f	class:b2Contact
UpdatePairs	include/Box2D/Collision/b2BroadPhase.h	/^void b2BroadPhase::UpdatePairs(T* callback)$/;"	f	class:b2BroadPhase
Utf	include/SFML/System/Utf.hpp	/^class Utf<16>$/;"	c	namespace:sf
Utf	include/SFML/System/Utf.hpp	/^class Utf<32>$/;"	c	namespace:sf
Utf	include/SFML/System/Utf.hpp	/^class Utf<8>$/;"	c	namespace:sf
Utf16	include/SFML/System/Utf.hpp	/^typedef Utf<16> Utf16;$/;"	t	namespace:sf
Utf32	include/SFML/System/Utf.hpp	/^typedef Utf<32> Utf32;$/;"	t	namespace:sf
Utf8	include/SFML/System/Utf.hpp	/^typedef Utf<8>  Utf8;$/;"	t	namespace:sf
V	include/SFML/Window/Joystick.hpp	/^        V,    \/\/\/< The V axis$/;"	e	enum:sf::Joystick::Axis
V	include/SFML/Window/Keyboard.hpp	/^        V,            \/\/\/< The V key$/;"	e	enum:sf::Keyboard::Key
Validate	include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::Validate() const$/;"	f	class:b2DynamicTree
ValidateMetrics	include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::ValidateMetrics(int32 index) const$/;"	f	class:b2DynamicTree
ValidateStructure	include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::ValidateStructure(int32 index) const$/;"	f	class:b2DynamicTree
Vector2	include/SFML/System/Vector2.hpp	/^class Vector2$/;"	c	namespace:sf
Vector2f	include/SFML/System/Vector2.hpp	/^typedef Vector2<float>        Vector2f;$/;"	t	namespace:sf
Vector2i	include/SFML/System/Vector2.hpp	/^typedef Vector2<int>          Vector2i;$/;"	t	namespace:sf
Vector2u	include/SFML/System/Vector2.hpp	/^typedef Vector2<unsigned int> Vector2u;$/;"	t	namespace:sf
Vector3	include/SFML/System/Vector3.hpp	/^class Vector3$/;"	c	namespace:sf
Vector3f	include/SFML/System/Vector3.hpp	/^typedef Vector3<float> Vector3f;$/;"	t	namespace:sf
Vector3i	include/SFML/System/Vector3.hpp	/^typedef Vector3<int>   Vector3i;$/;"	t	namespace:sf
VersionNotSupported	include/SFML/Network/Http.hpp	/^            VersionNotSupported = 505, \/\/\/< The server doesn't support the requested HTTP version$/;"	e	enum:sf::Http::Response::Status
Vertex	include/SFML/Graphics/Shader.hpp	/^        Vertex,  \/\/\/< Vertex shader$/;"	e	enum:sf::Shader::Type
Vertex	include/SFML/Graphics/Vertex.hpp	/^class SFML_GRAPHICS_API Vertex$/;"	c	namespace:sf
VertexArray	include/SFML/Graphics/VertexArray.hpp	/^class SFML_GRAPHICS_API VertexArray : public Drawable$/;"	c	namespace:sf
VertexCacheSize	include/SFML/Graphics/RenderTarget.hpp	/^        enum {VertexCacheSize = 4};$/;"	e	enum:sf::RenderTarget::StatesCache::__anon6
VertexType	include/Box2D/Collision/b2CollideEdge.cpp	/^	enum VertexType$/;"	g	struct:b2EPCollider	file:
VideoMode	include/SFML/Window/VideoMode.hpp	/^class SFML_WINDOW_API VideoMode$/;"	c	namespace:sf
View	include/SFML/Graphics/View.hpp	/^class SFML_GRAPHICS_API View$/;"	c	namespace:sf
W	include/SFML/Window/Keyboard.hpp	/^        W,            \/\/\/< The W key$/;"	e	enum:sf::Keyboard::Key
WarmStart	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^void b2ContactSolver::WarmStart()$/;"	f	class:b2ContactSolver
White	include/SFML/Graphics/Color.hpp	/^    static const Color White;       \/\/\/< White predefined color$/;"	m	class:sf::Color
Window	include/SFML/Window/Window.hpp	/^class SFML_WINDOW_API Window : GlResource, NonCopyable$/;"	c	namespace:sf
WindowHandle	include/SFML/Window/WindowHandle.hpp	/^    typedef HWND__* WindowHandle;$/;"	t	namespace:sf
WriteCache	include/Box2D/Collision/b2Distance.cpp	/^	void WriteCache(b2SimplexCache* cache) const$/;"	f	struct:b2Simplex
X	include/SFML/Window/Joystick.hpp	/^        X,    \/\/\/< The X axis$/;"	e	enum:sf::Joystick::Axis
X	include/SFML/Window/Keyboard.hpp	/^        X,            \/\/\/< The X key$/;"	e	enum:sf::Keyboard::Key
XButton1	include/SFML/Window/Mouse.hpp	/^        XButton1,   \/\/\/< The first extra mouse button$/;"	e	enum:sf::Mouse::Button
XButton2	include/SFML/Window/Mouse.hpp	/^        XButton2,   \/\/\/< The second extra mouse button$/;"	e	enum:sf::Mouse::Button
Y	include/SFML/Window/Joystick.hpp	/^        Y,    \/\/\/< The Y axis$/;"	e	enum:sf::Joystick::Axis
Y	include/SFML/Window/Keyboard.hpp	/^        Y,            \/\/\/< The Y key$/;"	e	enum:sf::Keyboard::Key
Yellow	include/SFML/Graphics/Color.hpp	/^    static const Color Yellow;      \/\/\/< Yellow predefined color$/;"	m	class:sf::Color
Z	include/SFML/Window/Joystick.hpp	/^        Z,    \/\/\/< The Z axis$/;"	e	enum:sf::Joystick::Axis
Z	include/SFML/Window/Keyboard.hpp	/^        Z,            \/\/\/< The Z key$/;"	e	enum:sf::Keyboard::Key
Zero	include/SFML/System/Time.hpp	/^    static const Time Zero; \/\/\/< Predefined "zero" time value $/;"	m	class:sf::Time
_MurmurHash64B	core/Hash.cpp	/^uint64_t Hash::_MurmurHash64B ( const void * key, int len, unsigned int seed ){$/;"	f	class:Hash
_addData	core/Object.h	/^	void _addData(const Hash *name, void *value){$/;"	f	class:Object
_getData	core/Object.h	/^	void* _getData(const Hash *name){$/;"	f	class:Object
a	include/Box2D/Collision/b2Distance.cpp	/^	float32 a;		\/\/ barycentric coordinate for closest point$/;"	m	struct:b2SimplexVertex	file:
a	include/Box2D/Common/b2Math.h	/^	float32 a0, a;		\/\/\/< world angles$/;"	m	struct:b2Sweep
a	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 a;$/;"	m	struct:b2Position
a	include/SFML/Graphics/Color.hpp	/^    Uint8 a; \/\/\/< Alpha (opacity) component$/;"	m	class:sf::Color
a0	include/Box2D/Common/b2Math.h	/^	float32 a0, a;		\/\/\/< world angles$/;"	m	struct:b2Sweep
aabb	include/Box2D/Collision/b2DynamicTree.h	/^	b2AABB aabb;$/;"	m	struct:b2TreeNode
aabb	include/Box2D/Dynamics/b2Fixture.h	/^	b2AABB aabb;$/;"	m	struct:b2FixtureProxy
active	include/Box2D/Dynamics/b2Body.h	/^	bool active;$/;"	m	struct:b2BodyDef
addObject	core/objectMgr.h	/^	void addObject(Object *obj){$/;"	f	class:objectMgr
addObjectProcessor	core/objectMgr.h	/^	void addObjectProcessor(objectProcessor *processor){$/;"	f	class:objectMgr
addProperty	core/Object.h	/^	void addProperty(const Hash *name, baseProperty *value){$/;"	f	class:Object
advance	include/SFML/Graphics/Glyph.hpp	/^    int     advance;     \/\/\/< Offset to move horizontically to the next character$/;"	m	class:sf::Glyph
allocator	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2StackAllocator* allocator;$/;"	m	struct:b2ContactSolverDef
allowSleep	include/Box2D/Dynamics/b2Body.h	/^	bool allowSleep;$/;"	m	struct:b2BodyDef
alpha0	include/Box2D/Common/b2Math.h	/^	float32 alpha0;$/;"	m	struct:b2Sweep
alt	include/SFML/Window/Event.hpp	/^        bool          alt;     \/\/\/< Is the Alt key pressed?$/;"	m	struct:sf::Event::KeyEvent
angle	include/Box2D/Dynamics/b2Body.h	/^	float32 angle;$/;"	m	struct:b2BodyDef
angularA	include/Box2D/Dynamics/Joints/b2Joint.h	/^	float32 angularA;$/;"	m	struct:b2Jacobian
angularB	include/Box2D/Dynamics/Joints/b2Joint.h	/^	float32 angularB;$/;"	m	struct:b2Jacobian
angularDamping	include/Box2D/Dynamics/b2Body.h	/^	float32 angularDamping;$/;"	m	struct:b2BodyDef
angularVelocity	include/Box2D/Dynamics/b2Body.h	/^	float32 angularVelocity;$/;"	m	struct:b2BodyDef
antialiasingLevel	include/SFML/Window/ContextSettings.hpp	/^    unsigned int antialiasingLevel; \/\/\/< Level of antialiasing$/;"	m	struct:sf::ContextSettings
awake	include/Box2D/Dynamics/b2Body.h	/^	bool awake;$/;"	m	struct:b2BodyDef
axis	include/SFML/Window/Event.hpp	/^        Joystick::Axis axis;       \/\/\/< Axis on which the joystick moved$/;"	m	struct:sf::Event::JoystickMoveEvent
b	include/Box2D/Common/b2Draw.h	/^	float32 r, g, b;$/;"	m	struct:b2Color
b	include/SFML/Graphics/Color.hpp	/^    Uint8 b; \/\/\/< Blue component$/;"	m	class:sf::Color
b2AABB	include/Box2D/Collision/b2Collision.h	/^struct b2AABB$/;"	s
b2Abs	include/Box2D/Common/b2Math.h	/^inline T b2Abs(T a)$/;"	f
b2Abs	include/Box2D/Common/b2Math.h	/^inline b2Mat22 b2Abs(const b2Mat22& A)$/;"	f
b2Abs	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Abs(const b2Vec2& a)$/;"	f
b2Alloc	include/Box2D/Common/b2Settings.cpp	/^void* b2Alloc(int32 size)$/;"	f
b2Assert	include/Box2D/Common/b2Settings.h	26;"	d
b2Atan2	include/Box2D/Common/b2Math.h	61;"	d
b2Block	include/Box2D/Common/b2BlockAllocator.cpp	/^struct b2Block$/;"	s	file:
b2BlockAllocator	include/Box2D/Common/b2BlockAllocator.cpp	/^b2BlockAllocator::b2BlockAllocator()$/;"	f	class:b2BlockAllocator
b2BlockAllocator	include/Box2D/Common/b2BlockAllocator.h	/^class b2BlockAllocator$/;"	c
b2Body	include/Box2D/Dynamics/b2Body.cpp	/^b2Body::b2Body(const b2BodyDef* bd, b2World* world)$/;"	f	class:b2Body
b2Body	include/Box2D/Dynamics/b2Body.h	/^class b2Body$/;"	c
b2BodyDef	include/Box2D/Dynamics/b2Body.h	/^	b2BodyDef()$/;"	f	struct:b2BodyDef
b2BodyDef	include/Box2D/Dynamics/b2Body.h	/^struct b2BodyDef$/;"	s
b2BodyType	include/Box2D/Dynamics/b2Body.h	/^enum b2BodyType$/;"	g
b2BroadPhase	include/Box2D/Collision/b2BroadPhase.cpp	/^b2BroadPhase::b2BroadPhase()$/;"	f	class:b2BroadPhase
b2BroadPhase	include/Box2D/Collision/b2BroadPhase.h	/^class b2BroadPhase$/;"	c
b2ChainAndCircleContact	include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.cpp	/^b2ChainAndCircleContact::b2ChainAndCircleContact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)$/;"	f	class:b2ChainAndCircleContact
b2ChainAndCircleContact	include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.h	/^class b2ChainAndCircleContact : public b2Contact$/;"	c
b2ChainAndPolygonContact	include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.cpp	/^b2ChainAndPolygonContact::b2ChainAndPolygonContact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)$/;"	f	class:b2ChainAndPolygonContact
b2ChainAndPolygonContact	include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.h	/^class b2ChainAndPolygonContact : public b2Contact$/;"	c
b2ChainShape	include/Box2D/Collision/Shapes/b2ChainShape.h	/^class b2ChainShape : public b2Shape$/;"	c
b2ChainShape	include/Box2D/Collision/Shapes/b2ChainShape.h	/^inline b2ChainShape::b2ChainShape()$/;"	f	class:b2ChainShape
b2Chunk	include/Box2D/Common/b2BlockAllocator.cpp	/^struct b2Chunk$/;"	s	file:
b2CircleContact	include/Box2D/Dynamics/Contacts/b2CircleContact.cpp	/^b2CircleContact::b2CircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2CircleContact
b2CircleContact	include/Box2D/Dynamics/Contacts/b2CircleContact.h	/^class b2CircleContact : public b2Contact$/;"	c
b2CircleShape	include/Box2D/Collision/Shapes/b2CircleShape.h	/^class b2CircleShape : public b2Shape$/;"	c
b2CircleShape	include/Box2D/Collision/Shapes/b2CircleShape.h	/^inline b2CircleShape::b2CircleShape()$/;"	f	class:b2CircleShape
b2Clamp	include/Box2D/Common/b2Math.h	/^inline T b2Clamp(T a, T low, T high)$/;"	f
b2Clamp	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Clamp(const b2Vec2& a, const b2Vec2& low, const b2Vec2& high)$/;"	f
b2ClipSegmentToLine	include/Box2D/Collision/b2Collision.cpp	/^int32 b2ClipSegmentToLine(b2ClipVertex vOut[2], const b2ClipVertex vIn[2],$/;"	f
b2ClipVertex	include/Box2D/Collision/b2Collision.h	/^struct b2ClipVertex$/;"	s
b2CollideCircles	include/Box2D/Collision/b2CollideCircle.cpp	/^void b2CollideCircles($/;"	f
b2CollideEdgeAndCircle	include/Box2D/Collision/b2CollideEdge.cpp	/^void b2CollideEdgeAndCircle(b2Manifold* manifold,$/;"	f
b2CollideEdgeAndPolygon	include/Box2D/Collision/b2CollideEdge.cpp	/^void b2CollideEdgeAndPolygon(	b2Manifold* manifold,$/;"	f
b2CollidePolygonAndCircle	include/Box2D/Collision/b2CollideCircle.cpp	/^void b2CollidePolygonAndCircle($/;"	f
b2CollidePolygons	include/Box2D/Collision/b2CollidePolygon.cpp	/^void b2CollidePolygons(b2Manifold* manifold,$/;"	f
b2Color	include/Box2D/Common/b2Draw.h	/^	b2Color() {}$/;"	f	struct:b2Color
b2Color	include/Box2D/Common/b2Draw.h	/^	b2Color(float32 r, float32 g, float32 b) : r(r), g(g), b(b) {}$/;"	f	struct:b2Color
b2Color	include/Box2D/Common/b2Draw.h	/^struct b2Color$/;"	s
b2Contact	include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^b2Contact::b2Contact(b2Fixture* fA, int32 indexA, b2Fixture* fB, int32 indexB)$/;"	f	class:b2Contact
b2Contact	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Contact() : m_fixtureA(NULL), m_fixtureB(NULL) {}$/;"	f	class:b2Contact
b2Contact	include/Box2D/Dynamics/Contacts/b2Contact.h	/^class b2Contact$/;"	c
b2ContactCreateFcn	include/Box2D/Dynamics/Contacts/b2Contact.h	/^typedef b2Contact* b2ContactCreateFcn(	b2Fixture* fixtureA, int32 indexA,$/;"	t
b2ContactDestroyFcn	include/Box2D/Dynamics/Contacts/b2Contact.h	/^typedef void b2ContactDestroyFcn(b2Contact* contact, b2BlockAllocator* allocator);$/;"	t
b2ContactEdge	include/Box2D/Dynamics/Contacts/b2Contact.h	/^struct b2ContactEdge$/;"	s
b2ContactFeature	include/Box2D/Collision/b2Collision.h	/^struct b2ContactFeature$/;"	s
b2ContactFilter	include/Box2D/Dynamics/b2WorldCallbacks.h	/^class b2ContactFilter$/;"	c
b2ContactID	include/Box2D/Collision/b2Collision.h	/^union b2ContactID$/;"	u
b2ContactImpulse	include/Box2D/Dynamics/b2WorldCallbacks.h	/^struct b2ContactImpulse$/;"	s
b2ContactListener	include/Box2D/Dynamics/b2WorldCallbacks.h	/^class b2ContactListener$/;"	c
b2ContactManager	include/Box2D/Dynamics/b2ContactManager.cpp	/^b2ContactManager::b2ContactManager()$/;"	f	class:b2ContactManager
b2ContactManager	include/Box2D/Dynamics/b2ContactManager.h	/^class b2ContactManager$/;"	c
b2ContactPositionConstraint	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^struct b2ContactPositionConstraint$/;"	s	file:
b2ContactRegister	include/Box2D/Dynamics/Contacts/b2Contact.h	/^struct b2ContactRegister$/;"	s
b2ContactSolver	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^b2ContactSolver::b2ContactSolver(b2ContactSolverDef* def)$/;"	f	class:b2ContactSolver
b2ContactSolver	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^class b2ContactSolver$/;"	c
b2ContactSolverDef	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^struct b2ContactSolverDef$/;"	s
b2ContactVelocityConstraint	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^struct b2ContactVelocityConstraint$/;"	s
b2Cross	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Cross(const b2Vec2& a, float32 s)$/;"	f
b2Cross	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Cross(float32 s, const b2Vec2& a)$/;"	f
b2Cross	include/Box2D/Common/b2Math.h	/^inline b2Vec3 b2Cross(const b2Vec3& a, const b2Vec3& b)$/;"	f
b2Cross	include/Box2D/Common/b2Math.h	/^inline float32 b2Cross(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2DestructionListener	include/Box2D/Dynamics/b2WorldCallbacks.h	/^class b2DestructionListener$/;"	c
b2Distance	include/Box2D/Collision/b2Distance.cpp	/^void b2Distance(b2DistanceOutput* output,$/;"	f
b2Distance	include/Box2D/Common/b2Math.h	/^inline float32 b2Distance(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2DistanceInput	include/Box2D/Collision/b2Distance.h	/^struct b2DistanceInput$/;"	s
b2DistanceJoint	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^b2DistanceJoint::b2DistanceJoint(const b2DistanceJointDef* def)$/;"	f	class:b2DistanceJoint
b2DistanceJoint	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^class b2DistanceJoint : public b2Joint$/;"	c
b2DistanceJointDef	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2DistanceJointDef()$/;"	f	struct:b2DistanceJointDef
b2DistanceJointDef	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^struct b2DistanceJointDef : public b2JointDef$/;"	s
b2DistanceOutput	include/Box2D/Collision/b2Distance.h	/^struct b2DistanceOutput$/;"	s
b2DistanceProxy	include/Box2D/Collision/b2Distance.h	/^	b2DistanceProxy() : m_vertices(NULL), m_count(0), m_radius(0.0f) {}$/;"	f	struct:b2DistanceProxy
b2DistanceProxy	include/Box2D/Collision/b2Distance.h	/^struct b2DistanceProxy$/;"	s
b2DistanceSquared	include/Box2D/Common/b2Math.h	/^inline float32 b2DistanceSquared(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2Dot	include/Box2D/Common/b2Math.h	/^inline float32 b2Dot(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2Dot	include/Box2D/Common/b2Math.h	/^inline float32 b2Dot(const b2Vec3& a, const b2Vec3& b)$/;"	f
b2Draw	include/Box2D/Common/b2Draw.cpp	/^b2Draw::b2Draw()$/;"	f	class:b2Draw
b2Draw	include/Box2D/Common/b2Draw.h	/^class b2Draw$/;"	c
b2DynamicTree	include/Box2D/Collision/b2DynamicTree.cpp	/^b2DynamicTree::b2DynamicTree()$/;"	f	class:b2DynamicTree
b2DynamicTree	include/Box2D/Collision/b2DynamicTree.h	/^class b2DynamicTree$/;"	c
b2EPAxis	include/Box2D/Collision/b2CollideEdge.cpp	/^struct b2EPAxis$/;"	s	file:
b2EPCollider	include/Box2D/Collision/b2CollideEdge.cpp	/^struct b2EPCollider$/;"	s	file:
b2EdgeAndCircleContact	include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.cpp	/^b2EdgeAndCircleContact::b2EdgeAndCircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2EdgeAndCircleContact
b2EdgeAndCircleContact	include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.h	/^class b2EdgeAndCircleContact : public b2Contact$/;"	c
b2EdgeAndPolygonContact	include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.cpp	/^b2EdgeAndPolygonContact::b2EdgeAndPolygonContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2EdgeAndPolygonContact
b2EdgeAndPolygonContact	include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.h	/^class b2EdgeAndPolygonContact : public b2Contact$/;"	c
b2EdgeSeparation	include/Box2D/Collision/b2CollidePolygon.cpp	/^static float32 b2EdgeSeparation(const b2PolygonShape* poly1, const b2Transform& xf1, int32 edge1,$/;"	f	file:
b2EdgeShape	include/Box2D/Collision/Shapes/b2EdgeShape.h	/^class b2EdgeShape : public b2Shape$/;"	c
b2EdgeShape	include/Box2D/Collision/Shapes/b2EdgeShape.h	/^inline b2EdgeShape::b2EdgeShape()$/;"	f	class:b2EdgeShape
b2Filter	include/Box2D/Dynamics/b2Fixture.h	/^	b2Filter()$/;"	f	struct:b2Filter
b2Filter	include/Box2D/Dynamics/b2Fixture.h	/^struct b2Filter$/;"	s
b2FindIncidentEdge	include/Box2D/Collision/b2CollidePolygon.cpp	/^static void b2FindIncidentEdge(b2ClipVertex c[2],$/;"	f	file:
b2FindMaxSeparation	include/Box2D/Collision/b2CollidePolygon.cpp	/^static float32 b2FindMaxSeparation(int32* edgeIndex,$/;"	f	file:
b2Fixture	include/Box2D/Dynamics/b2Fixture.cpp	/^b2Fixture::b2Fixture()$/;"	f	class:b2Fixture
b2Fixture	include/Box2D/Dynamics/b2Fixture.h	/^class b2Fixture$/;"	c
b2FixtureDef	include/Box2D/Dynamics/b2Fixture.h	/^	b2FixtureDef()$/;"	f	struct:b2FixtureDef
b2FixtureDef	include/Box2D/Dynamics/b2Fixture.h	/^struct b2FixtureDef$/;"	s
b2FixtureProxy	include/Box2D/Dynamics/b2Fixture.h	/^struct b2FixtureProxy$/;"	s
b2Free	include/Box2D/Common/b2Settings.cpp	/^void b2Free(void* mem)$/;"	f
b2FrictionJoint	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^b2FrictionJoint::b2FrictionJoint(const b2FrictionJointDef* def)$/;"	f	class:b2FrictionJoint
b2FrictionJoint	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^class b2FrictionJoint : public b2Joint$/;"	c
b2FrictionJointDef	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2FrictionJointDef()$/;"	f	struct:b2FrictionJointDef
b2FrictionJointDef	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^struct b2FrictionJointDef : public b2JointDef$/;"	s
b2GearJoint	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^b2GearJoint::b2GearJoint(const b2GearJointDef* def)$/;"	f	class:b2GearJoint
b2GearJoint	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^class b2GearJoint : public b2Joint$/;"	c
b2GearJointDef	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2GearJointDef()$/;"	f	struct:b2GearJointDef
b2GearJointDef	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^struct b2GearJointDef : public b2JointDef$/;"	s
b2GetPointStates	include/Box2D/Collision/b2Collision.cpp	/^void b2GetPointStates(b2PointState state1[b2_maxManifoldPoints], b2PointState state2[b2_maxManifoldPoints],$/;"	f
b2GrowableStack	include/Box2D/Common/b2GrowableStack.h	/^	b2GrowableStack()$/;"	f	class:b2GrowableStack
b2GrowableStack	include/Box2D/Common/b2GrowableStack.h	/^class b2GrowableStack$/;"	c
b2InvSqrt	include/Box2D/Common/b2Math.h	/^inline float32 b2InvSqrt(float32 x)$/;"	f
b2IsPowerOfTwo	include/Box2D/Common/b2Math.h	/^inline bool b2IsPowerOfTwo(uint32 x)$/;"	f
b2IsValid	include/Box2D/Common/b2Math.h	/^inline bool b2IsValid(float32 x)$/;"	f
b2Island	include/Box2D/Dynamics/b2Island.cpp	/^b2Island::b2Island($/;"	f	class:b2Island
b2Island	include/Box2D/Dynamics/b2Island.h	/^class b2Island$/;"	c
b2Jacobian	include/Box2D/Dynamics/Joints/b2Joint.h	/^struct b2Jacobian$/;"	s
b2Joint	include/Box2D/Dynamics/Joints/b2Joint.cpp	/^b2Joint::b2Joint(const b2JointDef* def)$/;"	f	class:b2Joint
b2Joint	include/Box2D/Dynamics/Joints/b2Joint.h	/^class b2Joint$/;"	c
b2JointDef	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointDef()$/;"	f	struct:b2JointDef
b2JointDef	include/Box2D/Dynamics/Joints/b2Joint.h	/^struct b2JointDef$/;"	s
b2JointEdge	include/Box2D/Dynamics/Joints/b2Joint.h	/^struct b2JointEdge$/;"	s
b2JointType	include/Box2D/Dynamics/Joints/b2Joint.h	/^enum b2JointType$/;"	g
b2LimitState	include/Box2D/Dynamics/Joints/b2Joint.h	/^enum b2LimitState$/;"	g
b2Log	include/Box2D/Common/b2Settings.cpp	/^void b2Log(const char* string, ...)$/;"	f
b2Manifold	include/Box2D/Collision/b2Collision.h	/^struct b2Manifold$/;"	s
b2ManifoldPoint	include/Box2D/Collision/b2Collision.h	/^struct b2ManifoldPoint$/;"	s
b2MassData	include/Box2D/Collision/Shapes/b2Shape.h	/^struct b2MassData$/;"	s
b2Mat22	include/Box2D/Common/b2Math.h	/^	b2Mat22() {}$/;"	f	struct:b2Mat22
b2Mat22	include/Box2D/Common/b2Math.h	/^	b2Mat22(const b2Vec2& c1, const b2Vec2& c2)$/;"	f	struct:b2Mat22
b2Mat22	include/Box2D/Common/b2Math.h	/^	b2Mat22(float32 a11, float32 a12, float32 a21, float32 a22)$/;"	f	struct:b2Mat22
b2Mat22	include/Box2D/Common/b2Math.h	/^struct b2Mat22$/;"	s
b2Mat33	include/Box2D/Common/b2Math.h	/^	b2Mat33() {}$/;"	f	struct:b2Mat33
b2Mat33	include/Box2D/Common/b2Math.h	/^	b2Mat33(const b2Vec3& c1, const b2Vec3& c2, const b2Vec3& c3)$/;"	f	struct:b2Mat33
b2Mat33	include/Box2D/Common/b2Math.h	/^struct b2Mat33$/;"	s
b2Max	include/Box2D/Common/b2Math.h	/^inline T b2Max(T a, T b)$/;"	f
b2Max	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Max(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2Min	include/Box2D/Common/b2Math.h	/^inline T b2Min(T a, T b)$/;"	f
b2Min	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Min(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2MixFriction	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline float32 b2MixFriction(float32 friction1, float32 friction2)$/;"	f
b2MixRestitution	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline float32 b2MixRestitution(float32 restitution1, float32 restitution2)$/;"	f
b2MouseJoint	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^b2MouseJoint::b2MouseJoint(const b2MouseJointDef* def)$/;"	f	class:b2MouseJoint
b2MouseJoint	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^class b2MouseJoint : public b2Joint$/;"	c
b2MouseJointDef	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2MouseJointDef()$/;"	f	struct:b2MouseJointDef
b2MouseJointDef	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^struct b2MouseJointDef : public b2JointDef$/;"	s
b2Mul	include/Box2D/Common/b2Math.h	/^inline b2Mat22 b2Mul(const b2Mat22& A, const b2Mat22& B)$/;"	f
b2Mul	include/Box2D/Common/b2Math.h	/^inline b2Rot b2Mul(const b2Rot& q, const b2Rot& r)$/;"	f
b2Mul	include/Box2D/Common/b2Math.h	/^inline b2Transform b2Mul(const b2Transform& A, const b2Transform& B)$/;"	f
b2Mul	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Mul(const b2Mat22& A, const b2Vec2& v)$/;"	f
b2Mul	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Mul(const b2Rot& q, const b2Vec2& v)$/;"	f
b2Mul	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Mul(const b2Transform& T, const b2Vec2& v)$/;"	f
b2Mul	include/Box2D/Common/b2Math.h	/^inline b2Vec3 b2Mul(const b2Mat33& A, const b2Vec3& v)$/;"	f
b2Mul22	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Mul22(const b2Mat33& A, const b2Vec2& v)$/;"	f
b2MulT	include/Box2D/Common/b2Math.h	/^inline b2Mat22 b2MulT(const b2Mat22& A, const b2Mat22& B)$/;"	f
b2MulT	include/Box2D/Common/b2Math.h	/^inline b2Rot b2MulT(const b2Rot& q, const b2Rot& r)$/;"	f
b2MulT	include/Box2D/Common/b2Math.h	/^inline b2Transform b2MulT(const b2Transform& A, const b2Transform& B)$/;"	f
b2MulT	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2MulT(const b2Mat22& A, const b2Vec2& v)$/;"	f
b2MulT	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2MulT(const b2Rot& q, const b2Vec2& v)$/;"	f
b2MulT	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2MulT(const b2Transform& T, const b2Vec2& v)$/;"	f
b2NextPowerOfTwo	include/Box2D/Common/b2Math.h	/^inline uint32 b2NextPowerOfTwo(uint32 x)$/;"	f
b2Pair	include/Box2D/Collision/b2BroadPhase.h	/^struct b2Pair$/;"	s
b2PairLessThan	include/Box2D/Collision/b2BroadPhase.h	/^inline bool b2PairLessThan(const b2Pair& pair1, const b2Pair& pair2)$/;"	f
b2PointState	include/Box2D/Collision/b2Collision.h	/^enum b2PointState$/;"	g
b2PolygonAndCircleContact	include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.cpp	/^b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2PolygonAndCircleContact
b2PolygonAndCircleContact	include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.h	/^class b2PolygonAndCircleContact : public b2Contact$/;"	c
b2PolygonContact	include/Box2D/Dynamics/Contacts/b2PolygonContact.cpp	/^b2PolygonContact::b2PolygonContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2PolygonContact
b2PolygonContact	include/Box2D/Dynamics/Contacts/b2PolygonContact.h	/^class b2PolygonContact : public b2Contact$/;"	c
b2PolygonShape	include/Box2D/Collision/Shapes/b2PolygonShape.h	/^class b2PolygonShape : public b2Shape$/;"	c
b2PolygonShape	include/Box2D/Collision/Shapes/b2PolygonShape.h	/^inline b2PolygonShape::b2PolygonShape()$/;"	f	class:b2PolygonShape
b2Position	include/Box2D/Dynamics/b2TimeStep.h	/^struct b2Position$/;"	s
b2PositionSolverManifold	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^struct b2PositionSolverManifold$/;"	s	file:
b2PrismaticJoint	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^b2PrismaticJoint::b2PrismaticJoint(const b2PrismaticJointDef* def)$/;"	f	class:b2PrismaticJoint
b2PrismaticJoint	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^class b2PrismaticJoint : public b2Joint$/;"	c
b2PrismaticJointDef	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2PrismaticJointDef()$/;"	f	struct:b2PrismaticJointDef
b2PrismaticJointDef	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^struct b2PrismaticJointDef : public b2JointDef$/;"	s
b2Profile	include/Box2D/Dynamics/b2TimeStep.h	/^struct b2Profile$/;"	s
b2PulleyJoint	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^b2PulleyJoint::b2PulleyJoint(const b2PulleyJointDef* def)$/;"	f	class:b2PulleyJoint
b2PulleyJoint	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^class b2PulleyJoint : public b2Joint$/;"	c
b2PulleyJointDef	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2PulleyJointDef()$/;"	f	struct:b2PulleyJointDef
b2PulleyJointDef	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^struct b2PulleyJointDef : public b2JointDef$/;"	s
b2QueryCallback	include/Box2D/Dynamics/b2WorldCallbacks.h	/^class b2QueryCallback$/;"	c
b2RayCastCallback	include/Box2D/Dynamics/b2WorldCallbacks.h	/^class b2RayCastCallback$/;"	c
b2RayCastInput	include/Box2D/Collision/b2Collision.h	/^struct b2RayCastInput$/;"	s
b2RayCastOutput	include/Box2D/Collision/b2Collision.h	/^struct b2RayCastOutput$/;"	s
b2ReferenceFace	include/Box2D/Collision/b2CollideEdge.cpp	/^struct b2ReferenceFace$/;"	s	file:
b2RevoluteJoint	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^b2RevoluteJoint::b2RevoluteJoint(const b2RevoluteJointDef* def)$/;"	f	class:b2RevoluteJoint
b2RevoluteJoint	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^class b2RevoluteJoint : public b2Joint$/;"	c
b2RevoluteJointDef	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2RevoluteJointDef()$/;"	f	struct:b2RevoluteJointDef
b2RevoluteJointDef	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^struct b2RevoluteJointDef : public b2JointDef$/;"	s
b2Rope	include/Box2D/Rope/b2Rope.cpp	/^b2Rope::b2Rope()$/;"	f	class:b2Rope
b2Rope	include/Box2D/Rope/b2Rope.h	/^class b2Rope$/;"	c
b2RopeDef	include/Box2D/Rope/b2Rope.h	/^	b2RopeDef()$/;"	f	struct:b2RopeDef
b2RopeDef	include/Box2D/Rope/b2Rope.h	/^struct b2RopeDef$/;"	s
b2RopeJoint	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^b2RopeJoint::b2RopeJoint(const b2RopeJointDef* def)$/;"	f	class:b2RopeJoint
b2RopeJoint	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^class b2RopeJoint : public b2Joint$/;"	c
b2RopeJointDef	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2RopeJointDef()$/;"	f	struct:b2RopeJointDef
b2RopeJointDef	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^struct b2RopeJointDef : public b2JointDef$/;"	s
b2Rot	include/Box2D/Common/b2Math.h	/^	b2Rot() {}$/;"	f	struct:b2Rot
b2Rot	include/Box2D/Common/b2Math.h	/^	explicit b2Rot(float32 angle)$/;"	f	struct:b2Rot
b2Rot	include/Box2D/Common/b2Math.h	/^struct b2Rot$/;"	s
b2SeparationFunction	include/Box2D/Collision/b2TimeOfImpact.cpp	/^struct b2SeparationFunction$/;"	s	file:
b2Shape	include/Box2D/Collision/Shapes/b2Shape.h	/^class b2Shape$/;"	c
b2Simplex	include/Box2D/Collision/b2Distance.cpp	/^struct b2Simplex$/;"	s	file:
b2SimplexCache	include/Box2D/Collision/b2Distance.h	/^struct b2SimplexCache$/;"	s
b2SimplexVertex	include/Box2D/Collision/b2Distance.cpp	/^struct b2SimplexVertex$/;"	s	file:
b2SolverData	include/Box2D/Dynamics/b2TimeStep.h	/^struct b2SolverData$/;"	s
b2Sqrt	include/Box2D/Common/b2Math.h	60;"	d
b2StackAllocator	include/Box2D/Common/b2StackAllocator.cpp	/^b2StackAllocator::b2StackAllocator()$/;"	f	class:b2StackAllocator
b2StackAllocator	include/Box2D/Common/b2StackAllocator.h	/^class b2StackAllocator$/;"	c
b2StackEntry	include/Box2D/Common/b2StackAllocator.h	/^struct b2StackEntry$/;"	s
b2Swap	include/Box2D/Common/b2Math.h	/^template<typename T> inline void b2Swap(T& a, T& b)$/;"	f
b2Sweep	include/Box2D/Common/b2Math.h	/^struct b2Sweep$/;"	s
b2TOIInput	include/Box2D/Collision/b2TimeOfImpact.h	/^struct b2TOIInput$/;"	s
b2TOIOutput	include/Box2D/Collision/b2TimeOfImpact.h	/^struct b2TOIOutput$/;"	s
b2TempPolygon	include/Box2D/Collision/b2CollideEdge.cpp	/^struct b2TempPolygon$/;"	s	file:
b2TestOverlap	include/Box2D/Collision/b2Collision.cpp	/^bool b2TestOverlap(	const b2Shape* shapeA, int32 indexA,$/;"	f
b2TestOverlap	include/Box2D/Collision/b2Collision.h	/^inline bool b2TestOverlap(const b2AABB& a, const b2AABB& b)$/;"	f
b2TimeOfImpact	include/Box2D/Collision/b2TimeOfImpact.cpp	/^void b2TimeOfImpact(b2TOIOutput* output, const b2TOIInput* input)$/;"	f
b2TimeStep	include/Box2D/Dynamics/b2TimeStep.h	/^struct b2TimeStep$/;"	s
b2Timer	include/Box2D/Common/b2Timer.cpp	/^b2Timer::b2Timer()$/;"	f	class:b2Timer
b2Timer	include/Box2D/Common/b2Timer.h	/^class b2Timer$/;"	c
b2Transform	include/Box2D/Common/b2Math.h	/^	b2Transform() {}$/;"	f	struct:b2Transform
b2Transform	include/Box2D/Common/b2Math.h	/^	b2Transform(const b2Vec2& position, const b2Rot& rotation) : p(position), q(rotation) {}$/;"	f	struct:b2Transform
b2Transform	include/Box2D/Common/b2Math.h	/^struct b2Transform$/;"	s
b2TreeNode	include/Box2D/Collision/b2DynamicTree.h	/^struct b2TreeNode$/;"	s
b2Vec2	include/Box2D/Common/b2Math.h	/^	b2Vec2() {}$/;"	f	struct:b2Vec2
b2Vec2	include/Box2D/Common/b2Math.h	/^	b2Vec2(float32 x, float32 y) : x(x), y(y) {}$/;"	f	struct:b2Vec2
b2Vec2	include/Box2D/Common/b2Math.h	/^struct b2Vec2$/;"	s
b2Vec3	include/Box2D/Common/b2Math.h	/^	b2Vec3() {}$/;"	f	struct:b2Vec3
b2Vec3	include/Box2D/Common/b2Math.h	/^	b2Vec3(float32 x, float32 y, float32 z) : x(x), y(y), z(z) {}$/;"	f	struct:b2Vec3
b2Vec3	include/Box2D/Common/b2Math.h	/^struct b2Vec3$/;"	s
b2Velocity	include/Box2D/Dynamics/b2TimeStep.h	/^struct b2Velocity$/;"	s
b2VelocityConstraintPoint	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^struct b2VelocityConstraintPoint$/;"	s
b2Version	include/Box2D/Common/b2Settings.h	/^struct b2Version$/;"	s
b2WeldJoint	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^b2WeldJoint::b2WeldJoint(const b2WeldJointDef* def)$/;"	f	class:b2WeldJoint
b2WeldJoint	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^class b2WeldJoint : public b2Joint$/;"	c
b2WeldJointDef	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2WeldJointDef()$/;"	f	struct:b2WeldJointDef
b2WeldJointDef	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^struct b2WeldJointDef : public b2JointDef$/;"	s
b2WheelJoint	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^b2WheelJoint::b2WheelJoint(const b2WheelJointDef* def)$/;"	f	class:b2WheelJoint
b2WheelJoint	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^class b2WheelJoint : public b2Joint$/;"	c
b2WheelJointDef	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2WheelJointDef()$/;"	f	struct:b2WheelJointDef
b2WheelJointDef	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^struct b2WheelJointDef : public b2JointDef$/;"	s
b2World	include/Box2D/Dynamics/b2World.cpp	/^b2World::b2World(const b2Vec2& gravity)$/;"	f	class:b2World
b2World	include/Box2D/Dynamics/b2World.h	/^class b2World$/;"	c
b2WorldManifold	include/Box2D/Collision/b2Collision.h	/^struct b2WorldManifold$/;"	s
b2WorldQueryWrapper	include/Box2D/Dynamics/b2World.cpp	/^struct b2WorldQueryWrapper$/;"	s	file:
b2WorldRayCastWrapper	include/Box2D/Dynamics/b2World.cpp	/^struct b2WorldRayCastWrapper$/;"	s	file:
b2_aabbExtension	include/Box2D/Common/b2Settings.h	58;"	d
b2_aabbMultiplier	include/Box2D/Common/b2Settings.h	63;"	d
b2_addState	include/Box2D/Collision/b2Collision.h	/^	b2_addState,		\/\/\/< point was added in the update$/;"	e	enum:b2PointState
b2_angularSleepTolerance	include/Box2D/Common/b2Settings.h	125;"	d
b2_angularSlop	include/Box2D/Common/b2Settings.h	71;"	d
b2_baumgarte	include/Box2D/Common/b2Settings.h	112;"	d
b2_blockSizes	include/Box2D/Common/b2BlockAllocator.h	/^const int32 b2_blockSizes = 14;$/;"	v
b2_chunkArrayIncrement	include/Box2D/Common/b2BlockAllocator.h	/^const int32 b2_chunkArrayIncrement = 128;$/;"	v
b2_chunkSize	include/Box2D/Common/b2BlockAllocator.h	/^const int32 b2_chunkSize = 16 * 1024;$/;"	v
b2_defaultFilter	include/Box2D/Dynamics/b2ContactManager.cpp	/^b2ContactFilter b2_defaultFilter;$/;"	v
b2_defaultListener	include/Box2D/Dynamics/b2ContactManager.cpp	/^b2ContactListener b2_defaultListener;$/;"	v
b2_dynamicBody	include/Box2D/Dynamics/b2Body.h	/^	b2_dynamicBody$/;"	e	enum:b2BodyType
b2_epsilon	include/Box2D/Common/b2Settings.h	38;"	d
b2_gjkCalls	include/Box2D/Collision/b2Distance.cpp	/^int32 b2_gjkCalls, b2_gjkIters, b2_gjkMaxIters;$/;"	v
b2_gjkIters	include/Box2D/Collision/b2Distance.cpp	/^int32 b2_gjkCalls, b2_gjkIters, b2_gjkMaxIters;$/;"	v
b2_gjkMaxIters	include/Box2D/Collision/b2Distance.cpp	/^int32 b2_gjkCalls, b2_gjkIters, b2_gjkMaxIters;$/;"	v
b2_kinematicBody	include/Box2D/Dynamics/b2Body.h	/^	b2_kinematicBody,$/;"	e	enum:b2BodyType
b2_linearSleepTolerance	include/Box2D/Common/b2Settings.h	122;"	d
b2_linearSlop	include/Box2D/Common/b2Settings.h	67;"	d
b2_maxAngularCorrection	include/Box2D/Common/b2Settings.h	97;"	d
b2_maxBlockSize	include/Box2D/Common/b2BlockAllocator.h	/^const int32 b2_maxBlockSize = 640;$/;"	v
b2_maxFloat	include/Box2D/Common/b2Settings.h	37;"	d
b2_maxLinearCorrection	include/Box2D/Common/b2Settings.h	93;"	d
b2_maxManifoldPoints	include/Box2D/Common/b2Settings.h	49;"	d
b2_maxPolygonVertices	include/Box2D/Common/b2Settings.h	53;"	d
b2_maxRotation	include/Box2D/Common/b2Settings.h	106;"	d
b2_maxRotationSquared	include/Box2D/Common/b2Settings.h	107;"	d
b2_maxStackEntries	include/Box2D/Common/b2StackAllocator.h	/^const int32 b2_maxStackEntries = 32;$/;"	v
b2_maxSubSteps	include/Box2D/Common/b2Settings.h	79;"	d
b2_maxTOIContacts	include/Box2D/Common/b2Settings.h	85;"	d
b2_maxTranslation	include/Box2D/Common/b2Settings.h	101;"	d
b2_maxTranslationSquared	include/Box2D/Common/b2Settings.h	102;"	d
b2_minPulleyLength	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^const float32 b2_minPulleyLength = 2.0f;$/;"	v
b2_nullFeature	include/Box2D/Collision/b2Collision.h	/^const uint8 b2_nullFeature = UCHAR_MAX;$/;"	v
b2_nullNode	include/Box2D/Collision/b2DynamicTree.h	25;"	d
b2_nullState	include/Box2D/Collision/b2Collision.h	/^	b2_nullState,		\/\/\/< point does not exist$/;"	e	enum:b2PointState
b2_persistState	include/Box2D/Collision/b2Collision.h	/^	b2_persistState,	\/\/\/< point persisted across the update$/;"	e	enum:b2PointState
b2_pi	include/Box2D/Common/b2Settings.h	39;"	d
b2_polygonRadius	include/Box2D/Common/b2Settings.h	76;"	d
b2_removeState	include/Box2D/Collision/b2Collision.h	/^	b2_removeState		\/\/\/< point was removed in the update$/;"	e	enum:b2PointState
b2_stackSize	include/Box2D/Common/b2StackAllocator.h	/^const int32 b2_stackSize = 100 * 1024;	\/\/ 100k$/;"	v
b2_staticBody	include/Box2D/Dynamics/b2Body.h	/^	b2_staticBody = 0,$/;"	e	enum:b2BodyType
b2_timeToSleep	include/Box2D/Common/b2Settings.h	119;"	d
b2_toiBaugarte	include/Box2D/Common/b2Settings.h	113;"	d
b2_toiMaxRootIters	include/Box2D/Collision/b2TimeOfImpact.cpp	/^int32 b2_toiRootIters, b2_toiMaxRootIters;$/;"	v
b2_toiRootIters	include/Box2D/Collision/b2TimeOfImpact.cpp	/^int32 b2_toiRootIters, b2_toiMaxRootIters;$/;"	v
b2_velocityThreshold	include/Box2D/Common/b2Settings.h	89;"	d
b2_version	include/Box2D/Common/b2Settings.cpp	/^b2Version b2_version = {2, 2, 1};$/;"	v
baseLog	util/logObject.cpp	/^util::baseLog::baseLog(){};$/;"	f	class:util::baseLog
baseLog	util/logObject.h	/^	class baseLog{$/;"	c	namespace:util
baseProperty	core/Property.h	/^	baseProperty(){};$/;"	f	class:baseProperty
baseProperty	core/Property.h	/^class baseProperty{$/;"	c
bitsPerPixel	include/SFML/Window/VideoMode.hpp	/^    unsigned int bitsPerPixel; \/\/\/< Video mode pixel depth, in bits per pixels$/;"	m	class:sf::VideoMode
blendMode	include/SFML/Graphics/RenderStates.hpp	/^    BlendMode      blendMode; \/\/\/< Blending mode$/;"	m	class:sf::RenderStates
blockSize	include/Box2D/Common/b2BlockAllocator.cpp	/^	int32 blockSize;$/;"	m	struct:b2Chunk	file:
blocks	include/Box2D/Common/b2BlockAllocator.cpp	/^	b2Block* blocks;$/;"	m	struct:b2Chunk	file:
bodyA	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Body* bodyA;$/;"	m	struct:b2JointDef
bodyB	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Body* bodyB;$/;"	m	struct:b2JointDef
bounds	include/SFML/Graphics/Glyph.hpp	/^    IntRect bounds;      \/\/\/< Bounding rectangle of the glyph, in coordinates relative to the baseline$/;"	m	class:sf::Glyph
broadPhase	include/Box2D/Dynamics/b2World.cpp	/^	const b2BroadPhase* broadPhase;$/;"	m	struct:b2WorldQueryWrapper	file:
broadPhase	include/Box2D/Dynamics/b2World.cpp	/^	const b2BroadPhase* broadPhase;$/;"	m	struct:b2WorldRayCastWrapper	file:
broadphase	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 broadphase;$/;"	m	struct:b2Profile
bullet	include/Box2D/Dynamics/b2Body.h	/^	bool bullet;$/;"	m	struct:b2BodyDef
button	include/SFML/Window/Event.hpp	/^        Mouse::Button button; \/\/\/< Code of the button that has been pressed$/;"	m	struct:sf::Event::MouseButtonEvent
button	include/SFML/Window/Event.hpp	/^        unsigned int button;     \/\/\/< Index of the button that has been pressed (in range [0 .. Joystick::ButtonCount - 1])$/;"	m	struct:sf::Event::JoystickButtonEvent
c	include/Box2D/Common/b2Math.h	/^	b2Vec2 c0, c;		\/\/\/< center world positions$/;"	m	struct:b2Sweep
c	include/Box2D/Common/b2Math.h	/^	float32 s, c;$/;"	m	struct:b2Rot
c	include/Box2D/Dynamics/b2TimeStep.h	/^	b2Vec2 c;$/;"	m	struct:b2Position
c0	include/Box2D/Common/b2Math.h	/^	b2Vec2 c0, c;		\/\/\/< center world positions$/;"	m	struct:b2Sweep
callback	include/Box2D/Dynamics/b2World.cpp	/^	b2QueryCallback* callback;$/;"	m	struct:b2WorldQueryWrapper	file:
callback	include/Box2D/Dynamics/b2World.cpp	/^	b2RayCastCallback* callback;$/;"	m	struct:b2WorldRayCastWrapper	file:
categoryBits	include/Box2D/Dynamics/b2Fixture.h	/^	uint16 categoryBits;$/;"	m	struct:b2Filter
center	include/Box2D/Collision/Shapes/b2Shape.h	/^	b2Vec2 center;$/;"	m	struct:b2MassData
cf	include/Box2D/Collision/b2Collision.h	/^	b2ContactFeature cf;$/;"	m	union:b2ContactID
child1	include/Box2D/Collision/b2DynamicTree.h	/^	int32 child1;$/;"	m	struct:b2TreeNode
child2	include/Box2D/Collision/b2DynamicTree.h	/^	int32 child2;$/;"	m	struct:b2TreeNode
childIndex	include/Box2D/Dynamics/b2Fixture.h	/^	int32 childIndex;$/;"	m	struct:b2FixtureProxy
code	include/SFML/Window/Event.hpp	/^        Keyboard::Key code;    \/\/\/< Code of the key that has been pressed$/;"	m	struct:sf::Event::KeyEvent
collide	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 collide;$/;"	m	struct:b2Profile
collideConnected	include/Box2D/Dynamics/Joints/b2Joint.h	/^	bool collideConnected;$/;"	m	struct:b2JointDef
color	include/SFML/Graphics/Vertex.hpp	/^    Color     color;     \/\/\/< Color of the vertex$/;"	m	class:sf::Vertex
contact	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Contact* contact;		\/\/\/< the contact$/;"	m	struct:b2ContactEdge
contactIndex	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	int32 contactIndex;$/;"	m	struct:b2ContactVelocityConstraint
contacts	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Contact** contacts;$/;"	m	struct:b2ContactSolverDef
control	include/SFML/Window/Event.hpp	/^        bool          control; \/\/\/< Is the Control key pressed?$/;"	m	struct:sf::Event::KeyEvent
count	include/Box2D/Collision/b2CollideEdge.cpp	/^	int32 count;$/;"	m	struct:b2TempPolygon	file:
count	include/Box2D/Collision/b2Distance.h	/^	uint16 count;$/;"	m	struct:b2SimplexCache
count	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	int32 count;$/;"	m	struct:b2ContactSolverDef
count	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	int32 count;$/;"	m	struct:b2ContactImpulse
count	include/Box2D/Rope/b2Rope.h	/^	int32 count;$/;"	m	struct:b2RopeDef
createFcn	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2ContactCreateFcn* createFcn;$/;"	m	struct:b2ContactRegister
damping	include/Box2D/Rope/b2Rope.h	/^	float32 damping;$/;"	m	struct:b2RopeDef
dampingRatio	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2DistanceJointDef
dampingRatio	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2MouseJointDef
dampingRatio	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2WeldJointDef
dampingRatio	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2WheelJointDef
data	include/Box2D/Common/b2StackAllocator.h	/^	char* data;$/;"	m	struct:b2StackEntry
dataIt	core/Object.h	/^	typedef std::map<const Hash*, void *>::iterator dataIt;$/;"	t	class:Object
dataMap	core/Object.h	/^	std::map<const Hash*, void *>dataMap;$/;"	m	class:Object
delta	include/SFML/Window/Event.hpp	/^        int delta; \/\/\/< Number of ticks the wheel has moved (positive is up, negative is down)$/;"	m	struct:sf::Event::MouseWheelEvent
density	include/Box2D/Dynamics/b2Fixture.h	/^	float32 density;$/;"	m	struct:b2FixtureDef
depthBits	include/SFML/Window/ContextSettings.hpp	/^    unsigned int depthBits;         \/\/\/< Bits of the depth buffer$/;"	m	struct:sf::ContextSettings
destroyFcn	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2ContactDestroyFcn* destroyFcn;$/;"	m	struct:b2ContactRegister
distance	include/Box2D/Collision/b2Distance.h	/^	float32 distance;$/;"	m	struct:b2DistanceOutput
dt	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 dt;			\/\/ time step$/;"	m	struct:b2TimeStep
dtRatio	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 dtRatio;	\/\/ dt * inv_dt0$/;"	m	struct:b2TimeStep
e_aabbBit	include/Box2D/Common/b2Draw.h	/^		e_aabbBit				= 0x0004,	\/\/\/< draw axis aligned bounding boxes$/;"	e	enum:b2Draw::__anon13
e_activeFlag	include/Box2D/Dynamics/b2Body.h	/^		e_activeFlag		= 0x0020,$/;"	e	enum:b2Body::__anon8
e_atLowerLimit	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_atLowerLimit,$/;"	e	enum:b2LimitState
e_atUpperLimit	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_atUpperLimit,$/;"	e	enum:b2LimitState
e_autoSleepFlag	include/Box2D/Dynamics/b2Body.h	/^		e_autoSleepFlag		= 0x0004,$/;"	e	enum:b2Body::__anon8
e_awakeFlag	include/Box2D/Dynamics/b2Body.h	/^		e_awakeFlag			= 0x0002,$/;"	e	enum:b2Body::__anon8
e_bulletFlag	include/Box2D/Dynamics/b2Body.h	/^		e_bulletFlag		= 0x0008,$/;"	e	enum:b2Body::__anon8
e_bulletHitFlag	include/Box2D/Dynamics/Contacts/b2Contact.h	/^		e_bulletHitFlag		= 0x0010,$/;"	e	enum:b2Contact::__anon10
e_centerOfMassBit	include/Box2D/Common/b2Draw.h	/^		e_centerOfMassBit		= 0x0010	\/\/\/< draw center of mass frame$/;"	e	enum:b2Draw::__anon13
e_chain	include/Box2D/Collision/Shapes/b2Shape.h	/^		e_chain = 3,$/;"	e	enum:b2Shape::Type
e_circle	include/Box2D/Collision/Shapes/b2Shape.h	/^		e_circle = 0,$/;"	e	enum:b2Shape::Type
e_circles	include/Box2D/Collision/b2Collision.h	/^		e_circles,$/;"	e	enum:b2Manifold::Type
e_clearForces	include/Box2D/Dynamics/b2World.h	/^		e_clearForces	= 0x0004$/;"	e	enum:b2World::__anon9
e_concave	include/Box2D/Collision/b2CollideEdge.cpp	/^		e_concave,$/;"	e	enum:b2EPCollider::VertexType	file:
e_convex	include/Box2D/Collision/b2CollideEdge.cpp	/^		e_convex$/;"	e	enum:b2EPCollider::VertexType	file:
e_distanceJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_distanceJoint,$/;"	e	enum:b2JointType
e_edge	include/Box2D/Collision/Shapes/b2Shape.h	/^		e_edge = 1,$/;"	e	enum:b2Shape::Type
e_edgeA	include/Box2D/Collision/b2CollideEdge.cpp	/^		e_edgeA,$/;"	e	enum:b2EPAxis::Type	file:
e_edgeB	include/Box2D/Collision/b2CollideEdge.cpp	/^		e_edgeB$/;"	e	enum:b2EPAxis::Type	file:
e_enabledFlag	include/Box2D/Dynamics/Contacts/b2Contact.h	/^		e_enabledFlag		= 0x0004,$/;"	e	enum:b2Contact::__anon10
e_equalLimits	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_equalLimits$/;"	e	enum:b2LimitState
e_face	include/Box2D/Collision/b2Collision.h	/^		e_face = 1$/;"	e	enum:b2ContactFeature::Type
e_faceA	include/Box2D/Collision/b2Collision.h	/^		e_faceA,$/;"	e	enum:b2Manifold::Type
e_faceA	include/Box2D/Collision/b2TimeOfImpact.cpp	/^		e_faceA,$/;"	e	enum:b2SeparationFunction::Type	file:
e_faceB	include/Box2D/Collision/b2Collision.h	/^		e_faceB$/;"	e	enum:b2Manifold::Type
e_faceB	include/Box2D/Collision/b2TimeOfImpact.cpp	/^		e_faceB$/;"	e	enum:b2SeparationFunction::Type	file:
e_failed	include/Box2D/Collision/b2TimeOfImpact.h	/^		e_failed,$/;"	e	enum:b2TOIOutput::State
e_filterFlag	include/Box2D/Dynamics/Contacts/b2Contact.h	/^		e_filterFlag		= 0x0008,$/;"	e	enum:b2Contact::__anon10
e_fixedRotationFlag	include/Box2D/Dynamics/b2Body.h	/^		e_fixedRotationFlag	= 0x0010,$/;"	e	enum:b2Body::__anon8
e_frictionJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_frictionJoint,$/;"	e	enum:b2JointType
e_gearJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_gearJoint,$/;"	e	enum:b2JointType
e_inactiveLimit	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_inactiveLimit,$/;"	e	enum:b2LimitState
e_islandFlag	include/Box2D/Dynamics/Contacts/b2Contact.h	/^		e_islandFlag		= 0x0001,$/;"	e	enum:b2Contact::__anon10
e_islandFlag	include/Box2D/Dynamics/b2Body.h	/^		e_islandFlag		= 0x0001,$/;"	e	enum:b2Body::__anon8
e_isolated	include/Box2D/Collision/b2CollideEdge.cpp	/^		e_isolated,$/;"	e	enum:b2EPCollider::VertexType	file:
e_jointBit	include/Box2D/Common/b2Draw.h	/^		e_jointBit				= 0x0002,	\/\/\/< draw joint connections$/;"	e	enum:b2Draw::__anon13
e_locked	include/Box2D/Dynamics/b2World.h	/^		e_locked		= 0x0002,$/;"	e	enum:b2World::__anon9
e_mouseJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_mouseJoint,$/;"	e	enum:b2JointType
e_newFixture	include/Box2D/Dynamics/b2World.h	/^		e_newFixture	= 0x0001,$/;"	e	enum:b2World::__anon9
e_nullProxy	include/Box2D/Collision/b2BroadPhase.h	/^		e_nullProxy = -1$/;"	e	enum:b2BroadPhase::__anon11
e_overlapped	include/Box2D/Collision/b2TimeOfImpact.h	/^		e_overlapped,$/;"	e	enum:b2TOIOutput::State
e_pairBit	include/Box2D/Common/b2Draw.h	/^		e_pairBit				= 0x0008,	\/\/\/< draw broad-phase pairs$/;"	e	enum:b2Draw::__anon13
e_points	include/Box2D/Collision/b2TimeOfImpact.cpp	/^		e_points,$/;"	e	enum:b2SeparationFunction::Type	file:
e_polygon	include/Box2D/Collision/Shapes/b2Shape.h	/^		e_polygon = 2,$/;"	e	enum:b2Shape::Type
e_prismaticJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_prismaticJoint,$/;"	e	enum:b2JointType
e_pulleyJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_pulleyJoint,$/;"	e	enum:b2JointType
e_revoluteJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_revoluteJoint,$/;"	e	enum:b2JointType
e_ropeJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_ropeJoint$/;"	e	enum:b2JointType
e_separated	include/Box2D/Collision/b2TimeOfImpact.h	/^		e_separated$/;"	e	enum:b2TOIOutput::State
e_shapeBit	include/Box2D/Common/b2Draw.h	/^		e_shapeBit				= 0x0001,	\/\/\/< draw shapes$/;"	e	enum:b2Draw::__anon13
e_toiFlag	include/Box2D/Dynamics/Contacts/b2Contact.h	/^		e_toiFlag			= 0x0020$/;"	e	enum:b2Contact::__anon10
e_toiFlag	include/Box2D/Dynamics/b2Body.h	/^		e_toiFlag			= 0x0040$/;"	e	enum:b2Body::__anon8
e_touching	include/Box2D/Collision/b2TimeOfImpact.h	/^		e_touching,$/;"	e	enum:b2TOIOutput::State
e_touchingFlag	include/Box2D/Dynamics/Contacts/b2Contact.h	/^		e_touchingFlag		= 0x0002,$/;"	e	enum:b2Contact::__anon10
e_typeCount	include/Box2D/Collision/Shapes/b2Shape.h	/^		e_typeCount = 4$/;"	e	enum:b2Shape::Type
e_unknown	include/Box2D/Collision/b2CollideEdge.cpp	/^		e_unknown,$/;"	e	enum:b2EPAxis::Type	file:
e_unknown	include/Box2D/Collision/b2TimeOfImpact.h	/^		e_unknown,$/;"	e	enum:b2TOIOutput::State
e_unknownJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_unknownJoint,$/;"	e	enum:b2JointType
e_vertex	include/Box2D/Collision/b2Collision.h	/^		e_vertex = 0,$/;"	e	enum:b2ContactFeature::Type
e_weldJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^    e_weldJoint,$/;"	e	enum:b2JointType
e_wheelJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_wheelJoint,$/;"	e	enum:b2JointType
enableLimit	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	bool enableLimit;$/;"	m	struct:b2PrismaticJointDef
enableLimit	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	bool enableLimit;$/;"	m	struct:b2RevoluteJointDef
enableMotor	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	bool enableMotor;$/;"	m	struct:b2PrismaticJointDef
enableMotor	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	bool enableMotor;$/;"	m	struct:b2RevoluteJointDef
enableMotor	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	bool enableMotor;$/;"	m	struct:b2WheelJointDef
enabled	util/logObject.h	/^		bool enabled;$/;"	m	class:util::scopedLog
ex	include/Box2D/Common/b2Math.h	/^	b2Vec2 ex, ey;$/;"	m	struct:b2Mat22
ex	include/Box2D/Common/b2Math.h	/^	b2Vec3 ex, ey, ez;$/;"	m	struct:b2Mat33
ey	include/Box2D/Common/b2Math.h	/^	b2Vec2 ex, ey;$/;"	m	struct:b2Mat22
ey	include/Box2D/Common/b2Math.h	/^	b2Vec3 ex, ey, ez;$/;"	m	struct:b2Mat33
ez	include/Box2D/Common/b2Math.h	/^	b2Vec3 ex, ey, ez;$/;"	m	struct:b2Mat33
filter	include/Box2D/Dynamics/b2Fixture.h	/^	b2Filter filter;$/;"	m	struct:b2FixtureDef
fixedRotation	include/Box2D/Dynamics/b2Body.h	/^	bool fixedRotation;$/;"	m	struct:b2BodyDef
fixture	include/Box2D/Dynamics/b2Fixture.h	/^	b2Fixture* fixture;$/;"	m	struct:b2FixtureProxy
float32	include/Box2D/Common/b2Settings.h	/^typedef float float32;$/;"	t
float64	include/Box2D/Common/b2Settings.h	/^typedef double float64;$/;"	t
floatProperty	core/Property.h	/^typedef Property<float, TYPE_FLOAT> floatProperty;$/;"	t
fraction	include/Box2D/Collision/b2Collision.h	/^	float32 fraction;$/;"	m	struct:b2RayCastOutput
frequencyHz	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2DistanceJointDef
frequencyHz	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2MouseJointDef
frequencyHz	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2WeldJointDef
frequencyHz	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2WheelJointDef
friction	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 friction;$/;"	m	struct:b2ContactVelocityConstraint
friction	include/Box2D/Dynamics/b2Fixture.h	/^	float32 friction;$/;"	m	struct:b2FixtureDef
g	include/Box2D/Common/b2Draw.h	/^	float32 r, g, b;$/;"	m	struct:b2Color
g	include/SFML/Graphics/Color.hpp	/^    Uint8 g; \/\/\/< Green component$/;"	m	class:sf::Color
getBaseProperty	core/Object.h	/^	baseProperty *getBaseProperty(const Hash *name){$/;"	f	class:Object
getHash	core/Hash.cpp	/^const Hash* Hash::getHash(std::string str){$/;"	f	class:Hash
getType	core/Property.h	/^	propertyType getType(){$/;"	f	class:Property
getVal	core/Hash.cpp	/^uint64_t Hash::getVal() const{$/;"	f	class:Hash
getVal	core/Property.h	/^	T getVal(){$/;"	f	class:Property
glStatesSet	include/SFML/Graphics/RenderTarget.hpp	/^        bool      glStatesSet;    \/\/\/< Are our internal GL states set yet?$/;"	m	struct:sf::RenderTarget::StatesCache
glyphs	include/SFML/Graphics/Font.hpp	/^        GlyphTable       glyphs;  \/\/\/< Table mapping code points to their corresponding glyph$/;"	m	struct:sf::Font::Page
gravity	include/Box2D/Rope/b2Rope.h	/^	b2Vec2 gravity;$/;"	m	struct:b2RopeDef
gravityScale	include/Box2D/Dynamics/b2Body.h	/^	float32 gravityScale;$/;"	m	struct:b2BodyDef
groundAnchorA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 groundAnchorA;$/;"	m	struct:b2PulleyJointDef
groundAnchorB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 groundAnchorB;$/;"	m	struct:b2PulleyJointDef
groupIndex	include/Box2D/Dynamics/b2Fixture.h	/^	int16 groupIndex;$/;"	m	struct:b2Filter
hasSameValue	core/Property.h	/^	bool hasSameValue(Property &other){$/;"	f	class:Property
hashMap	core/Hash.cpp	/^std::map<std::string, Hash* > Hash::hashMap;$/;"	m	class:Hash	file:
hashMap	core/Hash.h	/^	static HashMap hashMap;$/;"	m	class:Hash
hashMapIt	core/Hash.h	/^	typedef HashMap::iterator hashMapIt;$/;"	t	class:Hash
hashedVal	core/Hash.h	/^	uint64_t hashedVal;$/;"	m	class:Hash
height	include/Box2D/Collision/b2DynamicTree.h	/^	int32 height;$/;"	m	struct:b2TreeNode
height	include/SFML/Graphics/Font.hpp	/^        unsigned int height; \/\/\/< Height of the row$/;"	m	struct:sf::Font::Row
height	include/SFML/Graphics/Rect.hpp	/^    T height; \/\/\/< Height of the rectangle$/;"	m	class:sf::Rect
height	include/SFML/Window/Event.hpp	/^        unsigned int height; \/\/\/< New height, in pixels$/;"	m	struct:sf::Event::SizeEvent
height	include/SFML/Window/VideoMode.hpp	/^    unsigned int height;       \/\/\/< Video mode height, in pixels$/;"	m	class:sf::VideoMode
i1	include/Box2D/Collision/b2CollideEdge.cpp	/^	int32 i1, i2;$/;"	m	struct:b2ReferenceFace	file:
i2	include/Box2D/Collision/b2CollideEdge.cpp	/^	int32 i1, i2;$/;"	m	struct:b2ReferenceFace	file:
id	include/Box2D/Collision/b2Collision.h	/^	b2ContactID id;			\/\/\/< uniquely identifies a contact point between two shapes$/;"	m	struct:b2ManifoldPoint
id	include/Box2D/Collision/b2Collision.h	/^	b2ContactID id;$/;"	m	struct:b2ClipVertex
index	include/Box2D/Collision/b2CollideEdge.cpp	/^	int32 index;$/;"	m	struct:b2EPAxis	file:
indexA	include/Box2D/Collision/b2Collision.h	/^	uint8 indexA;		\/\/\/< Feature index on shapeA$/;"	m	struct:b2ContactFeature
indexA	include/Box2D/Collision/b2Distance.cpp	/^	int32 indexA;	\/\/ wA index$/;"	m	struct:b2SimplexVertex	file:
indexA	include/Box2D/Collision/b2Distance.h	/^	uint8 indexA[3];	\/\/\/< vertices on shape A$/;"	m	struct:b2SimplexCache
indexA	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	int32 indexA;$/;"	m	struct:b2ContactPositionConstraint	file:
indexA	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	int32 indexA;$/;"	m	struct:b2ContactVelocityConstraint
indexB	include/Box2D/Collision/b2Collision.h	/^	uint8 indexB;		\/\/\/< Feature index on shapeB$/;"	m	struct:b2ContactFeature
indexB	include/Box2D/Collision/b2Distance.cpp	/^	int32 indexB;	\/\/ wB index$/;"	m	struct:b2SimplexVertex	file:
indexB	include/Box2D/Collision/b2Distance.h	/^	uint8 indexB[3];	\/\/\/< vertices on shape B$/;"	m	struct:b2SimplexCache
indexB	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	int32 indexB;$/;"	m	struct:b2ContactPositionConstraint	file:
indexB	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	int32 indexB;$/;"	m	struct:b2ContactVelocityConstraint
int16	include/Box2D/Common/b2Settings.h	/^typedef signed short int16;$/;"	t
int32	include/Box2D/Common/b2Settings.h	/^typedef signed int int32;$/;"	t
int8	include/Box2D/Common/b2Settings.h	/^typedef signed char	int8;$/;"	t
intProperty	core/Property.h	/^typedef Property<int, TYPE_INT> intProperty;$/;"	t
invIA	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactPositionConstraint	file:
invIA	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactVelocityConstraint
invIB	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactPositionConstraint	file:
invIB	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactVelocityConstraint
invMassA	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactPositionConstraint	file:
invMassA	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactVelocityConstraint
invMassB	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactPositionConstraint	file:
invMassB	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactVelocityConstraint
inv_dt	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 inv_dt;		\/\/ inverse time step (0 if dt == 0).$/;"	m	struct:b2TimeStep
isSameType	core/Property.h	/^	bool isSameType(Property &other){$/;"	f	class:Property
isSensor	include/Box2D/Dynamics/b2Fixture.h	/^	bool isSensor;$/;"	m	struct:b2FixtureDef
iterations	include/Box2D/Collision/b2Distance.h	/^	int32 iterations;	\/\/\/< number of GJK iterations used$/;"	m	struct:b2DistanceOutput
joint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Joint* joint;			\/\/\/< the joint$/;"	m	struct:b2JointEdge
joint1	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Joint* joint1;$/;"	m	struct:b2GearJointDef
joint2	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Joint* joint2;$/;"	m	struct:b2GearJointDef
joystickButton	include/SFML/Window/Event.hpp	/^        JoystickButtonEvent  joystickButton;  \/\/\/< Joystick button event parameters (Event::JoystickButtonPressed, Event::JoystickButtonReleased)$/;"	m	union:sf::Event::__anon4
joystickConnect	include/SFML/Window/Event.hpp	/^        JoystickConnectEvent joystickConnect; \/\/\/< Joystick (dis)connect event parameters (Event::JoystickConnected, Event::JoystickDisconnected)$/;"	m	union:sf::Event::__anon4
joystickId	include/SFML/Window/Event.hpp	/^        unsigned int   joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count - 1])$/;"	m	struct:sf::Event::JoystickMoveEvent
joystickId	include/SFML/Window/Event.hpp	/^        unsigned int joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count - 1])$/;"	m	struct:sf::Event::JoystickButtonEvent
joystickId	include/SFML/Window/Event.hpp	/^        unsigned int joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count - 1])$/;"	m	struct:sf::Event::JoystickConnectEvent
joystickMove	include/SFML/Window/Event.hpp	/^        JoystickMoveEvent    joystickMove;    \/\/\/< Joystick move event parameters (Event::JoystickMoved)$/;"	m	union:sf::Event::__anon4
k2	include/Box2D/Rope/b2Rope.h	/^	float32 k2;$/;"	m	struct:b2RopeDef
k3	include/Box2D/Rope/b2Rope.h	/^	float32 k3;$/;"	m	struct:b2RopeDef
key	include/Box2D/Collision/b2Collision.h	/^	uint32 key;					\/\/\/< Used to quickly compare contact ids.$/;"	m	union:b2ContactID
key	include/SFML/Window/Event.hpp	/^        KeyEvent             key;             \/\/\/< Key event parameters (Event::KeyPressed, Event::KeyReleased)$/;"	m	union:sf::Event::__anon4
lastBlendMode	include/SFML/Graphics/RenderTarget.hpp	/^        BlendMode lastBlendMode;  \/\/\/< Cached blending mode$/;"	m	struct:sf::RenderTarget::StatesCache
lastTextureId	include/SFML/Graphics/RenderTarget.hpp	/^        Uint64    lastTextureId;  \/\/\/< Cached texture$/;"	m	struct:sf::RenderTarget::StatesCache
left	include/SFML/Graphics/Rect.hpp	/^    T left;   \/\/\/< Left coordinate of the rectangle$/;"	m	class:sf::Rect
length	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 length;$/;"	m	struct:b2DistanceJointDef
lengthA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 lengthA;$/;"	m	struct:b2PulleyJointDef
lengthB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 lengthB;$/;"	m	struct:b2PulleyJointDef
linear	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Vec2 linear;$/;"	m	struct:b2Jacobian
linearDamping	include/Box2D/Dynamics/b2Body.h	/^	float32 linearDamping;$/;"	m	struct:b2BodyDef
linearVelocity	include/Box2D/Dynamics/b2Body.h	/^	b2Vec2 linearVelocity;$/;"	m	struct:b2BodyDef
localAnchorA	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2DistanceJointDef
localAnchorA	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2FrictionJointDef
localAnchorA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2PrismaticJointDef
localAnchorA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2PulleyJointDef
localAnchorA	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2RevoluteJointDef
localAnchorA	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2RopeJointDef
localAnchorA	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2WeldJointDef
localAnchorA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2WheelJointDef
localAnchorB	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2DistanceJointDef
localAnchorB	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2FrictionJointDef
localAnchorB	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2PrismaticJointDef
localAnchorB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2PulleyJointDef
localAnchorB	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2RevoluteJointDef
localAnchorB	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2RopeJointDef
localAnchorB	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2WeldJointDef
localAnchorB	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2WheelJointDef
localAxisA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 localAxisA;$/;"	m	struct:b2PrismaticJointDef
localAxisA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 localAxisA;$/;"	m	struct:b2WheelJointDef
localCenter	include/Box2D/Common/b2Math.h	/^	b2Vec2 localCenter;	\/\/\/< local center of mass position$/;"	m	struct:b2Sweep
localCenterA	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 localCenterA, localCenterB;$/;"	m	struct:b2ContactPositionConstraint	file:
localCenterB	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 localCenterA, localCenterB;$/;"	m	struct:b2ContactPositionConstraint	file:
localNormal	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 localNormal;								\/\/\/< not use for Type::e_points$/;"	m	struct:b2Manifold
localNormal	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 localNormal;$/;"	m	struct:b2ContactPositionConstraint	file:
localPoint	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 localPoint;								\/\/\/< usage depends on manifold type$/;"	m	struct:b2Manifold
localPoint	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 localPoint;		\/\/\/< usage depends on manifold type$/;"	m	struct:b2ManifoldPoint
localPoint	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 localPoint;$/;"	m	struct:b2ContactPositionConstraint	file:
localPoints	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 localPoints[b2_maxManifoldPoints];$/;"	m	struct:b2ContactPositionConstraint	file:
logLevel	util/logObject.h	/^	enum logLevel{$/;"	g	namespace:util
logLevelError	util/logObject.h	/^		logLevelError,$/;"	e	enum:util::logLevel
logLevelInfo	util/logObject.h	/^		logLevelInfo = 0,$/;"	e	enum:util::logLevel
logLevelWarning	util/logObject.h	/^		logLevelWarning,$/;"	e	enum:util::logLevel
lowerAngle	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 lowerAngle;$/;"	m	struct:b2RevoluteJointDef
lowerBound	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 lowerBound;	\/\/\/< the lower vertex$/;"	m	struct:b2AABB
lowerTranslation	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 lowerTranslation;$/;"	m	struct:b2PrismaticJointDef
m_C	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 m_C;$/;"	m	class:b2MouseJoint
m_I	include/Box2D/Dynamics/b2Body.h	/^	float32 m_I, m_invI;$/;"	m	class:b2Body
m_JvAC	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_JvAC, m_JvBD;$/;"	m	class:b2GearJoint
m_JvBD	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_JvAC, m_JvBD;$/;"	m	class:b2GearJoint
m_JwA	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint
m_JwB	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint
m_JwC	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint
m_JwD	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint
m_K	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Mat33 m_K;$/;"	m	class:b2PrismaticJoint
m_Ls	include/Box2D/Rope/b2Rope.h	/^	float32* m_Ls;$/;"	m	class:b2Rope
m_a1	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_a1, m_a2;$/;"	m	class:b2PrismaticJoint
m_a2	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_a1, m_a2;$/;"	m	class:b2PrismaticJoint
m_actualSize	include/SFML/Graphics/Texture.hpp	/^    Vector2u     m_actualSize;    \/\/\/< Actual texture size (can be greater than public size because of padding)$/;"	m	class:sf::Texture
m_address	include/SFML/Network/IpAddress.hpp	/^    Uint32 m_address; \/\/\/< Address stored as an unsigned 32 bits integer$/;"	m	class:sf::IpAddress
m_allocation	include/Box2D/Common/b2StackAllocator.h	/^	int32 m_allocation;$/;"	m	class:b2StackAllocator
m_allocator	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2StackAllocator* m_allocator;$/;"	m	class:b2ContactSolver
m_allocator	include/Box2D/Dynamics/b2ContactManager.h	/^	b2BlockAllocator* m_allocator;$/;"	m	class:b2ContactManager
m_allocator	include/Box2D/Dynamics/b2Island.h	/^	b2StackAllocator* m_allocator;$/;"	m	class:b2Island
m_allowSleep	include/Box2D/Dynamics/b2World.h	/^	bool m_allowSleep;$/;"	m	class:b2World
m_angularDamping	include/Box2D/Dynamics/b2Body.h	/^	float32 m_angularDamping;$/;"	m	class:b2Body
m_angularImpulse	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_angularImpulse;$/;"	m	class:b2FrictionJoint
m_angularMass	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_angularMass;$/;"	m	class:b2FrictionJoint
m_angularVelocity	include/Box2D/Dynamics/b2Body.h	/^	float32 m_angularVelocity;$/;"	m	class:b2Body
m_array	include/Box2D/Common/b2GrowableStack.h	/^	T m_array[N];$/;"	m	class:b2GrowableStack
m_as	include/Box2D/Rope/b2Rope.h	/^	float32* m_as;$/;"	m	class:b2Rope
m_ax	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_ax, m_ay;$/;"	m	class:b2WheelJoint
m_axis	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	b2Vec2 m_axis;$/;"	m	struct:b2SeparationFunction	file:
m_axis	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_axis, m_perp;$/;"	m	class:b2PrismaticJoint
m_ay	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_ax, m_ay;$/;"	m	class:b2WheelJoint
m_beta	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_beta;$/;"	m	class:b2MouseJoint
m_bias	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_bias;$/;"	m	class:b2DistanceJoint
m_bias	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_bias;$/;"	m	class:b2WeldJoint
m_bias	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_bias;$/;"	m	class:b2WheelJoint
m_blockAllocator	include/Box2D/Dynamics/b2World.h	/^	b2BlockAllocator m_blockAllocator;$/;"	m	class:b2World
m_bodies	include/Box2D/Dynamics/b2Island.h	/^	b2Body** m_bodies;$/;"	m	class:b2Island
m_body	include/Box2D/Dynamics/b2Fixture.h	/^	b2Body* m_body;$/;"	m	class:b2Fixture
m_body	include/SFML/Network/Http.hpp	/^        std::string  m_body;         \/\/\/< Body of the request$/;"	m	class:sf::Http::Request
m_body	include/SFML/Network/Http.hpp	/^        std::string  m_body;         \/\/\/< Body of the response$/;"	m	class:sf::Http::Response
m_bodyA	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Body* m_bodyA;$/;"	m	class:b2Joint
m_bodyB	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Body* m_bodyB;$/;"	m	class:b2Joint
m_bodyC	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Body* m_bodyC;$/;"	m	class:b2GearJoint
m_bodyCapacity	include/Box2D/Dynamics/b2Island.h	/^	int32 m_bodyCapacity;$/;"	m	class:b2Island
m_bodyCount	include/Box2D/Dynamics/b2Island.h	/^	int32 m_bodyCount;$/;"	m	class:b2Island
m_bodyCount	include/Box2D/Dynamics/b2World.h	/^	int32 m_bodyCount;$/;"	m	class:b2World
m_bodyD	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Body* m_bodyD;$/;"	m	class:b2GearJoint
m_bodyList	include/Box2D/Dynamics/b2World.h	/^	b2Body* m_bodyList;$/;"	m	class:b2World
m_bounds	include/SFML/Graphics/Shape.hpp	/^    FloatRect      m_bounds;           \/\/\/< Bounding rectangle of the whole shape (outline + fill)$/;"	m	class:sf::Shape
m_bounds	include/SFML/Graphics/Text.hpp	/^    FloatRect     m_bounds;        \/\/\/< Bounding rectangle of the text (in local coordinates)$/;"	m	class:sf::Text
m_broadPhase	include/Box2D/Dynamics/b2ContactManager.h	/^	b2BroadPhase m_broadPhase;$/;"	m	class:b2ContactManager
m_buffer	include/Box2D/Collision/b2Distance.h	/^	b2Vec2 m_buffer[2];$/;"	m	struct:b2DistanceProxy
m_buffer	include/SFML/Audio/Sound.hpp	/^    const SoundBuffer* m_buffer; \/\/\/< Sound buffer bound to the source$/;"	m	class:sf::Sound
m_buffer	include/SFML/Audio/SoundBuffer.hpp	/^    unsigned int       m_buffer;   \/\/\/< OpenAL buffer identifier$/;"	m	class:sf::SoundBuffer
m_buffer	include/SFML/Audio/SoundBufferRecorder.hpp	/^    SoundBuffer        m_buffer;  \/\/\/< Sound buffer that will contain the recorded data$/;"	m	class:sf::SoundBufferRecorder
m_buffer	include/SFML/Network/UdpSocket.hpp	/^    std::vector<char> m_buffer; \/\/\/< Temporary buffer holding the received data in Receive(Packet)$/;"	m	class:sf::UdpSocket
m_buffers	include/SFML/Audio/SoundStream.hpp	/^    unsigned int  m_buffers[BufferCount];    \/\/\/< Sound buffers used to store temporary audio data$/;"	m	class:sf::SoundStream
m_cache	include/SFML/Graphics/RenderTarget.hpp	/^    StatesCache m_cache;       \/\/\/< Render states cache$/;"	m	class:sf::RenderTarget
m_cacheId	include/SFML/Graphics/Texture.hpp	/^    Uint64       m_cacheId;       \/\/\/< Unique number that identifies the texture to the render target's cache$/;"	m	class:sf::Texture
m_capacity	include/Box2D/Common/b2GrowableStack.h	/^	int32 m_capacity;$/;"	m	class:b2GrowableStack
m_center	include/SFML/Graphics/View.hpp	/^    Vector2f          m_center;              \/\/\/< Center of the view, in scene coordinates$/;"	m	class:sf::View
m_centroid	include/Box2D/Collision/Shapes/b2PolygonShape.h	/^	b2Vec2 m_centroid;$/;"	m	class:b2PolygonShape
m_centroidB	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_centroidB;$/;"	m	struct:b2EPCollider	file:
m_channelCount	include/SFML/Audio/SoundStream.hpp	/^    unsigned int  m_channelCount;            \/\/\/< Number of channels (1 = mono, 2 = stereo, ...)$/;"	m	class:sf::SoundStream
m_characterSize	include/SFML/Graphics/Text.hpp	/^    unsigned int  m_characterSize; \/\/\/< Base size of characters, in pixels$/;"	m	class:sf::Text
m_chunkCount	include/Box2D/Common/b2BlockAllocator.h	/^	int32 m_chunkCount;$/;"	m	class:b2BlockAllocator
m_chunkSpace	include/Box2D/Common/b2BlockAllocator.h	/^	int32 m_chunkSpace;$/;"	m	class:b2BlockAllocator
m_chunks	include/Box2D/Common/b2BlockAllocator.h	/^	b2Chunk* m_chunks;$/;"	m	class:b2BlockAllocator
m_clock	include/SFML/Window/Window.hpp	/^    Clock             m_clock;          \/\/\/< Clock for measuring the elapsed time between frames$/;"	m	class:sf::Window
m_collideConnected	include/Box2D/Dynamics/Joints/b2Joint.h	/^	bool m_collideConnected;$/;"	m	class:b2Joint
m_color	include/SFML/Graphics/Text.hpp	/^    Color         m_color;         \/\/\/< Text color$/;"	m	class:sf::Text
m_commandSocket	include/SFML/Network/Ftp.hpp	/^    TcpSocket m_commandSocket; \/\/\/< Socket holding the control connection with the server$/;"	m	class:sf::Ftp
m_connection	include/SFML/Network/Http.hpp	/^    TcpSocket      m_connection; \/\/\/< Connection to the host$/;"	m	class:sf::Http
m_constant	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_constant;$/;"	m	class:b2GearJoint
m_constant	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_constant;$/;"	m	class:b2PulleyJoint
m_contactCapacity	include/Box2D/Dynamics/b2Island.h	/^	int32 m_contactCapacity;$/;"	m	class:b2Island
m_contactCount	include/Box2D/Dynamics/b2ContactManager.h	/^	int32 m_contactCount;$/;"	m	class:b2ContactManager
m_contactCount	include/Box2D/Dynamics/b2Island.h	/^	int32 m_contactCount;$/;"	m	class:b2Island
m_contactFilter	include/Box2D/Dynamics/b2ContactManager.h	/^	b2ContactFilter* m_contactFilter;$/;"	m	class:b2ContactManager
m_contactList	include/Box2D/Dynamics/b2Body.h	/^	b2ContactEdge* m_contactList;$/;"	m	class:b2Body
m_contactList	include/Box2D/Dynamics/b2ContactManager.h	/^	b2Contact* m_contactList;$/;"	m	class:b2ContactManager
m_contactListener	include/Box2D/Dynamics/b2ContactManager.h	/^	b2ContactListener* m_contactListener;$/;"	m	class:b2ContactManager
m_contactManager	include/Box2D/Dynamics/b2World.h	/^	b2ContactManager m_contactManager;$/;"	m	class:b2World
m_contacts	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Contact** m_contacts;$/;"	m	class:b2ContactSolver
m_contacts	include/Box2D/Dynamics/b2Island.h	/^	b2Contact** m_contacts;$/;"	m	class:b2Island
m_context	include/SFML/Window/Context.hpp	/^    priv::GlContext* m_context; \/\/\/< Internal OpenGL context$/;"	m	class:sf::Context
m_context	include/SFML/Window/Window.hpp	/^    priv::GlContext*  m_context;        \/\/\/< Platform-specific implementation of the OpenGL context$/;"	m	class:sf::Window
m_continuousPhysics	include/Box2D/Dynamics/b2World.h	/^	bool m_continuousPhysics;$/;"	m	class:b2World
m_count	include/Box2D/Collision/Shapes/b2ChainShape.h	/^	int32 m_count;$/;"	m	class:b2ChainShape
m_count	include/Box2D/Collision/b2Distance.cpp	/^	int32 m_count;$/;"	m	struct:b2Simplex	file:
m_count	include/Box2D/Collision/b2Distance.h	/^	int32 m_count;$/;"	m	struct:b2DistanceProxy
m_count	include/Box2D/Common/b2GrowableStack.h	/^	int32 m_count;$/;"	m	class:b2GrowableStack
m_count	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	int m_count;$/;"	m	class:b2ContactSolver
m_count	include/Box2D/Rope/b2Rope.h	/^	int32 m_count;$/;"	m	class:b2Rope
m_currentTexture	include/SFML/Graphics/Shader.hpp	/^    int          m_currentTexture; \/\/\/< Location of the current texture in the shader$/;"	m	class:sf::Shader
m_damping	include/Box2D/Rope/b2Rope.h	/^	float32 m_damping;$/;"	m	class:b2Rope
m_dampingRatio	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2DistanceJoint
m_dampingRatio	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2MouseJoint
m_dampingRatio	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2WeldJoint
m_dampingRatio	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2WheelJoint
m_data	include/Box2D/Common/b2StackAllocator.h	/^	char m_data[b2_stackSize];$/;"	m	class:b2StackAllocator
m_data	include/SFML/Network/Packet.hpp	/^    std::vector<char> m_data;    \/\/\/< Data stored in the packet$/;"	m	class:sf::Packet
m_debugDraw	include/Box2D/Dynamics/b2World.h	/^	b2Draw* m_debugDraw;$/;"	m	class:b2World
m_defaultView	include/SFML/Graphics/RenderTarget.hpp	/^    View        m_defaultView; \/\/\/< Default view$/;"	m	class:sf::RenderTarget
m_density	include/Box2D/Dynamics/b2Fixture.h	/^	float32 m_density;$/;"	m	class:b2Fixture
m_destructionListener	include/Box2D/Dynamics/b2World.h	/^	b2DestructionListener* m_destructionListener;$/;"	m	class:b2World
m_directory	include/SFML/Network/Ftp.hpp	/^        std::string m_directory; \/\/\/< Directory extracted from the response message$/;"	m	class:sf::Ftp::DirectoryResponse
m_drawFlags	include/Box2D/Common/b2Draw.h	/^	uint32 m_drawFlags;$/;"	m	class:b2Draw
m_duration	include/SFML/Audio/Music.hpp	/^    Time               m_duration; \/\/\/< Music duration$/;"	m	class:sf::Music
m_duration	include/SFML/Audio/SoundBuffer.hpp	/^    Time               m_duration; \/\/\/< Sound duration$/;"	m	class:sf::SoundBuffer
m_edgeA	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointEdge m_edgeA;$/;"	m	class:b2Joint
m_edgeB	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointEdge m_edgeB;$/;"	m	class:b2Joint
m_enableLimit	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	bool m_enableLimit;$/;"	m	class:b2PrismaticJoint
m_enableLimit	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	bool m_enableLimit;$/;"	m	class:b2RevoluteJoint
m_enableMotor	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	bool m_enableMotor;$/;"	m	class:b2PrismaticJoint
m_enableMotor	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	bool m_enableMotor;$/;"	m	class:b2RevoluteJoint
m_enableMotor	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	bool m_enableMotor;$/;"	m	class:b2WheelJoint
m_endBuffers	include/SFML/Audio/SoundStream.hpp	/^    bool          m_endBuffers[BufferCount]; \/\/\/< Each buffer is marked as "end buffer" or not, for proper duration calculation$/;"	m	class:sf::SoundStream
m_entries	include/Box2D/Common/b2StackAllocator.h	/^	b2StackEntry m_entries[b2_maxStackEntries];$/;"	m	class:b2StackAllocator
m_entryCount	include/Box2D/Common/b2StackAllocator.h	/^	int32 m_entryCount;$/;"	m	class:b2StackAllocator
m_entryPoint	include/SFML/System/Thread.hpp	/^    priv::ThreadFunc* m_entryPoint; \/\/\/< Abstraction of the function to run$/;"	m	class:sf::Thread
m_face	include/SFML/Graphics/Font.hpp	/^    void*                      m_face;        \/\/\/< Pointer to the internal font face (it is typeless to avoid exposing implementation details)$/;"	m	class:sf::Font
m_fields	include/SFML/Network/Http.hpp	/^        FieldTable   m_fields;       \/\/\/< Fields of the header associated to their value$/;"	m	class:sf::Http::Request
m_fields	include/SFML/Network/Http.hpp	/^        FieldTable   m_fields;       \/\/\/< Fields of the header$/;"	m	class:sf::Http::Response
m_file	include/SFML/Audio/Music.hpp	/^    priv::SoundFile*   m_file;     \/\/\/< Sound file$/;"	m	class:sf::Music
m_fillColor	include/SFML/Graphics/Shape.hpp	/^    Color          m_fillColor;        \/\/\/< Fill color$/;"	m	class:sf::Shape
m_filter	include/Box2D/Dynamics/b2Fixture.h	/^	b2Filter m_filter;$/;"	m	class:b2Fixture
m_fixtureA	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Fixture* m_fixtureA;$/;"	m	class:b2Contact
m_fixtureB	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Fixture* m_fixtureB;$/;"	m	class:b2Contact
m_fixtureCount	include/Box2D/Dynamics/b2Body.h	/^	int32 m_fixtureCount;$/;"	m	class:b2Body
m_fixtureList	include/Box2D/Dynamics/b2Body.h	/^	b2Fixture* m_fixtureList;$/;"	m	class:b2Body
m_flags	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	uint32 m_flags;$/;"	m	class:b2Contact
m_flags	include/Box2D/Dynamics/b2Body.h	/^	uint16 m_flags;$/;"	m	class:b2Body
m_flags	include/Box2D/Dynamics/b2World.h	/^	int32 m_flags;$/;"	m	class:b2World
m_font	include/SFML/Graphics/Text.hpp	/^    const Font*   m_font;          \/\/\/< Font used to display the string$/;"	m	class:sf::Text
m_force	include/Box2D/Dynamics/b2Body.h	/^	b2Vec2 m_force;$/;"	m	class:b2Body
m_format	include/SFML/Audio/SoundStream.hpp	/^    Uint32        m_format;                  \/\/\/< Format of the internal sound buffers$/;"	m	class:sf::SoundStream
m_frameTimeLimit	include/SFML/Window/Window.hpp	/^    Time              m_frameTimeLimit; \/\/\/< Current framerate limit$/;"	m	class:sf::Window
m_freeList	include/Box2D/Collision/b2DynamicTree.h	/^	int32 m_freeList;$/;"	m	class:b2DynamicTree
m_freeLists	include/Box2D/Common/b2BlockAllocator.h	/^	b2Block* m_freeLists[b2_blockSizes];$/;"	m	class:b2BlockAllocator
m_frequencyHz	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2DistanceJoint
m_frequencyHz	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2MouseJoint
m_frequencyHz	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2WeldJoint
m_frequencyHz	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2WheelJoint
m_friction	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	float32 m_friction;$/;"	m	class:b2Contact
m_friction	include/Box2D/Dynamics/b2Fixture.h	/^	float32 m_friction;$/;"	m	class:b2Fixture
m_front	include/Box2D/Collision/b2CollideEdge.cpp	/^	bool m_front;$/;"	m	struct:b2EPCollider	file:
m_gamma	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_gamma;$/;"	m	class:b2DistanceJoint
m_gamma	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_gamma;$/;"	m	class:b2MouseJoint
m_gamma	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_gamma;$/;"	m	class:b2WeldJoint
m_gamma	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_gamma;$/;"	m	class:b2WheelJoint
m_gravity	include/Box2D/Dynamics/b2World.h	/^	b2Vec2 m_gravity;$/;"	m	class:b2World
m_gravity	include/Box2D/Rope/b2Rope.h	/^	b2Vec2 m_gravity;$/;"	m	class:b2Rope
m_gravityScale	include/Box2D/Dynamics/b2Body.h	/^	float32 m_gravityScale;$/;"	m	class:b2Body
m_groundAnchorA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_groundAnchorA;$/;"	m	class:b2PulleyJoint
m_groundAnchorB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_groundAnchorB;$/;"	m	class:b2PulleyJoint
m_hasNextVertex	include/Box2D/Collision/Shapes/b2ChainShape.h	/^	bool m_hasPrevVertex, m_hasNextVertex;$/;"	m	class:b2ChainShape
m_hasPrevVertex	include/Box2D/Collision/Shapes/b2ChainShape.h	/^	bool m_hasPrevVertex, m_hasNextVertex;$/;"	m	class:b2ChainShape
m_hasVertex0	include/Box2D/Collision/Shapes/b2EdgeShape.h	/^	bool m_hasVertex0, m_hasVertex3;$/;"	m	class:b2EdgeShape
m_hasVertex3	include/Box2D/Collision/Shapes/b2EdgeShape.h	/^	bool m_hasVertex0, m_hasVertex3;$/;"	m	class:b2EdgeShape
m_host	include/SFML/Network/Http.hpp	/^    IpAddress      m_host;       \/\/\/< Web host address$/;"	m	class:sf::Http
m_hostName	include/SFML/Network/Http.hpp	/^    std::string    m_hostName;   \/\/\/< Web host name$/;"	m	class:sf::Http
m_iA	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint
m_iB	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint
m_iC	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint
m_iD	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint
m_impl	include/SFML/Graphics/RenderTexture.hpp	/^    priv::RenderTextureImpl* m_impl;    \/\/\/< Platform\/hardware specific implementation$/;"	m	class:sf::RenderTexture
m_impl	include/SFML/Network/SocketSelector.hpp	/^    SocketSelectorImpl* m_impl; \/\/\/< Opaque pointer to the implementation (which requires OS-specific types)$/;"	m	class:sf::SocketSelector
m_impl	include/SFML/System/Thread.hpp	/^    priv::ThreadImpl* m_impl;       \/\/\/< OS-specific implementation of the thread$/;"	m	class:sf::Thread
m_impl	include/SFML/System/ThreadLocal.hpp	/^    priv::ThreadLocalImpl* m_impl; \/\/\/< Pointer to the OS specific implementation$/;"	m	class:sf::ThreadLocal
m_impl	include/SFML/Window/Window.hpp	/^    priv::WindowImpl* m_impl;           \/\/\/< Platform-specific implementation of the window$/;"	m	class:sf::Window
m_impulse	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_impulse;$/;"	m	class:b2DistanceJoint
m_impulse	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_impulse;$/;"	m	class:b2GearJoint
m_impulse	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 m_impulse;$/;"	m	class:b2MouseJoint
m_impulse	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec3 m_impulse;$/;"	m	class:b2PrismaticJoint
m_impulse	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_impulse;$/;"	m	class:b2PulleyJoint
m_impulse	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec3 m_impulse;$/;"	m	class:b2RevoluteJoint
m_impulse	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_impulse;$/;"	m	class:b2RopeJoint
m_impulse	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec3 m_impulse;$/;"	m	class:b2WeldJoint
m_impulse	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_impulse;$/;"	m	class:b2WheelJoint
m_ims	include/Box2D/Rope/b2Rope.h	/^	float32* m_ims;$/;"	m	class:b2Rope
m_index	include/Box2D/Common/b2StackAllocator.h	/^	int32 m_index;$/;"	m	class:b2StackAllocator
m_index	include/Box2D/Dynamics/Joints/b2Joint.h	/^	int32 m_index;$/;"	m	class:b2Joint
m_indexA	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	int32 m_indexA;$/;"	m	class:b2Contact
m_indexA	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	int32 m_indexA;$/;"	m	class:b2DistanceJoint
m_indexA	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	int32 m_indexA;$/;"	m	class:b2FrictionJoint
m_indexA	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint
m_indexA	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	int32 m_indexA;$/;"	m	class:b2MouseJoint
m_indexA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	int32 m_indexA;$/;"	m	class:b2PrismaticJoint
m_indexA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	int32 m_indexA;$/;"	m	class:b2PulleyJoint
m_indexA	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	int32 m_indexA;$/;"	m	class:b2RevoluteJoint
m_indexA	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	int32 m_indexA;$/;"	m	class:b2RopeJoint
m_indexA	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	int32 m_indexA;$/;"	m	class:b2WeldJoint
m_indexA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	int32 m_indexA;$/;"	m	class:b2WheelJoint
m_indexB	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	int32 m_indexB;$/;"	m	class:b2Contact
m_indexB	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	int32 m_indexB;$/;"	m	class:b2DistanceJoint
m_indexB	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	int32 m_indexB;$/;"	m	class:b2FrictionJoint
m_indexB	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint
m_indexB	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	int32 m_indexB;$/;"	m	class:b2MouseJoint
m_indexB	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	int32 m_indexB;$/;"	m	class:b2PrismaticJoint
m_indexB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	int32 m_indexB;$/;"	m	class:b2PulleyJoint
m_indexB	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	int32 m_indexB;$/;"	m	class:b2RevoluteJoint
m_indexB	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	int32 m_indexB;$/;"	m	class:b2RopeJoint
m_indexB	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	int32 m_indexB;$/;"	m	class:b2WeldJoint
m_indexB	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	int32 m_indexB;$/;"	m	class:b2WheelJoint
m_indexC	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint
m_indexD	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint
m_insertionCount	include/Box2D/Collision/b2DynamicTree.h	/^	int32 m_insertionCount;$/;"	m	class:b2DynamicTree
m_insideBounds	include/SFML/Graphics/Shape.hpp	/^    FloatRect      m_insideBounds;     \/\/\/< Bounding rectangle of the inside (fill)$/;"	m	class:sf::Shape
m_invI	include/Box2D/Dynamics/b2Body.h	/^	float32 m_I, m_invI;$/;"	m	class:b2Body
m_invIA	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_invIA;$/;"	m	class:b2DistanceJoint
m_invIA	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_invIA;$/;"	m	class:b2FrictionJoint
m_invIA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_invIA;$/;"	m	class:b2PrismaticJoint
m_invIA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_invIA;$/;"	m	class:b2PulleyJoint
m_invIA	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_invIA;$/;"	m	class:b2RevoluteJoint
m_invIA	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_invIA;$/;"	m	class:b2RopeJoint
m_invIA	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_invIA;$/;"	m	class:b2WeldJoint
m_invIA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_invIA;$/;"	m	class:b2WheelJoint
m_invIB	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_invIB;$/;"	m	class:b2DistanceJoint
m_invIB	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_invIB;$/;"	m	class:b2FrictionJoint
m_invIB	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_invIB;$/;"	m	class:b2MouseJoint
m_invIB	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_invIB;$/;"	m	class:b2PrismaticJoint
m_invIB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_invIB;$/;"	m	class:b2PulleyJoint
m_invIB	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_invIB;$/;"	m	class:b2RevoluteJoint
m_invIB	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_invIB;$/;"	m	class:b2RopeJoint
m_invIB	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_invIB;$/;"	m	class:b2WeldJoint
m_invIB	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_invIB;$/;"	m	class:b2WheelJoint
m_invMass	include/Box2D/Dynamics/b2Body.h	/^	float32 m_mass, m_invMass;$/;"	m	class:b2Body
m_invMassA	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2DistanceJoint
m_invMassA	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2FrictionJoint
m_invMassA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2PrismaticJoint
m_invMassA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2PulleyJoint
m_invMassA	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2RevoluteJoint
m_invMassA	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2RopeJoint
m_invMassA	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2WeldJoint
m_invMassA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2WheelJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2DistanceJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2FrictionJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2MouseJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2PrismaticJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2PulleyJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2RevoluteJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2RopeJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2WeldJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2WheelJoint
m_invTransformUpdated	include/SFML/Graphics/View.hpp	/^    mutable bool      m_invTransformUpdated; \/\/\/< Internal state telling if the inverse transform needs to be updated$/;"	m	class:sf::View
m_inv_dt0	include/Box2D/Dynamics/b2World.h	/^	float32 m_inv_dt0;$/;"	m	class:b2World
m_inverseTransform	include/SFML/Graphics/Transformable.hpp	/^    mutable Transform m_inverseTransform;           \/\/\/< Combined transformation of the object$/;"	m	class:sf::Transformable
m_inverseTransform	include/SFML/Graphics/View.hpp	/^    mutable Transform m_inverseTransform;    \/\/\/< Precomputed inverse projection transform corresponding to the view$/;"	m	class:sf::View
m_inverseTransformNeedUpdate	include/SFML/Graphics/Transformable.hpp	/^    mutable bool      m_inverseTransformNeedUpdate; \/\/\/< Does the transform need to be recomputed?$/;"	m	class:sf::Transformable
m_isBlocking	include/SFML/Network/Socket.hpp	/^    bool         m_isBlocking; \/\/\/< Current blocking mode of the socket$/;"	m	class:sf::Socket
m_isCapturing	include/SFML/Audio/SoundRecorder.hpp	/^    bool               m_isCapturing; \/\/\/< Capturing state$/;"	m	class:sf::SoundRecorder
m_isRepeated	include/SFML/Graphics/Texture.hpp	/^    bool         m_isRepeated;    \/\/\/< Is the texture in repeat mode?$/;"	m	class:sf::Texture
m_isSensor	include/Box2D/Dynamics/b2Fixture.h	/^	bool m_isSensor;$/;"	m	class:b2Fixture
m_isSmooth	include/SFML/Graphics/Texture.hpp	/^    bool         m_isSmooth;      \/\/\/< Status of the smooth filter$/;"	m	class:sf::Texture
m_isStreaming	include/SFML/Audio/SoundStream.hpp	/^    bool          m_isStreaming;             \/\/\/< Streaming state (true = playing, false = stopped)$/;"	m	class:sf::SoundStream
m_isValid	include/SFML/Network/Packet.hpp	/^    bool              m_isValid; \/\/\/< Reading state of the packet$/;"	m	class:sf::Packet
m_islandFlag	include/Box2D/Dynamics/Joints/b2Joint.h	/^	bool m_islandFlag;$/;"	m	class:b2Joint
m_islandIndex	include/Box2D/Dynamics/b2Body.h	/^	int32 m_islandIndex;$/;"	m	class:b2Body
m_joint1	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Joint* m_joint1;$/;"	m	class:b2GearJoint
m_joint2	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Joint* m_joint2;$/;"	m	class:b2GearJoint
m_jointCapacity	include/Box2D/Dynamics/b2Island.h	/^	int32 m_jointCapacity;$/;"	m	class:b2Island
m_jointCount	include/Box2D/Dynamics/b2Island.h	/^	int32 m_jointCount;$/;"	m	class:b2Island
m_jointCount	include/Box2D/Dynamics/b2World.h	/^	int32 m_jointCount;$/;"	m	class:b2World
m_jointList	include/Box2D/Dynamics/b2Body.h	/^	b2JointEdge* m_jointList;$/;"	m	class:b2Body
m_jointList	include/Box2D/Dynamics/b2World.h	/^	b2Joint* m_jointList;$/;"	m	class:b2World
m_joints	include/Box2D/Dynamics/b2Island.h	/^	b2Joint** m_joints;$/;"	m	class:b2Island
m_k2	include/Box2D/Rope/b2Rope.h	/^	float32 m_k2;$/;"	m	class:b2Rope
m_k3	include/Box2D/Rope/b2Rope.h	/^	float32 m_k3;$/;"	m	class:b2Rope
m_lcA	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint
m_lcB	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint
m_lcC	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint
m_lcD	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint
m_length	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_length;$/;"	m	class:b2DistanceJoint
m_length	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_length;$/;"	m	class:b2RopeJoint
m_lengthA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_lengthA;$/;"	m	class:b2PulleyJoint
m_lengthB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_lengthB;$/;"	m	class:b2PulleyJoint
m_library	include/SFML/Graphics/Font.hpp	/^    void*                      m_library;     \/\/\/< Pointer to the internal library interface (it is typeless to avoid exposing implementation details)$/;"	m	class:sf::Font
m_limitState	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2LimitState m_limitState;$/;"	m	class:b2PrismaticJoint
m_limitState	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2LimitState m_limitState;$/;"	m	class:b2RevoluteJoint
m_linearDamping	include/Box2D/Dynamics/b2Body.h	/^	float32 m_linearDamping;$/;"	m	class:b2Body
m_linearImpulse	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_linearImpulse;$/;"	m	class:b2FrictionJoint
m_linearMass	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Mat22 m_linearMass;$/;"	m	class:b2FrictionJoint
m_linearVelocity	include/Box2D/Dynamics/b2Body.h	/^	b2Vec2 m_linearVelocity;$/;"	m	class:b2Body
m_listener	include/Box2D/Dynamics/b2Island.h	/^	b2ContactListener* m_listener;$/;"	m	class:b2Island
m_listing	include/SFML/Network/Ftp.hpp	/^        std::vector<std::string> m_listing; \/\/\/< Directory\/file names extracted from the data$/;"	m	class:sf::Ftp::ListingResponse
m_localAnchorA	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2DistanceJoint
m_localAnchorA	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2FrictionJoint
m_localAnchorA	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2GearJoint
m_localAnchorA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2PrismaticJoint
m_localAnchorA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2PulleyJoint
m_localAnchorA	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2RevoluteJoint
m_localAnchorA	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2RopeJoint
m_localAnchorA	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2WeldJoint
m_localAnchorA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2WheelJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2DistanceJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2FrictionJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2GearJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2MouseJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2PrismaticJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2PulleyJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2RevoluteJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2RopeJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2WeldJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2WheelJoint
m_localAnchorC	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_localAnchorC;$/;"	m	class:b2GearJoint
m_localAnchorD	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_localAnchorD;$/;"	m	class:b2GearJoint
m_localAxisC	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_localAxisC;$/;"	m	class:b2GearJoint
m_localAxisD	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_localAxisD;$/;"	m	class:b2GearJoint
m_localCenterA	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2DistanceJoint
m_localCenterA	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2FrictionJoint
m_localCenterA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2PrismaticJoint
m_localCenterA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2PulleyJoint
m_localCenterA	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2RevoluteJoint
m_localCenterA	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2RopeJoint
m_localCenterA	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2WeldJoint
m_localCenterA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2WheelJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2DistanceJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2FrictionJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2MouseJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2PrismaticJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2PulleyJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2RevoluteJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2RopeJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2WeldJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2WheelJoint
m_localPoint	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	b2Vec2 m_localPoint;$/;"	m	struct:b2SeparationFunction	file:
m_localXAxisA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_localXAxisA;$/;"	m	class:b2PrismaticJoint
m_localXAxisA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_localXAxisA;$/;"	m	class:b2WheelJoint
m_localYAxisA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_localYAxisA;$/;"	m	class:b2PrismaticJoint
m_localYAxisA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_localYAxisA;$/;"	m	class:b2WheelJoint
m_loop	include/SFML/Audio/SoundStream.hpp	/^    bool          m_loop;                    \/\/\/< Loop flag (true to loop, false to play once)$/;"	m	class:sf::SoundStream
m_lowerAngle	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_lowerAngle;$/;"	m	class:b2RevoluteJoint
m_lowerLimit	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_lowerLimit, m_upperLimit;$/;"	m	struct:b2EPCollider	file:
m_lowerTranslation	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_lowerTranslation;$/;"	m	class:b2PrismaticJoint
m_mA	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint
m_mB	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint
m_mC	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint
m_mD	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint
m_majorVersion	include/SFML/Network/Http.hpp	/^        unsigned int m_majorVersion; \/\/\/< Major HTTP version$/;"	m	class:sf::Http::Request
m_majorVersion	include/SFML/Network/Http.hpp	/^        unsigned int m_majorVersion; \/\/\/< Major HTTP version$/;"	m	class:sf::Http::Response
m_manifold	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Manifold m_manifold;$/;"	m	class:b2Contact
m_mass	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_mass;$/;"	m	class:b2DistanceJoint
m_mass	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_mass;$/;"	m	class:b2GearJoint
m_mass	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Mat22 m_mass;$/;"	m	class:b2MouseJoint
m_mass	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_mass;$/;"	m	class:b2PulleyJoint
m_mass	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Mat33 m_mass;			\/\/ effective mass for point-to-point constraint.$/;"	m	class:b2RevoluteJoint
m_mass	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_mass;$/;"	m	class:b2RopeJoint
m_mass	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Mat33 m_mass;$/;"	m	class:b2WeldJoint
m_mass	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_mass;$/;"	m	class:b2WheelJoint
m_mass	include/Box2D/Dynamics/b2Body.h	/^	float32 m_mass, m_invMass;$/;"	m	class:b2Body
m_matrix	include/SFML/Graphics/Transform.hpp	/^    float m_matrix[16]; \/\/\/< 4x4 matrix defining the transformation$/;"	m	class:sf::Transform
m_maxAllocation	include/Box2D/Common/b2StackAllocator.h	/^	int32 m_maxAllocation;$/;"	m	class:b2StackAllocator
m_maxForce	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_maxForce;$/;"	m	class:b2FrictionJoint
m_maxForce	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_maxForce;$/;"	m	class:b2MouseJoint
m_maxLength	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_maxLength;$/;"	m	class:b2RopeJoint
m_maxMotorForce	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_maxMotorForce;$/;"	m	class:b2PrismaticJoint
m_maxMotorTorque	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_maxMotorTorque;$/;"	m	class:b2RevoluteJoint
m_maxMotorTorque	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_maxMotorTorque;$/;"	m	class:b2WheelJoint
m_maxTorque	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_maxTorque;$/;"	m	class:b2FrictionJoint
m_message	include/SFML/Network/Ftp.hpp	/^        std::string m_message; \/\/\/< Last message received from the server$/;"	m	class:sf::Ftp::Response
m_method	include/SFML/Network/Http.hpp	/^        Method       m_method;       \/\/\/< Method to use for the request$/;"	m	class:sf::Http::Request
m_microseconds	include/SFML/System/Time.hpp	/^    Int64 m_microseconds; \/\/\/< Time value stored as microseconds$/;"	m	class:sf::Time
m_minorVersion	include/SFML/Network/Http.hpp	/^        unsigned int m_minorVersion; \/\/\/< Minor HTTP version$/;"	m	class:sf::Http::Request
m_minorVersion	include/SFML/Network/Http.hpp	/^        unsigned int m_minorVersion; \/\/\/< Minor HTTP version$/;"	m	class:sf::Http::Response
m_motorImpulse	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_motorImpulse;$/;"	m	class:b2PrismaticJoint
m_motorImpulse	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_motorImpulse;$/;"	m	class:b2RevoluteJoint
m_motorImpulse	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_motorImpulse;$/;"	m	class:b2WheelJoint
m_motorMass	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_motorMass;$/;"	m	class:b2PrismaticJoint
m_motorMass	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_motorMass;	\/\/ effective mass for motor\/limit angular constraint.$/;"	m	class:b2RevoluteJoint
m_motorMass	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_motorMass;$/;"	m	class:b2WheelJoint
m_motorSpeed	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_motorSpeed;$/;"	m	class:b2PrismaticJoint
m_motorSpeed	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_motorSpeed;$/;"	m	class:b2RevoluteJoint
m_motorSpeed	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_motorSpeed;$/;"	m	class:b2WheelJoint
m_moveBuffer	include/Box2D/Collision/b2BroadPhase.h	/^	int32* m_moveBuffer;$/;"	m	class:b2BroadPhase
m_moveCapacity	include/Box2D/Collision/b2BroadPhase.h	/^	int32 m_moveCapacity;$/;"	m	class:b2BroadPhase
m_moveCount	include/Box2D/Collision/b2BroadPhase.h	/^	int32 m_moveCount;$/;"	m	class:b2BroadPhase
m_mutex	include/SFML/Audio/Music.hpp	/^    Mutex              m_mutex;    \/\/\/< Mutex protecting the data$/;"	m	class:sf::Music
m_mutex	include/SFML/System/Lock.hpp	/^    Mutex& m_mutex; \/\/\/< Mutex to lock \/ unlock$/;"	m	class:sf::Lock
m_mutexImpl	include/SFML/System/Mutex.hpp	/^    priv::MutexImpl* m_mutexImpl; \/\/\/< OS-specific implementation$/;"	m	class:sf::Mutex
m_next	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Contact* m_next;$/;"	m	class:b2Contact
m_next	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Joint* m_next;$/;"	m	class:b2Joint
m_next	include/Box2D/Dynamics/b2Body.h	/^	b2Body* m_next;$/;"	m	class:b2Body
m_next	include/Box2D/Dynamics/b2Fixture.h	/^	b2Fixture* m_next;$/;"	m	class:b2Fixture
m_nextVertex	include/Box2D/Collision/Shapes/b2ChainShape.h	/^	b2Vec2 m_prevVertex, m_nextVertex;$/;"	m	class:b2ChainShape
m_nodeA	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2ContactEdge m_nodeA;$/;"	m	class:b2Contact
m_nodeB	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2ContactEdge m_nodeB;$/;"	m	class:b2Contact
m_nodeCapacity	include/Box2D/Collision/b2DynamicTree.h	/^	int32 m_nodeCapacity;$/;"	m	class:b2DynamicTree
m_nodeCount	include/Box2D/Collision/b2DynamicTree.h	/^	int32 m_nodeCount;$/;"	m	class:b2DynamicTree
m_nodes	include/Box2D/Collision/b2DynamicTree.h	/^	b2TreeNode* m_nodes;$/;"	m	class:b2DynamicTree
m_normal	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_normal;$/;"	m	struct:b2EPCollider	file:
m_normal0	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_normal0, m_normal1, m_normal2;$/;"	m	struct:b2EPCollider	file:
m_normal1	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_normal0, m_normal1, m_normal2;$/;"	m	struct:b2EPCollider	file:
m_normal2	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_normal0, m_normal1, m_normal2;$/;"	m	struct:b2EPCollider	file:
m_normals	include/Box2D/Collision/Shapes/b2PolygonShape.h	/^	b2Vec2 m_normals[b2_maxPolygonVertices];$/;"	m	class:b2PolygonShape
m_origin	include/SFML/Graphics/Transformable.hpp	/^    Vector2f          m_origin;                     \/\/\/< Origin of translation\/rotation\/scaling of the object$/;"	m	class:sf::Transformable
m_outlineColor	include/SFML/Graphics/Shape.hpp	/^    Color          m_outlineColor;     \/\/\/< Outline color$/;"	m	class:sf::Shape
m_outlineThickness	include/SFML/Graphics/Shape.hpp	/^    float          m_outlineThickness; \/\/\/< Thickness of the shape's outline$/;"	m	class:sf::Shape
m_outlineVertices	include/SFML/Graphics/Shape.hpp	/^    VertexArray    m_outlineVertices;  \/\/\/< Vertex array containing the outline geometry$/;"	m	class:sf::Shape
m_p	include/Box2D/Collision/Shapes/b2CircleShape.h	/^	b2Vec2 m_p;$/;"	m	class:b2CircleShape
m_p0s	include/Box2D/Rope/b2Rope.h	/^	b2Vec2* m_p0s;$/;"	m	class:b2Rope
m_pages	include/SFML/Graphics/Font.hpp	/^    mutable PageTable          m_pages;       \/\/\/< Table containing the glyphs pages by character size$/;"	m	class:sf::Font
m_pairBuffer	include/Box2D/Collision/b2BroadPhase.h	/^	b2Pair* m_pairBuffer;$/;"	m	class:b2BroadPhase
m_pairCapacity	include/Box2D/Collision/b2BroadPhase.h	/^	int32 m_pairCapacity;$/;"	m	class:b2BroadPhase
m_pairCount	include/Box2D/Collision/b2BroadPhase.h	/^	int32 m_pairCount;$/;"	m	class:b2BroadPhase
m_path	include/Box2D/Collision/b2DynamicTree.h	/^	uint32 m_path;$/;"	m	class:b2DynamicTree
m_pendingPacket	include/SFML/Network/TcpSocket.hpp	/^    PendingPacket m_pendingPacket; \/\/\/< Temporary data of the packet currently being received$/;"	m	class:sf::TcpSocket
m_perp	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_axis, m_perp;$/;"	m	class:b2PrismaticJoint
m_pixelBuffer	include/SFML/Graphics/Font.hpp	/^    mutable std::vector<Uint8> m_pixelBuffer; \/\/\/< Pixel buffer holding a glyph's pixels before being written to the texture$/;"	m	class:sf::Font
m_pixels	include/SFML/Graphics/Image.hpp	/^    std::vector<Uint8> m_pixels; \/\/\/< Pixels of the image$/;"	m	class:sf::Image
m_pixelsFlipped	include/SFML/Graphics/Texture.hpp	/^    mutable bool m_pixelsFlipped; \/\/\/< To work around the inconsistency in Y orientation$/;"	m	class:sf::Texture
m_pointCount	include/SFML/Graphics/CircleShape.hpp	/^    unsigned int m_pointCount; \/\/\/< Number of points composing the circle$/;"	m	class:sf::CircleShape
m_points	include/SFML/Graphics/ConvexShape.hpp	/^    std::vector<Vector2f> m_points; \/\/\/< Points composing the convex polygon$/;"	m	class:sf::ConvexShape
m_polygonB	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2TempPolygon m_polygonB;$/;"	m	struct:b2EPCollider	file:
m_port	include/SFML/Network/Http.hpp	/^    unsigned short m_port;       \/\/\/< Port used for connection with host$/;"	m	class:sf::Http
m_position	include/SFML/Graphics/Transformable.hpp	/^    Vector2f          m_position;                   \/\/\/< Position of the object in the 2D world$/;"	m	class:sf::Transformable
m_positionConstraints	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2ContactPositionConstraint* m_positionConstraints;$/;"	m	class:b2ContactSolver
m_positions	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Position* m_positions;$/;"	m	class:b2ContactSolver
m_positions	include/Box2D/Dynamics/b2Island.h	/^	b2Position* m_positions;$/;"	m	class:b2Island
m_prev	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Contact* m_prev;$/;"	m	class:b2Contact
m_prev	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Joint* m_prev;$/;"	m	class:b2Joint
m_prev	include/Box2D/Dynamics/b2Body.h	/^	b2Body* m_prev;$/;"	m	class:b2Body
m_prevVertex	include/Box2D/Collision/Shapes/b2ChainShape.h	/^	b2Vec2 m_prevVertex, m_nextVertex;$/;"	m	class:b2ChainShape
m_primitiveType	include/SFML/Graphics/VertexArray.hpp	/^    PrimitiveType       m_primitiveType; \/\/\/< Type of primitives to draw$/;"	m	class:sf::VertexArray
m_profile	include/Box2D/Dynamics/b2World.h	/^	b2Profile m_profile;$/;"	m	class:b2World
m_proxies	include/Box2D/Dynamics/b2Fixture.h	/^	b2FixtureProxy* m_proxies;$/;"	m	class:b2Fixture
m_proxyA	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	const b2DistanceProxy* m_proxyA;$/;"	m	struct:b2SeparationFunction	file:
m_proxyB	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	const b2DistanceProxy* m_proxyB;$/;"	m	struct:b2SeparationFunction	file:
m_proxyCount	include/Box2D/Collision/b2BroadPhase.h	/^	int32 m_proxyCount;$/;"	m	class:b2BroadPhase
m_proxyCount	include/Box2D/Dynamics/b2Fixture.h	/^	int32 m_proxyCount;$/;"	m	class:b2Fixture
m_ps	include/Box2D/Rope/b2Rope.h	/^	b2Vec2* m_ps;$/;"	m	class:b2Rope
m_queryProxyId	include/Box2D/Collision/b2BroadPhase.h	/^	int32 m_queryProxyId;$/;"	m	class:b2BroadPhase
m_rA	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2DistanceJoint
m_rA	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2FrictionJoint
m_rA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2PulleyJoint
m_rA	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2RevoluteJoint
m_rA	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2RopeJoint
m_rA	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2WeldJoint
m_rB	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2DistanceJoint
m_rB	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2FrictionJoint
m_rB	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2MouseJoint
m_rB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2PulleyJoint
m_rB	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2RevoluteJoint
m_rB	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2RopeJoint
m_rB	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2WeldJoint
m_radius	include/Box2D/Collision/Shapes/b2Shape.h	/^	float32 m_radius;$/;"	m	class:b2Shape
m_radius	include/Box2D/Collision/b2CollideEdge.cpp	/^	float32 m_radius;$/;"	m	struct:b2EPCollider	file:
m_radius	include/Box2D/Collision/b2Distance.h	/^	float32 m_radius;$/;"	m	struct:b2DistanceProxy
m_radius	include/SFML/Graphics/CircleShape.hpp	/^    float        m_radius;     \/\/\/< Radius of the circle$/;"	m	class:sf::CircleShape
m_ratio	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_ratio;$/;"	m	class:b2GearJoint
m_ratio	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_ratio;$/;"	m	class:b2PulleyJoint
m_readPos	include/SFML/Network/Packet.hpp	/^    std::size_t       m_readPos; \/\/\/< Current reading position in the packet$/;"	m	class:sf::Packet
m_refCount	include/SFML/Graphics/Font.hpp	/^    int*                       m_refCount;    \/\/\/< Reference counter used by implicit sharing$/;"	m	class:sf::Font
m_referenceAngle	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_referenceAngle;$/;"	m	class:b2PrismaticJoint
m_referenceAngle	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_referenceAngle;$/;"	m	class:b2RevoluteJoint
m_referenceAngle	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_referenceAngle;$/;"	m	class:b2WeldJoint
m_referenceAngleA	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_referenceAngleA;$/;"	m	class:b2GearJoint
m_referenceAngleB	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_referenceAngleB;$/;"	m	class:b2GearJoint
m_restitution	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	float32 m_restitution;$/;"	m	class:b2Contact
m_restitution	include/Box2D/Dynamics/b2Fixture.h	/^	float32 m_restitution;$/;"	m	class:b2Fixture
m_root	include/Box2D/Collision/b2DynamicTree.h	/^	int32 m_root;$/;"	m	class:b2DynamicTree
m_rotation	include/SFML/Graphics/Transformable.hpp	/^    float             m_rotation;                   \/\/\/< Orientation of the object, in degrees$/;"	m	class:sf::Transformable
m_rotation	include/SFML/Graphics/View.hpp	/^    float             m_rotation;            \/\/\/< Angle of rotation of the view rectangle, in degrees$/;"	m	class:sf::View
m_s1	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_s1, m_s2;$/;"	m	class:b2PrismaticJoint
m_s2	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_s1, m_s2;$/;"	m	class:b2PrismaticJoint
m_sAx	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_sAx, m_sBx;$/;"	m	class:b2WheelJoint
m_sAy	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_sAy, m_sBy;$/;"	m	class:b2WheelJoint
m_sBx	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_sAx, m_sBx;$/;"	m	class:b2WheelJoint
m_sBy	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_sAy, m_sBy;$/;"	m	class:b2WheelJoint
m_sampleRate	include/SFML/Audio/SoundRecorder.hpp	/^    unsigned int       m_sampleRate;  \/\/\/< Sample rate$/;"	m	class:sf::SoundRecorder
m_sampleRate	include/SFML/Audio/SoundStream.hpp	/^    unsigned int  m_sampleRate;              \/\/\/< Frequency (samples \/ second)$/;"	m	class:sf::SoundStream
m_samples	include/SFML/Audio/Music.hpp	/^    std::vector<Int16> m_samples;  \/\/\/< Temporary buffer of samples$/;"	m	class:sf::Music
m_samples	include/SFML/Audio/SoundBuffer.hpp	/^    std::vector<Int16> m_samples;  \/\/\/< Samples buffer$/;"	m	class:sf::SoundBuffer
m_samples	include/SFML/Audio/SoundBufferRecorder.hpp	/^    std::vector<Int16> m_samples; \/\/\/< Temporary sample buffer to hold the recorded data$/;"	m	class:sf::SoundBufferRecorder
m_samples	include/SFML/Audio/SoundRecorder.hpp	/^    std::vector<Int16> m_samples;     \/\/\/< Buffer to store captured samples$/;"	m	class:sf::SoundRecorder
m_samplesProcessed	include/SFML/Audio/SoundStream.hpp	/^    Uint64        m_samplesProcessed;        \/\/\/< Number of buffers processed since beginning of the stream$/;"	m	class:sf::SoundStream
m_scale	include/SFML/Graphics/Transformable.hpp	/^    Vector2f          m_scale;                      \/\/\/< Scale of the object$/;"	m	class:sf::Transformable
m_shaderProgram	include/SFML/Graphics/Shader.hpp	/^    unsigned int m_shaderProgram;  \/\/\/< OpenGL identifier for the program$/;"	m	class:sf::Shader
m_shape	include/Box2D/Dynamics/b2Fixture.h	/^	b2Shape* m_shape;$/;"	m	class:b2Fixture
m_size	include/SFML/Graphics/Image.hpp	/^    Vector2u           m_size;   \/\/\/< Image size$/;"	m	class:sf::Image
m_size	include/SFML/Graphics/RectangleShape.hpp	/^    Vector2f m_size; \/\/\/< Size of the rectangle$/;"	m	class:sf::RectangleShape
m_size	include/SFML/Graphics/Texture.hpp	/^    Vector2u     m_size;          \/\/\/< Public texture size$/;"	m	class:sf::Texture
m_size	include/SFML/Graphics/View.hpp	/^    Vector2f          m_size;                \/\/\/< Size of the view, in scene coordinates$/;"	m	class:sf::View
m_sleepTime	include/Box2D/Dynamics/b2Body.h	/^	float32 m_sleepTime;$/;"	m	class:b2Body
m_socket	include/SFML/Network/Socket.hpp	/^    SocketHandle m_socket;     \/\/\/< Socket descriptor$/;"	m	class:sf::Socket
m_sounds	include/SFML/Audio/SoundBuffer.hpp	/^    mutable SoundList  m_sounds;   \/\/\/< List of sounds that are using this buffer$/;"	m	class:sf::SoundBuffer
m_source	include/SFML/Audio/SoundSource.hpp	/^    unsigned int m_source; \/\/\/< OpenAL source identifier$/;"	m	class:sf::SoundSource
m_springImpulse	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_springImpulse;$/;"	m	class:b2WheelJoint
m_springMass	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_springMass;$/;"	m	class:b2WheelJoint
m_stack	include/Box2D/Common/b2GrowableStack.h	/^	T* m_stack;$/;"	m	class:b2GrowableStack
m_stackAllocator	include/Box2D/Dynamics/b2World.h	/^	b2StackAllocator m_stackAllocator;$/;"	m	class:b2World
m_start	include/Box2D/Common/b2Timer.h	/^	float64 m_start;$/;"	m	class:b2Timer
m_startTime	include/SFML/System/Clock.hpp	/^    Time m_startTime; \/\/\/< Time of last reset, in microseconds$/;"	m	class:sf::Clock
m_start_msec	include/Box2D/Common/b2Timer.h	/^	unsigned long m_start_msec;$/;"	m	class:b2Timer
m_start_sec	include/Box2D/Common/b2Timer.h	/^	unsigned long m_start_sec;$/;"	m	class:b2Timer
m_state	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2LimitState m_state;$/;"	m	class:b2RopeJoint
m_status	include/SFML/Network/Ftp.hpp	/^        Status      m_status;  \/\/\/< Status code returned from the server$/;"	m	class:sf::Ftp::Response
m_status	include/SFML/Network/Http.hpp	/^        Status       m_status;       \/\/\/< Status code$/;"	m	class:sf::Http::Response
m_step	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2TimeStep m_step;$/;"	m	class:b2ContactSolver
m_stepComplete	include/Box2D/Dynamics/b2World.h	/^	bool m_stepComplete;$/;"	m	class:b2World
m_streamRec	include/SFML/Graphics/Font.hpp	/^    void*                      m_streamRec;   \/\/\/< Pointer to the stream rec instance (it is typeless to avoid exposing implementation details)$/;"	m	class:sf::Font
m_string	include/SFML/Graphics/Text.hpp	/^    String        m_string;        \/\/\/< String to display$/;"	m	class:sf::Text
m_string	include/SFML/System/String.hpp	/^    std::basic_string<Uint32> m_string; \/\/\/< Internal string of UTF-32 characters$/;"	m	class:sf::String
m_style	include/SFML/Graphics/Text.hpp	/^    Uint32        m_style;         \/\/\/< Text style (see Style enum)$/;"	m	class:sf::Text
m_subStepping	include/Box2D/Dynamics/b2World.h	/^	bool m_subStepping;$/;"	m	class:b2World
m_sweep	include/Box2D/Dynamics/b2Body.h	/^	b2Sweep m_sweep;		\/\/ the swept motion for CCD$/;"	m	class:b2Body
m_sweepA	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	b2Sweep m_sweepA, m_sweepB;$/;"	m	struct:b2SeparationFunction	file:
m_sweepB	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	b2Sweep m_sweepA, m_sweepB;$/;"	m	struct:b2SeparationFunction	file:
m_targetA	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 m_targetA;$/;"	m	class:b2MouseJoint
m_texture	include/SFML/Graphics/RenderTexture.hpp	/^    Texture                  m_texture; \/\/\/< Target texture to draw on$/;"	m	class:sf::RenderTexture
m_texture	include/SFML/Graphics/Shape.hpp	/^    const Texture* m_texture;          \/\/\/< Texture of the shape$/;"	m	class:sf::Shape
m_texture	include/SFML/Graphics/Sprite.hpp	/^    const Texture* m_texture;     \/\/\/< Texture of the sprite$/;"	m	class:sf::Sprite
m_texture	include/SFML/Graphics/Texture.hpp	/^    unsigned int m_texture;       \/\/\/< Internal texture identifier$/;"	m	class:sf::Texture
m_textureRect	include/SFML/Graphics/Shape.hpp	/^    IntRect        m_textureRect;      \/\/\/< Rectangle defining the area of the source texture to display$/;"	m	class:sf::Shape
m_textureRect	include/SFML/Graphics/Sprite.hpp	/^    IntRect        m_textureRect; \/\/\/< Rectangle defining the area of the source texture to display$/;"	m	class:sf::Sprite
m_textures	include/SFML/Graphics/Shader.hpp	/^    TextureTable m_textures;       \/\/\/< Texture variables in the shader, mapped to their location$/;"	m	class:sf::Shader
m_thread	include/SFML/Audio/SoundRecorder.hpp	/^    Thread             m_thread;      \/\/\/< Thread running the background recording task$/;"	m	class:sf::SoundRecorder
m_thread	include/SFML/Audio/SoundStream.hpp	/^    Thread        m_thread;                  \/\/\/< Thread running the background tasks$/;"	m	class:sf::SoundStream
m_toi	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	float32 m_toi;$/;"	m	class:b2Contact
m_toiCount	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	int32 m_toiCount;$/;"	m	class:b2Contact
m_torque	include/Box2D/Dynamics/b2Body.h	/^	float32 m_torque;$/;"	m	class:b2Body
m_transform	include/SFML/Graphics/Transformable.hpp	/^    mutable Transform m_transform;                  \/\/\/< Combined transformation of the object$/;"	m	class:sf::Transformable
m_transform	include/SFML/Graphics/View.hpp	/^    mutable Transform m_transform;           \/\/\/< Precomputed projection transform corresponding to the view$/;"	m	class:sf::View
m_transformNeedUpdate	include/SFML/Graphics/Transformable.hpp	/^    mutable bool      m_transformNeedUpdate;        \/\/\/< Does the transform need to be recomputed?$/;"	m	class:sf::Transformable
m_transformUpdated	include/SFML/Graphics/View.hpp	/^    mutable bool      m_transformUpdated;    \/\/\/< Internal state telling if the transform needs to be updated$/;"	m	class:sf::View
m_tree	include/Box2D/Collision/b2BroadPhase.h	/^	b2DynamicTree m_tree;$/;"	m	class:b2BroadPhase
m_type	include/Box2D/Collision/Shapes/b2Shape.h	/^	Type m_type;$/;"	m	class:b2Shape
m_type	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	Type m_type;$/;"	m	struct:b2SeparationFunction	file:
m_type	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointType m_type;$/;"	m	class:b2Joint
m_type	include/Box2D/Dynamics/b2Body.h	/^	b2BodyType m_type;$/;"	m	class:b2Body
m_type	include/SFML/Network/Socket.hpp	/^    Type         m_type;       \/\/\/< Type of the socket (TCP or UDP)$/;"	m	class:sf::Socket
m_type1	include/Box2D/Collision/b2CollideEdge.cpp	/^	VertexType m_type1, m_type2;$/;"	m	struct:b2EPCollider	file:
m_type2	include/Box2D/Collision/b2CollideEdge.cpp	/^	VertexType m_type1, m_type2;$/;"	m	struct:b2EPCollider	file:
m_typeA	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2JointType m_typeA;$/;"	m	class:b2GearJoint
m_typeB	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2JointType m_typeB;$/;"	m	class:b2GearJoint
m_u	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_u;$/;"	m	class:b2DistanceJoint
m_u	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_u;$/;"	m	class:b2RopeJoint
m_uA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_uA;$/;"	m	class:b2PulleyJoint
m_uB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_uB;$/;"	m	class:b2PulleyJoint
m_upperAngle	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_upperAngle;$/;"	m	class:b2RevoluteJoint
m_upperLimit	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_lowerLimit, m_upperLimit;$/;"	m	struct:b2EPCollider	file:
m_upperTranslation	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_upperTranslation;$/;"	m	class:b2PrismaticJoint
m_uri	include/SFML/Network/Http.hpp	/^        std::string  m_uri;          \/\/\/< Target URI of the request$/;"	m	class:sf::Http::Request
m_userData	include/Box2D/Dynamics/Joints/b2Joint.h	/^	void* m_userData;$/;"	m	class:b2Joint
m_userData	include/Box2D/Dynamics/b2Body.h	/^	void* m_userData;$/;"	m	class:b2Body
m_userData	include/Box2D/Dynamics/b2Fixture.h	/^	void* m_userData;$/;"	m	class:b2Fixture
m_v0	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:
m_v1	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:
m_v1	include/Box2D/Collision/b2Distance.cpp	/^	b2SimplexVertex m_v1, m_v2, m_v3;$/;"	m	struct:b2Simplex	file:
m_v2	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:
m_v2	include/Box2D/Collision/b2Distance.cpp	/^	b2SimplexVertex m_v1, m_v2, m_v3;$/;"	m	struct:b2Simplex	file:
m_v3	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:
m_v3	include/Box2D/Collision/b2Distance.cpp	/^	b2SimplexVertex m_v1, m_v2, m_v3;$/;"	m	struct:b2Simplex	file:
m_velocities	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Velocity* m_velocities;$/;"	m	class:b2ContactSolver
m_velocities	include/Box2D/Dynamics/b2Island.h	/^	b2Velocity* m_velocities;$/;"	m	class:b2Island
m_velocityConstraints	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2ContactVelocityConstraint* m_velocityConstraints;$/;"	m	class:b2ContactSolver
m_vertex0	include/Box2D/Collision/Shapes/b2EdgeShape.h	/^	b2Vec2 m_vertex0, m_vertex3;$/;"	m	class:b2EdgeShape
m_vertex1	include/Box2D/Collision/Shapes/b2EdgeShape.h	/^	b2Vec2 m_vertex1, m_vertex2;$/;"	m	class:b2EdgeShape
m_vertex2	include/Box2D/Collision/Shapes/b2EdgeShape.h	/^	b2Vec2 m_vertex1, m_vertex2;$/;"	m	class:b2EdgeShape
m_vertex3	include/Box2D/Collision/Shapes/b2EdgeShape.h	/^	b2Vec2 m_vertex0, m_vertex3;$/;"	m	class:b2EdgeShape
m_vertexCount	include/Box2D/Collision/Shapes/b2PolygonShape.h	/^	int32 m_vertexCount;$/;"	m	class:b2PolygonShape
m_vertices	include/Box2D/Collision/Shapes/b2ChainShape.h	/^	b2Vec2* m_vertices;$/;"	m	class:b2ChainShape
m_vertices	include/Box2D/Collision/Shapes/b2PolygonShape.h	/^	b2Vec2 m_vertices[b2_maxPolygonVertices];$/;"	m	class:b2PolygonShape
m_vertices	include/Box2D/Collision/b2Distance.h	/^	const b2Vec2* m_vertices;$/;"	m	struct:b2DistanceProxy
m_vertices	include/SFML/Graphics/Shape.hpp	/^    VertexArray    m_vertices;         \/\/\/< Vertex array containing the fill geometry$/;"	m	class:sf::Shape
m_vertices	include/SFML/Graphics/Sprite.hpp	/^    Vertex         m_vertices[4]; \/\/\/< Vertices defining the sprite's geometry$/;"	m	class:sf::Sprite
m_vertices	include/SFML/Graphics/Text.hpp	/^    VertexArray   m_vertices;      \/\/\/< Vertex array containing the text's geometry$/;"	m	class:sf::Text
m_vertices	include/SFML/Graphics/VertexArray.hpp	/^    std::vector<Vertex> m_vertices;      \/\/\/< Vertices contained in the array$/;"	m	class:sf::VertexArray
m_view	include/SFML/Graphics/RenderTarget.hpp	/^    View        m_view;        \/\/\/< Current view$/;"	m	class:sf::RenderTarget
m_viewport	include/SFML/Graphics/View.hpp	/^    FloatRect         m_viewport;            \/\/\/< Viewport rectangle, expressed as a factor of the render-target's size$/;"	m	class:sf::View
m_vs	include/Box2D/Rope/b2Rope.h	/^	b2Vec2* m_vs;$/;"	m	class:b2Rope
m_warmStarting	include/Box2D/Dynamics/b2World.h	/^	bool m_warmStarting;$/;"	m	class:b2World
m_world	include/Box2D/Dynamics/b2Body.h	/^	b2World* m_world;$/;"	m	class:b2Body
m_xf	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Transform m_xf;$/;"	m	struct:b2EPCollider	file:
m_xf	include/Box2D/Dynamics/b2Body.h	/^	b2Transform m_xf;		\/\/ the body origin transform$/;"	m	class:b2Body
main	main.cc	/^int main(){$/;"	f
major	include/Box2D/Common/b2Settings.h	/^	int32 major;		\/\/\/< significant changes$/;"	m	struct:b2Version
majorVersion	include/SFML/Window/ContextSettings.hpp	/^    unsigned int majorVersion;      \/\/\/< Major number of the context version to create$/;"	m	struct:sf::ContextSettings
maskBits	include/Box2D/Dynamics/b2Fixture.h	/^	uint16 maskBits;$/;"	m	struct:b2Filter
mass	include/Box2D/Collision/Shapes/b2Shape.h	/^	float32 mass;$/;"	m	struct:b2MassData
masses	include/Box2D/Rope/b2Rope.h	/^	float32* masses;$/;"	m	struct:b2RopeDef
maxForce	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 maxForce;$/;"	m	struct:b2FrictionJointDef
maxForce	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 maxForce;$/;"	m	struct:b2MouseJointDef
maxFraction	include/Box2D/Collision/b2Collision.h	/^	float32 maxFraction;$/;"	m	struct:b2RayCastInput
maxLength	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 maxLength;$/;"	m	struct:b2RopeJointDef
maxMotorForce	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 maxMotorForce;$/;"	m	struct:b2PrismaticJointDef
maxMotorTorque	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 maxMotorTorque;$/;"	m	struct:b2RevoluteJointDef
maxMotorTorque	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 maxMotorTorque;$/;"	m	struct:b2WheelJointDef
maxTorque	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 maxTorque;$/;"	m	struct:b2FrictionJointDef
metric	include/Box2D/Collision/b2Distance.h	/^	float32 metric;		\/\/\/< length or area$/;"	m	struct:b2SimplexCache
minor	include/Box2D/Common/b2Settings.h	/^	int32 minor;		\/\/\/< incremental changes$/;"	m	struct:b2Version
minorVersion	include/SFML/Window/ContextSettings.hpp	/^    unsigned int minorVersion;      \/\/\/< Minor number of the context version to create$/;"	m	struct:sf::ContextSettings
motorSpeed	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 motorSpeed;$/;"	m	struct:b2PrismaticJointDef
motorSpeed	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 motorSpeed;$/;"	m	struct:b2RevoluteJointDef
motorSpeed	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 motorSpeed;$/;"	m	struct:b2WheelJointDef
mouseButton	include/SFML/Window/Event.hpp	/^        MouseButtonEvent     mouseButton;     \/\/\/< Mouse button event parameters (Event::MouseButtonPressed, Event::MouseButtonReleased)$/;"	m	union:sf::Event::__anon4
mouseMove	include/SFML/Window/Event.hpp	/^        MouseMoveEvent       mouseMove;       \/\/\/< Mouse move event parameters (Event::MouseMoved)$/;"	m	union:sf::Event::__anon4
mouseWheel	include/SFML/Window/Event.hpp	/^        MouseWheelEvent      mouseWheel;      \/\/\/< Mouse wheel event parameters (Event::MouseWheelMoved)$/;"	m	union:sf::Event::__anon4
msgLog	util/logObject.h	/^		msgLog(std::string msg, logLevel level = logLevelInfo){$/;"	f	class:util::msgLog
msgLog	util/logObject.h	/^	class msgLog : public baseLog{$/;"	c	namespace:util
name	core/Object.h	/^	std::string name;$/;"	m	class:Object
next	include/Box2D/Collision/b2BroadPhase.h	/^	int32 next;$/;"	m	struct:b2Pair
next	include/Box2D/Collision/b2DynamicTree.h	/^		int32 next;$/;"	m	union:b2TreeNode::__anon12
next	include/Box2D/Common/b2BlockAllocator.cpp	/^	b2Block* next;$/;"	m	struct:b2Block	file:
next	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2ContactEdge* next;	\/\/\/< the next contact edge in the body's contact list$/;"	m	struct:b2ContactEdge
next	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointEdge* next;		\/\/\/< the next joint edge in the body's joint list$/;"	m	struct:b2JointEdge
nextRow	include/SFML/Graphics/Font.hpp	/^        unsigned int     nextRow; \/\/\/< Y position of the next new row in the texture$/;"	m	struct:sf::Font::Page
normal	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 normal;$/;"	m	struct:b2ReferenceFace	file:
normal	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 normal;							\/\/\/< world vector pointing from A to B$/;"	m	struct:b2WorldManifold
normal	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 normal;$/;"	m	struct:b2RayCastOutput
normal	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 normal;$/;"	m	struct:b2PositionSolverManifold	file:
normal	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Vec2 normal;$/;"	m	struct:b2ContactVelocityConstraint
normalImpulse	include/Box2D/Collision/b2Collision.h	/^	float32 normalImpulse;	\/\/\/< the non-penetration impulse$/;"	m	struct:b2ManifoldPoint
normalImpulse	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 normalImpulse;$/;"	m	struct:b2VelocityConstraintPoint
normalImpulses	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	float32 normalImpulses[b2_maxManifoldPoints];$/;"	m	struct:b2ContactImpulse
normalMass	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Mat22 normalMass;$/;"	m	struct:b2ContactVelocityConstraint
normalMass	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 normalMass;$/;"	m	struct:b2VelocityConstraintPoint
normals	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 normals[b2_maxPolygonVertices];$/;"	m	struct:b2TempPolygon	file:
objList	core/objectProcessor.h	/^	  const objectList *objList;$/;"	m	class:objectProcessor
objProcessorIt	core/objectMgr.h	/^	typedef std::vector<objectProcessor *>::iterator objProcessorIt;$/;"	t	class:objectMgr
objProcessors	core/objectMgr.h	/^	std::vector<objectProcessor *> objProcessors;$/;"	m	class:objectMgr
objectList	core/objectProcessor.h	/^typedef std::vector<Object *> objectList; $/;"	t
objectMgr	core/objectMgr.h	/^	objectMgr(){};$/;"	f	class:objectMgr
objectMgr	core/objectMgr.h	/^class objectMgr{$/;"	c
objectProcessor	core/objectProcessor.h	/^class objectProcessor{$/;"	c
objs	core/objectMgr.h	/^	objectList objs;$/;"	m	class:objectMgr
onDestroyMsg	util/logObject.h	/^		std::string onDestroyMsg;$/;"	m	class:util::scopedLog
operator ()	include/Box2D/Common/b2Math.h	/^	float32 operator () (int32 i) const$/;"	f	struct:b2Vec2
operator ()	include/Box2D/Common/b2Math.h	/^	float32& operator () (int32 i)$/;"	f	struct:b2Vec2
operator *	include/Box2D/Common/b2Math.h	/^inline b2Vec2 operator * (float32 s, const b2Vec2& a)$/;"	f
operator *	include/Box2D/Common/b2Math.h	/^inline b2Vec3 operator * (float32 s, const b2Vec3& a)$/;"	f
operator *=	include/Box2D/Common/b2Math.h	/^	void operator *= (float32 a)$/;"	f	struct:b2Vec2
operator *=	include/Box2D/Common/b2Math.h	/^	void operator *= (float32 s)$/;"	f	struct:b2Vec3
operator +	include/Box2D/Common/b2Math.h	/^inline b2Mat22 operator + (const b2Mat22& A, const b2Mat22& B)$/;"	f
operator +	include/Box2D/Common/b2Math.h	/^inline b2Vec2 operator + (const b2Vec2& a, const b2Vec2& b)$/;"	f
operator +	include/Box2D/Common/b2Math.h	/^inline b2Vec3 operator + (const b2Vec3& a, const b2Vec3& b)$/;"	f
operator +=	include/Box2D/Common/b2Math.h	/^	void operator += (const b2Vec2& v)$/;"	f	struct:b2Vec2
operator +=	include/Box2D/Common/b2Math.h	/^	void operator += (const b2Vec3& v)$/;"	f	struct:b2Vec3
operator -	include/Box2D/Common/b2Math.h	/^	b2Vec2 operator -() const { b2Vec2 v; v.Set(-x, -y); return v; }$/;"	f	struct:b2Vec2
operator -	include/Box2D/Common/b2Math.h	/^	b2Vec3 operator -() const { b2Vec3 v; v.Set(-x, -y, -z); return v; }$/;"	f	struct:b2Vec3
operator -	include/Box2D/Common/b2Math.h	/^inline b2Vec2 operator - (const b2Vec2& a, const b2Vec2& b)$/;"	f
operator -	include/Box2D/Common/b2Math.h	/^inline b2Vec3 operator - (const b2Vec3& a, const b2Vec3& b)$/;"	f
operator -=	include/Box2D/Common/b2Math.h	/^	void operator -= (const b2Vec2& v)$/;"	f	struct:b2Vec2
operator -=	include/Box2D/Common/b2Math.h	/^	void operator -= (const b2Vec3& v)$/;"	f	struct:b2Vec3
operator <	core/Hash.cpp	/^bool Hash::operator < (const Hash &other) const{$/;"	f	class:Hash
operator ==	core/Hash.cpp	/^bool Hash::operator == (const Hash &other) const{$/;"	f	class:Hash
operator ==	include/Box2D/Common/b2Math.h	/^inline bool operator == (const b2Vec2& a, const b2Vec2& b)$/;"	f
operator >	core/Hash.cpp	/^bool Hash::operator > (const Hash &other) const{$/;"	f	class:Hash
operator T	core/Property.h	/^	operator T(){$/;"	f	class:Property
other	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Body* other;			\/\/\/< provides quick access to the other body attached.$/;"	m	struct:b2ContactEdge
other	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Body* other;			\/\/\/< provides quick access to the other body attached.$/;"	m	struct:b2JointEdge
p	include/Box2D/Common/b2Math.h	/^	b2Vec2 p;$/;"	m	struct:b2Transform
p1	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 p1, p2;$/;"	m	struct:b2RayCastInput
p2	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 p1, p2;$/;"	m	struct:b2RayCastInput
parent	include/Box2D/Collision/b2DynamicTree.h	/^		int32 parent;$/;"	m	union:b2TreeNode::__anon12
point	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 point;$/;"	m	struct:b2PositionSolverManifold	file:
pointA	include/Box2D/Collision/b2Distance.h	/^	b2Vec2 pointA;		\/\/\/< closest point on shapeA$/;"	m	struct:b2DistanceOutput
pointB	include/Box2D/Collision/b2Distance.h	/^	b2Vec2 pointB;		\/\/\/< closest point on shapeB$/;"	m	struct:b2DistanceOutput
pointCount	include/Box2D/Collision/b2Collision.h	/^	int32 pointCount;								\/\/\/< the number of manifold points$/;"	m	struct:b2Manifold
pointCount	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	int32 pointCount;$/;"	m	struct:b2ContactPositionConstraint	file:
pointCount	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	int32 pointCount;$/;"	m	struct:b2ContactVelocityConstraint
points	include/Box2D/Collision/b2Collision.h	/^	b2ManifoldPoint points[b2_maxManifoldPoints];	\/\/\/< the points of contact$/;"	m	struct:b2Manifold
points	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 points[b2_maxManifoldPoints];	\/\/\/< world contact point (point of intersection)$/;"	m	struct:b2WorldManifold
points	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2VelocityConstraintPoint points[b2_maxManifoldPoints];$/;"	m	struct:b2ContactVelocityConstraint
position	include/Box2D/Dynamics/b2Body.h	/^	b2Vec2 position;$/;"	m	struct:b2BodyDef
position	include/SFML/Graphics/Vertex.hpp	/^    Vector2f  position;  \/\/\/< 2D position of the vertex$/;"	m	class:sf::Vertex
position	include/SFML/Window/Event.hpp	/^        float          position;   \/\/\/< New position on the axis (in range [-100 .. 100])$/;"	m	struct:sf::Event::JoystickMoveEvent
positionIterations	include/Box2D/Dynamics/b2TimeStep.h	/^	int32 positionIterations;$/;"	m	struct:b2TimeStep
positions	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Position* positions;$/;"	m	struct:b2ContactSolverDef
positions	include/Box2D/Dynamics/b2TimeStep.h	/^	b2Position* positions;$/;"	m	struct:b2SolverData
prev	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2ContactEdge* prev;	\/\/\/< the previous contact edge in the body's contact list$/;"	m	struct:b2ContactEdge
prev	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointEdge* prev;		\/\/\/< the previous joint edge in the body's joint list$/;"	m	struct:b2JointEdge
primary	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	bool primary;$/;"	m	struct:b2ContactRegister
priv	include/SFML/Audio/Music.hpp	/^namespace priv$/;"	n	namespace:sf
priv	include/SFML/Audio/SoundBuffer.hpp	/^namespace priv$/;"	n	namespace:sf
priv	include/SFML/Graphics/RenderTexture.hpp	/^namespace priv$/;"	n	namespace:sf
priv	include/SFML/System/Mutex.hpp	/^namespace priv$/;"	n	namespace:sf
priv	include/SFML/System/Thread.hpp	/^namespace priv$/;"	n	namespace:sf
priv	include/SFML/System/ThreadLocal.hpp	/^namespace priv$/;"	n	namespace:sf
priv	include/SFML/Window/Context.hpp	/^namespace priv$/;"	n	namespace:sf
priv	include/SFML/Window/Window.hpp	/^namespace priv$/;"	n	namespace:sf
propertyIt	core/Object.h	/^	typedef std::map<const Hash*, baseProperty* >::iterator propertyIt;$/;"	t	class:Object
propertyMap	core/Object.h	/^	std::map<const Hash*, baseProperty* > propertyMap; $/;"	m	class:Object
propertyType	core/Property.h	/^enum propertyType{$/;"	g
proxyA	include/Box2D/Collision/b2Distance.h	/^	b2DistanceProxy proxyA;$/;"	m	struct:b2DistanceInput
proxyA	include/Box2D/Collision/b2TimeOfImpact.h	/^	b2DistanceProxy proxyA;$/;"	m	struct:b2TOIInput
proxyB	include/Box2D/Collision/b2Distance.h	/^	b2DistanceProxy proxyB;$/;"	m	struct:b2DistanceInput
proxyB	include/Box2D/Collision/b2TimeOfImpact.h	/^	b2DistanceProxy proxyB;$/;"	m	struct:b2TOIInput
proxyId	include/Box2D/Dynamics/b2Fixture.h	/^	int32 proxyId;$/;"	m	struct:b2FixtureProxy
proxyIdA	include/Box2D/Collision/b2BroadPhase.h	/^	int32 proxyIdA;$/;"	m	struct:b2Pair
proxyIdB	include/Box2D/Collision/b2BroadPhase.h	/^	int32 proxyIdB;$/;"	m	struct:b2Pair
q	include/Box2D/Common/b2Math.h	/^	b2Rot q;$/;"	m	struct:b2Transform
r	include/Box2D/Common/b2Draw.h	/^	float32 r, g, b;$/;"	m	struct:b2Color
r	include/SFML/Graphics/Color.hpp	/^    Uint8 r; \/\/\/< Red component$/;"	m	class:sf::Color
rA	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Vec2 rA;$/;"	m	struct:b2VelocityConstraintPoint
rB	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Vec2 rB;$/;"	m	struct:b2VelocityConstraintPoint
radiusA	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 radiusA, radiusB;$/;"	m	struct:b2ContactPositionConstraint	file:
radiusB	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 radiusA, radiusB;$/;"	m	struct:b2ContactPositionConstraint	file:
ratio	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 ratio;$/;"	m	struct:b2GearJointDef
ratio	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 ratio;$/;"	m	struct:b2PulleyJointDef
referenceAngle	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 referenceAngle;$/;"	m	struct:b2PrismaticJointDef
referenceAngle	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 referenceAngle;$/;"	m	struct:b2RevoluteJointDef
referenceAngle	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 referenceAngle;$/;"	m	struct:b2WeldJointDef
removeObjectProcessor	core/objectMgr.h	/^	void removeObjectProcessor(objectProcessor *processor){$/;"	f	class:objectMgr
removeObjects	core/objectMgr.h	/^	void removeObjects(Object *obj){$/;"	f	class:objectMgr
restitution	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 restitution;$/;"	m	struct:b2ContactVelocityConstraint
restitution	include/Box2D/Dynamics/b2Fixture.h	/^	float32 restitution;$/;"	m	struct:b2FixtureDef
revision	include/Box2D/Common/b2Settings.h	/^	int32 revision;		\/\/\/< bug fixes$/;"	m	struct:b2Version
rows	include/SFML/Graphics/Font.hpp	/^        std::vector<Row> rows;    \/\/\/< List containing the position of all the existing rows$/;"	m	struct:sf::Font::Page
s	include/Box2D/Common/b2Math.h	/^	float32 s, c;$/;"	m	struct:b2Rot
s_blockSizeLookup	include/Box2D/Common/b2BlockAllocator.cpp	/^uint8 b2BlockAllocator::s_blockSizeLookup[b2_maxBlockSize + 1];$/;"	m	class:b2BlockAllocator	file:
s_blockSizeLookup	include/Box2D/Common/b2BlockAllocator.h	/^	static uint8 s_blockSizeLookup[b2_maxBlockSize + 1];$/;"	m	class:b2BlockAllocator
s_blockSizeLookupInitialized	include/Box2D/Common/b2BlockAllocator.cpp	/^bool b2BlockAllocator::s_blockSizeLookupInitialized;$/;"	m	class:b2BlockAllocator	file:
s_blockSizeLookupInitialized	include/Box2D/Common/b2BlockAllocator.h	/^	static bool s_blockSizeLookupInitialized;$/;"	m	class:b2BlockAllocator
s_blockSizes	include/Box2D/Common/b2BlockAllocator.h	/^	static int32 s_blockSizes[b2_blockSizes];$/;"	m	class:b2BlockAllocator
s_initialized	include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^bool b2Contact::s_initialized = false;$/;"	m	class:b2Contact	file:
s_initialized	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	static bool s_initialized;$/;"	m	class:b2Contact
s_invFrequency	include/Box2D/Common/b2Timer.cpp	/^float64 b2Timer::s_invFrequency = 0.0f;$/;"	m	class:b2Timer	file:
s_invFrequency	include/Box2D/Common/b2Timer.h	/^	static float64 s_invFrequency;$/;"	m	class:b2Timer
s_registers	include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^b2ContactRegister b2Contact::s_registers[b2Shape::e_typeCount][b2Shape::e_typeCount];$/;"	m	class:b2Contact	file:
s_registers	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	static b2ContactRegister s_registers[b2Shape::e_typeCount][b2Shape::e_typeCount];$/;"	m	class:b2Contact
sampleCount	include/SFML/Audio/SoundStream.hpp	/^        std::size_t  sampleCount; \/\/\/< Number of samples pointed by Samples$/;"	m	struct:sf::SoundStream::Chunk
samples	include/SFML/Audio/SoundStream.hpp	/^        const Int16* samples;     \/\/\/< Pointer to the audio samples$/;"	m	struct:sf::SoundStream::Chunk
scopedLog	util/logObject.h	/^		scopedLog(std::string onCreateMsg, std::string onDestroyMsg, logLevel level = logLevelInfo){$/;"	f	class:util::scopedLog
scopedLog	util/logObject.h	/^	class scopedLog : public baseLog{$/;"	c	namespace:util
seed	core/Hash.cpp	/^unsigned int Hash::seed;$/;"	m	class:Hash	file:
seed	core/Hash.h	/^	static unsigned int seed;$/;"	m	class:Hash
separation	include/Box2D/Collision/b2CollideEdge.cpp	/^	float32 separation;$/;"	m	struct:b2EPAxis	file:
separation	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 separation;$/;"	m	struct:b2PositionSolverManifold	file:
setSeed	core/Hash.cpp	/^void Hash::setSeed(unsigned int seed){$/;"	f	class:Hash
sf	include/SFML/Audio/Listener.hpp	/^namespace sf$/;"	n
sf	include/SFML/Audio/Music.hpp	/^namespace sf$/;"	n
sf	include/SFML/Audio/Sound.hpp	/^namespace sf$/;"	n
sf	include/SFML/Audio/SoundBuffer.hpp	/^namespace sf$/;"	n
sf	include/SFML/Audio/SoundBufferRecorder.hpp	/^namespace sf$/;"	n
sf	include/SFML/Audio/SoundRecorder.hpp	/^namespace sf$/;"	n
sf	include/SFML/Audio/SoundSource.hpp	/^namespace sf$/;"	n
sf	include/SFML/Audio/SoundStream.hpp	/^namespace sf$/;"	n
sf	include/SFML/Config.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/BlendMode.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/CircleShape.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/Color.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/ConvexShape.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/Drawable.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/Font.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/Glyph.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/Image.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/PrimitiveType.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/Rect.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/RectangleShape.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/RenderStates.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/RenderTarget.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/RenderTexture.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/RenderWindow.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/Shader.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/Shape.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/Sprite.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/Text.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/Texture.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/Transform.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/Transformable.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/Vertex.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/VertexArray.hpp	/^namespace sf$/;"	n
sf	include/SFML/Graphics/View.hpp	/^namespace sf$/;"	n
sf	include/SFML/Network/Ftp.hpp	/^namespace sf$/;"	n
sf	include/SFML/Network/Http.hpp	/^namespace sf$/;"	n
sf	include/SFML/Network/IpAddress.hpp	/^namespace sf$/;"	n
sf	include/SFML/Network/Packet.hpp	/^namespace sf$/;"	n
sf	include/SFML/Network/Socket.hpp	/^namespace sf$/;"	n
sf	include/SFML/Network/SocketHandle.hpp	/^namespace sf$/;"	n
sf	include/SFML/Network/SocketSelector.hpp	/^namespace sf$/;"	n
sf	include/SFML/Network/TcpListener.hpp	/^namespace sf$/;"	n
sf	include/SFML/Network/TcpSocket.hpp	/^namespace sf$/;"	n
sf	include/SFML/Network/UdpSocket.hpp	/^namespace sf$/;"	n
sf	include/SFML/System/Clock.hpp	/^namespace sf$/;"	n
sf	include/SFML/System/Err.hpp	/^namespace sf$/;"	n
sf	include/SFML/System/InputStream.hpp	/^namespace sf$/;"	n
sf	include/SFML/System/Lock.hpp	/^namespace sf$/;"	n
sf	include/SFML/System/Mutex.hpp	/^namespace sf$/;"	n
sf	include/SFML/System/NonCopyable.hpp	/^namespace sf$/;"	n
sf	include/SFML/System/Sleep.hpp	/^namespace sf$/;"	n
sf	include/SFML/System/String.hpp	/^namespace sf$/;"	n
sf	include/SFML/System/Thread.hpp	/^namespace sf$/;"	n
sf	include/SFML/System/ThreadLocal.hpp	/^namespace sf$/;"	n
sf	include/SFML/System/ThreadLocalPtr.hpp	/^namespace sf$/;"	n
sf	include/SFML/System/Time.hpp	/^namespace sf$/;"	n
sf	include/SFML/System/Utf.hpp	/^namespace sf$/;"	n
sf	include/SFML/System/Vector2.hpp	/^namespace sf$/;"	n
sf	include/SFML/System/Vector3.hpp	/^namespace sf$/;"	n
sf	include/SFML/Window/Context.hpp	/^namespace sf$/;"	n
sf	include/SFML/Window/ContextSettings.hpp	/^namespace sf$/;"	n
sf	include/SFML/Window/Event.hpp	/^namespace sf$/;"	n
sf	include/SFML/Window/GlResource.hpp	/^namespace sf$/;"	n
sf	include/SFML/Window/Joystick.hpp	/^namespace sf$/;"	n
sf	include/SFML/Window/Keyboard.hpp	/^namespace sf$/;"	n
sf	include/SFML/Window/Mouse.hpp	/^namespace sf$/;"	n
sf	include/SFML/Window/VideoMode.hpp	/^namespace sf$/;"	n
sf	include/SFML/Window/Window.hpp	/^namespace sf$/;"	n
sf	include/SFML/Window/WindowHandle.hpp	/^namespace sf$/;"	n
sf	include/SFML/Window/WindowStyle.hpp	/^namespace sf$/;"	n
shader	include/SFML/Graphics/RenderStates.hpp	/^    const Shader*  shader;    \/\/\/< Shader$/;"	m	class:sf::RenderStates
shape	include/Box2D/Dynamics/b2Fixture.h	/^	const b2Shape* shape;$/;"	m	struct:b2FixtureDef
shift	include/SFML/Window/Event.hpp	/^        bool          shift;   \/\/\/< Is the Shift key pressed?$/;"	m	struct:sf::Event::KeyEvent
sideNormal1	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 sideNormal1;$/;"	m	struct:b2ReferenceFace	file:
sideNormal2	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 sideNormal2;$/;"	m	struct:b2ReferenceFace	file:
sideOffset1	include/Box2D/Collision/b2CollideEdge.cpp	/^	float32 sideOffset1;$/;"	m	struct:b2ReferenceFace	file:
sideOffset2	include/Box2D/Collision/b2CollideEdge.cpp	/^	float32 sideOffset2;$/;"	m	struct:b2ReferenceFace	file:
size	include/Box2D/Common/b2StackAllocator.h	/^	int32 size;$/;"	m	struct:b2StackEntry
size	include/SFML/Window/Event.hpp	/^        SizeEvent            size;            \/\/\/< Size event parameters (Event::Resized)$/;"	m	union:sf::Event::__anon4
solve	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 solve;$/;"	m	struct:b2Profile
solveInit	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 solveInit;$/;"	m	struct:b2Profile
solvePosition	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 solvePosition;$/;"	m	struct:b2Profile
solveTOI	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 solveTOI;$/;"	m	struct:b2Profile
solveVelocity	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 solveVelocity;$/;"	m	struct:b2Profile
state	include/Box2D/Collision/b2TimeOfImpact.h	/^	State state;$/;"	m	struct:b2TOIOutput
stencilBits	include/SFML/Window/ContextSettings.hpp	/^    unsigned int stencilBits;       \/\/\/< Bits of the stencil buffer$/;"	m	struct:sf::ContextSettings
step	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2TimeStep step;$/;"	m	struct:b2ContactSolverDef
step	include/Box2D/Dynamics/b2TimeStep.h	/^	b2TimeStep step;$/;"	m	struct:b2SolverData
step	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 step;$/;"	m	struct:b2Profile
stringProperty	core/Property.h	/^typedef Property<std::string, TYPE_STRING> stringProperty;/;"	t
sweepA	include/Box2D/Collision/b2TimeOfImpact.h	/^	b2Sweep sweepA;$/;"	m	struct:b2TOIInput
sweepB	include/Box2D/Collision/b2TimeOfImpact.h	/^	b2Sweep sweepB;$/;"	m	struct:b2TOIInput
system	include/SFML/Window/Event.hpp	/^        bool          system;  \/\/\/< Is the System key pressed?$/;"	m	struct:sf::Event::KeyEvent
t	include/Box2D/Collision/b2TimeOfImpact.h	/^	float32 t;$/;"	m	struct:b2TOIOutput
tMax	include/Box2D/Collision/b2TimeOfImpact.h	/^	float32 tMax;		\/\/ defines sweep interval [0, tMax]$/;"	m	struct:b2TOIInput
tangentImpulse	include/Box2D/Collision/b2Collision.h	/^	float32 tangentImpulse;	\/\/\/< the friction impulse$/;"	m	struct:b2ManifoldPoint
tangentImpulse	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 tangentImpulse;$/;"	m	struct:b2VelocityConstraintPoint
tangentImpulses	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	float32 tangentImpulses[b2_maxManifoldPoints];$/;"	m	struct:b2ContactImpulse
tangentMass	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 tangentMass;$/;"	m	struct:b2VelocityConstraintPoint
target	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 target;$/;"	m	struct:b2MouseJointDef
testMap	main.cc	/^std::map<const Hash*, std::string> testMap;$/;"	v
texCoords	include/SFML/Graphics/Vertex.hpp	/^    Vector2f  texCoords; \/\/\/< Coordinates of the texture's pixel to map to the vertex$/;"	m	class:sf::Vertex
text	include/SFML/Window/Event.hpp	/^        TextEvent            text;            \/\/\/< Text event parameters (Event::TextEntered)$/;"	m	union:sf::Event::__anon4
texture	include/SFML/Graphics/Font.hpp	/^        sf::Texture      texture; \/\/\/< Texture containing the pixels of the glyphs$/;"	m	struct:sf::Font::Page
texture	include/SFML/Graphics/RenderStates.hpp	/^    const Texture* texture;   \/\/\/< Texture$/;"	m	class:sf::RenderStates
textureRect	include/SFML/Graphics/Glyph.hpp	/^    IntRect textureRect; \/\/\/< Texture coordinates of the glyph inside the font's texture$/;"	m	class:sf::Glyph
thresholdLevel	util/logObject.cpp	/^util::logLevel util::baseLog::thresholdLevel;$/;"	m	class:util::baseLog	file:
thresholdLevel	util/logObject.h	/^		static logLevel thresholdLevel; $/;"	m	class:util::baseLog
top	include/SFML/Graphics/Font.hpp	/^        unsigned int top;    \/\/\/< Y position of the row into the texture$/;"	m	struct:sf::Font::Row
top	include/SFML/Graphics/Rect.hpp	/^    T top;    \/\/\/< Top coordinate of the rectangle$/;"	m	class:sf::Rect
transform	include/SFML/Graphics/RenderStates.hpp	/^    Transform      transform; \/\/\/< Transform$/;"	m	class:sf::RenderStates
transformA	include/Box2D/Collision/b2Distance.h	/^	b2Transform transformA;$/;"	m	struct:b2DistanceInput
transformB	include/Box2D/Collision/b2Distance.h	/^	b2Transform transformB;$/;"	m	struct:b2DistanceInput
type	include/Box2D/Collision/b2CollideEdge.cpp	/^	Type type;$/;"	m	struct:b2EPAxis	file:
type	include/Box2D/Collision/b2Collision.h	/^	Type type;$/;"	m	struct:b2Manifold
type	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Manifold::Type type;$/;"	m	struct:b2ContactPositionConstraint	file:
type	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointType type;$/;"	m	struct:b2JointDef
type	include/Box2D/Dynamics/b2Body.h	/^	b2BodyType type;$/;"	m	struct:b2BodyDef
type	include/SFML/Window/Event.hpp	/^    EventType type; \/\/\/< Type of the event$/;"	m	class:sf::Event
typeA	include/Box2D/Collision/b2Collision.h	/^	uint8 typeA;		\/\/\/< The feature type on shapeA$/;"	m	struct:b2ContactFeature
typeB	include/Box2D/Collision/b2Collision.h	/^	uint8 typeB;		\/\/\/< The feature type on shapeB$/;"	m	struct:b2ContactFeature
uint16	include/Box2D/Common/b2Settings.h	/^typedef unsigned short uint16;$/;"	t
uint32	include/Box2D/Common/b2Settings.h	/^typedef unsigned int uint32;$/;"	t
uint64_t	core/Hash.h	/^typedef unsigned long long uint64_t;$/;"	t
uint8	include/Box2D/Common/b2Settings.h	/^typedef unsigned char uint8;$/;"	t
unicode	include/SFML/Window/Event.hpp	/^        Uint32 unicode; \/\/\/< UTF-32 unicode value of the character$/;"	m	struct:sf::Event::TextEvent
upperAngle	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 upperAngle;$/;"	m	struct:b2RevoluteJointDef
upperBound	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 upperBound;	\/\/\/< the upper vertex$/;"	m	struct:b2AABB
upperTranslation	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 upperTranslation;$/;"	m	struct:b2PrismaticJointDef
useRadii	include/Box2D/Collision/b2Distance.h	/^	bool useRadii;$/;"	m	struct:b2DistanceInput
useVertexCache	include/SFML/Graphics/RenderTarget.hpp	/^        bool      useVertexCache; \/\/\/< Did we previously use the vertex cache?$/;"	m	struct:sf::RenderTarget::StatesCache
usedMalloc	include/Box2D/Common/b2StackAllocator.h	/^	bool usedMalloc;$/;"	m	struct:b2StackEntry
userData	include/Box2D/Collision/b2DynamicTree.h	/^	void* userData;$/;"	m	struct:b2TreeNode
userData	include/Box2D/Dynamics/Joints/b2Joint.h	/^	void* userData;$/;"	m	struct:b2JointDef
userData	include/Box2D/Dynamics/b2Body.h	/^	void* userData;$/;"	m	struct:b2BodyDef
userData	include/Box2D/Dynamics/b2Fixture.h	/^	void* userData;$/;"	m	struct:b2FixtureDef
util	util/logObject.h	/^namespace util{$/;"	n
v	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 v;$/;"	m	struct:b2ClipVertex
v	include/Box2D/Dynamics/b2TimeStep.h	/^	b2Vec2 v;$/;"	m	struct:b2Velocity
v1	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 v1, v2;$/;"	m	struct:b2ReferenceFace	file:
v2	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 v1, v2;$/;"	m	struct:b2ReferenceFace	file:
val	core/Property.h	/^		T val;$/;"	m	class:Property
velocities	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Velocity* velocities;$/;"	m	struct:b2ContactSolverDef
velocities	include/Box2D/Dynamics/b2TimeStep.h	/^	b2Velocity* velocities;$/;"	m	struct:b2SolverData
velocityBias	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 velocityBias;$/;"	m	struct:b2VelocityConstraintPoint
velocityIterations	include/Box2D/Dynamics/b2TimeStep.h	/^	int32 velocityIterations;$/;"	m	struct:b2TimeStep
vertexCache	include/SFML/Graphics/RenderTarget.hpp	/^        Vertex    vertexCache[VertexCacheSize]; \/\/\/< Pre-transformed vertices cache$/;"	m	struct:sf::RenderTarget::StatesCache
vertices	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 vertices[b2_maxPolygonVertices];$/;"	m	struct:b2TempPolygon	file:
vertices	include/Box2D/Rope/b2Rope.h	/^	b2Vec2* vertices;$/;"	m	struct:b2RopeDef
viewChanged	include/SFML/Graphics/RenderTarget.hpp	/^        bool      viewChanged;    \/\/\/< Has the current view changed since last draw?$/;"	m	struct:sf::RenderTarget::StatesCache
w	include/Box2D/Collision/b2Distance.cpp	/^	b2Vec2 w;		\/\/ wB - wA$/;"	m	struct:b2SimplexVertex	file:
w	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 w;$/;"	m	struct:b2Velocity
wA	include/Box2D/Collision/b2Distance.cpp	/^	b2Vec2 wA;		\/\/ support point in proxyA$/;"	m	struct:b2SimplexVertex	file:
wB	include/Box2D/Collision/b2Distance.cpp	/^	b2Vec2 wB;		\/\/ support point in proxyB$/;"	m	struct:b2SimplexVertex	file:
warmStarting	include/Box2D/Dynamics/b2TimeStep.h	/^	bool warmStarting;$/;"	m	struct:b2TimeStep
width	include/SFML/Graphics/Font.hpp	/^        unsigned int width;  \/\/\/< Current width of the row$/;"	m	struct:sf::Font::Row
width	include/SFML/Graphics/Rect.hpp	/^    T width;  \/\/\/< Width of the rectangle$/;"	m	class:sf::Rect
width	include/SFML/Window/Event.hpp	/^        unsigned int width;  \/\/\/< New width, in pixels$/;"	m	struct:sf::Event::SizeEvent
width	include/SFML/Window/VideoMode.hpp	/^    unsigned int width;        \/\/\/< Video mode width, in pixels$/;"	m	class:sf::VideoMode
x	include/Box2D/Common/b2Math.h	/^	float32 x, y, z;$/;"	m	struct:b2Vec3
x	include/Box2D/Common/b2Math.h	/^	float32 x, y;$/;"	m	struct:b2Vec2
x	include/SFML/System/Vector2.hpp	/^    T x; \/\/\/< X coordinate of the vector$/;"	m	class:sf::Vector2
x	include/SFML/System/Vector3.hpp	/^    T x; \/\/\/< X coordinate of the vector$/;"	m	class:sf::Vector3
x	include/SFML/Window/Event.hpp	/^        int           x;      \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseButtonEvent
x	include/SFML/Window/Event.hpp	/^        int x;     \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseWheelEvent
x	include/SFML/Window/Event.hpp	/^        int x; \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseMoveEvent
y	include/Box2D/Common/b2Math.h	/^	float32 x, y, z;$/;"	m	struct:b2Vec3
y	include/Box2D/Common/b2Math.h	/^	float32 x, y;$/;"	m	struct:b2Vec2
y	include/SFML/System/Vector2.hpp	/^    T y; \/\/\/< Y coordinate of the vector$/;"	m	class:sf::Vector2
y	include/SFML/System/Vector3.hpp	/^    T y; \/\/\/< Y coordinate of the vector$/;"	m	class:sf::Vector3
y	include/SFML/Window/Event.hpp	/^        int           y;      \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseButtonEvent
y	include/SFML/Window/Event.hpp	/^        int y;     \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseWheelEvent
y	include/SFML/Window/Event.hpp	/^        int y; \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseMoveEvent
z	include/Box2D/Common/b2Math.h	/^	float32 x, y, z;$/;"	m	struct:b2Vec3
z	include/SFML/System/Vector3.hpp	/^    T z; \/\/\/< Z coordinate of the vector$/;"	m	class:sf::Vector3
~Drawable	include/SFML/Graphics/Drawable.hpp	/^    virtual ~Drawable() {}$/;"	f	class:sf::Drawable
~InputStream	include/SFML/System/InputStream.hpp	/^    virtual ~InputStream() {}$/;"	f	class:sf::InputStream
~b2BlockAllocator	include/Box2D/Common/b2BlockAllocator.cpp	/^b2BlockAllocator::~b2BlockAllocator()$/;"	f	class:b2BlockAllocator
~b2Body	include/Box2D/Dynamics/b2Body.cpp	/^b2Body::~b2Body()$/;"	f	class:b2Body
~b2BroadPhase	include/Box2D/Collision/b2BroadPhase.cpp	/^b2BroadPhase::~b2BroadPhase()$/;"	f	class:b2BroadPhase
~b2ChainAndCircleContact	include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.h	/^	~b2ChainAndCircleContact() {}$/;"	f	class:b2ChainAndCircleContact
~b2ChainAndPolygonContact	include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.h	/^	~b2ChainAndPolygonContact() {}$/;"	f	class:b2ChainAndPolygonContact
~b2ChainShape	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^b2ChainShape::~b2ChainShape()$/;"	f	class:b2ChainShape
~b2CircleContact	include/Box2D/Dynamics/Contacts/b2CircleContact.h	/^	~b2CircleContact() {}$/;"	f	class:b2CircleContact
~b2Contact	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	virtual ~b2Contact() {}$/;"	f	class:b2Contact
~b2ContactFilter	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual ~b2ContactFilter() {}$/;"	f	class:b2ContactFilter
~b2ContactListener	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual ~b2ContactListener() {}$/;"	f	class:b2ContactListener
~b2ContactSolver	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^b2ContactSolver::~b2ContactSolver()$/;"	f	class:b2ContactSolver
~b2DestructionListener	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual ~b2DestructionListener() {}$/;"	f	class:b2DestructionListener
~b2Draw	include/Box2D/Common/b2Draw.h	/^	virtual ~b2Draw() {}$/;"	f	class:b2Draw
~b2DynamicTree	include/Box2D/Collision/b2DynamicTree.cpp	/^b2DynamicTree::~b2DynamicTree()$/;"	f	class:b2DynamicTree
~b2EdgeAndCircleContact	include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.h	/^	~b2EdgeAndCircleContact() {}$/;"	f	class:b2EdgeAndCircleContact
~b2EdgeAndPolygonContact	include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.h	/^	~b2EdgeAndPolygonContact() {}$/;"	f	class:b2EdgeAndPolygonContact
~b2GrowableStack	include/Box2D/Common/b2GrowableStack.h	/^	~b2GrowableStack()$/;"	f	class:b2GrowableStack
~b2Island	include/Box2D/Dynamics/b2Island.cpp	/^b2Island::~b2Island()$/;"	f	class:b2Island
~b2Joint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	virtual ~b2Joint() {}$/;"	f	class:b2Joint
~b2PolygonAndCircleContact	include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.h	/^	~b2PolygonAndCircleContact() {}$/;"	f	class:b2PolygonAndCircleContact
~b2PolygonContact	include/Box2D/Dynamics/Contacts/b2PolygonContact.h	/^	~b2PolygonContact() {}$/;"	f	class:b2PolygonContact
~b2QueryCallback	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual ~b2QueryCallback() {}$/;"	f	class:b2QueryCallback
~b2RayCastCallback	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual ~b2RayCastCallback() {}$/;"	f	class:b2RayCastCallback
~b2Rope	include/Box2D/Rope/b2Rope.cpp	/^b2Rope::~b2Rope()$/;"	f	class:b2Rope
~b2Shape	include/Box2D/Collision/Shapes/b2Shape.h	/^	virtual ~b2Shape() {}$/;"	f	class:b2Shape
~b2StackAllocator	include/Box2D/Common/b2StackAllocator.cpp	/^b2StackAllocator::~b2StackAllocator()$/;"	f	class:b2StackAllocator
~b2World	include/Box2D/Dynamics/b2World.cpp	/^b2World::~b2World()$/;"	f	class:b2World
~baseLog	util/logObject.cpp	/^util::baseLog::~baseLog(){}/;"	f	class:util::baseLog
~baseProperty	core/Property.h	/^	virtual ~baseProperty(){};$/;"	f	class:baseProperty
~objectMgr	core/objectMgr.h	/^	~objectMgr(){};$/;"	f	class:objectMgr
~objectProcessor	core/objectProcessor.h	/^	virtual ~objectProcessor(){};$/;"	f	class:objectProcessor
~scopedLog	util/logObject.h	/^		~scopedLog(){$/;"	f	class:util::scopedLog
