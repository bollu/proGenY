!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
Executor	core/AI/baseAI.cpp	/^Executor::Executor(Object::objectMap &_objectMap, Object *_owner) : objectMap(_objectMap), owner(_owner){};$/;"	f	class:Executor
Sensor	core/AI/baseAI.cpp	/^Sensor::Sensor(Object *_owner,std::string _name) : owner(_owner), name(_name){}$/;"	f	class:Sensor
Task	core/AI/baseAI.cpp	/^Task::Task(Object::objectMap &_objectMap, Object *_owner) : objectMap(_objectMap), owner(_owner){};$/;"	f	class:Task
getName	core/AI/baseAI.cpp	/^std::string Sensor::getName() const{$/;"	f	class:Sensor
isExclusive	core/AI/baseAI.cpp	/^bool Task::isExclusive() const{$/;"	f	class:Task
AI	core/AI/baseAI.h	/^namespace AI{$/;"	n
Brain	core/AI/baseAI.h	/^	class Brain{$/;"	c	namespace:AI
Executor	core/AI/baseAI.h	/^	class Executor{$/;"	c	namespace:AI
Sensor	core/AI/baseAI.h	/^	class Sensor{$/;"	c	namespace:AI
Task	core/AI/baseAI.h	/^	class Task{$/;"	c	namespace:AI
executorMap	core/AI/baseAI.h	/^		typedef std::map<const Hash *, Executor> executorMap;$/;"	t	class:AI::Executor
executors	core/AI/baseAI.h	/^		Executor::executorMap executors;$/;"	m	class:AI::Brain
name	core/AI/baseAI.h	/^		std::string name;$/;"	m	class:AI::Sensor
objectMap	core/AI/baseAI.h	/^		Object::objectMap &objectMap;$/;"	m	class:AI::Executor
objectMap	core/AI/baseAI.h	/^		Object::objectMap &objectMap;$/;"	m	class:AI::Task
owner	core/AI/baseAI.h	/^		Object *owner;$/;"	m	class:AI::Brain
owner	core/AI/baseAI.h	/^		Object *owner;$/;"	m	class:AI::Executor
owner	core/AI/baseAI.h	/^		Object *owner;$/;"	m	class:AI::Sensor
owner	core/AI/baseAI.h	/^		Object *owner;$/;"	m	class:AI::Task
sensorMap	core/AI/baseAI.h	/^		typedef std::map<const Hash *, Sensor> sensorMap;$/;"	t	class:AI::Sensor
sensors	core/AI/baseAI.h	/^		Sensor::sensorMap sensors;$/;"	m	class:AI::Brain
tasks	core/AI/baseAI.h	/^		std::vector<Task *>tasks;$/;"	m	class:AI::Brain
Sense	core/AI/distanceSensor.cpp	/^void distanceSensor::Sense(){$/;"	f	class:distanceSensor
distanceSensor	core/AI/distanceSensor.cpp	/^distanceSensor::distanceSensor(Object *owner, b2World *world, std::string targetClass) :$/;"	f	class:distanceSensor
distanceSensor	core/AI/distanceSensor.h	/^class distanceSensor : public AI::Sensor{$/;"	c
targetClass	core/AI/distanceSensor.h	/^	std::string targetClass;$/;"	m	class:distanceSensor
Hash	core/IO/Hash.cpp	/^Hash::Hash(std::string &str, unsigned int seed){$/;"	f	class:Hash
Hash2Str	core/IO/Hash.cpp	/^std::string Hash::Hash2Str(const Hash *hash){$/;"	f	class:Hash
_MurmurHash64B	core/IO/Hash.cpp	/^uint64_t Hash::_MurmurHash64B ( const void * key, int len, unsigned int seed ){$/;"	f	class:Hash
getHash	core/IO/Hash.cpp	/^const Hash* Hash::getHash(const char* str){$/;"	f	class:Hash
getHash	core/IO/Hash.cpp	/^const Hash* Hash::getHash(std::string &str){$/;"	f	class:Hash
getVal	core/IO/Hash.cpp	/^uint64_t Hash::getVal() const{$/;"	f	class:Hash
hashMap	core/IO/Hash.cpp	/^std::map<std::string, Hash* > Hash::hashMap;$/;"	m	class:Hash	file:
operator <	core/IO/Hash.cpp	/^bool Hash::operator < (const Hash &other) const{$/;"	f	class:Hash
operator ==	core/IO/Hash.cpp	/^bool Hash::operator == (const Hash &other) const{$/;"	f	class:Hash
operator >	core/IO/Hash.cpp	/^bool Hash::operator > (const Hash &other) const{$/;"	f	class:Hash
seed	core/IO/Hash.cpp	/^unsigned int Hash::seed;$/;"	m	class:Hash	file:
setSeed	core/IO/Hash.cpp	/^void Hash::setSeed(unsigned int seed){$/;"	f	class:Hash
Hash	core/IO/Hash.h	/^class Hash{$/;"	c
HashMap	core/IO/Hash.h	/^	typedef std::map<std::string, Hash* > HashMap; $/;"	t	class:Hash
hashMap	core/IO/Hash.h	/^	static HashMap hashMap;$/;"	m	class:Hash
hashMapIt	core/IO/Hash.h	/^	typedef HashMap::iterator hashMapIt;$/;"	t	class:Hash
hashedVal	core/IO/Hash.h	/^	uint64_t hashedVal;$/;"	m	class:Hash
seed	core/IO/Hash.h	/^	static unsigned int seed;$/;"	m	class:Hash
uint64_t	core/IO/Hash.h	/^typedef unsigned long long uint64_t;$/;"	t
Settings	core/IO/Settings.h	/^	Settings(){};$/;"	f	class:Settings
Settings	core/IO/Settings.h	/^class Settings{$/;"	c
addProp	core/IO/Settings.h	/^	void addProp(const Hash *propertyName, baseProperty* property){$/;"	f	class:Settings
getPrimitive	core/IO/Settings.h	/^	T* getPrimitive(const Hash *propertyName){$/;"	f	class:Settings
loadSettingsFromFile	core/IO/Settings.h	/^	void loadSettingsFromFile(std::string filePath){};$/;"	f	class:Settings
settingsMap	core/IO/Settings.h	/^	std::map<const Hash *, baseProperty*>settingsMap; $/;"	m	class:Settings
_handleEvent	core/IO/eventProcess.cpp	/^void eventProcess::_handleEvent(){$/;"	f	class:eventProcess
_handleKeyboardPressed	core/IO/eventProcess.cpp	/^void eventProcess::_handleKeyboardPressed(){$/;"	f	class:eventProcess
_handleKeyboardReleased	core/IO/eventProcess.cpp	/^void eventProcess::_handleKeyboardReleased(){$/;"	f	class:eventProcess
_handleMouseButtonPressed	core/IO/eventProcess.cpp	/^void eventProcess::_handleMouseButtonPressed(){$/;"	f	class:eventProcess
_handleMouseButtonReleased	core/IO/eventProcess.cpp	/^void eventProcess::_handleMouseButtonReleased(){$/;"	f	class:eventProcess
_handleMouseMove	core/IO/eventProcess.cpp	/^void eventProcess::_handleMouseMove(){$/;"	f	class:eventProcess
_handleMouseWheelMove	core/IO/eventProcess.cpp	/^void eventProcess::_handleMouseWheelMove(){$/;"	f	class:eventProcess
_handleWindowCloseEvent	core/IO/eventProcess.cpp	/^void eventProcess::_handleWindowCloseEvent(){$/;"	f	class:eventProcess
preUpdate	core/IO/eventProcess.cpp	/^void eventProcess::preUpdate(){$/;"	f	class:eventProcess
event	core/IO/eventProcess.h	/^ 	sf::Event event;$/;"	m	class:eventProcess
eventManager	core/IO/eventProcess.h	/^ 	eventMgr &eventManager;$/;"	m	class:eventProcess
eventProcess	core/IO/eventProcess.h	/^ 	eventProcess(processMgr &processManager, Settings &settings, eventMgr &_eventManager) :$/;"	f	class:eventProcess
eventProcess	core/IO/eventProcess.h	/^ class eventProcess : public Process{$/;"	c
window	core/IO/eventProcess.h	/^ 	sf::RenderWindow *window;$/;"	m	class:eventProcess
baseLog	core/IO/logObject.cpp	/^IO::baseLog::baseLog(){};$/;"	f	class:IO::baseLog
thresholdLevel	core/IO/logObject.cpp	/^IO::logLevel IO::baseLog::thresholdLevel;$/;"	m	class:IO::baseLog	file:
~baseLog	core/IO/logObject.cpp	/^IO::baseLog::~baseLog(){}$/;"	f	class:IO::baseLog
IO	core/IO/logObject.h	/^namespace IO{$/;"	n
LOG_GLOBAL_OBJECTS	core/IO/logObject.h	150;"	d
Throw	core/IO/logObject.h	/^		void Throw(){$/;"	f	class:IO::msgLog
_Flush	core/IO/logObject.h	/^	class _Flush{ public: _Flush(){}; };$/;"	c	namespace:IO
_Flush	core/IO/logObject.h	/^	class _Flush{ public: _Flush(){}; };$/;"	f	class:IO::_Flush
baseLog	core/IO/logObject.h	/^	class baseLog{$/;"	c	namespace:IO
enabled	core/IO/logObject.h	/^		bool enabled;$/;"	m	class:IO::scopedLog
errorLog	core/IO/logObject.h	/^	static IO::msgLog<logLevelError> errorLog;$/;"	m	namespace:IO
flush	core/IO/logObject.h	/^	static const _Flush flush;$/;"	m	namespace:IO
infoLog	core/IO/logObject.h	/^	static IO::msgLog<logLevelInfo> infoLog;$/;"	m	namespace:IO
logLevel	core/IO/logObject.h	/^	enum logLevel{$/;"	g	namespace:IO
logLevelError	core/IO/logObject.h	/^		logLevelError, $/;"	e	enum:IO::logLevel
logLevelInfo	core/IO/logObject.h	/^		logLevelInfo = 0, $/;"	e	enum:IO::logLevel
logLevelNoEmit	core/IO/logObject.h	/^		logLevelNoEmit, $/;"	e	enum:IO::logLevel
logLevelWarning	core/IO/logObject.h	/^		logLevelWarning, $/;"	e	enum:IO::logLevel
msgLog	core/IO/logObject.h	/^		msgLog(){$/;"	f	class:IO::msgLog
msgLog	core/IO/logObject.h	/^		msgLog(){};$/;"	f	class:IO::msgLog
msgLog	core/IO/logObject.h	/^	class msgLog : public baseLog{$/;"	c	namespace:IO
msgLog	core/IO/logObject.h	/^	class msgLog<logLevelError> : public baseLog{$/;"	c	namespace:IO
onDestroyMsg	core/IO/logObject.h	/^		std::string onDestroyMsg;$/;"	m	class:IO::scopedLog
operator <<	core/IO/logObject.h	/^		msgLog & operator << (const Hash* toWrite){$/;"	f	class:IO::msgLog
operator <<	core/IO/logObject.h	/^		msgLog & operator << (const T &toWrite){$/;"	f	class:IO::msgLog
operator <<	core/IO/logObject.h	/^		msgLog & operator << (const _Flush& flush){$/;"	f	class:IO::msgLog
scopedLog	core/IO/logObject.h	/^		scopedLog(std::string onCreateMsg, std::string onDestroyMsg, logLevel level = logLevelInfo){$/;"	f	class:IO::scopedLog
scopedLog	core/IO/logObject.h	/^	class scopedLog : public baseLog{$/;"	c	namespace:IO
setThreshold	core/IO/logObject.h	/^		static void setThreshold(logLevel logThreshold){$/;"	f	class:IO::baseLog
thresholdLevel	core/IO/logObject.h	/^		static logLevel thresholdLevel; $/;"	m	class:IO::baseLog
warningLog	core/IO/logObject.h	/^	static 	IO::msgLog<logLevelWarning> warningLog;$/;"	m	namespace:IO
~scopedLog	core/IO/logObject.h	/^		~scopedLog(){$/;"	f	class:IO::scopedLog
strHelper	core/IO/strHelper.h	/^	class strHelper{$/;"	c	namespace:util
toStr	core/IO/strHelper.h	/^		static std::string toStr(const T &value){$/;"	f	class:util::strHelper
util	core/IO/strHelper.h	/^namespace util{$/;"	n
Draw	core/Rendering/renderProcess.cpp	/^void renderProcess::Draw(){$/;"	f	class:renderProcess
addRenderNode	core/Rendering/renderProcess.cpp	/^void renderProcess::addRenderNode(renderProcess::baseRenderNode *node){$/;"	f	class:renderProcess
removeRenderNode	core/Rendering/renderProcess.cpp	/^void renderProcess::removeRenderNode(renderProcess::baseRenderNode *toRemove){$/;"	f	class:renderProcess
renderProcess	core/Rendering/renderProcess.cpp	/^renderProcess::renderProcess(processMgr &processManager, Settings &settings, eventMgr &_eventManager) :$/;"	f	class:renderProcess
Draw	core/Rendering/renderProcess.h	/^		void Draw(sf::RenderWindow *window){$/;"	f	class:renderProcess::renderNode
baseRenderNode	core/Rendering/renderProcess.h	/^		baseRenderNode(){$/;"	f	class:renderProcess::baseRenderNode
baseRenderNode	core/Rendering/renderProcess.h	/^	class baseRenderNode{$/;"	c	class:renderProcess
drawDisabled	core/Rendering/renderProcess.h	/^		bool drawDisabled;$/;"	m	class:renderProcess::baseRenderNode
drawable	core/Rendering/renderProcess.h	/^		T *drawable;$/;"	m	class:renderProcess::renderNode
nodes	core/Rendering/renderProcess.h	/^	std::list<baseRenderNode *> nodes;$/;"	m	class:renderProcess
renderNode	core/Rendering/renderProcess.h	/^		renderNode(T *_drawable) : drawable(_drawable){$/;"	f	class:renderProcess::renderNode
renderNode	core/Rendering/renderProcess.h	/^		renderNode(T *_drawable, int z) : drawable(_drawable){$/;"	f	class:renderProcess::renderNode
renderNode	core/Rendering/renderProcess.h	/^	class renderNode : public baseRenderNode{$/;"	c	class:renderProcess
renderProcess	core/Rendering/renderProcess.h	/^class renderProcess: public Process{$/;"	c
setPosition	core/Rendering/renderProcess.h	/^		void setPosition(vector2 position){$/;"	f	class:renderProcess::renderNode
setRotation	core/Rendering/renderProcess.h	/^		void setRotation(util::Angle angle){$/;"	f	class:renderProcess::renderNode
shapeRenderNode	core/Rendering/renderProcess.h	/^typedef renderProcess::renderNode<sf::Shape> shapeRenderNode;$/;"	t
sortFn	core/Rendering/renderProcess.h	/^	static bool sortFn(baseRenderNode *first, baseRenderNode *second){$/;"	f	class:renderProcess
spriteRenderNode	core/Rendering/renderProcess.h	/^typedef renderProcess::renderNode<sf::Shape> spriteRenderNode;$/;"	t
textRenderNode	core/Rendering/renderProcess.h	/^typedef renderProcess::renderNode<sf::Shape> textRenderNode;$/;"	t
window	core/Rendering/renderProcess.h	/^	sf::RenderWindow *window;$/;"	m	class:renderProcess
z	core/Rendering/renderProcess.h	/^		int z;$/;"	m	class:renderProcess::baseRenderNode
createCircleShape	core/Rendering/renderUtil.cpp	/^sf::Shape *renderUtil::createCircleShape(const b2CircleShape *b2Shape, viewProcess *view){$/;"	f	class:renderUtil
createPolyShape	core/Rendering/renderUtil.cpp	/^sf::Shape *renderUtil::createPolyShape(const b2PolygonShape *b2Shape, viewProcess *view){$/;"	f	class:renderUtil
createRectangleShape	core/Rendering/renderUtil.cpp	/^sf::Shape *renderUtil::createRectangleShape(const vector2 &dim){$/;"	f	class:renderUtil
createShape	core/Rendering/renderUtil.cpp	/^sf::Shape *renderUtil::createShape(const b2Shape *shape, viewProcess *view){$/;"	f	class:renderUtil
renderUtil	core/Rendering/renderUtil.h	/^class renderUtil{$/;"	c
Update	core/Rendering/viewProcess.cpp	/^void viewProcess::Update(float dt){$/;"	f	class:viewProcess
game2ViewCoord	core/Rendering/viewProcess.cpp	/^vector2 viewProcess::game2ViewCoord(vector2 gameCoord){$/;"	f	class:viewProcess
getCenter	core/Rendering/viewProcess.cpp	/^vector2 viewProcess::getCenter(){$/;"	f	class:viewProcess
getGame2RenderScale	core/Rendering/viewProcess.cpp	/^float viewProcess::getGame2RenderScale(){$/;"	f	class:viewProcess
getRender2GameScale	core/Rendering/viewProcess.cpp	/^float viewProcess::getRender2GameScale(){$/;"	f	class:viewProcess
move	core/Rendering/viewProcess.cpp	/^void viewProcess::move(vector2 offset){$/;"	f	class:viewProcess
recieveEvent	core/Rendering/viewProcess.cpp	/^void viewProcess::recieveEvent(const Hash *eventName, baseProperty *eventData){$/;"	f	class:viewProcess
render2ScreeenCoord	core/Rendering/viewProcess.cpp	/^vector2 viewProcess::render2ScreeenCoord(vector2 renderCoord){$/;"	f	class:viewProcess
render2ViewCoord	core/Rendering/viewProcess.cpp	/^vector2 viewProcess::render2ViewCoord(vector2 screenCoord){$/;"	f	class:viewProcess
screen2RenderCoord	core/Rendering/viewProcess.cpp	/^vector2 viewProcess::screen2RenderCoord(vector2 screenCoord){$/;"	f	class:viewProcess
setCenter	core/Rendering/viewProcess.cpp	/^void viewProcess::setCenter(vector2 center){$/;"	f	class:viewProcess
setRotation	core/Rendering/viewProcess.cpp	/^void viewProcess::setRotation(util::Angle angle){$/;"	f	class:viewProcess
view2GameCoord	core/Rendering/viewProcess.cpp	/^vector2 viewProcess::view2GameCoord(vector2 renderCoord){$/;"	f	class:viewProcess
view2RenderCoord	core/Rendering/viewProcess.cpp	/^vector2 viewProcess::view2RenderCoord(vector2 renderCoord){$/;"	f	class:viewProcess
viewProcess	core/Rendering/viewProcess.cpp	/^viewProcess::viewProcess(processMgr &processManager, Settings &settings, eventMgr &_eventManager) :$/;"	f	class:viewProcess
defaultView	core/Rendering/viewProcess.h	/^	sf::View defaultView;$/;"	m	class:viewProcess
eventManager	core/Rendering/viewProcess.h	/^	eventMgr &eventManager;$/;"	m	class:viewProcess
game2RenderScale	core/Rendering/viewProcess.h	/^	float game2RenderScale;$/;"	m	class:viewProcess
viewProcess	core/Rendering/viewProcess.h	/^class viewProcess : public Process, public Observer{$/;"	c
window	core/Rendering/viewProcess.h	/^	sf::RenderWindow *window;$/;"	m	class:viewProcess
windowHeight	core/Rendering/viewProcess.h	/^	float windowHeight;$/;"	m	class:viewProcess
Shudown	core/Rendering/windowProcess.h	/^	void Shudown(){$/;"	f	class:windowProcess
clearColor	core/Rendering/windowProcess.h	/^	sf::Color clearColor;$/;"	m	class:windowProcess
getWindow	core/Rendering/windowProcess.h	/^	sf::RenderWindow *getWindow(){$/;"	f	class:windowProcess
postDraw	core/Rendering/windowProcess.h	/^	void postDraw(){$/;"	f	class:windowProcess
preUpdate	core/Rendering/windowProcess.h	/^	virtual void preUpdate(){$/;"	f	class:windowProcess
setClearColor	core/Rendering/windowProcess.h	/^	void setClearColor(sf::Color color){$/;"	f	class:windowProcess
window	core/Rendering/windowProcess.h	/^	sf::RenderWindow *window;$/;"	m	class:windowProcess
windowProcess	core/Rendering/windowProcess.h	/^	windowProcess(processMgr &processManager, Settings &settings, eventMgr &eventManager) : $/;"	f	class:windowProcess
windowProcess	core/Rendering/windowProcess.h	/^class windowProcess : public Process{$/;"	c
BeginContact	core/World/objContactListener.cpp	/^void objContactListener::BeginContact(b2Contact* contact){$/;"	f	class:objContactListener
EndContact	core/World/objContactListener.cpp	/^void objContactListener::EndContact(b2Contact* contact){$/;"	f	class:objContactListener
_extractPhyData	core/World/objContactListener.cpp	/^void objContactListener::_extractPhyData(b2Contact *contact, Object **a, Object **b){$/;"	f	class:objContactListener
_fillCollisionData	core/World/objContactListener.cpp	/^collisionData objContactListener::_fillCollisionData(b2Contact *contact,$/;"	f	class:objContactListener
_handleCollision	core/World/objContactListener.cpp	/^void objContactListener::_handleCollision(collisionData::Type type, b2Contact *contact){$/;"	f	class:objContactListener
getCollidedObjectCollision	core/World/objContactListener.cpp	/^const Hash *collisionData::getCollidedObjectCollision(){$/;"	f	class:collisionData
Type	core/World/objContactListener.h	/^	enum Type{$/;"	g	struct:collisionData
collisionData	core/World/objContactListener.h	/^struct collisionData{$/;"	s
myApproachVel	core/World/objContactListener.h	/^	vector2 myApproachVel;$/;"	m	struct:collisionData
myPhy	core/World/objContactListener.h	/^	phyData *myPhy;$/;"	m	struct:collisionData
normal	core/World/objContactListener.h	/^	vector2 normal;$/;"	m	struct:collisionData
objContactListener	core/World/objContactListener.h	/^	objContactListener(){};$/;"	f	class:objContactListener
objContactListener	core/World/objContactListener.h	/^class objContactListener : public b2ContactListener{$/;"	c
onBegin	core/World/objContactListener.h	/^		onBegin,$/;"	e	enum:collisionData::Type
onEnd	core/World/objContactListener.h	/^		onEnd,$/;"	e	enum:collisionData::Type
otherObj	core/World/objContactListener.h	/^	Object *otherObj;	$/;"	m	struct:collisionData
otherPhy	core/World/objContactListener.h	/^	phyData *otherPhy;$/;"	m	struct:collisionData
type	core/World/objContactListener.h	/^	} type;$/;"	m	struct:collisionData	typeref:enum:collisionData::Type
~objContactListener	core/World/objContactListener.h	/^	~objContactListener(){};$/;"	f	class:objContactListener
object	core/World/rayCastQuery.h	/^	std::vector<Object *> object;$/;"	m	class:worldAABBQuery
worldAABBQuery	core/World/rayCastQuery.h	/^class worldAABBQuery : public b2QueryCallback{$/;"	c
Draw	core/World/worldProcess.cpp	/^void worldProcess::Draw(){};$/;"	f	class:worldProcess
Pause	core/World/worldProcess.cpp	/^void worldProcess::Pause(){$/;"	f	class:worldProcess
Resume	core/World/worldProcess.cpp	/^void worldProcess::Resume(){$/;"	f	class:worldProcess
Shutdown	core/World/worldProcess.cpp	/^void worldProcess::Shutdown(){$/;"	f	class:worldProcess
Start	core/World/worldProcess.cpp	/^void worldProcess::Start(){$/;"	f	class:worldProcess
Update	core/World/worldProcess.cpp	/^void worldProcess::Update(float dt){$/;"	f	class:worldProcess
_Simulate	core/World/worldProcess.cpp	/^void worldProcess::_Simulate(){$/;"	f	class:worldProcess
createBody	core/World/worldProcess.cpp	/^b2Body *worldProcess::createBody(const b2BodyDef* def){$/;"	f	class:worldProcess
destroyBody	core/World/worldProcess.cpp	/^void worldProcess::destroyBody(b2Body* body){$/;"	f	class:worldProcess
getGravity	core/World/worldProcess.cpp	/^vector2 worldProcess::getGravity(){$/;"	f	class:worldProcess
getMaxAccumilation	core/World/worldProcess.cpp	/^float worldProcess::getMaxAccumilation(){$/;"	f	class:worldProcess
getStepSize	core/World/worldProcess.cpp	/^float worldProcess::getStepSize(){$/;"	f	class:worldProcess
setContactListener	core/World/worldProcess.cpp	/^ void worldProcess::setContactListener(b2ContactListener* listener){$/;"	f	class:worldProcess
worldProcess	core/World/worldProcess.cpp	/^worldProcess::worldProcess(processMgr &processManager, Settings &settings, eventMgr &eventManager) :$/;"	f	class:worldProcess
collisionIterations	core/World/worldProcess.h	/^	float velIterations, collisionIterations;$/;"	m	class:worldProcess
dtAccumilator	core/World/worldProcess.h	/^	float dtAccumilator;$/;"	m	class:worldProcess
maxAccumilation	core/World/worldProcess.h	/^	float maxAccumilation;$/;"	m	class:worldProcess
paused	core/World/worldProcess.h	/^	bool paused = false;$/;"	m	class:worldProcess
simulationThread	core/World/worldProcess.h	/^	std::thread simulationThread; $/;"	m	class:worldProcess
stepSize	core/World/worldProcess.h	/^	float stepSize;$/;"	m	class:worldProcess
velIterations	core/World/worldProcess.h	/^	float velIterations, collisionIterations;$/;"	m	class:worldProcess
world	core/World/worldProcess.h	/^	b2World *world = NULL;$/;"	m	class:worldProcess
worldAccess	core/World/worldProcess.h	/^	std::mutex worldAccess;          $/;"	m	class:worldProcess
worldProcess	core/World/worldProcess.h	/^class worldProcess : public Process{$/;"	c
Kill	core/componentSys/Object.cpp	/^void Object::Kill(){$/;"	f	class:Object
Object	core/componentSys/Object.cpp	/^Object::Object(std::string _name) : dead(false), baseName(_name){$/;"	f	class:Object
_genUniqueName	core/componentSys/Object.cpp	/^void Object::_genUniqueName(std::string genericName, std::string &out){$/;"	f	class:Object
_getBaseProp	core/componentSys/Object.cpp	/^baseProperty *Object::_getBaseProp(const Hash *name) const{$/;"	f	class:Object
_printProperties	core/componentSys/Object.cpp	/^void Object::_printProperties() const{$/;"	f	class:Object
addProp	core/componentSys/Object.cpp	/^void Object::addProp(const Hash *name, baseProperty *value){$/;"	f	class:Object
addProp	core/componentSys/Object.cpp	/^void Object::addProp(const char *name, baseProperty *value){$/;"	f	class:Object
getBaseName	core/componentSys/Object.cpp	/^std::string Object::getBaseName() const{$/;"	f	class:Object
getName	core/componentSys/Object.cpp	/^std::string Object::getName() const{$/;"	f	class:Object
hasProperty	core/componentSys/Object.cpp	/^bool Object::hasProperty(const Hash *name) const{$/;"	f	class:Object
hasProperty	core/componentSys/Object.cpp	/^bool Object::hasProperty(const char *name) const{$/;"	f	class:Object
isDead	core/componentSys/Object.cpp	/^bool Object::isDead() const{$/;"	f	class:Object
nameMap	core/componentSys/Object.cpp	/^std::map<std::string, unsigned int> Object::nameMap;$/;"	m	class:Object	file:
requireProperty	core/componentSys/Object.cpp	/^bool Object::requireProperty(const Hash *name) const{$/;"	f	class:Object
requireProperty	core/componentSys/Object.cpp	/^bool Object::requireProperty(const char *name) const{$/;"	f	class:Object
~Object	core/componentSys/Object.cpp	/^Object::~Object(){$/;"	f	class:Object
Object	core/componentSys/Object.h	/^class Object{$/;"	c
_getProperty	core/componentSys/Object.h	/^	Prop<T> * _getProperty(const Hash* name, bool warnIfNull = true){$/;"	f	class:Object
baseName	core/componentSys/Object.h	/^	std::string baseName;$/;"	m	class:Object
cObjMapIt	core/componentSys/Object.h	/^	typedef objectMap::const_iterator cObjMapIt;$/;"	t	class:Object
cPropertyIt	core/componentSys/Object.h	/^	typedef std::map<const Hash*, baseProperty* >::const_iterator cPropertyIt;$/;"	t	class:Object
dead	core/componentSys/Object.h	/^	bool dead;$/;"	m	class:Object
getPrimitive	core/componentSys/Object.h	/^	Type* getPrimitive(const Hash *name){$/;"	f	class:Object
getPrimitive	core/componentSys/Object.h	/^	Type* getPrimitive(const char *name){$/;"	f	class:Object
name	core/componentSys/Object.h	/^	std::string name;$/;"	m	class:Object
nameIt	core/componentSys/Object.h	/^	typedef std::map<std::string, unsigned int>::iterator nameIt;$/;"	t	class:Object
nameMap	core/componentSys/Object.h	/^	static std::map<std::string, unsigned int>nameMap;$/;"	m	class:Object
objMapIt	core/componentSys/Object.h	/^	typedef objectMap::iterator objMapIt;$/;"	t	class:Object
objectList	core/componentSys/Object.h	/^	typedef std::vector<Object *> objectList;$/;"	t	class:Object
objectMap	core/componentSys/Object.h	/^	typedef std::map<std::string, Object *> objectMap;$/;"	t	class:Object
propertyIt	core/componentSys/Object.h	/^	typedef std::map<const Hash*, baseProperty* >::iterator propertyIt;$/;"	t	class:Object
propertyMap	core/componentSys/Object.h	/^	std::map<const Hash*, baseProperty* > propertyMap; $/;"	m	class:Object
Prop	core/componentSys/Property.h	/^	Prop(T value) : val(value){$/;"	f	class:Prop
Prop	core/componentSys/Property.h	/^	Prop(const Prop<T> &other){$/;"	f	class:Prop
Prop	core/componentSys/Property.h	/^class Prop : public baseProperty{$/;"	c
baseProperty	core/componentSys/Property.h	/^	baseProperty(){};$/;"	f	class:baseProperty
baseProperty	core/componentSys/Property.h	/^class baseProperty{$/;"	c
dummyProp	core/componentSys/Property.h	/^	dummyProp(){};$/;"	f	class:dummyProp
dummyProp	core/componentSys/Property.h	/^class dummyProp : public baseProperty{$/;"	c
fProp	core/componentSys/Property.h	/^typedef Prop<float> fProp;$/;"	t
getVal	core/componentSys/Property.h	/^	T *getVal(){$/;"	f	class:Prop
getVal	core/componentSys/Property.h	/^	T* getVal() const{$/;"	f	class:managedProp
getVal	core/componentSys/Property.h	/^	T* getVal() const{$/;"	f	class:ptrProp
iProp	core/componentSys/Property.h	/^typedef Prop<int> iProp;$/;"	t
managedProp	core/componentSys/Property.h	/^	managedProp(T *value){$/;"	f	class:managedProp
managedProp	core/componentSys/Property.h	/^class managedProp : public baseProperty{$/;"	c
ptrProp	core/componentSys/Property.h	/^	ptrProp(T *value){$/;"	f	class:ptrProp
ptrProp	core/componentSys/Property.h	/^class ptrProp : public baseProperty{$/;"	c
sProp	core/componentSys/Property.h	/^typedef Prop<std::string> sProp;$/;"	t
setVal	core/componentSys/Property.h	/^	void setVal(T &val){$/;"	f	class:Prop
v2Prop	core/componentSys/Property.h	/^typedef Prop<vector2> v2Prop;$/;"	t
val	core/componentSys/Property.h	/^		T val;$/;"	m	class:Prop
val	core/componentSys/Property.h	/^	T *val;$/;"	m	class:managedProp
val	core/componentSys/Property.h	/^	T* val;$/;"	m	class:ptrProp
~Prop	core/componentSys/Property.h	/^	~Prop(){$/;"	f	class:Prop
~baseProperty	core/componentSys/Property.h	/^	virtual ~baseProperty(){};$/;"	f	class:baseProperty
~dummyProp	core/componentSys/Property.h	/^	~dummyProp(){};$/;"	f	class:dummyProp
~managedProp	core/componentSys/Property.h	/^	~managedProp(){$/;"	f	class:managedProp
Process	core/componentSys/objectMgr.cpp	/^void objectMgr::Process(float dt){$/;"	f	class:objectMgr
activateObject	core/componentSys/objectMgr.cpp	/^void objectMgr::activateObject(Object &obj){$/;"	f	class:objectMgr
activateObject	core/componentSys/objectMgr.cpp	/^void objectMgr::activateObject(const char* name){$/;"	f	class:objectMgr
addObject	core/componentSys/objectMgr.cpp	/^void objectMgr::addObject(Object *obj){$/;"	f	class:objectMgr
addObjectProcessor	core/componentSys/objectMgr.cpp	/^void objectMgr::addObjectProcessor(objectProcessor *processor){$/;"	f	class:objectMgr
deactivateObject	core/componentSys/objectMgr.cpp	/^void objectMgr::deactivateObject(Object &obj){$/;"	f	class:objectMgr
deactivateObject	core/componentSys/objectMgr.cpp	/^void objectMgr::deactivateObject(const char* name){$/;"	f	class:objectMgr
getObjByName	core/componentSys/objectMgr.cpp	/^Object *objectMgr::getObjByName(const char* name){$/;"	f	class:objectMgr
postProcess	core/componentSys/objectMgr.cpp	/^void objectMgr::postProcess(){$/;"	f	class:objectMgr
preProcess	core/componentSys/objectMgr.cpp	/^void objectMgr::preProcess(){$/;"	f	class:objectMgr
removeObjectProcessor	core/componentSys/objectMgr.cpp	/^void objectMgr::removeObjectProcessor(objectProcessor *processor){$/;"	f	class:objectMgr
activeObjects	core/componentSys/objectMgr.h	/^	Object::objectMap activeObjects;$/;"	m	class:objectMgr
objMap	core/componentSys/objectMgr.h	/^	Object::objectMap objMap;$/;"	m	class:objectMgr
objProcessorIt	core/componentSys/objectMgr.h	/^	typedef std::vector<objectProcessor *>::iterator objProcessorIt;$/;"	t	class:objectMgr
objProcessors	core/componentSys/objectMgr.h	/^	std::vector<objectProcessor *> objProcessors;$/;"	m	class:objectMgr
objectMgr	core/componentSys/objectMgr.h	/^	objectMgr(){};$/;"	f	class:objectMgr
objectMgr	core/componentSys/objectMgr.h	/^class objectMgr{$/;"	c
~objectMgr	core/componentSys/objectMgr.h	/^	~objectMgr(){};$/;"	f	class:objectMgr
Update	core/componentSys/objectMgrProcess.h	/^	void Update(float dt){$/;"	f	class:objectMgrProcess
addObjectProcessor	core/componentSys/objectMgrProcess.h	/^	void addObjectProcessor(objectProcessor *processor){$/;"	f	class:objectMgrProcess
getObjectMgr	core/componentSys/objectMgrProcess.h	/^	objectMgr *getObjectMgr(){$/;"	f	class:objectMgrProcess
objManager	core/componentSys/objectMgrProcess.h	/^	objectMgr *objManager;$/;"	m	class:objectMgrProcess
objectMgrProcess	core/componentSys/objectMgrProcess.h	/^	objectMgrProcess(processMgr &processManager, Settings &settings, eventMgr &eventManager) :$/;"	f	class:objectMgrProcess
objectMgrProcess	core/componentSys/objectMgrProcess.h	/^class objectMgrProcess : public Process{$/;"	c
postDraw	core/componentSys/objectMgrProcess.h	/^	void postDraw(){$/;"	f	class:objectMgrProcess
preUpdate	core/componentSys/objectMgrProcess.h	/^	void preUpdate(){$/;"	f	class:objectMgrProcess
Init	core/componentSys/processor/objectProcessor.h	/^	void Init(Object::objectMap *_objMap){$/;"	f	class:objectProcessor
Process	core/componentSys/processor/objectProcessor.h	/^	virtual void Process(float dt){$/;"	f	class:objectProcessor
_Init	core/componentSys/processor/objectProcessor.h	/^	virtual void _Init(){};$/;"	f	class:objectProcessor
_Process	core/componentSys/processor/objectProcessor.h	/^	virtual void _Process(Object *obj, float dt){};$/;"	f	class:objectProcessor
_onObjectActivate	core/componentSys/processor/objectProcessor.h	/^	virtual void _onObjectActivate(Object *obj){};$/;"	f	class:objectProcessor
_onObjectAdd	core/componentSys/processor/objectProcessor.h	/^	virtual void _onObjectAdd(Object *obj){};$/;"	f	class:objectProcessor
_onObjectDeactivate	core/componentSys/processor/objectProcessor.h	/^	virtual void _onObjectDeactivate(Object *obj){};$/;"	f	class:objectProcessor
_onObjectDeath	core/componentSys/processor/objectProcessor.h	/^	virtual void _onObjectDeath(Object *obj){};$/;"	f	class:objectProcessor
addProcessToken	core/componentSys/processor/objectProcessor.h	/^	void addProcessToken(Object *obj){$/;"	f	class:objectProcessor
hasProcessToken	core/componentSys/processor/objectProcessor.h	/^	bool hasProcessToken(Object *obj){$/;"	f	class:objectProcessor
name	core/componentSys/processor/objectProcessor.h	/^	std::string name;$/;"	m	class:objectProcessor
objMap	core/componentSys/processor/objectProcessor.h	/^	Object::objectMap *objMap;$/;"	m	class:objectProcessor
objectProcessor	core/componentSys/processor/objectProcessor.h	/^	objectProcessor(std::string _name) : name(_name){};$/;"	f	class:objectProcessor
objectProcessor	core/componentSys/processor/objectProcessor.h	/^class objectProcessor{$/;"	c
onObjectActivate	core/componentSys/processor/objectProcessor.h	/^	virtual void onObjectActivate(Object *obj) {$/;"	f	class:objectProcessor
onObjectAdd	core/componentSys/processor/objectProcessor.h	/^	virtual void onObjectAdd(Object *obj){$/;"	f	class:objectProcessor
onObjectDeactivate	core/componentSys/processor/objectProcessor.h	/^	virtual void onObjectDeactivate(Object *obj) {$/;"	f	class:objectProcessor
onObjectDeath	core/componentSys/processor/objectProcessor.h	/^	virtual void onObjectDeath(Object *obj){$/;"	f	class:objectProcessor
postProcess	core/componentSys/processor/objectProcessor.h	/^	virtual void postProcess(){};$/;"	f	class:objectProcessor
preProcess	core/componentSys/processor/objectProcessor.h	/^	virtual void preProcess(){};$/;"	f	class:objectProcessor
~objectProcessor	core/componentSys/processor/objectProcessor.h	/^	virtual ~objectProcessor(){};$/;"	f	class:objectProcessor
_Process	core/componentSys/processor/phyProcessor.cpp	/^void phyProcessor::_Process(Object *obj, float dt){$/;"	f	class:phyProcessor
_onObjectActivate	core/componentSys/processor/phyProcessor.cpp	/^void phyProcessor::_onObjectActivate(Object *obj){$/;"	f	class:phyProcessor
_onObjectAdd	core/componentSys/processor/phyProcessor.cpp	/^void phyProcessor::_onObjectAdd(Object *obj){$/;"	f	class:phyProcessor
_onObjectDeactivate	core/componentSys/processor/phyProcessor.cpp	/^void phyProcessor::_onObjectDeactivate(Object *obj){$/;"	f	class:phyProcessor
_onObjectDeath	core/componentSys/processor/phyProcessor.cpp	/^void phyProcessor::_onObjectDeath(Object *obj){$/;"	f	class:phyProcessor
_preProcess	core/componentSys/processor/phyProcessor.cpp	/^void phyProcessor::_preProcess(){$/;"	f	class:phyProcessor
addCollision	core/componentSys/processor/phyProcessor.cpp	/^void phyData::addCollision(collisionData &collision){$/;"	f	class:phyData
phyProcessor	core/componentSys/processor/phyProcessor.cpp	/^phyProcessor::phyProcessor(processMgr &processManager, Settings &settings, eventMgr &_eventManager) :$/;"	f	class:phyProcessor
removeCollision	core/componentSys/processor/phyProcessor.cpp	/^void phyData::removeCollision(Object *obj){$/;"	f	class:phyData
_shouldProcess	core/componentSys/processor/phyProcessor.h	/^	bool _shouldProcess(Object *obj){$/;"	f	class:phyProcessor
body	core/componentSys/processor/phyProcessor.h	/^	b2Body *body;$/;"	m	struct:phyData
bodyDef	core/componentSys/processor/phyProcessor.h	/^	b2BodyDef bodyDef;$/;"	m	struct:phyData
collisionType	core/componentSys/processor/phyProcessor.h	/^	const Hash* collisionType;$/;"	m	struct:phyData
collisions	core/componentSys/processor/phyProcessor.h	/^	 std::vector<collisionData> collisions;$/;"	m	struct:phyData
contactListener	core/componentSys/processor/phyProcessor.h	/^	objContactListener contactListener;$/;"	m	class:phyProcessor
fixtureDef	core/componentSys/processor/phyProcessor.h	/^	std::vector<b2FixtureDef> fixtureDef;$/;"	m	struct:phyData
fixtures	core/componentSys/processor/phyProcessor.h	/^	std::vector<b2Fixture*>fixtures;$/;"	m	struct:phyData
maxVel	core/componentSys/processor/phyProcessor.h	/^	vector2 maxVel;$/;"	m	struct:phyData
phyData	core/componentSys/processor/phyProcessor.h	/^struct phyData{$/;"	s
phyProcessor	core/componentSys/processor/phyProcessor.h	/^class phyProcessor : public objectProcessor{$/;"	c
velClamped	core/componentSys/processor/phyProcessor.h	/^	bool velClamped;$/;"	m	struct:phyData
view	core/componentSys/processor/phyProcessor.h	/^	viewProcess *view;$/;"	m	class:phyProcessor
world	core/componentSys/processor/phyProcessor.h	/^	worldProcess *world;$/;"	m	class:phyProcessor
_Process	core/componentSys/processor/renderProcessor.cpp	/^void renderProcessor::_Process(Object *obj, float dt){$/;"	f	class:renderProcessor
_Render	core/componentSys/processor/renderProcessor.cpp	/^void renderProcessor::_Render(vector2 pos, util::Angle &angle, $/;"	f	class:renderProcessor
_onObjectActivate	core/componentSys/processor/renderProcessor.cpp	/^void renderProcessor::_onObjectActivate(Object *obj){$/;"	f	class:renderProcessor
_onObjectAdd	core/componentSys/processor/renderProcessor.cpp	/^void renderProcessor::_onObjectAdd(Object *obj){$/;"	f	class:renderProcessor
_onObjectDeactivate	core/componentSys/processor/renderProcessor.cpp	/^void renderProcessor::_onObjectDeactivate(Object *obj){$/;"	f	class:renderProcessor
_onObjectDeath	core/componentSys/processor/renderProcessor.cpp	/^void renderProcessor::_onObjectDeath(Object *obj){$/;"	f	class:renderProcessor
renderProcessor	core/componentSys/processor/renderProcessor.cpp	/^renderProcessor::renderProcessor(processMgr &processManager, $/;"	f	class:renderProcessor
_shouldProcess	core/componentSys/processor/renderProcessor.h	/^	bool _shouldProcess(Object *obj){$/;"	f	class:renderProcessor
addRenderer	core/componentSys/processor/renderProcessor.h	/^	void addRenderer(renderProcess::baseRenderNode *renderer){$/;"	f	class:renderData
centered	core/componentSys/processor/renderProcessor.h	/^	bool centered;$/;"	m	class:renderData
render	core/componentSys/processor/renderProcessor.h	/^	renderProcess *render;$/;"	m	class:renderProcessor
renderData	core/componentSys/processor/renderProcessor.h	/^	renderData() : centered(false){};$/;"	f	class:renderData
renderData	core/componentSys/processor/renderProcessor.h	/^class renderData{$/;"	c
renderProcessor	core/componentSys/processor/renderProcessor.h	/^class renderProcessor : public objectProcessor{$/;"	c
renderers	core/componentSys/processor/renderProcessor.h	/^	std::vector< renderProcess::baseRenderNode *>renderers;$/;"	m	class:renderData
view	core/componentSys/processor/renderProcessor.h	/^	viewProcess *view;$/;"	m	class:renderProcessor
window	core/componentSys/processor/renderProcessor.h	/^	sf::RenderWindow *window;$/;"	m	class:renderProcessor
Draw	core/controlFlow/Process.h	/^	virtual void Draw(){};$/;"	f	class:Process
Pause	core/controlFlow/Process.h	/^	virtual void Pause(){};$/;"	f	class:Process
Process	core/controlFlow/Process.h	/^	Process(std::string _name){$/;"	f	class:Process
Process	core/controlFlow/Process.h	/^class Process{$/;"	c
Resume	core/controlFlow/Process.h	/^	virtual void Resume(){};$/;"	f	class:Process
Shutdown	core/controlFlow/Process.h	/^	virtual void Shutdown(){};$/;"	f	class:Process
Start	core/controlFlow/Process.h	/^	virtual void Start(){};$/;"	f	class:Process
Update	core/controlFlow/Process.h	/^	virtual void Update(float dt){};$/;"	f	class:Process
getNameHash	core/controlFlow/Process.h	/^	const Hash *getNameHash(){$/;"	f	class:Process
nameHash	core/controlFlow/Process.h	/^	const Hash *nameHash;$/;"	m	class:Process
postDraw	core/controlFlow/Process.h	/^	virtual void postDraw(){};$/;"	f	class:Process
preUpdate	core/controlFlow/Process.h	/^	virtual void preUpdate(){};$/;"	f	class:Process
~Process	core/controlFlow/Process.h	/^	virtual ~Process(){};$/;"	f	class:Process
Init	core/controlFlow/State.h	/^	void Init(processMgr &_processManager, Settings &_settings, eventMgr &_eventManager){$/;"	f	class:State
State	core/controlFlow/State.h	/^	State(std::string name){$/;"	f	class:State
State	core/controlFlow/State.h	/^class State{$/;"	c
_Init	core/controlFlow/State.h	/^	virtual void _Init(){};$/;"	f	class:State
_setStateTransition	core/controlFlow/State.h	/^	void _setStateTransition(std::string _nextStateName){$/;"	f	class:State
changingState	core/controlFlow/State.h	/^	 bool changingState;$/;"	m	class:State
eventManager	core/controlFlow/State.h	/^	eventMgr *eventManager;$/;"	m	class:State
getHashedName	core/controlFlow/State.h	/^	const Hash* getHashedName(){$/;"	f	class:State
getNextStateName	core/controlFlow/State.h	/^	std::string getNextStateName(){$/;"	f	class:State
hashedName	core/controlFlow/State.h	/^	 const Hash* hashedName;$/;"	m	class:State
nextStateName	core/controlFlow/State.h	/^	 std::string nextStateName; $/;"	m	class:State
processManager	core/controlFlow/State.h	/^	processMgr *processManager;$/;"	m	class:State
settings	core/controlFlow/State.h	/^	Settings *settings;$/;"	m	class:State
shouldChangeState	core/controlFlow/State.h	/^	bool shouldChangeState(){$/;"	f	class:State
~State	core/controlFlow/State.h	/^	virtual ~State(){};$/;"	f	class:State
Load	core/controlFlow/dummyStateSaveLoader.h	/^	 void Load(){ this->doneLoading = true; };$/;"	f	class:dummyStateSaveLoader
Save	core/controlFlow/dummyStateSaveLoader.h	/^	 void Save(){ this->doneSaving = true; };$/;"	f	class:dummyStateSaveLoader
dummyStateSaveLoader	core/controlFlow/dummyStateSaveLoader.h	/^	dummyStateSaveLoader() : stateSaveLoader(NULL){};$/;"	f	class:dummyStateSaveLoader
dummyStateSaveLoader	core/controlFlow/dummyStateSaveLoader.h	/^class dummyStateSaveLoader : public stateSaveLoader{$/;"	c
~dummyStateSaveLoader	core/controlFlow/dummyStateSaveLoader.h	/^	~dummyStateSaveLoader(){};$/;"	f	class:dummyStateSaveLoader
Register	core/controlFlow/eventMgr.cpp	/^void eventMgr::Register(const Hash *eventName, Observer *observer){$/;"	f	class:eventMgr
Unregister	core/controlFlow/eventMgr.cpp	/^void eventMgr::Unregister(const Hash *eventName, Observer *observer){$/;"	f	class:eventMgr
_Dispatch	core/controlFlow/eventMgr.cpp	/^void eventMgr::_Dispatch(Event &newEvent){$/;"	f	class:eventMgr
_observersPresent	core/controlFlow/eventMgr.cpp	/^bool eventMgr::_observersPresent(const Hash *eventName){$/;"	f	class:eventMgr
_sendEvent	core/controlFlow/eventMgr.cpp	/^void eventMgr::_sendEvent(Event &event){$/;"	f	class:eventMgr
eventMgr	core/controlFlow/eventMgr.cpp	/^eventMgr::eventMgr(){$/;"	f	class:eventMgr
Event	core/controlFlow/eventMgr.h	/^	struct Event{$/;"	s	class:eventMgr
Observer	core/controlFlow/eventMgr.h	/^class Observer{$/;"	c
data	core/controlFlow/eventMgr.h	/^		baseProperty *data; $/;"	m	struct:eventMgr::Event
eventMgr	core/controlFlow/eventMgr.h	/^class eventMgr{$/;"	c
events	core/controlFlow/eventMgr.h	/^	std::queue <Event>events;$/;"	m	class:eventMgr
name	core/controlFlow/eventMgr.h	/^		const Hash *name;$/;"	m	struct:eventMgr::Event
observerList	core/controlFlow/eventMgr.h	/^	typedef std::vector<Observer *> observerList;$/;"	t	class:eventMgr
observerMap	core/controlFlow/eventMgr.h	/^	std::map<const Hash*, observerList>observerMap;$/;"	m	class:eventMgr
sendEvent	core/controlFlow/eventMgr.h	/^	void sendEvent(const Hash *eventName){$/;"	f	class:eventMgr
sendEvent	core/controlFlow/eventMgr.h	/^	void sendEvent(const Hash *eventName, T &eventData){$/;"	f	class:eventMgr
sendEvent_	core/controlFlow/eventMgr.h	/^	void sendEvent_(const Hash *eventName, baseProperty *eventData){$/;"	f	class:eventMgr
Draw	core/controlFlow/processMgr.cpp	/^void processMgr::Draw(){$/;"	f	class:processMgr
PauseProcess	core/controlFlow/processMgr.cpp	/^void processMgr::PauseProcess(const Hash* processName){$/;"	f	class:processMgr
ResumePorcess	core/controlFlow/processMgr.cpp	/^void processMgr::ResumePorcess(const Hash* processName){$/;"	f	class:processMgr
Shutdown	core/controlFlow/processMgr.cpp	/^void processMgr::Shutdown(){$/;"	f	class:processMgr
Update	core/controlFlow/processMgr.cpp	/^void processMgr::Update(float dt){$/;"	f	class:processMgr
_getProcess	core/controlFlow/processMgr.cpp	/^Process *processMgr::_getProcess(const Hash* processName){$/;"	f	class:processMgr
addProcess	core/controlFlow/processMgr.cpp	/^void processMgr::addProcess(Process *p){$/;"	f	class:processMgr
postDraw	core/controlFlow/processMgr.cpp	/^void processMgr::postDraw(){$/;"	f	class:processMgr
preUpdate	core/controlFlow/processMgr.cpp	/^void processMgr::preUpdate(){$/;"	f	class:processMgr
getProcess	core/controlFlow/processMgr.h	/^	processType *getProcess(const Hash* processName){$/;"	f	class:processMgr
processMgr	core/controlFlow/processMgr.h	/^class processMgr{$/;"	c
processes	core/controlFlow/processMgr.h	/^	std::map<const Hash*, Process *>processes;$/;"	m	class:processMgr
Draw	core/controlFlow/stateProcess.h	/^	 void Draw(){$/;"	f	class:stateProcess
Shutdown	core/controlFlow/stateProcess.h	/^	 void Shutdown(){$/;"	f	class:stateProcess
Update	core/controlFlow/stateProcess.h	/^	 void Update(float dt){$/;"	f	class:stateProcess
addState	core/controlFlow/stateProcess.h	/^ 	 void addState(State *state, bool currentState){$/;"	f	class:stateProcess
currentState	core/controlFlow/stateProcess.h	/^	State *currentState;$/;"	m	class:stateProcess
eventManager	core/controlFlow/stateProcess.h	/^	eventMgr &eventManager;$/;"	m	class:stateProcess
processManager	core/controlFlow/stateProcess.h	/^	processMgr &processManager;$/;"	m	class:stateProcess
settings	core/controlFlow/stateProcess.h	/^	Settings &settings;$/;"	m	class:stateProcess
stateProcess	core/controlFlow/stateProcess.h	/^	stateProcess(processMgr &_processManager, Settings &_settings, eventMgr &_eventManager) :$/;"	f	class:stateProcess
stateProcess	core/controlFlow/stateProcess.h	/^class stateProcess : public Process{$/;"	c
states	core/controlFlow/stateProcess.h	/^	std::map<const Hash*, State*> states;$/;"	m	class:stateProcess
transitioning	core/controlFlow/stateProcess.h	/^	bool transitioning;$/;"	m	class:stateProcess
doneLoading	core/controlFlow/stateSaveLoader.h	/^	bool doneLoading;$/;"	m	class:stateSaveLoader
doneSaving	core/controlFlow/stateSaveLoader.h	/^	bool doneSaving;$/;"	m	class:stateSaveLoader
isDoneLoading	core/controlFlow/stateSaveLoader.h	/^	bool isDoneLoading(){$/;"	f	class:stateSaveLoader
isDoneSaving	core/controlFlow/stateSaveLoader.h	/^	bool isDoneSaving(){$/;"	f	class:stateSaveLoader
stateSaveLoader	core/controlFlow/stateSaveLoader.h	/^	stateSaveLoader(State *state){$/;"	f	class:stateSaveLoader
stateSaveLoader	core/controlFlow/stateSaveLoader.h	/^class stateSaveLoader{$/;"	c
~stateSaveLoader	core/controlFlow/stateSaveLoader.h	/^	virtual ~stateSaveLoader(){};$/;"	f	class:stateSaveLoader
AABB	core/math/AABB.cpp	/^AABB::AABB(vector2 _halfDim) : center(0,0) , halfDim(_halfDim) {$/;"	f	class:AABB
AABB	core/math/AABB.cpp	/^AABB::AABB(vector2 _halfDim, vector2 _center) : center(_center), halfDim(_halfDim){$/;"	f	class:AABB
Contains	core/math/AABB.cpp	/^bool AABB::Contains(const vector2 &pt) const{$/;"	f	class:AABB
Intersects	core/math/AABB.cpp	/^bool AABB::Intersects(const AABB &other) const{$/;"	f	class:AABB
getBottomLeft	core/math/AABB.cpp	/^vector2 AABB::getBottomLeft() const{$/;"	f	class:AABB
getBottomRight	core/math/AABB.cpp	/^vector2 AABB::getBottomRight() const{$/;"	f	class:AABB
getCenter	core/math/AABB.cpp	/^vector2 AABB::getCenter() const{$/;"	f	class:AABB
getDim	core/math/AABB.cpp	/^vector2 AABB::getDim() const{$/;"	f	class:AABB
getHalfDim	core/math/AABB.cpp	/^vector2 AABB::getHalfDim() const{$/;"	f	class:AABB
getTopLeft	core/math/AABB.cpp	/^vector2 AABB::getTopLeft() const{$/;"	f	class:AABB
getTopRight	core/math/AABB.cpp	/^vector2 AABB::getTopRight() const{$/;"	f	class:AABB
liesOn	core/math/AABB.cpp	/^bool AABB::liesOn(const vector2 &pt) const{$/;"	f	class:AABB
AABB	core/math/AABB.h	/^class AABB{$/;"	c
center	core/math/AABB.h	/^	vector2 center;$/;"	m	class:AABB
halfDim	core/math/AABB.h	/^	vector2 halfDim;$/;"	m	class:AABB
Angle	core/math/mathUtil.h	/^		Angle(){$/;"	f	class:util::Angle
Angle	core/math/mathUtil.h	/^		Angle(float rad){$/;"	f	class:util::Angle
Angle	core/math/mathUtil.h	/^		Angle(vector2 vec){$/;"	f	class:util::Angle
Angle	core/math/mathUtil.h	/^	class Angle{$/;"	c	namespace:util
DEG2RAD	core/math/mathUtil.h	/^	const double DEG2RAD = util::PI \/ 180.0;$/;"	m	namespace:util
Deg	core/math/mathUtil.h	/^		static Angle Deg(float deg){$/;"	f	class:util::Angle
PI	core/math/mathUtil.h	/^	const double PI = 3.141592653589793238462;$/;"	m	namespace:util
PIBy2	core/math/mathUtil.h	/^	const float PIBy2 = PI \/ 2.0;$/;"	m	namespace:util
PRINTANGLE	core/math/mathUtil.h	6;"	d
RAD2DEG	core/math/mathUtil.h	/^	const double RAD2DEG = 180.0 \/ util::PI;$/;"	m	namespace:util
Rad	core/math/mathUtil.h	/^		static Angle Rad(float rad){$/;"	f	class:util::Angle
TwoPI	core/math/mathUtil.h	/^	const double TwoPI = 2.0 * PI;$/;"	m	namespace:util
angleInRad	core/math/mathUtil.h	/^		float angleInRad;$/;"	m	class:util::Angle
cos	core/math/mathUtil.h	/^		float cos(){$/;"	f	class:util::Angle
debugStr	core/math/mathUtil.h	/^		std::string debugStr(){$/;"	f	class:util::Angle
lerp	core/math/mathUtil.h	/^	static T lerp(const T &begin, const T &end, float t){$/;"	f	namespace:util
operator *	core/math/mathUtil.h	/^		Angle operator * (const float multiplier){$/;"	f	class:util::Angle
operator *=	core/math/mathUtil.h	/^		void  operator *= (const float multiplier){$/;"	f	class:util::Angle
operator +	core/math/mathUtil.h	/^		Angle operator + (const Angle & other){$/;"	f	class:util::Angle
operator +=	core/math/mathUtil.h	/^		void operator += (const Angle &other){$/;"	f	class:util::Angle
operator -	core/math/mathUtil.h	/^		Angle operator - (const Angle & other){$/;"	f	class:util::Angle
operator -=	core/math/mathUtil.h	/^		void operator -= (const Angle &other){$/;"	f	class:util::Angle
operator /	core/math/mathUtil.h	/^		Angle operator \/ (const float multiplier){$/;"	f	class:util::Angle
operator /=	core/math/mathUtil.h	/^		void operator \/= (const float multiplier){$/;"	f	class:util::Angle
polarProjection	core/math/mathUtil.h	/^		vector2 polarProjection(float radius){$/;"	f	class:util::Angle
randFloat	core/math/mathUtil.h	/^	static float randFloat(const float range = 1000){$/;"	f	namespace:util
setRad	core/math/mathUtil.h	/^		void setRad(float angleInRad){$/;"	f	class:util::Angle
sgn	core/math/mathUtil.h	/^	static int sgn(T  num){$/;"	f	namespace:util
sin	core/math/mathUtil.h	/^		float sin(){$/;"	f	class:util::Angle
tan	core/math/mathUtil.h	/^		float tan(){$/;"	f	class:util::Angle
toDeg	core/math/mathUtil.h	/^		float toDeg(){$/;"	f	class:util::Angle
toRad	core/math/mathUtil.h	/^		float toRad(){$/;"	f	class:util::Angle
toVector	core/math/mathUtil.h	/^		vector2 toVector(){$/;"	f	class:util::Angle
util	core/math/mathUtil.h	/^namespace util{$/;"	n
Length	core/math/vector.h	/^	inline float Length() const{ return (sqrt(x * x  +  y * y)); };$/;"	f	class:vector2
Length	core/math/vector.h	/^	inline float Length(){ return (sqrt(x * x  +  y * y + z * z)); };$/;"	f	class:vector3
LengthSquared	core/math/vector.h	/^	inline float LengthSquared() const{ return (x * x + y * y + z * z); };$/;"	f	class:vector3
LengthSquared	core/math/vector.h	/^	inline float LengthSquared() const{ return (x * x + y * y); };$/;"	f	class:vector2
Normalize	core/math/vector.h	/^	vector2 Normalize() const{	$/;"	f	class:vector2
Normalize	core/math/vector.h	/^	vector3 Normalize(){	$/;"	f	class:vector3
PRINTVECTOR2	core/math/vector.h	6;"	d
cast	core/math/vector.h	/^	T cast() const{$/;"	f	class:vector2
cast	core/math/vector.h	/^	static vector2 cast(const T &otherVec){$/;"	f	class:vector2
clamp	core/math/vector.h	/^	vector2 clamp(const vector2 &minVec, const vector2 &maxVec){$/;"	f	class:vector2
dotProduct	core/math/vector.h	/^	float dotProduct(const vector2 &other){$/;"	f	class:vector2
nullVector	core/math/vector.h	147;"	d
operator !=	core/math/vector.h	/^	inline bool operator != (const vector2& a) const { return (this->x != a.x || this->y != a.y); };$/;"	f	class:vector2
operator *	core/math/vector.h	/^	inline vector2 operator * (float scale)		 const { return vector2(x * scale, y * scale); };$/;"	f	class:vector2
operator *	core/math/vector.h	/^inline vector2 operator * (const TYPE s, const vector2& a) { return vector2(a.x * s  , a.y * s);    };	$/;"	f
operator *	core/math/vector.h	/^inline vector2 operator * (const vector2& a, const TYPE s) { return vector2(a.x * s  , a.y * s);    };	$/;"	f
operator *	core/math/vector.h	/^inline vector3 operator * (const vector3& a, float s)		   { return vector3(a.x * s  , a.y * s, a.z * s);	 };	$/;"	f
operator *	core/math/vector.h	/^inline vector3 operator * (float s, const vector3& a)		   { return vector3(a.x * s  , a.y * s, a.z * s);    };	$/;"	f
operator *=	core/math/vector.h	/^	inline void operator *= (float a){ x *= a; y *= a; z *= a; };$/;"	f	class:vector3
operator *=	core/math/vector.h	/^	inline void operator *= (float a){ x *= a; y *= a; };$/;"	f	class:vector2
operator +	core/math/vector.h	/^	inline vector2 operator + (const vector2& a) const { return vector2(x + a.x, y + a.y); };$/;"	f	class:vector2
operator +	core/math/vector.h	/^	inline vector2 operator + (const vector2& a) { return vector2(x + a.x, y + a.y); };$/;"	f	class:vector3
operator +	core/math/vector.h	/^	inline vector3 operator + (const vector3& a) { return vector3(x + a.x, y + a.y, z + a.z); };$/;"	f	class:vector3
operator +=	core/math/vector.h	/^	inline void operator += (const vector2& v){ x += v.x; y += v.y; };$/;"	f	class:vector2
operator +=	core/math/vector.h	/^	inline void operator += (const vector2& v){ x += v.x; y += v.y; };$/;"	f	class:vector3
operator +=	core/math/vector.h	/^	inline void operator += (const vector3& v){ x += v.x; y += v.y; z += v.z; };$/;"	f	class:vector3
operator -	core/math/vector.h	/^	inline vector2 operator - (const vector2& a) const { return vector2(x - a.x, y - a.y); };$/;"	f	class:vector2
operator -	core/math/vector.h	/^	inline vector2 operator - (const vector2& a) { return vector2(x - a.x, y - a.y); };$/;"	f	class:vector3
operator -	core/math/vector.h	/^	inline vector2 operator -(){	return vector2(-x, -y); };$/;"	f	class:vector2
operator -	core/math/vector.h	/^	inline vector3 operator - (const vector3& a) { return vector3(x - a.x, y - a.y, z - a.z); };$/;"	f	class:vector3
operator -	core/math/vector.h	/^	inline vector3 operator -(){	return vector3(-x, -y, -z); };$/;"	f	class:vector3
operator -=	core/math/vector.h	/^	inline void operator -= (const vector2& v){ x -= v.x; y -= v.y; };$/;"	f	class:vector2
operator -=	core/math/vector.h	/^	inline void operator -= (const vector2& v){ x -= v.x; y -= v.y;};$/;"	f	class:vector3
operator -=	core/math/vector.h	/^	inline void operator -= (const vector3& v){ x -= v.x; y -= v.y; z -= v.z;};$/;"	f	class:vector3
operator /	core/math/vector.h	/^	inline vector2 operator \/ (const vector2& a) const { return vector2(x \/ a.x, y \/ a.y); };$/;"	f	class:vector2
operator <	core/math/vector.h	/^	inline bool operator < (const vector2& a) const  { return (this->x < a.x && this->y < a.y); };$/;"	f	class:vector2
operator <	core/math/vector.h	/^	inline bool operator < (const vector3& a) { return (this->x < a.x && this->y < a.y && this->z < a.z); };$/;"	f	class:vector3
operator <=	core/math/vector.h	/^	inline bool operator <= (const vector2& a) const { return (this->x <= a.x && this->y <= a.y); };$/;"	f	class:vector2
operator <=	core/math/vector.h	/^	inline bool operator <= (const vector3& a) { return (this->x <= a.x && this->y <= a.y  && this->z <= a.z); };$/;"	f	class:vector3
operator ==	core/math/vector.h	/^	inline bool operator == (const vector2& a) const { return (this->x == a.x && this->y == a.y); };$/;"	f	class:vector2
operator ==	core/math/vector.h	/^inline bool    operator == (const vector2&a , vector2& b) { return (a.x == a.y) && (b.x == b.y);  };$/;"	f
operator ==	core/math/vector.h	/^inline bool    operator == (const vector3&a , vector3& b)	   { return (a.x == a.y) && (b.x == b.y) && (a.z == b.z);  };$/;"	f
operator >	core/math/vector.h	/^	inline bool operator > (const vector2& a) const  { return (this->x > a.x && this->y > a.y); };$/;"	f	class:vector2
operator >	core/math/vector.h	/^	inline bool operator > (const vector3& a) { return (this->x > a.x && this->y > a.y && this->z > a.z); };$/;"	f	class:vector3
operator >=	core/math/vector.h	/^	inline bool operator >= (const vector2& a) const { return (this->x >= a.x && this->y >= a.y); };$/;"	f	class:vector2
operator >=	core/math/vector.h	/^	inline bool operator >= (const vector3& a) { return (this->x >= a.x && this->y >= a.y && this->z >= a.z); };$/;"	f	class:vector3
operator b2Vec2	core/math/vector.h	/^	inline operator b2Vec2(){ return b2Vec2(this->x, this->y); }$/;"	f	class:vector2
operator otherPhyVect2	core/math/vector.h	/^	template<class otherPhyVect2> inline operator otherPhyVect2(){ return otherPhyVect2(this->x, this->y); }$/;"	f	class:vector3
operator sf::Vector2<T>	core/math/vector.h	/^	inline operator sf::Vector2<T>(){ return sf::Vector2<T>(this->x, this->y); }$/;"	f	class:vector2
operator vector2	core/math/vector.h	/^	inline operator vector2(){ return vector2(this->x, this->y); }$/;"	f	class:vector3
projectOn	core/math/vector.h	/^	vector2 projectOn(const vector2 &projectDir){$/;"	f	class:vector2
toAngle	core/math/vector.h	/^	float toAngle() const{$/;"	f	class:vector2
vector2	core/math/vector.h	/^	\/*inline*\/ vector2(float x, float y){$/;"	f	class:vector2
vector2	core/math/vector.h	/^	inline vector2(const vector2& other){$/;"	f	class:vector2
vector2	core/math/vector.h	/^	vector2(){ this->x = this->y = 0;};$/;"	f	class:vector2
vector2	core/math/vector.h	/^class vector2{$/;"	c
vector3	core/math/vector.h	/^	vector3(){ this->x = this->y = this->z = 0;};$/;"	f	class:vector3
vector3	core/math/vector.h	/^	vector3(float x, float y, float z){$/;"	f	class:vector3
vector3	core/math/vector.h	/^	vector3(vector2 vec2, float z){$/;"	f	class:vector3
vector3	core/math/vector.h	/^class vector3{$/;"	c
x	core/math/vector.h	/^	float x, y, z;$/;"	m	class:vector3
x	core/math/vector.h	/^	float x, y;$/;"	m	class:vector2
y	core/math/vector.h	/^	float x, y, z;$/;"	m	class:vector3
y	core/math/vector.h	/^	float x, y;$/;"	m	class:vector2
z	core/math/vector.h	/^	float x, y, z;$/;"	m	class:vector3
zeroVector	core/math/vector.h	146;"	d
~vector2	core/math/vector.h	/^	~vector2(){};$/;"	f	class:vector2
AIData	game/ObjProcessors/AIProcessor.h	/^struct AIData{$/;"	s
AIProcessor	game/ObjProcessors/AIProcessor.h	/^	AIProcessor(processMgr &processManager, Settings &settings, eventMgr &_eventManager) :$/;"	f	class:AIProcessor
AIProcessor	game/ObjProcessors/AIProcessor.h	/^class AIProcessor : public objectProcessor{$/;"	c
_Process	game/ObjProcessors/AIProcessor.h	/^	void _Process(Object *obj, float dt){};$/;"	f	class:AIProcessor
_shouldProcess	game/ObjProcessors/AIProcessor.h	/^	bool _shouldProcess(Object *obj){$/;"	f	class:AIProcessor
onObjectAdd	game/ObjProcessors/AIProcessor.h	/^	void onObjectAdd(Object *obj){};$/;"	f	class:AIProcessor
world	game/ObjProcessors/AIProcessor.h	/^	worldProcess *world;$/;"	m	class:AIProcessor
_Process	game/ObjProcessors/airMoveProcessor.cpp	/^void airMoveProcessor::_Process(Object *obj, float dt){$/;"	f	class:airMoveProcessor
_onObjectAdd	game/ObjProcessors/airMoveProcessor.cpp	/^void airMoveProcessor::_onObjectAdd(Object *obj){};$/;"	f	class:airMoveProcessor
setDir	game/ObjProcessors/airMoveProcessor.cpp	/^void airMoveData::setDir(vector2 dir){$/;"	f	class:airMoveData
setSpeed	game/ObjProcessors/airMoveProcessor.cpp	/^void airMoveData::setSpeed(float speed){$/;"	f	class:airMoveData
_shouldProcess	game/ObjProcessors/airMoveProcessor.h	/^	bool _shouldProcess(Object *obj){$/;"	f	class:airMoveProcessor
airMoveData	game/ObjProcessors/airMoveProcessor.h	/^struct airMoveData{$/;"	s
airMoveProcessor	game/ObjProcessors/airMoveProcessor.h	/^	airMoveProcessor(processMgr &processManager, Settings &settings, eventMgr &_eventManager) :$/;"	f	class:airMoveProcessor
airMoveProcessor	game/ObjProcessors/airMoveProcessor.h	/^class airMoveProcessor : public objectProcessor{$/;"	c
dir	game/ObjProcessors/airMoveProcessor.h	/^	vector2 dir;$/;"	m	struct:airMoveData
speed	game/ObjProcessors/airMoveProcessor.h	/^	float speed;$/;"	m	struct:airMoveData
world	game/ObjProcessors/airMoveProcessor.h	/^	worldProcess *world;$/;"	m	class:airMoveProcessor
_Process	game/ObjProcessors/bulletProcessor.cpp	/^void bulletProcessor::_Process(Object *obj, float dt){$/;"	f	class:bulletProcessor
_handleCollision	game/ObjProcessors/bulletProcessor.cpp	/^void bulletProcessor::_handleCollision(collisionData &collision, bulletData *data, Object *bullet){$/;"	f	class:bulletProcessor
_onObjectAdd	game/ObjProcessors/bulletProcessor.cpp	/^void bulletProcessor::_onObjectAdd(Object *obj){$/;"	f	class:bulletProcessor
_shouldProcess	game/ObjProcessors/bulletProcessor.h	/^	bool _shouldProcess(Object *obj){$/;"	f	class:bulletProcessor
addBulletCollder	game/ObjProcessors/bulletProcessor.h	/^	void addBulletCollder(bulletCollider *collider){$/;"	f	struct:bulletData
addEnemyCollision	game/ObjProcessors/bulletProcessor.h	/^	void addEnemyCollision(const Hash *collision){$/;"	f	struct:bulletData
addIgnoreCollision	game/ObjProcessors/bulletProcessor.h	/^	void addIgnoreCollision(const Hash *collision){$/;"	f	struct:bulletData
angle	game/ObjProcessors/bulletProcessor.h	/^	util::Angle angle;$/;"	m	struct:bulletData
beginVel	game/ObjProcessors/bulletProcessor.h	/^	vector2 beginVel;$/;"	m	struct:bulletData
bulletCollider	game/ObjProcessors/bulletProcessor.h	/^	bulletCollider(){};$/;"	f	class:bulletCollider
bulletCollider	game/ObjProcessors/bulletProcessor.h	/^class bulletCollider{$/;"	c
bulletData	game/ObjProcessors/bulletProcessor.h	/^	bulletData(){$/;"	f	struct:bulletData
bulletData	game/ObjProcessors/bulletProcessor.h	/^struct bulletData{$/;"	s
bulletProcessor	game/ObjProcessors/bulletProcessor.h	/^	bulletProcessor(processMgr &processManager, Settings &settings, eventMgr &_eventManager) :$/;"	f	class:bulletProcessor
bulletProcessor	game/ObjProcessors/bulletProcessor.h	/^class bulletProcessor : public objectProcessor{$/;"	c
colliders	game/ObjProcessors/bulletProcessor.h	/^	std::vector<bulletCollider *> colliders;$/;"	m	struct:bulletData
enemyCollisions	game/ObjProcessors/bulletProcessor.h	/^	std::unordered_set<const Hash*> enemyCollisions;$/;"	m	struct:bulletData
gravityScale	game/ObjProcessors/bulletProcessor.h	/^	float gravityScale;$/;"	m	struct:bulletData
ignoreCollisions	game/ObjProcessors/bulletProcessor.h	/^	std::unordered_set<const Hash*> ignoreCollisions;$/;"	m	struct:bulletData
onCreate	game/ObjProcessors/bulletProcessor.h	/^	virtual void onCreate(Object *bullet){};$/;"	f	class:bulletCollider
onDeath	game/ObjProcessors/bulletProcessor.h	/^	virtual void onDeath(collisionData &data, Object *bullet){};$/;"	f	class:bulletCollider
onDefaultCollision	game/ObjProcessors/bulletProcessor.h	/^	virtual bool onDefaultCollision(collisionData &data, Object *bullet){$/;"	f	class:bulletCollider
world	game/ObjProcessors/bulletProcessor.h	/^	worldProcess *world;$/;"	m	class:bulletProcessor
~bulletCollider	game/ObjProcessors/bulletProcessor.h	/^	virtual ~bulletCollider(){};$/;"	f	class:bulletCollider
_Process	game/ObjProcessors/cameraProcessor.cpp	/^void cameraProcessor::_Process(Object *obj, float dt){$/;"	f	class:cameraProcessor
_calcCameraMoveAmt	game/ObjProcessors/cameraProcessor.cpp	/^vector2 cameraProcessor::_calcCameraMoveAmt(Object *obj, cameraData *data){$/;"	f	class:cameraProcessor
_limitCameraCoord	game/ObjProcessors/cameraProcessor.cpp	/^vector2 cameraProcessor::_limitCameraCoord(vector2 cameraCoord, cameraData *data){$/;"	f	class:cameraProcessor
_limitMoveAmt	game/ObjProcessors/cameraProcessor.cpp	/^vector2 cameraProcessor::_limitMoveAmt(vector2 moveAmt, vector2 maxMoveAmt){$/;"	f	class:cameraProcessor
_onObjectAdd	game/ObjProcessors/cameraProcessor.cpp	/^void cameraProcessor::_onObjectAdd(Object *obj){$/;"	f	class:cameraProcessor
_simulateCamera	game/ObjProcessors/cameraProcessor.cpp	/^void cameraProcessor::_simulateCamera(vector2 cameraMoveAmt, float dt, cameraData *data){$/;"	f	class:cameraProcessor
_shouldProcess	game/ObjProcessors/cameraProcessor.h	/^	bool _shouldProcess(Object *obj){$/;"	f	class:cameraProcessor
accumilator	game/ObjProcessors/cameraProcessor.h	/^	float accumilator;$/;"	m	struct:cameraData
boxHalfH	game/ObjProcessors/cameraProcessor.h	/^	float boxHalfH;$/;"	m	struct:cameraData
boxHalfW	game/ObjProcessors/cameraProcessor.h	/^	float boxHalfW;$/;"	m	struct:cameraData
cameraCenter	game/ObjProcessors/cameraProcessor.h	/^	vector2 cameraCenter;$/;"	m	struct:cameraData
cameraData	game/ObjProcessors/cameraProcessor.h	/^	cameraData(){};$/;"	f	struct:cameraData
cameraData	game/ObjProcessors/cameraProcessor.h	/^struct cameraData{$/;"	s
cameraProcessor	game/ObjProcessors/cameraProcessor.h	/^	cameraProcessor(processMgr &processManager, Settings &settings, eventMgr &_eventManager) :$/;"	f	class:cameraProcessor
cameraProcessor	game/ObjProcessors/cameraProcessor.h	/^class cameraProcessor : public objectProcessor{$/;"	c
enabled	game/ObjProcessors/cameraProcessor.h	/^	bool enabled;$/;"	m	struct:cameraData
maxAccumilation	game/ObjProcessors/cameraProcessor.h	/^	float maxAccumilation;$/;"	m	class:cameraProcessor
maxCoord	game/ObjProcessors/cameraProcessor.h	/^	vector2 maxCoord;$/;"	m	struct:cameraData
maxMoveAmt	game/ObjProcessors/cameraProcessor.h	/^	vector2 maxMoveAmt; $/;"	m	struct:cameraData
minCoord	game/ObjProcessors/cameraProcessor.h	/^	vector2 minCoord;$/;"	m	struct:cameraData
stepSize	game/ObjProcessors/cameraProcessor.h	/^	float stepSize;$/;"	m	class:cameraProcessor
v	game/ObjProcessors/cameraProcessor.h	/^	vector2 v;$/;"	m	struct:cameraData
view	game/ObjProcessors/cameraProcessor.h	/^	viewProcess *view;$/;"	m	class:cameraProcessor
window	game/ObjProcessors/cameraProcessor.h	/^	sf::RenderWindow *window;$/;"	m	class:cameraProcessor
Jump	game/ObjProcessors/groundMoveProcessor.cpp	/^	void groundMoveData::Jump(){$/;"	f	class:groundMoveData
_Process	game/ObjProcessors/groundMoveProcessor.cpp	/^void groundMoveProcessor::_Process(Object *obj, float dt){$/;"	f	class:groundMoveProcessor
_calcJumpImpulse	game/ObjProcessors/groundMoveProcessor.cpp	/^vector2 groundMoveProcessor::_calcJumpImpulse(groundMoveData *data, vector2 currentVel, float dt){$/;"	f	class:groundMoveProcessor
_onObjectAdd	game/ObjProcessors/groundMoveProcessor.cpp	/^void groundMoveProcessor::_onObjectAdd(Object *obj){$/;"	f	class:groundMoveProcessor
isJumpEnabled	game/ObjProcessors/groundMoveProcessor.cpp	/^	bool groundMoveData::isJumpEnabled(){$/;"	f	class:groundMoveData
isMidJump	game/ObjProcessors/groundMoveProcessor.cpp	/^	bool groundMoveData::isMidJump(){$/;"	f	class:groundMoveData
isMovingLeft	game/ObjProcessors/groundMoveProcessor.cpp	/^	bool groundMoveData::isMovingLeft(){$/;"	f	class:groundMoveData
isMovingRight	game/ObjProcessors/groundMoveProcessor.cpp	/^	bool groundMoveData::isMovingRight(){$/;"	f	class:groundMoveData
resetJump	game/ObjProcessors/groundMoveProcessor.cpp	/^	void groundMoveData::resetJump(){$/;"	f	class:groundMoveData
setMoveLeft	game/ObjProcessors/groundMoveProcessor.cpp	/^	void groundMoveData::setMoveLeft(bool enabled){$/;"	f	class:groundMoveData
setMoveRight	game/ObjProcessors/groundMoveProcessor.cpp	/^	void groundMoveData::setMoveRight(bool enabled){$/;"	f	class:groundMoveData
_shouldProcess	game/ObjProcessors/groundMoveProcessor.h	/^	bool _shouldProcess(Object *obj){$/;"	f	class:groundMoveProcessor
groundMoveData	game/ObjProcessors/groundMoveProcessor.h	/^	groundMoveData() : xVel(0), xAccel(0), jumpRange(0), jumpHeight(0), $/;"	f	struct:groundMoveData
groundMoveData	game/ObjProcessors/groundMoveProcessor.h	/^struct groundMoveData{$/;"	s
groundMoveProcessor	game/ObjProcessors/groundMoveProcessor.h	/^	groundMoveProcessor(processMgr &processManager, Settings &settings, eventMgr &_eventManager) :$/;"	f	class:groundMoveProcessor
groundMoveProcessor	game/ObjProcessors/groundMoveProcessor.h	/^class groundMoveProcessor : public objectProcessor{$/;"	c
jumpDir	game/ObjProcessors/groundMoveProcessor.h	/^	vector2 jumpDir;$/;"	m	struct:groundMoveData
jumpHeight	game/ObjProcessors/groundMoveProcessor.h	/^	float jumpHeight;$/;"	m	struct:groundMoveData
jumpImpulse	game/ObjProcessors/groundMoveProcessor.h	/^	vector2 jumpImpulse;$/;"	m	struct:groundMoveData
jumpRange	game/ObjProcessors/groundMoveProcessor.h	/^	float jumpRange;$/;"	m	struct:groundMoveData
jumping	game/ObjProcessors/groundMoveProcessor.h	/^	bool jumping;$/;"	m	struct:groundMoveData
mass	game/ObjProcessors/groundMoveProcessor.h	/^	float mass;$/;"	m	struct:groundMoveData
moveImpulse	game/ObjProcessors/groundMoveProcessor.h	/^	vector2 moveImpulse;$/;"	m	struct:groundMoveData
movementDamping	game/ObjProcessors/groundMoveProcessor.h	/^	vector2 movementDamping;$/;"	m	struct:groundMoveData
movingLeft	game/ObjProcessors/groundMoveProcessor.h	/^	bool movingLeft;$/;"	m	struct:groundMoveData
movingRight	game/ObjProcessors/groundMoveProcessor.h	/^	bool movingRight;$/;"	m	struct:groundMoveData
onGround	game/ObjProcessors/groundMoveProcessor.h	/^	bool onGround;$/;"	m	struct:groundMoveData
world	game/ObjProcessors/groundMoveProcessor.h	/^	worldProcess *world;$/;"	m	class:groundMoveProcessor
xAccel	game/ObjProcessors/groundMoveProcessor.h	/^	float xAccel;$/;"	m	struct:groundMoveData
xVel	game/ObjProcessors/groundMoveProcessor.h	/^	float xVel;$/;"	m	struct:groundMoveData
Fire	game/ObjProcessors/gunProcessor.cpp	/^void gunData::Fire(){$/;"	f	class:gunData
_Cooldown	game/ObjProcessors/gunProcessor.cpp	/^void gunData::_Cooldown(){$/;"	f	class:gunData
_Process	game/ObjProcessors/gunProcessor.cpp	/^void gunProcessor::_Process(Object *obj, float dt){$/;"	f	class:gunProcessor
_Tick	game/ObjProcessors/gunProcessor.cpp	/^void gunData::_Tick(){$/;"	f	class:gunData
_fireShot	game/ObjProcessors/gunProcessor.cpp	/^void gunProcessor::_fireShot(gunData *data, vector2 pos){$/;"	f	class:gunProcessor
_onObjectDeactivate	game/ObjProcessors/gunProcessor.cpp	/^void gunProcessor::_onObjectDeactivate(Object *obj){$/;"	f	class:gunProcessor
gunProcessor	game/ObjProcessors/gunProcessor.cpp	/^gunProcessor::gunProcessor(processMgr &processManager, Settings &settings, eventMgr &_eventManager) $/;"	f	class:gunProcessor
_shouldFire	game/ObjProcessors/gunProcessor.h	/^	bool _shouldFire(){$/;"	f	struct:gunData
_shouldProcess	game/ObjProcessors/gunProcessor.h	/^	bool _shouldProcess(Object *obj){$/;"	f	class:gunProcessor
buletVel	game/ObjProcessors/gunProcessor.h	/^	float buletVel;$/;"	m	struct:gunData
bullet	game/ObjProcessors/gunProcessor.h	/^	bulletData bullet;$/;"	m	struct:gunData
bulletPos	game/ObjProcessors/gunProcessor.h	/^	vector2 bulletPos;$/;"	m	struct:gunData
bulletRadius	game/ObjProcessors/gunProcessor.h	/^	float bulletRadius;$/;"	m	struct:gunData
clipOnCooldown	game/ObjProcessors/gunProcessor.h	/^	bool clipOnCooldown;$/;"	m	struct:gunData
creator	game/ObjProcessors/gunProcessor.h	/^	bulletCreator *creator;$/;"	m	struct:gunData
currentClipCooldown	game/ObjProcessors/gunProcessor.h	/^	int currentClipCooldown;$/;"	m	struct:gunData
currentClipSize	game/ObjProcessors/gunProcessor.h	/^	int currentClipSize;$/;"	m	struct:gunData
currrentShotCooldown	game/ObjProcessors/gunProcessor.h	/^	int currrentShotCooldown;$/;"	m	struct:gunData
facing	game/ObjProcessors/gunProcessor.h	/^	util::Angle facing;$/;"	m	struct:gunData
firing	game/ObjProcessors/gunProcessor.h	/^	bool firing;$/;"	m	struct:gunData
gunData	game/ObjProcessors/gunProcessor.h	/^	gunData(){$/;"	f	struct:gunData
gunData	game/ObjProcessors/gunProcessor.h	/^struct gunData{$/;"	s
gunProcessor	game/ObjProcessors/gunProcessor.h	/^class gunProcessor : public objectProcessor{$/;"	c
objectManager	game/ObjProcessors/gunProcessor.h	/^	objectMgr *objectManager;$/;"	m	class:gunProcessor
setBulletCreator	game/ObjProcessors/gunProcessor.h	/^	void setBulletCreator(bulletCreator *creator){$/;"	f	struct:gunData
setBulletData	game/ObjProcessors/gunProcessor.h	/^	void setBulletData(bulletData &data){$/;"	f	struct:gunData
setBulletPos	game/ObjProcessors/gunProcessor.h	/^	void setBulletPos(vector2 pos){$/;"	f	struct:gunData
setBulletRadius	game/ObjProcessors/gunProcessor.h	/^	void setBulletRadius(float radius){$/;"	f	struct:gunData
setBulletVel	game/ObjProcessors/gunProcessor.h	/^	void setBulletVel(float vel){$/;"	f	struct:gunData
setClipCooldown	game/ObjProcessors/gunProcessor.h	/^	void setClipCooldown(int totalClipCooldown){$/;"	f	struct:gunData
setClipSize	game/ObjProcessors/gunProcessor.h	/^	void setClipSize(int totalClipSize){$/;"	f	struct:gunData
setFacing	game/ObjProcessors/gunProcessor.h	/^	void setFacing(util::Angle facing){$/;"	f	struct:gunData
setShotCooldown	game/ObjProcessors/gunProcessor.h	/^	void setShotCooldown(int totalShotCooldown){$/;"	f	struct:gunData
shotOnCooldown	game/ObjProcessors/gunProcessor.h	/^	bool shotOnCooldown;$/;"	m	struct:gunData
totalClipCooldown	game/ObjProcessors/gunProcessor.h	/^	int totalClipCooldown;$/;"	m	struct:gunData
totalClipSize	game/ObjProcessors/gunProcessor.h	/^	int totalClipSize;$/;"	m	struct:gunData
totalShotCooldown	game/ObjProcessors/gunProcessor.h	/^	int totalShotCooldown;$/;"	m	struct:gunData
_Process	game/ObjProcessors/healthProcessor.cpp	/^void healthProcessor::_Process(Object *obj, float dt){$/;"	f	class:healthProcessor
healthProcessor	game/ObjProcessors/healthProcessor.cpp	/^healthProcessor::healthProcessor(processMgr &processManager, Settings &settings, $/;"	f	class:healthProcessor
Damage	game/ObjProcessors/healthProcessor.h	/^	void Damage(unsigned int damage){$/;"	f	struct:healthData
Heal	game/ObjProcessors/healthProcessor.h	/^	void Heal(unsigned int heal){$/;"	f	struct:healthData
_shouldProcess	game/ObjProcessors/healthProcessor.h	/^	bool _shouldProcess(Object *obj){$/;"	f	class:healthProcessor
currentHP	game/ObjProcessors/healthProcessor.h	/^	int currentHP;$/;"	m	struct:healthData
getHP	game/ObjProcessors/healthProcessor.h	/^	int getHP(){$/;"	f	struct:healthData
healthData	game/ObjProcessors/healthProcessor.h	/^	healthData(){$/;"	f	struct:healthData
healthData	game/ObjProcessors/healthProcessor.h	/^struct healthData {$/;"	s
healthProcessor	game/ObjProcessors/healthProcessor.h	/^class healthProcessor : public objectProcessor {$/;"	c
invul	game/ObjProcessors/healthProcessor.h	/^	bool invul;$/;"	m	struct:healthData
makeInvulnerable	game/ObjProcessors/healthProcessor.h	/^	void makeInvulnerable(){$/;"	f	struct:healthData
makeVulnerable	game/ObjProcessors/healthProcessor.h	/^	void makeVulnerable(){$/;"	f	struct:healthData
maxHP	game/ObjProcessors/healthProcessor.h	/^	unsigned int maxHP;$/;"	m	struct:healthData
setHP	game/ObjProcessors/healthProcessor.h	/^	void setHP(unsigned int HP){$/;"	f	struct:healthData
_Process	game/ObjProcessors/offsetProcessor.h	/^	void _Process(Object *obj, float dt){$/;"	f	class:offsetProcessor
_shouldProcess	game/ObjProcessors/offsetProcessor.h	/^	bool _shouldProcess(Object *obj){$/;"	f	class:offsetProcessor
angleOffset	game/ObjProcessors/offsetProcessor.h	/^	util::Angle angleOffset;$/;"	m	struct:offsetData
offsetAngle	game/ObjProcessors/offsetProcessor.h	/^	bool offsetAngle;$/;"	m	struct:offsetData
offsetData	game/ObjProcessors/offsetProcessor.h	/^	offsetData() : offsetPos(true), offsetAngle(true){}$/;"	f	struct:offsetData
offsetData	game/ObjProcessors/offsetProcessor.h	/^struct offsetData{$/;"	s
offsetPos	game/ObjProcessors/offsetProcessor.h	/^	bool offsetPos;$/;"	m	struct:offsetData
offsetProcessor	game/ObjProcessors/offsetProcessor.h	/^	offsetProcessor(processMgr &processManager, Settings &settings, eventMgr &_eventManager) :$/;"	f	class:offsetProcessor
offsetProcessor	game/ObjProcessors/offsetProcessor.h	/^class offsetProcessor : public objectProcessor{$/;"	c
parent	game/ObjProcessors/offsetProcessor.h	/^	Object *parent;$/;"	m	struct:offsetData
posOffset	game/ObjProcessors/offsetProcessor.h	/^	vector2 posOffset;$/;"	m	struct:offsetData
_Process	game/ObjProcessors/pickupProcessor.cpp	/^void pickupProcessor::_Process(Object *obj, float dt){$/;"	f	class:pickupProcessor
_handleCollision	game/ObjProcessors/pickupProcessor.cpp	/^void pickupProcessor::_handleCollision(Object *obj, pickupData *data, collisionData &collision){$/;"	f	class:pickupProcessor
_onObjectDeath	game/ObjProcessors/pickupProcessor.cpp	/^void pickupProcessor::_onObjectDeath(Object *obj){$/;"	f	class:pickupProcessor
pickupProcessor	game/ObjProcessors/pickupProcessor.cpp	/^pickupProcessor::pickupProcessor(processMgr &processManager, Settings &settings,$/;"	f	class:pickupProcessor
_shouldProcess	game/ObjProcessors/pickupProcessor.h	/^	bool _shouldProcess(Object *obj){$/;"	f	class:pickupProcessor
addCollisionType	game/ObjProcessors/pickupProcessor.h	/^	void addCollisionType(const Hash *collisionType){$/;"	f	struct:pickupData
eventData	game/ObjProcessors/pickupProcessor.h	/^	baseProperty *eventData;$/;"	m	struct:pickupData
eventManager	game/ObjProcessors/pickupProcessor.h	/^	eventMgr &eventManager;$/;"	m	class:pickupProcessor
hasCollisionType	game/ObjProcessors/pickupProcessor.h	/^	bool hasCollisionType(const Hash *collisionType){$/;"	f	struct:pickupData
onPickupEvent	game/ObjProcessors/pickupProcessor.h	/^	const Hash *onPickupEvent;$/;"	m	struct:pickupData
pickupCollisionTypes	game/ObjProcessors/pickupProcessor.h	/^	std::unordered_set<const Hash *> pickupCollisionTypes;$/;"	m	struct:pickupData
pickupData	game/ObjProcessors/pickupProcessor.h	/^	pickupData(){$/;"	f	struct:pickupData
pickupData	game/ObjProcessors/pickupProcessor.h	/^struct pickupData{$/;"	s
pickupProcessor	game/ObjProcessors/pickupProcessor.h	/^class pickupProcessor : public objectProcessor{$/;"	c
_shouldProcess	game/ObjProcessors/terrainProcessor.h	/^	bool _shouldProcess(Object *obj){$/;"	f	class:terrainProcessor
terrainProcessor	game/ObjProcessors/terrainProcessor.h	/^	terrainProcessor(processMgr &processManager, Settings &settings, eventMgr &_eventManager) :$/;"	f	class:terrainProcessor
terrainProcessor	game/ObjProcessors/terrainProcessor.h	/^class terrainProcessor : public objectProcessor{$/;"	c
view	game/ObjProcessors/terrainProcessor.h	/^	viewProcess *view;$/;"	m	class:terrainProcessor
window	game/ObjProcessors/terrainProcessor.h	/^	sf::RenderWindow *window;$/;"	m	class:terrainProcessor
world	game/ObjProcessors/terrainProcessor.h	/^	b2World *world;$/;"	m	class:terrainProcessor
Draw	game/States/gameSegmentLoader.h	/^	void Draw(){};$/;"	f	class:gameSegmentLoader
Update	game/States/gameSegmentLoader.h	/^	void Update(float dt){};$/;"	f	class:gameSegmentLoader
createSaveLoader	game/States/gameSegmentLoader.h	/^	stateSaveLoader *createSaveLoader(){$/;"	f	class:gameSegmentLoader
doneLoading	game/States/gameSegmentLoader.h	/^	bool doneLoading;$/;"	m	class:gameSegmentLoader
gameSegmentLoader	game/States/gameSegmentLoader.h	/^	gameSegmentLoader() : State("gameSegmentLoader"){}$/;"	f	class:gameSegmentLoader
gameSegmentLoader	game/States/gameSegmentLoader.h	/^class gameSegmentLoader : public State{$/;"	c
segment	game/States/gameSegmentLoader.h	/^	gameSegment *segment;$/;"	m	class:gameSegmentLoader
segmentName	game/States/gameSegmentLoader.h	/^	std::string segmentName;$/;"	m	class:gameSegmentLoader
_Init	game/States/gameState.cpp	/^void gameState::_Init(){$/;"	f	class:gameState
_createDummy	game/States/gameState.cpp	/^void gameState::_createDummy(vector2 levelDim){$/;"	f	class:gameState
_createEnemies	game/States/gameState.cpp	/^void gameState::_createEnemies(vector2 levelDim){$/;"	f	class:gameState
_createGuns	game/States/gameState.cpp	/^Object* gameState::_createGuns(Object *player, vector2 levelDim){$/;"	f	class:gameState
_createPlayer	game/States/gameState.cpp	/^void gameState::_createPlayer(vector2 playerInitPos, vector2 levelDim){$/;"	f	class:gameState
_generateBoundary	game/States/gameState.cpp	/^void gameState::_generateBoundary(vector2 levelDim){$/;"	f	class:gameState
_generateTerrain	game/States/gameState.cpp	/^void gameState::_generateTerrain(unsigned long long seed, $/;"	f	class:gameState
_initFactory	game/States/gameState.cpp	/^void gameState::_initFactory(){$/;"	f	class:gameState
Draw	game/States/gameState.h	/^	void Draw(){};$/;"	f	class:gameState
Update	game/States/gameState.h	/^	void Update(float dt){$/;"	f	class:gameState
_playerController	game/States/gameState.h	/^	playerController *_playerController;$/;"	m	class:gameState
createSaveLoader	game/States/gameState.h	/^	stateSaveLoader *createSaveLoader(){$/;"	f	class:gameState
gameState	game/States/gameState.h	/^	gameState() : State("gameState"){};$/;"	f	class:gameState
gameState	game/States/gameState.h	/^class gameState : public State{$/;"	c
objFactory	game/States/gameState.h	/^	objectFactory objFactory; $/;"	m	class:gameState
objectManager	game/States/gameState.h	/^	objectMgr *objectManager;$/;"	m	class:gameState
viewProc	game/States/gameState.h	/^	viewProcess *viewProc;$/;"	m	class:gameState
Draw	game/States/mainMenuState.h	/^	void Draw(){};$/;"	f	class:mainMenuState
Update	game/States/mainMenuState.h	/^	void Update(float dt){};$/;"	f	class:mainMenuState
createSaveLoader	game/States/mainMenuState.h	/^	stateSaveLoader *createSaveLoader(){$/;"	f	class:mainMenuState
mainMenuState	game/States/mainMenuState.h	/^	mainMenuState() : State("mainMenuState"){};$/;"	f	class:mainMenuState
mainMenuState	game/States/mainMenuState.h	/^class mainMenuState : public State{$/;"	c
bounceCollider	game/bulletColliders/bounceCollider.h	/^	bounceCollider(unsigned int numBounces){$/;"	f	class:bounceCollider
bounceCollider	game/bulletColliders/bounceCollider.h	/^class bounceCollider : public bulletCollider{$/;"	c
onCreate	game/bulletColliders/bounceCollider.h	/^	void onCreate(Object *bullet){$/;"	f	class:bounceCollider
onDefaultCollision	game/bulletColliders/bounceCollider.h	/^	bool onDefaultCollision(collisionData &collision, Object *bullet){$/;"	f	class:bounceCollider
onEnemyCollision	game/bulletColliders/bounceCollider.h	/^	bool onEnemyCollision(collisionData &collision, Object *bullet){$/;"	f	class:bounceCollider
totalBounces	game/bulletColliders/bounceCollider.h	/^	int totalBounces;$/;"	m	class:bounceCollider
~bounceCollider	game/bulletColliders/bounceCollider.h	/^	~bounceCollider(){};$/;"	f	class:bounceCollider
damage	game/bulletColliders/damageCollider.h	/^	float damage;$/;"	m	class:damageCollider
damageCollider	game/bulletColliders/damageCollider.h	/^	damageCollider(float damage){$/;"	f	class:damageCollider
damageCollider	game/bulletColliders/damageCollider.h	/^class damageCollider : public bulletCollider{$/;"	c
onEnemyCollision	game/bulletColliders/damageCollider.h	/^	bool onEnemyCollision(collisionData &collision, Object *bullet){$/;"	f	class:damageCollider
~damageCollider	game/bulletColliders/damageCollider.h	/^	~damageCollider(){};$/;"	f	class:damageCollider
impulseMagnitude	game/bulletColliders/pushCollider.h	/^	float impulseMagnitude;$/;"	m	class:pushCollider
onEnemyCollision	game/bulletColliders/pushCollider.h	/^	bool onEnemyCollision(collisionData &collision, Object *bullet){$/;"	f	class:pushCollider
pushCollider	game/bulletColliders/pushCollider.h	/^	pushCollider(float impulseMagnitude){$/;"	f	class:pushCollider
pushCollider	game/bulletColliders/pushCollider.h	/^class pushCollider : public bulletCollider{$/;"	c
~pushCollider	game/bulletColliders/pushCollider.h	/^	~pushCollider(){};$/;"	f	class:pushCollider
BACK	game/defines/renderingLayers.h	/^	BACK = -100,$/;"	e	enum:renderingLayers
HUD	game/defines/renderingLayers.h	/^	HUD = 0,$/;"	e	enum:renderingLayers
aboveAction	game/defines/renderingLayers.h	/^	aboveAction = -9,$/;"	e	enum:renderingLayers
action	game/defines/renderingLayers.h	/^	action = -10,$/;"	e	enum:renderingLayers
belowAction	game/defines/renderingLayers.h	/^	belowAction = -11,$/;"	e	enum:renderingLayers
renderingLayers	game/defines/renderingLayers.h	/^enum renderingLayers{$/;"	g
terrain	game/defines/renderingLayers.h	/^	terrain = -1,$/;"	e	enum:renderingLayers
Init	game/factory/boundaryCreator.h	/^	void Init(vector2 levelDim, float thickness){$/;"	f	class:boundaryCreator
boundaryCreator	game/factory/boundaryCreator.h	/^	boundaryCreator(viewProcess *_viewProc) : viewProc(_viewProc){}$/;"	f	class:boundaryCreator
boundaryCreator	game/factory/boundaryCreator.h	/^class boundaryCreator : public objectCreator{$/;"	c
createObject	game/factory/boundaryCreator.h	/^	Object *createObject(vector2 playerInitPos) const{$/;"	f	class:boundaryCreator
levelDim	game/factory/boundaryCreator.h	/^	vector2 levelDim;$/;"	m	class:boundaryCreator
thickness	game/factory/boundaryCreator.h	/^	float thickness;$/;"	m	class:boundaryCreator
viewProc	game/factory/boundaryCreator.h	/^	viewProcess *viewProc;$/;"	m	class:boundaryCreator
Init	game/factory/bulletCreator.h	/^	void Init(bulletData data, float bulletRadius){$/;"	f	class:bulletCreator
bullet	game/factory/bulletCreator.h	/^	bulletData bullet;$/;"	m	class:bulletCreator
bulletCreator	game/factory/bulletCreator.h	/^	bulletCreator(viewProcess *_viewProc) : viewProc(_viewProc), radius(0){}$/;"	f	class:bulletCreator
bulletCreator	game/factory/bulletCreator.h	/^class bulletCreator : public objectCreator{$/;"	c
createObject	game/factory/bulletCreator.h	/^	Object *createObject(vector2 _pos) const{$/;"	f	class:bulletCreator
enemyCollision	game/factory/bulletCreator.h	/^	const Hash *enemyCollision;$/;"	m	class:bulletCreator
radius	game/factory/bulletCreator.h	/^	float radius;$/;"	m	class:bulletCreator
viewProc	game/factory/bulletCreator.h	/^	viewProcess *viewProc;$/;"	m	class:bulletCreator
Init	game/factory/dummyCreator.h	/^	void Init(float gRadius){$/;"	f	class:dummyCreator
createObject	game/factory/dummyCreator.h	/^	Object *createObject(vector2 dummyPos) const{$/;"	f	class:dummyCreator
dummyCreator	game/factory/dummyCreator.h	/^	dummyCreator(viewProcess *_viewProc) : viewProc(_viewProc), radius(0){}$/;"	f	class:dummyCreator
dummyCreator	game/factory/dummyCreator.h	/^class dummyCreator : public objectCreator{$/;"	c
radius	game/factory/dummyCreator.h	/^	float radius;$/;"	m	class:dummyCreator
viewProc	game/factory/dummyCreator.h	/^	viewProcess *viewProc;$/;"	m	class:dummyCreator
createObject	game/factory/enemyCreator.h	/^	Object *createObject(vector2 _pos) const{$/;"	f	class:enemyCreator
enemyCollision	game/factory/enemyCreator.h	/^	const Hash *enemyCollision;$/;"	m	class:enemyCreator
enemyCreator	game/factory/enemyCreator.h	/^	enemyCreator(viewProcess *_viewProc) : viewProc(_viewProc){}$/;"	f	class:enemyCreator
enemyCreator	game/factory/enemyCreator.h	/^class enemyCreator : public objectCreator{$/;"	c
viewProc	game/factory/enemyCreator.h	/^	viewProcess *viewProc;$/;"	m	class:enemyCreator
Init	game/factory/gunCreator.h	/^	void Init(Object *parent, gunData gun, float offsetRadius = 0){$/;"	f	class:gunCreator
createObject	game/factory/gunCreator.h	/^	Object *createObject(vector2 gunPos) const{$/;"	f	class:gunCreator
enemyCollision	game/factory/gunCreator.h	/^	const Hash *enemyCollision;$/;"	m	class:gunCreator
gun	game/factory/gunCreator.h	/^	gunData gun;$/;"	m	class:gunCreator
gunCreator	game/factory/gunCreator.h	/^	gunCreator(viewProcess *_viewProc) : viewProc(_viewProc), parent(NULL), radius(0){}$/;"	f	class:gunCreator
gunCreator	game/factory/gunCreator.h	/^class gunCreator : public objectCreator{$/;"	c
parent	game/factory/gunCreator.h	/^	Object *parent;$/;"	m	class:gunCreator
radius	game/factory/gunCreator.h	/^	float radius;$/;"	m	class:gunCreator
viewProc	game/factory/gunCreator.h	/^	viewProcess *viewProc;$/;"	m	class:gunCreator
attachObjectCreator	game/factory/objectFactory.cpp	/^void objectFactory::attachObjectCreator(const Hash *objName, objectCreator *creator){$/;"	f	class:objectFactory
creators	game/factory/objectFactory.h	/^	std::map<const Hash *, objectCreator* >creators; 	$/;"	m	class:objectFactory
getCreator	game/factory/objectFactory.h	/^	T *getCreator(const Hash* objName){$/;"	f	class:objectFactory
objectCreator	game/factory/objectFactory.h	/^	objectCreator(){}$/;"	f	class:objectCreator
objectCreator	game/factory/objectFactory.h	/^class objectCreator{$/;"	c
objectFactory	game/factory/objectFactory.h	/^class objectFactory{$/;"	c
~objectCreator	game/factory/objectFactory.h	/^	virtual ~objectCreator(){};$/;"	f	class:objectCreator
Init	game/factory/pickupCreator.h	/^	void Init(pickupData data, float radius){$/;"	f	class:pickupCreator
createObject	game/factory/pickupCreator.h	/^	Object *createObject(vector2 _pos) const{$/;"	f	class:pickupCreator
pickup	game/factory/pickupCreator.h	/^	pickupData pickup;$/;"	m	class:pickupCreator
pickupCreator	game/factory/pickupCreator.h	/^	pickupCreator(viewProcess *_viewProc) : viewProc(_viewProc), radius(0){}$/;"	f	class:pickupCreator
pickupCreator	game/factory/pickupCreator.h	/^class pickupCreator : public objectCreator{$/;"	c
radius	game/factory/pickupCreator.h	/^	float radius;$/;"	m	class:pickupCreator
viewProc	game/factory/pickupCreator.h	/^	viewProcess *viewProc;$/;"	m	class:pickupCreator
Init	game/factory/playerCreator.h	/^	void Init(cameraData &camData){$/;"	f	class:playerCreator
camData	game/factory/playerCreator.h	/^	cameraData camData;$/;"	m	class:playerCreator
createObject	game/factory/playerCreator.h	/^	Object *createObject(vector2 playerInitPos) const{$/;"	f	class:playerCreator
playerCreator	game/factory/playerCreator.h	/^	playerCreator(viewProcess *_viewProc) : viewProc(_viewProc){}$/;"	f	class:playerCreator
playerCreator	game/factory/playerCreator.h	/^class playerCreator : public objectCreator{$/;"	c
viewProc	game/factory/playerCreator.h	/^	viewProcess *viewProc;$/;"	m	class:playerCreator
Init	game/factory/terrainCreator.cpp	/^void terrainCreator::Init(vector2 numBlocks, vector2 blockDim, unsigned int seed){$/;"	f	class:terrainCreator
_block2World	game/factory/terrainCreator.cpp	/^vector2 terrainCreator::_block2World(vector2 blockPos) const{$/;"	f	class:terrainCreator
_createFilledBlock	game/factory/terrainCreator.cpp	/^void terrainCreator::_createFilledBlock(phyData &phy, vector2 blockPos) const{$/;"	f	class:terrainCreator
_createRenderer	game/factory/terrainCreator.cpp	/^renderData terrainCreator::_createRenderer(phyData &phy) const{$/;"	f	class:terrainCreator
createObject	game/factory/terrainCreator.cpp	/^Object *terrainCreator::createObject(vector2 pos) const{$/;"	f	class:terrainCreator
terrainCreator	game/factory/terrainCreator.cpp	/^terrainCreator::terrainCreator(viewProcess *_viewProc) : viewProc(_viewProc){};$/;"	f	class:terrainCreator
blockDim	game/factory/terrainCreator.h	/^	vector2 blockDim;$/;"	m	class:terrainCreator
numBlocks	game/factory/terrainCreator.h	/^	vector2 numBlocks;$/;"	m	class:terrainCreator
seed	game/factory/terrainCreator.h	/^	unsigned int seed;$/;"	m	class:terrainCreator
terrainCreator	game/factory/terrainCreator.h	/^class terrainCreator : public objectCreator{$/;"	c
viewProc	game/factory/terrainCreator.h	/^	viewProcess *viewProc;$/;"	m	class:terrainCreator
_fireGun	game/gameStateHelpers/gunsManager.cpp	/^void gunsManager::_fireGun(){$/;"	f	class:gunsManager
_gotoNextGun	game/gameStateHelpers/gunsManager.cpp	/^void gunsManager::_gotoNextGun(int skip){$/;"	f	class:gunsManager
_gotoPrevGun	game/gameStateHelpers/gunsManager.cpp	/^void gunsManager::_gotoPrevGun(int skip){$/;"	f	class:gunsManager
_reloadGunPtrs	game/gameStateHelpers/gunsManager.cpp	/^void gunsManager::_reloadGunPtrs(){$/;"	f	class:gunsManager
_switchGuns	game/gameStateHelpers/gunsManager.cpp	/^void gunsManager::_switchGuns(Object *prevGun, Object *newGun){$/;"	f	class:gunsManager
_updateGunAngle	game/gameStateHelpers/gunsManager.cpp	/^void gunsManager::_updateGunAngle(util::Angle &facing){$/;"	f	class:gunsManager
addGun	game/gameStateHelpers/gunsManager.cpp	/^void gunsManager::addGun(Object *gun, bool isCurrentGun){$/;"	f	class:gunsManager
gunsManager	game/gameStateHelpers/gunsManager.cpp	/^gunsManager::gunsManager(eventMgr &eventManager, objectFactory &_factory, $/;"	f	class:gunsManager
recieveEvent	game/gameStateHelpers/gunsManager.cpp	/^void gunsManager::recieveEvent(const Hash *eventName, baseProperty *eventData){$/;"	f	class:gunsManager
_bulletCreator	game/gameStateHelpers/gunsManager.h	/^	bulletCreator *_bulletCreator;$/;"	m	class:gunsManager
_gunCreator	game/gameStateHelpers/gunsManager.h	/^	gunCreator *_gunCreator;$/;"	m	class:gunsManager
currentGun	game/gameStateHelpers/gunsManager.h	/^	Object *currentGun;$/;"	m	class:gunsManager
currentGunData	game/gameStateHelpers/gunsManager.h	/^	gunData *currentGunData;$/;"	m	class:gunsManager
currentGunIndex	game/gameStateHelpers/gunsManager.h	/^	int currentGunIndex;$/;"	m	class:gunsManager
guns	game/gameStateHelpers/gunsManager.h	/^	std::vector<Object *>guns;$/;"	m	class:gunsManager
gunsManager	game/gameStateHelpers/gunsManager.h	/^class gunsManager : public Observer{$/;"	c
objectManager	game/gameStateHelpers/gunsManager.h	/^	objectMgr &objectManager;$/;"	m	class:gunsManager
player	game/gameStateHelpers/gunsManager.h	/^	Object *player;$/;"	m	class:gunsManager
Update	game/gameStateHelpers/playerController.cpp	/^void playerController::Update(float dt)$/;"	f	class:playerController
_createGunsManager	game/gameStateHelpers/playerController.cpp	/^void playerController::_createGunsManager(Object *player){$/;"	f	class:playerController
_createPlayer	game/gameStateHelpers/playerController.cpp	/^void playerController::_createPlayer(vector2 initPos, playerCreator *creator){$/;"	f	class:playerController
_createPlayerEventHandler	game/gameStateHelpers/playerController.cpp	/^void playerController::_createPlayerEventHandler(playerHandlerData &playerData)$/;"	f	class:playerController
addGun	game/gameStateHelpers/playerController.cpp	/^void playerController::addGun(Object *gun, bool currentGun){$/;"	f	class:playerController
createPlayer	game/gameStateHelpers/playerController.cpp	/^void playerController::createPlayer(vector2 levelDim, vector2 initPos, playerCreator *creator,$/;"	f	class:playerController
getPlayer	game/gameStateHelpers/playerController.cpp	/^Object *playerController::getPlayer(){$/;"	f	class:playerController
playerController	game/gameStateHelpers/playerController.cpp	/^playerController::playerController(eventMgr *eventManager, objectMgr *objectManager,$/;"	f	class:playerController
_eventManager	game/gameStateHelpers/playerController.h	/^	eventMgr *_eventManager;$/;"	m	class:playerController
_objectFactory	game/gameStateHelpers/playerController.h	/^	objectFactory *_objectFactory;$/;"	m	class:playerController
_objectManager	game/gameStateHelpers/playerController.h	/^	objectMgr *_objectManager;$/;"	m	class:playerController
gunsMgr	game/gameStateHelpers/playerController.h	/^	gunsManager *gunsMgr;$/;"	m	class:playerController
levelDim	game/gameStateHelpers/playerController.h	/^	vector2 levelDim;$/;"	m	class:playerController
player	game/gameStateHelpers/playerController.h	/^	Object *player;$/;"	m	class:playerController
playerController	game/gameStateHelpers/playerController.h	/^class playerController{$/;"	c
playerHandler	game/gameStateHelpers/playerController.h	/^	playerEventHandler *playerHandler;$/;"	m	class:playerController
viewProc	game/gameStateHelpers/playerController.h	/^	viewProcess *viewProc;$/;"	m	class:playerController
Update	game/gameStateHelpers/playerEventHandler.cpp	/^void playerEventHandler::Update(){$/;"	f	class:playerEventHandler
_fireGun	game/gameStateHelpers/playerEventHandler.cpp	/^void playerEventHandler::_fireGun(){$/;"	f	class:playerEventHandler
_handleKeyPress	game/gameStateHelpers/playerEventHandler.cpp	/^void playerEventHandler::_handleKeyPress(sf::Event::KeyEvent *event){$/;"	f	class:playerEventHandler
_handleKeyRelease	game/gameStateHelpers/playerEventHandler.cpp	/^void playerEventHandler::_handleKeyRelease(sf::Event::KeyEvent *event){$/;"	f	class:playerEventHandler
_handleMouseWheelDown	game/gameStateHelpers/playerEventHandler.cpp	/^void playerEventHandler::_handleMouseWheelDown(int ticks){$/;"	f	class:playerEventHandler
_handleMouseWheelUp	game/gameStateHelpers/playerEventHandler.cpp	/^void playerEventHandler::_handleMouseWheelUp(int ticks){$/;"	f	class:playerEventHandler
_updateGunFacing	game/gameStateHelpers/playerEventHandler.cpp	/^void playerEventHandler::_updateGunFacing(vector2 gameMousePos){$/;"	f	class:playerEventHandler
playerEventHandler	game/gameStateHelpers/playerEventHandler.cpp	/^playerEventHandler::playerEventHandler(eventMgr *_eventManager, playerHandlerData playerData) : $/;"	f	class:playerEventHandler
recieveEvent	game/gameStateHelpers/playerEventHandler.cpp	/^void playerEventHandler::recieveEvent(const Hash *eventName, baseProperty *eventData){$/;"	f	class:playerEventHandler
down	game/gameStateHelpers/playerEventHandler.h	/^	sf::Keyboard::Key down;$/;"	m	struct:playerHandlerData
eventManager	game/gameStateHelpers/playerEventHandler.h	/^	eventMgr *eventManager;$/;"	m	class:playerEventHandler
fireGun	game/gameStateHelpers/playerEventHandler.h	/^	sf::Keyboard::Key fireGun;$/;"	m	struct:playerHandlerData
firing	game/gameStateHelpers/playerEventHandler.h	/^	bool firing;$/;"	m	class:playerEventHandler
lastMousePos	game/gameStateHelpers/playerEventHandler.h	/^	vector2 lastMousePos;$/;"	m	class:playerEventHandler
left	game/gameStateHelpers/playerEventHandler.h	/^	sf::Keyboard::Key left;$/;"	m	struct:playerHandlerData
objMoveData	game/gameStateHelpers/playerEventHandler.h	/^	groundMoveData *objMoveData;$/;"	m	struct:playerHandlerData
physicsData	game/gameStateHelpers/playerEventHandler.h	/^	phyData *physicsData;$/;"	m	struct:playerHandlerData
player	game/gameStateHelpers/playerEventHandler.h	/^	Object *player;$/;"	m	struct:playerHandlerData
playerData	game/gameStateHelpers/playerEventHandler.h	/^	playerHandlerData playerData;$/;"	m	class:playerEventHandler
playerEventHandler	game/gameStateHelpers/playerEventHandler.h	/^class playerEventHandler : public Observer{$/;"	c
playerHandlerData	game/gameStateHelpers/playerEventHandler.h	/^struct playerHandlerData{$/;"	s
playerPos	game/gameStateHelpers/playerEventHandler.h	/^	vector2 *playerPos;$/;"	m	struct:playerHandlerData
right	game/gameStateHelpers/playerEventHandler.h	/^	sf::Keyboard::Key right;$/;"	m	struct:playerHandlerData
up	game/gameStateHelpers/playerEventHandler.h	/^	sf::Keyboard::Key up;$/;"	m	struct:playerHandlerData
Generator	game/generators/Generator.h	/^	Generator(){};$/;"	f	class:Generator
Generator	game/generators/Generator.h	/^class Generator{$/;"	c
_genFloat	game/generators/Generator.h	/^	float _genFloat(float min, float max){$/;"	f	class:Generator
_genInt	game/generators/Generator.h	/^	int _genInt(int min, int max){$/;"	f	class:Generator
_normGenFloat	game/generators/Generator.h	/^	float  _normGenFloat(float mean, float deviation ){$/;"	f	class:Generator
_normGenInt	game/generators/Generator.h	/^	int  _normGenInt(int mean, int deviation ){$/;"	f	class:Generator
generator	game/generators/Generator.h	/^	std::mt19937 generator;$/;"	m	class:Generator
~Generator	game/generators/Generator.h	/^		virtual ~Generator(){};$/;"	f	class:Generator
PerlinNoise	game/generators/PerlinNoise.cpp	/^PerlinNoise::PerlinNoise() {$/;"	f	class:PerlinNoise
PerlinNoise	game/generators/PerlinNoise.cpp	/^PerlinNoise::PerlinNoise(unsigned int seed) {$/;"	f	class:PerlinNoise
fade	game/generators/PerlinNoise.cpp	/^double PerlinNoise::fade(double t) { $/;"	f	class:PerlinNoise
grad	game/generators/PerlinNoise.cpp	/^double PerlinNoise::grad(int hash, double x, double y, double z) {$/;"	f	class:PerlinNoise
lerp	game/generators/PerlinNoise.cpp	/^double PerlinNoise::lerp(double t, double a, double b) { $/;"	f	class:PerlinNoise
noise	game/generators/PerlinNoise.cpp	/^double PerlinNoise::noise(double x, double y, double z) {$/;"	f	class:PerlinNoise
PERLINNOISE_H	game/generators/PerlinNoise.h	10;"	d
PerlinNoise	game/generators/PerlinNoise.h	/^class PerlinNoise {$/;"	c
p	game/generators/PerlinNoise.h	/^	std::vector<int> p;$/;"	m	class:PerlinNoise
Generate	game/generators/bulletDataGenerator.cpp	/^bulletData bulletDataGenerator::Generate(){$/;"	f	class:bulletDataGenerator
_createBulletCollider	game/generators/bulletDataGenerator.cpp	/^bulletCollider* bulletDataGenerator::_createBulletCollider(unsigned long colliderSeed){$/;"	f	class:bulletDataGenerator
_genDamage	game/generators/bulletDataGenerator.cpp	/^damageCollider *bulletDataGenerator::_genDamage(damageProperty &prop){$/;"	f	class:bulletDataGenerator
_genGravity	game/generators/bulletDataGenerator.cpp	/^float bulletDataGenerator::_genGravity(gravityProperty &prop){$/;"	f	class:bulletDataGenerator
_genKnockback	game/generators/bulletDataGenerator.cpp	/^pushCollider *bulletDataGenerator::_genKnockback(knockbackProperty &prop){$/;"	f	class:bulletDataGenerator
bulletDataGenerator	game/generators/bulletDataGenerator.cpp	/^bulletDataGenerator::bulletDataGenerator(genData _data,$/;"	f	class:bulletDataGenerator
abilitySkill	game/generators/bulletDataGenerator.h	/^		int abilitySkill;$/;"	m	struct:bulletDataGenerator::genData
bulletDataGenerator	game/generators/bulletDataGenerator.h	/^class bulletDataGenerator : public Generator{$/;"	c
damage	game/generators/bulletDataGenerator.h	/^		damageProperty	damage;$/;"	m	struct:bulletDataGenerator::genData
damageProperty	game/generators/bulletDataGenerator.h	/^	enum damageProperty{$/;"	g	class:bulletDataGenerator
data	game/generators/bulletDataGenerator.h	/^	genData data;$/;"	m	class:bulletDataGenerator
defaultGravity	game/generators/bulletDataGenerator.h	/^		defaultGravity,$/;"	e	enum:bulletDataGenerator::gravityProperty
genData	game/generators/bulletDataGenerator.h	/^		genData(knockbackProperty knockback,$/;"	f	struct:bulletDataGenerator::genData
genData	game/generators/bulletDataGenerator.h	/^	struct genData{$/;"	s	class:bulletDataGenerator
gravity	game/generators/bulletDataGenerator.h	/^		gravityProperty gravity;$/;"	m	struct:bulletDataGenerator::genData
gravityProperty	game/generators/bulletDataGenerator.h	/^	enum gravityProperty{$/;"	g	class:bulletDataGenerator
highDamage	game/generators/bulletDataGenerator.h	/^		highDamage,$/;"	e	enum:bulletDataGenerator::damageProperty
highGravity	game/generators/bulletDataGenerator.h	/^		highGravity,$/;"	e	enum:bulletDataGenerator::gravityProperty
highKnockback	game/generators/bulletDataGenerator.h	/^		highKnockback$/;"	e	enum:bulletDataGenerator::knockbackProperty
knockback	game/generators/bulletDataGenerator.h	/^		knockbackProperty knockback;$/;"	m	struct:bulletDataGenerator::genData
knockbackProperty	game/generators/bulletDataGenerator.h	/^	enum knockbackProperty{$/;"	g	class:bulletDataGenerator
lowDamage	game/generators/bulletDataGenerator.h	/^		lowDamage = 0,$/;"	e	enum:bulletDataGenerator::damageProperty
lowGravity	game/generators/bulletDataGenerator.h	/^		lowGravity,$/;"	e	enum:bulletDataGenerator::gravityProperty
lowKnockback	game/generators/bulletDataGenerator.h	/^		lowKnockback,$/;"	e	enum:bulletDataGenerator::knockbackProperty
mediumDamage	game/generators/bulletDataGenerator.h	/^		mediumDamage,$/;"	e	enum:bulletDataGenerator::damageProperty
mediumKnockback	game/generators/bulletDataGenerator.h	/^		mediumKnockback,$/;"	e	enum:bulletDataGenerator::knockbackProperty
noGravity	game/generators/bulletDataGenerator.h	/^		noGravity = 0,$/;"	e	enum:bulletDataGenerator::gravityProperty
noKnockback	game/generators/bulletDataGenerator.h	/^		noKnockback = 0,$/;"	e	enum:bulletDataGenerator::knockbackProperty
numAbilities	game/generators/bulletDataGenerator.h	/^		int numAbilities;$/;"	m	struct:bulletDataGenerator::genData
power	game/generators/bulletDataGenerator.h	/^	unsigned int power;$/;"	m	class:bulletDataGenerator
seed	game/generators/bulletDataGenerator.h	/^	unsigned long seed;$/;"	m	class:bulletDataGenerator
Generate	game/generators/gunDataGenerator.cpp	/^gunData gunDataGenerator::Generate(){$/;"	f	class:gunDataGenerator
_genBulletData	game/generators/gunDataGenerator.cpp	/^void gunDataGenerator::_genBulletData(gunData &data,$/;"	f	class:gunDataGenerator
_genMachineGun	game/generators/gunDataGenerator.cpp	/^void gunDataGenerator::_genMachineGun(gunData &data){$/;"	f	class:gunDataGenerator
_genRocket	game/generators/gunDataGenerator.cpp	/^void gunDataGenerator::_genRocket(gunData &data){$/;"	f	class:gunDataGenerator
gunDataGenerator	game/generators/gunDataGenerator.cpp	/^gunDataGenerator::gunDataGenerator(gunDataGenerator::Archetype archetype, $/;"	f	class:gunDataGenerator
Archetype	game/generators/gunDataGenerator.h	/^	enum Archetype{$/;"	g	class:gunDataGenerator
Rocket	game/generators/gunDataGenerator.h	/^		Rocket = 1,$/;"	e	enum:gunDataGenerator::Archetype
archetype	game/generators/gunDataGenerator.h	/^	Archetype archetype;$/;"	m	class:gunDataGenerator
gunDataGenerator	game/generators/gunDataGenerator.h	/^class gunDataGenerator : public Generator{$/;"	c
machineGun	game/generators/gunDataGenerator.h	/^		machineGun = 0,$/;"	e	enum:gunDataGenerator::Archetype
power	game/generators/gunDataGenerator.h	/^	unsigned int power;$/;"	m	class:gunDataGenerator
seed	game/generators/gunDataGenerator.h	/^	unsigned long seed;$/;"	m	class:gunDataGenerator
Level	game/level/Level.h	/^class Level{$/;"	c
gameSegment	game/level/gameSegment.h	/^class gameSegment{$/;"	c
At	game/terrainGen/terrain.h	/^	terrainType At(int x, int y) {$/;"	f	struct:Terrain
Empty	game/terrainGen/terrain.h	/^	Empty = 0,$/;"	e	enum:terrainType
Filled	game/terrainGen/terrain.h	/^	Filled$/;"	e	enum:terrainType
Set	game/terrainGen/terrain.h	/^	void Set(int x, int y, terrainType type) {$/;"	f	struct:Terrain
Terrain	game/terrainGen/terrain.h	/^	Terrain(unsigned int width, unsigned int height) : width_(width), height_(height), maxHeight_(0) {$/;"	f	struct:Terrain
Terrain	game/terrainGen/terrain.h	/^struct Terrain {$/;"	s
getHeight	game/terrainGen/terrain.h	/^	unsigned int getHeight () {$/;"	f	struct:Terrain
getHeightAt	game/terrainGen/terrain.h	/^	unsigned int getHeightAt(int x) {$/;"	f	struct:Terrain
getMaxHeight	game/terrainGen/terrain.h	/^	unsigned int getMaxHeight () {$/;"	f	struct:Terrain
getWidth	game/terrainGen/terrain.h	/^	unsigned int getWidth () {$/;"	f	struct:Terrain
height_	game/terrainGen/terrain.h	/^	unsigned int width_, height_;$/;"	m	struct:Terrain
maxHeight_	game/terrainGen/terrain.h	/^	unsigned int maxHeight_;$/;"	m	struct:Terrain
setMaxHeight	game/terrainGen/terrain.h	/^	void setMaxHeight (unsigned int maxHeight) {$/;"	f	struct:Terrain
terrain	game/terrainGen/terrain.h	/^	std::vector <terrainType> terrain;$/;"	m	struct:Terrain
terrainType	game/terrainGen/terrain.h	/^enum terrainType {$/;"	g
width_	game/terrainGen/terrain.h	/^	unsigned int width_, height_;$/;"	m	struct:Terrain
SetTerrain	game/terrainGen/terrainGenerator.cpp	/^void SetTerrain(Terrain &terrain, unsigned int x, unsigned int y, $/;"	f
genBorders	game/terrainGen/terrainGenerator.cpp	/^void genBorders(Terrain &terrain) {$/;"	f
genCarver	game/terrainGen/terrainGenerator.cpp	/^void genCarver(Terrain &terrain, unsigned int seed, unsigned int steps, unsigned int thickness) {$/;"	f
genHeightShape	game/terrainGen/terrainGenerator.cpp	/^void genHeightShape(Terrain &terrain, PerlinNoise &noise) {$/;"	f
genTerrain	game/terrainGen/terrainGenerator.cpp	/^void genTerrain(Terrain &terrain, unsigned int seed){$/;"	f
getPlayerPosTerrain	game/terrainGen/terrainGenerator.cpp	/^vector2 getPlayerPosTerrain(Terrain &terrain, int terrainX){$/;"	f
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
BOX2D_H	include/Box2D/Box2D.h	20;"	d
Clone	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^b2Shape* b2ChainShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2ChainShape
ComputeAABB	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const$/;"	f	class:b2ChainShape
ComputeMass	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2ChainShape
CreateChain	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::CreateChain(const b2Vec2* vertices, int32 count)$/;"	f	class:b2ChainShape
CreateLoop	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::CreateLoop(const b2Vec2* vertices, int32 count)$/;"	f	class:b2ChainShape
GetChildCount	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^int32 b2ChainShape::GetChildCount() const$/;"	f	class:b2ChainShape
GetChildEdge	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::GetChildEdge(b2EdgeShape* edge, int32 index) const$/;"	f	class:b2ChainShape
RayCast	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^bool b2ChainShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2ChainShape
SetNextVertex	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::SetNextVertex(const b2Vec2& nextVertex)$/;"	f	class:b2ChainShape
SetPrevVertex	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::SetPrevVertex(const b2Vec2& prevVertex)$/;"	f	class:b2ChainShape
TestPoint	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^bool b2ChainShape::TestPoint(const b2Transform& xf, const b2Vec2& p) const$/;"	f	class:b2ChainShape
~b2ChainShape	include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^b2ChainShape::~b2ChainShape()$/;"	f	class:b2ChainShape
B2_CHAIN_SHAPE_H	include/Box2D/Collision/Shapes/b2ChainShape.h	20;"	d
b2ChainShape	include/Box2D/Collision/Shapes/b2ChainShape.h	/^class b2ChainShape : public b2Shape$/;"	c
b2ChainShape	include/Box2D/Collision/Shapes/b2ChainShape.h	/^inline b2ChainShape::b2ChainShape()$/;"	f	class:b2ChainShape
m_count	include/Box2D/Collision/Shapes/b2ChainShape.h	/^	int32 m_count;$/;"	m	class:b2ChainShape
m_hasNextVertex	include/Box2D/Collision/Shapes/b2ChainShape.h	/^	bool m_hasPrevVertex, m_hasNextVertex;$/;"	m	class:b2ChainShape
m_hasPrevVertex	include/Box2D/Collision/Shapes/b2ChainShape.h	/^	bool m_hasPrevVertex, m_hasNextVertex;$/;"	m	class:b2ChainShape
m_nextVertex	include/Box2D/Collision/Shapes/b2ChainShape.h	/^	b2Vec2 m_prevVertex, m_nextVertex;$/;"	m	class:b2ChainShape
m_prevVertex	include/Box2D/Collision/Shapes/b2ChainShape.h	/^	b2Vec2 m_prevVertex, m_nextVertex;$/;"	m	class:b2ChainShape
m_vertices	include/Box2D/Collision/Shapes/b2ChainShape.h	/^	b2Vec2* m_vertices;$/;"	m	class:b2ChainShape
Clone	include/Box2D/Collision/Shapes/b2CircleShape.cpp	/^b2Shape* b2CircleShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2CircleShape
ComputeAABB	include/Box2D/Collision/Shapes/b2CircleShape.cpp	/^void b2CircleShape::ComputeAABB(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const$/;"	f	class:b2CircleShape
ComputeMass	include/Box2D/Collision/Shapes/b2CircleShape.cpp	/^void b2CircleShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2CircleShape
GetChildCount	include/Box2D/Collision/Shapes/b2CircleShape.cpp	/^int32 b2CircleShape::GetChildCount() const$/;"	f	class:b2CircleShape
RayCast	include/Box2D/Collision/Shapes/b2CircleShape.cpp	/^bool b2CircleShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2CircleShape
TestPoint	include/Box2D/Collision/Shapes/b2CircleShape.cpp	/^bool b2CircleShape::TestPoint(const b2Transform& transform, const b2Vec2& p) const$/;"	f	class:b2CircleShape
B2_CIRCLE_SHAPE_H	include/Box2D/Collision/Shapes/b2CircleShape.h	20;"	d
GetSupport	include/Box2D/Collision/Shapes/b2CircleShape.h	/^inline int32 b2CircleShape::GetSupport(const b2Vec2 &d) const$/;"	f	class:b2CircleShape
GetSupportVertex	include/Box2D/Collision/Shapes/b2CircleShape.h	/^inline const b2Vec2& b2CircleShape::GetSupportVertex(const b2Vec2 &d) const$/;"	f	class:b2CircleShape
GetVertex	include/Box2D/Collision/Shapes/b2CircleShape.h	/^inline const b2Vec2& b2CircleShape::GetVertex(int32 index) const$/;"	f	class:b2CircleShape
GetVertexCount	include/Box2D/Collision/Shapes/b2CircleShape.h	/^	int32 GetVertexCount() const { return 1; }$/;"	f	class:b2CircleShape
b2CircleShape	include/Box2D/Collision/Shapes/b2CircleShape.h	/^class b2CircleShape : public b2Shape$/;"	c
b2CircleShape	include/Box2D/Collision/Shapes/b2CircleShape.h	/^inline b2CircleShape::b2CircleShape()$/;"	f	class:b2CircleShape
m_p	include/Box2D/Collision/Shapes/b2CircleShape.h	/^	b2Vec2 m_p;$/;"	m	class:b2CircleShape
Clone	include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^b2Shape* b2EdgeShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2EdgeShape
ComputeAABB	include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^void b2EdgeShape::ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const$/;"	f	class:b2EdgeShape
ComputeMass	include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^void b2EdgeShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2EdgeShape
GetChildCount	include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^int32 b2EdgeShape::GetChildCount() const$/;"	f	class:b2EdgeShape
RayCast	include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^bool b2EdgeShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2EdgeShape
Set	include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^void b2EdgeShape::Set(const b2Vec2& v1, const b2Vec2& v2)$/;"	f	class:b2EdgeShape
TestPoint	include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^bool b2EdgeShape::TestPoint(const b2Transform& xf, const b2Vec2& p) const$/;"	f	class:b2EdgeShape
B2_EDGE_SHAPE_H	include/Box2D/Collision/Shapes/b2EdgeShape.h	20;"	d
b2EdgeShape	include/Box2D/Collision/Shapes/b2EdgeShape.h	/^class b2EdgeShape : public b2Shape$/;"	c
b2EdgeShape	include/Box2D/Collision/Shapes/b2EdgeShape.h	/^inline b2EdgeShape::b2EdgeShape()$/;"	f	class:b2EdgeShape
m_hasVertex0	include/Box2D/Collision/Shapes/b2EdgeShape.h	/^	bool m_hasVertex0, m_hasVertex3;$/;"	m	class:b2EdgeShape
m_hasVertex3	include/Box2D/Collision/Shapes/b2EdgeShape.h	/^	bool m_hasVertex0, m_hasVertex3;$/;"	m	class:b2EdgeShape
m_vertex0	include/Box2D/Collision/Shapes/b2EdgeShape.h	/^	b2Vec2 m_vertex0, m_vertex3;$/;"	m	class:b2EdgeShape
m_vertex1	include/Box2D/Collision/Shapes/b2EdgeShape.h	/^	b2Vec2 m_vertex1, m_vertex2;$/;"	m	class:b2EdgeShape
m_vertex2	include/Box2D/Collision/Shapes/b2EdgeShape.h	/^	b2Vec2 m_vertex1, m_vertex2;$/;"	m	class:b2EdgeShape
m_vertex3	include/Box2D/Collision/Shapes/b2EdgeShape.h	/^	b2Vec2 m_vertex0, m_vertex3;$/;"	m	class:b2EdgeShape
Clone	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^b2Shape* b2PolygonShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2PolygonShape
ComputeAABB	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const$/;"	f	class:b2PolygonShape
ComputeCentroid	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^static b2Vec2 ComputeCentroid(const b2Vec2* vs, int32 count)$/;"	f	file:
ComputeMass	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2PolygonShape
GetChildCount	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^int32 b2PolygonShape::GetChildCount() const$/;"	f	class:b2PolygonShape
RayCast	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^bool b2PolygonShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2PolygonShape
Set	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::Set(const b2Vec2* vertices, int32 count)$/;"	f	class:b2PolygonShape
SetAsBox	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::SetAsBox(float32 hx, float32 hy)$/;"	f	class:b2PolygonShape
SetAsBox	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::SetAsBox(float32 hx, float32 hy, const b2Vec2& center, float32 angle)$/;"	f	class:b2PolygonShape
TestPoint	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^bool b2PolygonShape::TestPoint(const b2Transform& xf, const b2Vec2& p) const$/;"	f	class:b2PolygonShape
Validate	include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^bool b2PolygonShape::Validate() const$/;"	f	class:b2PolygonShape
B2_POLYGON_SHAPE_H	include/Box2D/Collision/Shapes/b2PolygonShape.h	20;"	d
GetVertex	include/Box2D/Collision/Shapes/b2PolygonShape.h	/^inline const b2Vec2& b2PolygonShape::GetVertex(int32 index) const$/;"	f	class:b2PolygonShape
GetVertexCount	include/Box2D/Collision/Shapes/b2PolygonShape.h	/^	int32 GetVertexCount() const { return m_count; }$/;"	f	class:b2PolygonShape
b2PolygonShape	include/Box2D/Collision/Shapes/b2PolygonShape.h	/^class b2PolygonShape : public b2Shape$/;"	c
b2PolygonShape	include/Box2D/Collision/Shapes/b2PolygonShape.h	/^inline b2PolygonShape::b2PolygonShape()$/;"	f	class:b2PolygonShape
m_centroid	include/Box2D/Collision/Shapes/b2PolygonShape.h	/^	b2Vec2 m_centroid;$/;"	m	class:b2PolygonShape
m_count	include/Box2D/Collision/Shapes/b2PolygonShape.h	/^	int32 m_count;$/;"	m	class:b2PolygonShape
m_normals	include/Box2D/Collision/Shapes/b2PolygonShape.h	/^	b2Vec2 m_normals[b2_maxPolygonVertices];$/;"	m	class:b2PolygonShape
m_vertices	include/Box2D/Collision/Shapes/b2PolygonShape.h	/^	b2Vec2 m_vertices[b2_maxPolygonVertices];$/;"	m	class:b2PolygonShape
B2_SHAPE_H	include/Box2D/Collision/Shapes/b2Shape.h	20;"	d
GetType	include/Box2D/Collision/Shapes/b2Shape.h	/^inline b2Shape::Type b2Shape::GetType() const$/;"	f	class:b2Shape
I	include/Box2D/Collision/Shapes/b2Shape.h	/^	float32 I;$/;"	m	struct:b2MassData
Type	include/Box2D/Collision/Shapes/b2Shape.h	/^	enum Type$/;"	g	class:b2Shape
b2MassData	include/Box2D/Collision/Shapes/b2Shape.h	/^struct b2MassData$/;"	s
b2Shape	include/Box2D/Collision/Shapes/b2Shape.h	/^class b2Shape$/;"	c
center	include/Box2D/Collision/Shapes/b2Shape.h	/^	b2Vec2 center;$/;"	m	struct:b2MassData
e_chain	include/Box2D/Collision/Shapes/b2Shape.h	/^		e_chain = 3,$/;"	e	enum:b2Shape::Type
e_circle	include/Box2D/Collision/Shapes/b2Shape.h	/^		e_circle = 0,$/;"	e	enum:b2Shape::Type
e_edge	include/Box2D/Collision/Shapes/b2Shape.h	/^		e_edge = 1,$/;"	e	enum:b2Shape::Type
e_polygon	include/Box2D/Collision/Shapes/b2Shape.h	/^		e_polygon = 2,$/;"	e	enum:b2Shape::Type
e_typeCount	include/Box2D/Collision/Shapes/b2Shape.h	/^		e_typeCount = 4$/;"	e	enum:b2Shape::Type
m_radius	include/Box2D/Collision/Shapes/b2Shape.h	/^	float32 m_radius;$/;"	m	class:b2Shape
m_type	include/Box2D/Collision/Shapes/b2Shape.h	/^	Type m_type;$/;"	m	class:b2Shape
mass	include/Box2D/Collision/Shapes/b2Shape.h	/^	float32 mass;$/;"	m	struct:b2MassData
~b2Shape	include/Box2D/Collision/Shapes/b2Shape.h	/^	virtual ~b2Shape() {}$/;"	f	class:b2Shape
BufferMove	include/Box2D/Collision/b2BroadPhase.cpp	/^void b2BroadPhase::BufferMove(int32 proxyId)$/;"	f	class:b2BroadPhase
CreateProxy	include/Box2D/Collision/b2BroadPhase.cpp	/^int32 b2BroadPhase::CreateProxy(const b2AABB& aabb, void* userData)$/;"	f	class:b2BroadPhase
DestroyProxy	include/Box2D/Collision/b2BroadPhase.cpp	/^void b2BroadPhase::DestroyProxy(int32 proxyId)$/;"	f	class:b2BroadPhase
MoveProxy	include/Box2D/Collision/b2BroadPhase.cpp	/^void b2BroadPhase::MoveProxy(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)$/;"	f	class:b2BroadPhase
QueryCallback	include/Box2D/Collision/b2BroadPhase.cpp	/^bool b2BroadPhase::QueryCallback(int32 proxyId)$/;"	f	class:b2BroadPhase
TouchProxy	include/Box2D/Collision/b2BroadPhase.cpp	/^void b2BroadPhase::TouchProxy(int32 proxyId)$/;"	f	class:b2BroadPhase
UnBufferMove	include/Box2D/Collision/b2BroadPhase.cpp	/^void b2BroadPhase::UnBufferMove(int32 proxyId)$/;"	f	class:b2BroadPhase
b2BroadPhase	include/Box2D/Collision/b2BroadPhase.cpp	/^b2BroadPhase::b2BroadPhase()$/;"	f	class:b2BroadPhase
~b2BroadPhase	include/Box2D/Collision/b2BroadPhase.cpp	/^b2BroadPhase::~b2BroadPhase()$/;"	f	class:b2BroadPhase
B2_BROAD_PHASE_H	include/Box2D/Collision/b2BroadPhase.h	20;"	d
GetFatAABB	include/Box2D/Collision/b2BroadPhase.h	/^inline const b2AABB& b2BroadPhase::GetFatAABB(int32 proxyId) const$/;"	f	class:b2BroadPhase
GetProxyCount	include/Box2D/Collision/b2BroadPhase.h	/^inline int32 b2BroadPhase::GetProxyCount() const$/;"	f	class:b2BroadPhase
GetTreeBalance	include/Box2D/Collision/b2BroadPhase.h	/^inline int32 b2BroadPhase::GetTreeBalance() const$/;"	f	class:b2BroadPhase
GetTreeHeight	include/Box2D/Collision/b2BroadPhase.h	/^inline int32 b2BroadPhase::GetTreeHeight() const$/;"	f	class:b2BroadPhase
GetTreeQuality	include/Box2D/Collision/b2BroadPhase.h	/^inline float32 b2BroadPhase::GetTreeQuality() const$/;"	f	class:b2BroadPhase
GetUserData	include/Box2D/Collision/b2BroadPhase.h	/^inline void* b2BroadPhase::GetUserData(int32 proxyId) const$/;"	f	class:b2BroadPhase
Query	include/Box2D/Collision/b2BroadPhase.h	/^inline void b2BroadPhase::Query(T* callback, const b2AABB& aabb) const$/;"	f	class:b2BroadPhase
RayCast	include/Box2D/Collision/b2BroadPhase.h	/^inline void b2BroadPhase::RayCast(T* callback, const b2RayCastInput& input) const$/;"	f	class:b2BroadPhase
ShiftOrigin	include/Box2D/Collision/b2BroadPhase.h	/^inline void b2BroadPhase::ShiftOrigin(const b2Vec2& newOrigin)$/;"	f	class:b2BroadPhase
TestOverlap	include/Box2D/Collision/b2BroadPhase.h	/^inline bool b2BroadPhase::TestOverlap(int32 proxyIdA, int32 proxyIdB) const$/;"	f	class:b2BroadPhase
UpdatePairs	include/Box2D/Collision/b2BroadPhase.h	/^void b2BroadPhase::UpdatePairs(T* callback)$/;"	f	class:b2BroadPhase
b2BroadPhase	include/Box2D/Collision/b2BroadPhase.h	/^class b2BroadPhase$/;"	c
b2Pair	include/Box2D/Collision/b2BroadPhase.h	/^struct b2Pair$/;"	s
b2PairLessThan	include/Box2D/Collision/b2BroadPhase.h	/^inline bool b2PairLessThan(const b2Pair& pair1, const b2Pair& pair2)$/;"	f
e_nullProxy	include/Box2D/Collision/b2BroadPhase.h	/^		e_nullProxy = -1$/;"	e	enum:b2BroadPhase::__anon5
m_moveBuffer	include/Box2D/Collision/b2BroadPhase.h	/^	int32* m_moveBuffer;$/;"	m	class:b2BroadPhase
m_moveCapacity	include/Box2D/Collision/b2BroadPhase.h	/^	int32 m_moveCapacity;$/;"	m	class:b2BroadPhase
m_moveCount	include/Box2D/Collision/b2BroadPhase.h	/^	int32 m_moveCount;$/;"	m	class:b2BroadPhase
m_pairBuffer	include/Box2D/Collision/b2BroadPhase.h	/^	b2Pair* m_pairBuffer;$/;"	m	class:b2BroadPhase
m_pairCapacity	include/Box2D/Collision/b2BroadPhase.h	/^	int32 m_pairCapacity;$/;"	m	class:b2BroadPhase
m_pairCount	include/Box2D/Collision/b2BroadPhase.h	/^	int32 m_pairCount;$/;"	m	class:b2BroadPhase
m_proxyCount	include/Box2D/Collision/b2BroadPhase.h	/^	int32 m_proxyCount;$/;"	m	class:b2BroadPhase
m_queryProxyId	include/Box2D/Collision/b2BroadPhase.h	/^	int32 m_queryProxyId;$/;"	m	class:b2BroadPhase
m_tree	include/Box2D/Collision/b2BroadPhase.h	/^	b2DynamicTree m_tree;$/;"	m	class:b2BroadPhase
proxyIdA	include/Box2D/Collision/b2BroadPhase.h	/^	int32 proxyIdA;$/;"	m	struct:b2Pair
proxyIdB	include/Box2D/Collision/b2BroadPhase.h	/^	int32 proxyIdB;$/;"	m	struct:b2Pair
b2CollideCircles	include/Box2D/Collision/b2CollideCircle.cpp	/^void b2CollideCircles($/;"	f
b2CollidePolygonAndCircle	include/Box2D/Collision/b2CollideCircle.cpp	/^void b2CollidePolygonAndCircle($/;"	f
Collide	include/Box2D/Collision/b2CollideEdge.cpp	/^void b2EPCollider::Collide(b2Manifold* manifold, const b2EdgeShape* edgeA, const b2Transform& xfA,$/;"	f	class:b2EPCollider
ComputeEdgeSeparation	include/Box2D/Collision/b2CollideEdge.cpp	/^b2EPAxis b2EPCollider::ComputeEdgeSeparation()$/;"	f	class:b2EPCollider
ComputePolygonSeparation	include/Box2D/Collision/b2CollideEdge.cpp	/^b2EPAxis b2EPCollider::ComputePolygonSeparation()$/;"	f	class:b2EPCollider
Type	include/Box2D/Collision/b2CollideEdge.cpp	/^	enum Type$/;"	g	struct:b2EPAxis	file:
VertexType	include/Box2D/Collision/b2CollideEdge.cpp	/^	enum VertexType$/;"	g	struct:b2EPCollider	file:
b2CollideEdgeAndCircle	include/Box2D/Collision/b2CollideEdge.cpp	/^void b2CollideEdgeAndCircle(b2Manifold* manifold,$/;"	f
b2CollideEdgeAndPolygon	include/Box2D/Collision/b2CollideEdge.cpp	/^void b2CollideEdgeAndPolygon(	b2Manifold* manifold,$/;"	f
b2EPAxis	include/Box2D/Collision/b2CollideEdge.cpp	/^struct b2EPAxis$/;"	s	file:
b2EPCollider	include/Box2D/Collision/b2CollideEdge.cpp	/^struct b2EPCollider$/;"	s	file:
b2ReferenceFace	include/Box2D/Collision/b2CollideEdge.cpp	/^struct b2ReferenceFace$/;"	s	file:
b2TempPolygon	include/Box2D/Collision/b2CollideEdge.cpp	/^struct b2TempPolygon$/;"	s	file:
count	include/Box2D/Collision/b2CollideEdge.cpp	/^	int32 count;$/;"	m	struct:b2TempPolygon	file:
e_concave	include/Box2D/Collision/b2CollideEdge.cpp	/^		e_concave,$/;"	e	enum:b2EPCollider::VertexType	file:
e_convex	include/Box2D/Collision/b2CollideEdge.cpp	/^		e_convex$/;"	e	enum:b2EPCollider::VertexType	file:
e_edgeA	include/Box2D/Collision/b2CollideEdge.cpp	/^		e_edgeA,$/;"	e	enum:b2EPAxis::Type	file:
e_edgeB	include/Box2D/Collision/b2CollideEdge.cpp	/^		e_edgeB$/;"	e	enum:b2EPAxis::Type	file:
e_isolated	include/Box2D/Collision/b2CollideEdge.cpp	/^		e_isolated,$/;"	e	enum:b2EPCollider::VertexType	file:
e_unknown	include/Box2D/Collision/b2CollideEdge.cpp	/^		e_unknown,$/;"	e	enum:b2EPAxis::Type	file:
i1	include/Box2D/Collision/b2CollideEdge.cpp	/^	int32 i1, i2;$/;"	m	struct:b2ReferenceFace	file:
i2	include/Box2D/Collision/b2CollideEdge.cpp	/^	int32 i1, i2;$/;"	m	struct:b2ReferenceFace	file:
index	include/Box2D/Collision/b2CollideEdge.cpp	/^	int32 index;$/;"	m	struct:b2EPAxis	file:
m_centroidB	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_centroidB;$/;"	m	struct:b2EPCollider	file:
m_front	include/Box2D/Collision/b2CollideEdge.cpp	/^	bool m_front;$/;"	m	struct:b2EPCollider	file:
m_lowerLimit	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_lowerLimit, m_upperLimit;$/;"	m	struct:b2EPCollider	file:
m_normal	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_normal;$/;"	m	struct:b2EPCollider	file:
m_normal0	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_normal0, m_normal1, m_normal2;$/;"	m	struct:b2EPCollider	file:
m_normal1	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_normal0, m_normal1, m_normal2;$/;"	m	struct:b2EPCollider	file:
m_normal2	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_normal0, m_normal1, m_normal2;$/;"	m	struct:b2EPCollider	file:
m_polygonB	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2TempPolygon m_polygonB;$/;"	m	struct:b2EPCollider	file:
m_radius	include/Box2D/Collision/b2CollideEdge.cpp	/^	float32 m_radius;$/;"	m	struct:b2EPCollider	file:
m_type1	include/Box2D/Collision/b2CollideEdge.cpp	/^	VertexType m_type1, m_type2;$/;"	m	struct:b2EPCollider	file:
m_type2	include/Box2D/Collision/b2CollideEdge.cpp	/^	VertexType m_type1, m_type2;$/;"	m	struct:b2EPCollider	file:
m_upperLimit	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_lowerLimit, m_upperLimit;$/;"	m	struct:b2EPCollider	file:
m_v0	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:
m_v1	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:
m_v2	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:
m_v3	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:
m_xf	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Transform m_xf;$/;"	m	struct:b2EPCollider	file:
normal	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 normal;$/;"	m	struct:b2ReferenceFace	file:
normals	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 normals[b2_maxPolygonVertices];$/;"	m	struct:b2TempPolygon	file:
separation	include/Box2D/Collision/b2CollideEdge.cpp	/^	float32 separation;$/;"	m	struct:b2EPAxis	file:
sideNormal1	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 sideNormal1;$/;"	m	struct:b2ReferenceFace	file:
sideNormal2	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 sideNormal2;$/;"	m	struct:b2ReferenceFace	file:
sideOffset1	include/Box2D/Collision/b2CollideEdge.cpp	/^	float32 sideOffset1;$/;"	m	struct:b2ReferenceFace	file:
sideOffset2	include/Box2D/Collision/b2CollideEdge.cpp	/^	float32 sideOffset2;$/;"	m	struct:b2ReferenceFace	file:
type	include/Box2D/Collision/b2CollideEdge.cpp	/^	Type type;$/;"	m	struct:b2EPAxis	file:
v1	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 v1, v2;$/;"	m	struct:b2ReferenceFace	file:
v2	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 v1, v2;$/;"	m	struct:b2ReferenceFace	file:
vertices	include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 vertices[b2_maxPolygonVertices];$/;"	m	struct:b2TempPolygon	file:
b2CollidePolygons	include/Box2D/Collision/b2CollidePolygon.cpp	/^void b2CollidePolygons(b2Manifold* manifold,$/;"	f
b2FindIncidentEdge	include/Box2D/Collision/b2CollidePolygon.cpp	/^static void b2FindIncidentEdge(b2ClipVertex c[2],$/;"	f	file:
b2FindMaxSeparation	include/Box2D/Collision/b2CollidePolygon.cpp	/^static float32 b2FindMaxSeparation(int32* edgeIndex,$/;"	f	file:
Initialize	include/Box2D/Collision/b2Collision.cpp	/^void b2WorldManifold::Initialize(const b2Manifold* manifold,$/;"	f	class:b2WorldManifold
RayCast	include/Box2D/Collision/b2Collision.cpp	/^bool b2AABB::RayCast(b2RayCastOutput* output, const b2RayCastInput& input) const$/;"	f	class:b2AABB
b2ClipSegmentToLine	include/Box2D/Collision/b2Collision.cpp	/^int32 b2ClipSegmentToLine(b2ClipVertex vOut[2], const b2ClipVertex vIn[2],$/;"	f
b2GetPointStates	include/Box2D/Collision/b2Collision.cpp	/^void b2GetPointStates(b2PointState state1[b2_maxManifoldPoints], b2PointState state2[b2_maxManifoldPoints],$/;"	f
b2TestOverlap	include/Box2D/Collision/b2Collision.cpp	/^bool b2TestOverlap(	const b2Shape* shapeA, int32 indexA,$/;"	f
B2_COLLISION_H	include/Box2D/Collision/b2Collision.h	20;"	d
Combine	include/Box2D/Collision/b2Collision.h	/^	void Combine(const b2AABB& aabb)$/;"	f	struct:b2AABB
Combine	include/Box2D/Collision/b2Collision.h	/^	void Combine(const b2AABB& aabb1, const b2AABB& aabb2)$/;"	f	struct:b2AABB
Contains	include/Box2D/Collision/b2Collision.h	/^	bool Contains(const b2AABB& aabb) const$/;"	f	struct:b2AABB
GetCenter	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 GetCenter() const$/;"	f	struct:b2AABB
GetExtents	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 GetExtents() const$/;"	f	struct:b2AABB
GetPerimeter	include/Box2D/Collision/b2Collision.h	/^	float32 GetPerimeter() const$/;"	f	struct:b2AABB
IsValid	include/Box2D/Collision/b2Collision.h	/^inline bool b2AABB::IsValid() const$/;"	f	class:b2AABB
Type	include/Box2D/Collision/b2Collision.h	/^	enum Type$/;"	g	struct:b2ContactFeature
Type	include/Box2D/Collision/b2Collision.h	/^	enum Type$/;"	g	struct:b2Manifold
b2AABB	include/Box2D/Collision/b2Collision.h	/^struct b2AABB$/;"	s
b2ClipVertex	include/Box2D/Collision/b2Collision.h	/^struct b2ClipVertex$/;"	s
b2ContactFeature	include/Box2D/Collision/b2Collision.h	/^struct b2ContactFeature$/;"	s
b2ContactID	include/Box2D/Collision/b2Collision.h	/^union b2ContactID$/;"	u
b2Manifold	include/Box2D/Collision/b2Collision.h	/^struct b2Manifold$/;"	s
b2ManifoldPoint	include/Box2D/Collision/b2Collision.h	/^struct b2ManifoldPoint$/;"	s
b2PointState	include/Box2D/Collision/b2Collision.h	/^enum b2PointState$/;"	g
b2RayCastInput	include/Box2D/Collision/b2Collision.h	/^struct b2RayCastInput$/;"	s
b2RayCastOutput	include/Box2D/Collision/b2Collision.h	/^struct b2RayCastOutput$/;"	s
b2TestOverlap	include/Box2D/Collision/b2Collision.h	/^inline bool b2TestOverlap(const b2AABB& a, const b2AABB& b)$/;"	f
b2WorldManifold	include/Box2D/Collision/b2Collision.h	/^struct b2WorldManifold$/;"	s
b2_addState	include/Box2D/Collision/b2Collision.h	/^	b2_addState,		\/\/\/< point was added in the update$/;"	e	enum:b2PointState
b2_nullFeature	include/Box2D/Collision/b2Collision.h	/^const uint8 b2_nullFeature = UCHAR_MAX;$/;"	v
b2_nullState	include/Box2D/Collision/b2Collision.h	/^	b2_nullState,		\/\/\/< point does not exist$/;"	e	enum:b2PointState
b2_persistState	include/Box2D/Collision/b2Collision.h	/^	b2_persistState,	\/\/\/< point persisted across the update$/;"	e	enum:b2PointState
b2_removeState	include/Box2D/Collision/b2Collision.h	/^	b2_removeState		\/\/\/< point was removed in the update$/;"	e	enum:b2PointState
cf	include/Box2D/Collision/b2Collision.h	/^	b2ContactFeature cf;$/;"	m	union:b2ContactID
e_circles	include/Box2D/Collision/b2Collision.h	/^		e_circles,$/;"	e	enum:b2Manifold::Type
e_face	include/Box2D/Collision/b2Collision.h	/^		e_face = 1$/;"	e	enum:b2ContactFeature::Type
e_faceA	include/Box2D/Collision/b2Collision.h	/^		e_faceA,$/;"	e	enum:b2Manifold::Type
e_faceB	include/Box2D/Collision/b2Collision.h	/^		e_faceB$/;"	e	enum:b2Manifold::Type
e_vertex	include/Box2D/Collision/b2Collision.h	/^		e_vertex = 0,$/;"	e	enum:b2ContactFeature::Type
fraction	include/Box2D/Collision/b2Collision.h	/^	float32 fraction;$/;"	m	struct:b2RayCastOutput
id	include/Box2D/Collision/b2Collision.h	/^	b2ContactID id;			\/\/\/< uniquely identifies a contact point between two shapes$/;"	m	struct:b2ManifoldPoint
id	include/Box2D/Collision/b2Collision.h	/^	b2ContactID id;$/;"	m	struct:b2ClipVertex
indexA	include/Box2D/Collision/b2Collision.h	/^	uint8 indexA;		\/\/\/< Feature index on shapeA$/;"	m	struct:b2ContactFeature
indexB	include/Box2D/Collision/b2Collision.h	/^	uint8 indexB;		\/\/\/< Feature index on shapeB$/;"	m	struct:b2ContactFeature
key	include/Box2D/Collision/b2Collision.h	/^	uint32 key;					\/\/\/< Used to quickly compare contact ids.$/;"	m	union:b2ContactID
localNormal	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 localNormal;								\/\/\/< not use for Type::e_points$/;"	m	struct:b2Manifold
localPoint	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 localPoint;								\/\/\/< usage depends on manifold type$/;"	m	struct:b2Manifold
localPoint	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 localPoint;		\/\/\/< usage depends on manifold type$/;"	m	struct:b2ManifoldPoint
lowerBound	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 lowerBound;	\/\/\/< the lower vertex$/;"	m	struct:b2AABB
maxFraction	include/Box2D/Collision/b2Collision.h	/^	float32 maxFraction;$/;"	m	struct:b2RayCastInput
normal	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 normal;								\/\/\/< world vector pointing from A to B$/;"	m	struct:b2WorldManifold
normal	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 normal;$/;"	m	struct:b2RayCastOutput
normalImpulse	include/Box2D/Collision/b2Collision.h	/^	float32 normalImpulse;	\/\/\/< the non-penetration impulse$/;"	m	struct:b2ManifoldPoint
p1	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 p1, p2;$/;"	m	struct:b2RayCastInput
p2	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 p1, p2;$/;"	m	struct:b2RayCastInput
pointCount	include/Box2D/Collision/b2Collision.h	/^	int32 pointCount;								\/\/\/< the number of manifold points$/;"	m	struct:b2Manifold
points	include/Box2D/Collision/b2Collision.h	/^	b2ManifoldPoint points[b2_maxManifoldPoints];	\/\/\/< the points of contact$/;"	m	struct:b2Manifold
points	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 points[b2_maxManifoldPoints];		\/\/\/< world contact point (point of intersection)$/;"	m	struct:b2WorldManifold
separations	include/Box2D/Collision/b2Collision.h	/^	float32 separations[b2_maxManifoldPoints];	\/\/\/< a negative value indicates overlap, in meters$/;"	m	struct:b2WorldManifold
tangentImpulse	include/Box2D/Collision/b2Collision.h	/^	float32 tangentImpulse;	\/\/\/< the friction impulse$/;"	m	struct:b2ManifoldPoint
type	include/Box2D/Collision/b2Collision.h	/^	Type type;$/;"	m	struct:b2Manifold
typeA	include/Box2D/Collision/b2Collision.h	/^	uint8 typeA;		\/\/\/< The feature type on shapeA$/;"	m	struct:b2ContactFeature
typeB	include/Box2D/Collision/b2Collision.h	/^	uint8 typeB;		\/\/\/< The feature type on shapeB$/;"	m	struct:b2ContactFeature
upperBound	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 upperBound;	\/\/\/< the upper vertex$/;"	m	struct:b2AABB
v	include/Box2D/Collision/b2Collision.h	/^	b2Vec2 v;$/;"	m	struct:b2ClipVertex
GetClosestPoint	include/Box2D/Collision/b2Distance.cpp	/^	b2Vec2 GetClosestPoint() const$/;"	f	struct:b2Simplex
GetMetric	include/Box2D/Collision/b2Distance.cpp	/^	float32 GetMetric() const$/;"	f	struct:b2Simplex
GetSearchDirection	include/Box2D/Collision/b2Distance.cpp	/^	b2Vec2 GetSearchDirection() const$/;"	f	struct:b2Simplex
GetWitnessPoints	include/Box2D/Collision/b2Distance.cpp	/^	void GetWitnessPoints(b2Vec2* pA, b2Vec2* pB) const$/;"	f	struct:b2Simplex
ReadCache	include/Box2D/Collision/b2Distance.cpp	/^	void ReadCache(	const b2SimplexCache* cache,$/;"	f	struct:b2Simplex
Set	include/Box2D/Collision/b2Distance.cpp	/^void b2DistanceProxy::Set(const b2Shape* shape, int32 index)$/;"	f	class:b2DistanceProxy
Solve2	include/Box2D/Collision/b2Distance.cpp	/^void b2Simplex::Solve2()$/;"	f	class:b2Simplex
Solve3	include/Box2D/Collision/b2Distance.cpp	/^void b2Simplex::Solve3()$/;"	f	class:b2Simplex
WriteCache	include/Box2D/Collision/b2Distance.cpp	/^	void WriteCache(b2SimplexCache* cache) const$/;"	f	struct:b2Simplex
a	include/Box2D/Collision/b2Distance.cpp	/^	float32 a;		\/\/ barycentric coordinate for closest point$/;"	m	struct:b2SimplexVertex	file:
b2Distance	include/Box2D/Collision/b2Distance.cpp	/^void b2Distance(b2DistanceOutput* output,$/;"	f
b2Simplex	include/Box2D/Collision/b2Distance.cpp	/^struct b2Simplex$/;"	s	file:
b2SimplexVertex	include/Box2D/Collision/b2Distance.cpp	/^struct b2SimplexVertex$/;"	s	file:
b2_gjkCalls	include/Box2D/Collision/b2Distance.cpp	/^int32 b2_gjkCalls, b2_gjkIters, b2_gjkMaxIters;$/;"	v
b2_gjkIters	include/Box2D/Collision/b2Distance.cpp	/^int32 b2_gjkCalls, b2_gjkIters, b2_gjkMaxIters;$/;"	v
b2_gjkMaxIters	include/Box2D/Collision/b2Distance.cpp	/^int32 b2_gjkCalls, b2_gjkIters, b2_gjkMaxIters;$/;"	v
indexA	include/Box2D/Collision/b2Distance.cpp	/^	int32 indexA;	\/\/ wA index$/;"	m	struct:b2SimplexVertex	file:
indexB	include/Box2D/Collision/b2Distance.cpp	/^	int32 indexB;	\/\/ wB index$/;"	m	struct:b2SimplexVertex	file:
m_count	include/Box2D/Collision/b2Distance.cpp	/^	int32 m_count;$/;"	m	struct:b2Simplex	file:
m_v1	include/Box2D/Collision/b2Distance.cpp	/^	b2SimplexVertex m_v1, m_v2, m_v3;$/;"	m	struct:b2Simplex	file:
m_v2	include/Box2D/Collision/b2Distance.cpp	/^	b2SimplexVertex m_v1, m_v2, m_v3;$/;"	m	struct:b2Simplex	file:
m_v3	include/Box2D/Collision/b2Distance.cpp	/^	b2SimplexVertex m_v1, m_v2, m_v3;$/;"	m	struct:b2Simplex	file:
w	include/Box2D/Collision/b2Distance.cpp	/^	b2Vec2 w;		\/\/ wB - wA$/;"	m	struct:b2SimplexVertex	file:
wA	include/Box2D/Collision/b2Distance.cpp	/^	b2Vec2 wA;		\/\/ support point in proxyA$/;"	m	struct:b2SimplexVertex	file:
wB	include/Box2D/Collision/b2Distance.cpp	/^	b2Vec2 wB;		\/\/ support point in proxyB$/;"	m	struct:b2SimplexVertex	file:
B2_DISTANCE_H	include/Box2D/Collision/b2Distance.h	21;"	d
GetSupport	include/Box2D/Collision/b2Distance.h	/^inline int32 b2DistanceProxy::GetSupport(const b2Vec2& d) const$/;"	f	class:b2DistanceProxy
GetSupportVertex	include/Box2D/Collision/b2Distance.h	/^inline const b2Vec2& b2DistanceProxy::GetSupportVertex(const b2Vec2& d) const$/;"	f	class:b2DistanceProxy
GetVertex	include/Box2D/Collision/b2Distance.h	/^inline const b2Vec2& b2DistanceProxy::GetVertex(int32 index) const$/;"	f	class:b2DistanceProxy
GetVertexCount	include/Box2D/Collision/b2Distance.h	/^inline int32 b2DistanceProxy::GetVertexCount() const$/;"	f	class:b2DistanceProxy
b2DistanceInput	include/Box2D/Collision/b2Distance.h	/^struct b2DistanceInput$/;"	s
b2DistanceOutput	include/Box2D/Collision/b2Distance.h	/^struct b2DistanceOutput$/;"	s
b2DistanceProxy	include/Box2D/Collision/b2Distance.h	/^	b2DistanceProxy() : m_vertices(NULL), m_count(0), m_radius(0.0f) {}$/;"	f	struct:b2DistanceProxy
b2DistanceProxy	include/Box2D/Collision/b2Distance.h	/^struct b2DistanceProxy$/;"	s
b2SimplexCache	include/Box2D/Collision/b2Distance.h	/^struct b2SimplexCache$/;"	s
count	include/Box2D/Collision/b2Distance.h	/^	uint16 count;$/;"	m	struct:b2SimplexCache
distance	include/Box2D/Collision/b2Distance.h	/^	float32 distance;$/;"	m	struct:b2DistanceOutput
indexA	include/Box2D/Collision/b2Distance.h	/^	uint8 indexA[3];	\/\/\/< vertices on shape A$/;"	m	struct:b2SimplexCache
indexB	include/Box2D/Collision/b2Distance.h	/^	uint8 indexB[3];	\/\/\/< vertices on shape B$/;"	m	struct:b2SimplexCache
iterations	include/Box2D/Collision/b2Distance.h	/^	int32 iterations;	\/\/\/< number of GJK iterations used$/;"	m	struct:b2DistanceOutput
m_buffer	include/Box2D/Collision/b2Distance.h	/^	b2Vec2 m_buffer[2];$/;"	m	struct:b2DistanceProxy
m_count	include/Box2D/Collision/b2Distance.h	/^	int32 m_count;$/;"	m	struct:b2DistanceProxy
m_radius	include/Box2D/Collision/b2Distance.h	/^	float32 m_radius;$/;"	m	struct:b2DistanceProxy
m_vertices	include/Box2D/Collision/b2Distance.h	/^	const b2Vec2* m_vertices;$/;"	m	struct:b2DistanceProxy
metric	include/Box2D/Collision/b2Distance.h	/^	float32 metric;		\/\/\/< length or area$/;"	m	struct:b2SimplexCache
pointA	include/Box2D/Collision/b2Distance.h	/^	b2Vec2 pointA;		\/\/\/< closest point on shapeA$/;"	m	struct:b2DistanceOutput
pointB	include/Box2D/Collision/b2Distance.h	/^	b2Vec2 pointB;		\/\/\/< closest point on shapeB$/;"	m	struct:b2DistanceOutput
proxyA	include/Box2D/Collision/b2Distance.h	/^	b2DistanceProxy proxyA;$/;"	m	struct:b2DistanceInput
proxyB	include/Box2D/Collision/b2Distance.h	/^	b2DistanceProxy proxyB;$/;"	m	struct:b2DistanceInput
transformA	include/Box2D/Collision/b2Distance.h	/^	b2Transform transformA;$/;"	m	struct:b2DistanceInput
transformB	include/Box2D/Collision/b2Distance.h	/^	b2Transform transformB;$/;"	m	struct:b2DistanceInput
useRadii	include/Box2D/Collision/b2Distance.h	/^	bool useRadii;$/;"	m	struct:b2DistanceInput
AllocateNode	include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::AllocateNode()$/;"	f	class:b2DynamicTree
Balance	include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::Balance(int32 iA)$/;"	f	class:b2DynamicTree
ComputeHeight	include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::ComputeHeight() const$/;"	f	class:b2DynamicTree
ComputeHeight	include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::ComputeHeight(int32 nodeId) const$/;"	f	class:b2DynamicTree
CreateProxy	include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::CreateProxy(const b2AABB& aabb, void* userData)$/;"	f	class:b2DynamicTree
DestroyProxy	include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::DestroyProxy(int32 proxyId)$/;"	f	class:b2DynamicTree
FreeNode	include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::FreeNode(int32 nodeId)$/;"	f	class:b2DynamicTree
GetAreaRatio	include/Box2D/Collision/b2DynamicTree.cpp	/^float32 b2DynamicTree::GetAreaRatio() const$/;"	f	class:b2DynamicTree
GetHeight	include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::GetHeight() const$/;"	f	class:b2DynamicTree
GetMaxBalance	include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::GetMaxBalance() const$/;"	f	class:b2DynamicTree
InsertLeaf	include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::InsertLeaf(int32 leaf)$/;"	f	class:b2DynamicTree
MoveProxy	include/Box2D/Collision/b2DynamicTree.cpp	/^bool b2DynamicTree::MoveProxy(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)$/;"	f	class:b2DynamicTree
RebuildBottomUp	include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::RebuildBottomUp()$/;"	f	class:b2DynamicTree
RemoveLeaf	include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::RemoveLeaf(int32 leaf)$/;"	f	class:b2DynamicTree
ShiftOrigin	include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::ShiftOrigin(const b2Vec2& newOrigin)$/;"	f	class:b2DynamicTree
Validate	include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::Validate() const$/;"	f	class:b2DynamicTree
ValidateMetrics	include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::ValidateMetrics(int32 index) const$/;"	f	class:b2DynamicTree
ValidateStructure	include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::ValidateStructure(int32 index) const$/;"	f	class:b2DynamicTree
b2DynamicTree	include/Box2D/Collision/b2DynamicTree.cpp	/^b2DynamicTree::b2DynamicTree()$/;"	f	class:b2DynamicTree
~b2DynamicTree	include/Box2D/Collision/b2DynamicTree.cpp	/^b2DynamicTree::~b2DynamicTree()$/;"	f	class:b2DynamicTree
B2_DYNAMIC_TREE_H	include/Box2D/Collision/b2DynamicTree.h	20;"	d
GetFatAABB	include/Box2D/Collision/b2DynamicTree.h	/^inline const b2AABB& b2DynamicTree::GetFatAABB(int32 proxyId) const$/;"	f	class:b2DynamicTree
GetUserData	include/Box2D/Collision/b2DynamicTree.h	/^inline void* b2DynamicTree::GetUserData(int32 proxyId) const$/;"	f	class:b2DynamicTree
IsLeaf	include/Box2D/Collision/b2DynamicTree.h	/^	bool IsLeaf() const$/;"	f	struct:b2TreeNode
Query	include/Box2D/Collision/b2DynamicTree.h	/^inline void b2DynamicTree::Query(T* callback, const b2AABB& aabb) const$/;"	f	class:b2DynamicTree
RayCast	include/Box2D/Collision/b2DynamicTree.h	/^inline void b2DynamicTree::RayCast(T* callback, const b2RayCastInput& input) const$/;"	f	class:b2DynamicTree
aabb	include/Box2D/Collision/b2DynamicTree.h	/^	b2AABB aabb;$/;"	m	struct:b2TreeNode
b2DynamicTree	include/Box2D/Collision/b2DynamicTree.h	/^class b2DynamicTree$/;"	c
b2TreeNode	include/Box2D/Collision/b2DynamicTree.h	/^struct b2TreeNode$/;"	s
b2_nullNode	include/Box2D/Collision/b2DynamicTree.h	25;"	d
child1	include/Box2D/Collision/b2DynamicTree.h	/^	int32 child1;$/;"	m	struct:b2TreeNode
child2	include/Box2D/Collision/b2DynamicTree.h	/^	int32 child2;$/;"	m	struct:b2TreeNode
height	include/Box2D/Collision/b2DynamicTree.h	/^	int32 height;$/;"	m	struct:b2TreeNode
m_freeList	include/Box2D/Collision/b2DynamicTree.h	/^	int32 m_freeList;$/;"	m	class:b2DynamicTree
m_insertionCount	include/Box2D/Collision/b2DynamicTree.h	/^	int32 m_insertionCount;$/;"	m	class:b2DynamicTree
m_nodeCapacity	include/Box2D/Collision/b2DynamicTree.h	/^	int32 m_nodeCapacity;$/;"	m	class:b2DynamicTree
m_nodeCount	include/Box2D/Collision/b2DynamicTree.h	/^	int32 m_nodeCount;$/;"	m	class:b2DynamicTree
m_nodes	include/Box2D/Collision/b2DynamicTree.h	/^	b2TreeNode* m_nodes;$/;"	m	class:b2DynamicTree
m_path	include/Box2D/Collision/b2DynamicTree.h	/^	uint32 m_path;$/;"	m	class:b2DynamicTree
m_root	include/Box2D/Collision/b2DynamicTree.h	/^	int32 m_root;$/;"	m	class:b2DynamicTree
next	include/Box2D/Collision/b2DynamicTree.h	/^		int32 next;$/;"	m	union:b2TreeNode::__anon4
parent	include/Box2D/Collision/b2DynamicTree.h	/^		int32 parent;$/;"	m	union:b2TreeNode::__anon4
userData	include/Box2D/Collision/b2DynamicTree.h	/^	void* userData;$/;"	m	struct:b2TreeNode
Evaluate	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	float32 Evaluate(int32 indexA, int32 indexB, float32 t) const$/;"	f	struct:b2SeparationFunction
FindMinSeparation	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	float32 FindMinSeparation(int32* indexA, int32* indexB, float32 t) const$/;"	f	struct:b2SeparationFunction
Initialize	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	float32 Initialize(const b2SimplexCache* cache,$/;"	f	struct:b2SeparationFunction
Type	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	enum Type$/;"	g	struct:b2SeparationFunction	file:
b2SeparationFunction	include/Box2D/Collision/b2TimeOfImpact.cpp	/^struct b2SeparationFunction$/;"	s	file:
b2TimeOfImpact	include/Box2D/Collision/b2TimeOfImpact.cpp	/^void b2TimeOfImpact(b2TOIOutput* output, const b2TOIInput* input)$/;"	f
b2_toiCalls	include/Box2D/Collision/b2TimeOfImpact.cpp	/^int32 b2_toiCalls, b2_toiIters, b2_toiMaxIters;$/;"	v
b2_toiIters	include/Box2D/Collision/b2TimeOfImpact.cpp	/^int32 b2_toiCalls, b2_toiIters, b2_toiMaxIters;$/;"	v
b2_toiMaxIters	include/Box2D/Collision/b2TimeOfImpact.cpp	/^int32 b2_toiCalls, b2_toiIters, b2_toiMaxIters;$/;"	v
b2_toiMaxRootIters	include/Box2D/Collision/b2TimeOfImpact.cpp	/^int32 b2_toiRootIters, b2_toiMaxRootIters;$/;"	v
b2_toiMaxTime	include/Box2D/Collision/b2TimeOfImpact.cpp	/^float32 b2_toiTime, b2_toiMaxTime;$/;"	v
b2_toiRootIters	include/Box2D/Collision/b2TimeOfImpact.cpp	/^int32 b2_toiRootIters, b2_toiMaxRootIters;$/;"	v
b2_toiTime	include/Box2D/Collision/b2TimeOfImpact.cpp	/^float32 b2_toiTime, b2_toiMaxTime;$/;"	v
e_faceA	include/Box2D/Collision/b2TimeOfImpact.cpp	/^		e_faceA,$/;"	e	enum:b2SeparationFunction::Type	file:
e_faceB	include/Box2D/Collision/b2TimeOfImpact.cpp	/^		e_faceB$/;"	e	enum:b2SeparationFunction::Type	file:
e_points	include/Box2D/Collision/b2TimeOfImpact.cpp	/^		e_points,$/;"	e	enum:b2SeparationFunction::Type	file:
m_axis	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	b2Vec2 m_axis;$/;"	m	struct:b2SeparationFunction	file:
m_localPoint	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	b2Vec2 m_localPoint;$/;"	m	struct:b2SeparationFunction	file:
m_proxyA	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	const b2DistanceProxy* m_proxyA;$/;"	m	struct:b2SeparationFunction	file:
m_proxyB	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	const b2DistanceProxy* m_proxyB;$/;"	m	struct:b2SeparationFunction	file:
m_sweepA	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	b2Sweep m_sweepA, m_sweepB;$/;"	m	struct:b2SeparationFunction	file:
m_sweepB	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	b2Sweep m_sweepA, m_sweepB;$/;"	m	struct:b2SeparationFunction	file:
m_type	include/Box2D/Collision/b2TimeOfImpact.cpp	/^	Type m_type;$/;"	m	struct:b2SeparationFunction	file:
B2_TIME_OF_IMPACT_H	include/Box2D/Collision/b2TimeOfImpact.h	20;"	d
State	include/Box2D/Collision/b2TimeOfImpact.h	/^	enum State$/;"	g	struct:b2TOIOutput
b2TOIInput	include/Box2D/Collision/b2TimeOfImpact.h	/^struct b2TOIInput$/;"	s
b2TOIOutput	include/Box2D/Collision/b2TimeOfImpact.h	/^struct b2TOIOutput$/;"	s
e_failed	include/Box2D/Collision/b2TimeOfImpact.h	/^		e_failed,$/;"	e	enum:b2TOIOutput::State
e_overlapped	include/Box2D/Collision/b2TimeOfImpact.h	/^		e_overlapped,$/;"	e	enum:b2TOIOutput::State
e_separated	include/Box2D/Collision/b2TimeOfImpact.h	/^		e_separated$/;"	e	enum:b2TOIOutput::State
e_touching	include/Box2D/Collision/b2TimeOfImpact.h	/^		e_touching,$/;"	e	enum:b2TOIOutput::State
e_unknown	include/Box2D/Collision/b2TimeOfImpact.h	/^		e_unknown,$/;"	e	enum:b2TOIOutput::State
proxyA	include/Box2D/Collision/b2TimeOfImpact.h	/^	b2DistanceProxy proxyA;$/;"	m	struct:b2TOIInput
proxyB	include/Box2D/Collision/b2TimeOfImpact.h	/^	b2DistanceProxy proxyB;$/;"	m	struct:b2TOIInput
state	include/Box2D/Collision/b2TimeOfImpact.h	/^	State state;$/;"	m	struct:b2TOIOutput
sweepA	include/Box2D/Collision/b2TimeOfImpact.h	/^	b2Sweep sweepA;$/;"	m	struct:b2TOIInput
sweepB	include/Box2D/Collision/b2TimeOfImpact.h	/^	b2Sweep sweepB;$/;"	m	struct:b2TOIInput
t	include/Box2D/Collision/b2TimeOfImpact.h	/^	float32 t;$/;"	m	struct:b2TOIOutput
tMax	include/Box2D/Collision/b2TimeOfImpact.h	/^	float32 tMax;		\/\/ defines sweep interval [0, tMax]$/;"	m	struct:b2TOIInput
Allocate	include/Box2D/Common/b2BlockAllocator.cpp	/^void* b2BlockAllocator::Allocate(int32 size)$/;"	f	class:b2BlockAllocator
Clear	include/Box2D/Common/b2BlockAllocator.cpp	/^void b2BlockAllocator::Clear()$/;"	f	class:b2BlockAllocator
Free	include/Box2D/Common/b2BlockAllocator.cpp	/^void b2BlockAllocator::Free(void* p, int32 size)$/;"	f	class:b2BlockAllocator
b2Block	include/Box2D/Common/b2BlockAllocator.cpp	/^struct b2Block$/;"	s	file:
b2BlockAllocator	include/Box2D/Common/b2BlockAllocator.cpp	/^b2BlockAllocator::b2BlockAllocator()$/;"	f	class:b2BlockAllocator
b2Chunk	include/Box2D/Common/b2BlockAllocator.cpp	/^struct b2Chunk$/;"	s	file:
blockSize	include/Box2D/Common/b2BlockAllocator.cpp	/^	int32 blockSize;$/;"	m	struct:b2Chunk	file:
blocks	include/Box2D/Common/b2BlockAllocator.cpp	/^	b2Block* blocks;$/;"	m	struct:b2Chunk	file:
next	include/Box2D/Common/b2BlockAllocator.cpp	/^	b2Block* next;$/;"	m	struct:b2Block	file:
s_blockSizeLookup	include/Box2D/Common/b2BlockAllocator.cpp	/^uint8 b2BlockAllocator::s_blockSizeLookup[b2_maxBlockSize + 1];$/;"	m	class:b2BlockAllocator	file:
s_blockSizeLookupInitialized	include/Box2D/Common/b2BlockAllocator.cpp	/^bool b2BlockAllocator::s_blockSizeLookupInitialized;$/;"	m	class:b2BlockAllocator	file:
s_blockSizes	include/Box2D/Common/b2BlockAllocator.cpp	/^int32 b2BlockAllocator::s_blockSizes[b2_blockSizes] = $/;"	m	class:b2BlockAllocator	file:
~b2BlockAllocator	include/Box2D/Common/b2BlockAllocator.cpp	/^b2BlockAllocator::~b2BlockAllocator()$/;"	f	class:b2BlockAllocator
B2_BLOCK_ALLOCATOR_H	include/Box2D/Common/b2BlockAllocator.h	20;"	d
b2BlockAllocator	include/Box2D/Common/b2BlockAllocator.h	/^class b2BlockAllocator$/;"	c
b2_blockSizes	include/Box2D/Common/b2BlockAllocator.h	/^const int32 b2_blockSizes = 14;$/;"	v
b2_chunkArrayIncrement	include/Box2D/Common/b2BlockAllocator.h	/^const int32 b2_chunkArrayIncrement = 128;$/;"	v
b2_chunkSize	include/Box2D/Common/b2BlockAllocator.h	/^const int32 b2_chunkSize = 16 * 1024;$/;"	v
b2_maxBlockSize	include/Box2D/Common/b2BlockAllocator.h	/^const int32 b2_maxBlockSize = 640;$/;"	v
m_chunkCount	include/Box2D/Common/b2BlockAllocator.h	/^	int32 m_chunkCount;$/;"	m	class:b2BlockAllocator
m_chunkSpace	include/Box2D/Common/b2BlockAllocator.h	/^	int32 m_chunkSpace;$/;"	m	class:b2BlockAllocator
m_chunks	include/Box2D/Common/b2BlockAllocator.h	/^	b2Chunk* m_chunks;$/;"	m	class:b2BlockAllocator
m_freeLists	include/Box2D/Common/b2BlockAllocator.h	/^	b2Block* m_freeLists[b2_blockSizes];$/;"	m	class:b2BlockAllocator
s_blockSizeLookup	include/Box2D/Common/b2BlockAllocator.h	/^	static uint8 s_blockSizeLookup[b2_maxBlockSize + 1];$/;"	m	class:b2BlockAllocator
s_blockSizeLookupInitialized	include/Box2D/Common/b2BlockAllocator.h	/^	static bool s_blockSizeLookupInitialized;$/;"	m	class:b2BlockAllocator
s_blockSizes	include/Box2D/Common/b2BlockAllocator.h	/^	static int32 s_blockSizes[b2_blockSizes];$/;"	m	class:b2BlockAllocator
AppendFlags	include/Box2D/Common/b2Draw.cpp	/^void b2Draw::AppendFlags(uint32 flags)$/;"	f	class:b2Draw
ClearFlags	include/Box2D/Common/b2Draw.cpp	/^void b2Draw::ClearFlags(uint32 flags)$/;"	f	class:b2Draw
GetFlags	include/Box2D/Common/b2Draw.cpp	/^uint32 b2Draw::GetFlags() const$/;"	f	class:b2Draw
SetFlags	include/Box2D/Common/b2Draw.cpp	/^void b2Draw::SetFlags(uint32 flags)$/;"	f	class:b2Draw
b2Draw	include/Box2D/Common/b2Draw.cpp	/^b2Draw::b2Draw()$/;"	f	class:b2Draw
B2_DRAW_H	include/Box2D/Common/b2Draw.h	20;"	d
Set	include/Box2D/Common/b2Draw.h	/^	void Set(float32 ri, float32 gi, float32 bi) { r = ri; g = gi; b = bi; }$/;"	f	struct:b2Color
b	include/Box2D/Common/b2Draw.h	/^	float32 r, g, b;$/;"	m	struct:b2Color
b2Color	include/Box2D/Common/b2Draw.h	/^	b2Color() {}$/;"	f	struct:b2Color
b2Color	include/Box2D/Common/b2Draw.h	/^	b2Color(float32 r, float32 g, float32 b) : r(r), g(g), b(b) {}$/;"	f	struct:b2Color
b2Color	include/Box2D/Common/b2Draw.h	/^struct b2Color$/;"	s
b2Draw	include/Box2D/Common/b2Draw.h	/^class b2Draw$/;"	c
e_aabbBit	include/Box2D/Common/b2Draw.h	/^		e_aabbBit				= 0x0004,	\/\/\/< draw axis aligned bounding boxes$/;"	e	enum:b2Draw::__anon6
e_centerOfMassBit	include/Box2D/Common/b2Draw.h	/^		e_centerOfMassBit		= 0x0010	\/\/\/< draw center of mass frame$/;"	e	enum:b2Draw::__anon6
e_jointBit	include/Box2D/Common/b2Draw.h	/^		e_jointBit				= 0x0002,	\/\/\/< draw joint connections$/;"	e	enum:b2Draw::__anon6
e_pairBit	include/Box2D/Common/b2Draw.h	/^		e_pairBit				= 0x0008,	\/\/\/< draw broad-phase pairs$/;"	e	enum:b2Draw::__anon6
e_shapeBit	include/Box2D/Common/b2Draw.h	/^		e_shapeBit				= 0x0001,	\/\/\/< draw shapes$/;"	e	enum:b2Draw::__anon6
g	include/Box2D/Common/b2Draw.h	/^	float32 r, g, b;$/;"	m	struct:b2Color
m_drawFlags	include/Box2D/Common/b2Draw.h	/^	uint32 m_drawFlags;$/;"	m	class:b2Draw
r	include/Box2D/Common/b2Draw.h	/^	float32 r, g, b;$/;"	m	struct:b2Color
~b2Draw	include/Box2D/Common/b2Draw.h	/^	virtual ~b2Draw() {}$/;"	f	class:b2Draw
B2_GROWABLE_STACK_H	include/Box2D/Common/b2GrowableStack.h	20;"	d
GetCount	include/Box2D/Common/b2GrowableStack.h	/^	int32 GetCount()$/;"	f	class:b2GrowableStack
Pop	include/Box2D/Common/b2GrowableStack.h	/^	T Pop()$/;"	f	class:b2GrowableStack
Push	include/Box2D/Common/b2GrowableStack.h	/^	void Push(const T& element)$/;"	f	class:b2GrowableStack
b2GrowableStack	include/Box2D/Common/b2GrowableStack.h	/^	b2GrowableStack()$/;"	f	class:b2GrowableStack
b2GrowableStack	include/Box2D/Common/b2GrowableStack.h	/^class b2GrowableStack$/;"	c
m_array	include/Box2D/Common/b2GrowableStack.h	/^	T m_array[N];$/;"	m	class:b2GrowableStack
m_capacity	include/Box2D/Common/b2GrowableStack.h	/^	int32 m_capacity;$/;"	m	class:b2GrowableStack
m_count	include/Box2D/Common/b2GrowableStack.h	/^	int32 m_count;$/;"	m	class:b2GrowableStack
m_stack	include/Box2D/Common/b2GrowableStack.h	/^	T* m_stack;$/;"	m	class:b2GrowableStack
~b2GrowableStack	include/Box2D/Common/b2GrowableStack.h	/^	~b2GrowableStack()$/;"	f	class:b2GrowableStack
GetInverse22	include/Box2D/Common/b2Math.cpp	/^void b2Mat33::GetInverse22(b2Mat33* M) const$/;"	f	class:b2Mat33
GetSymInverse33	include/Box2D/Common/b2Math.cpp	/^void b2Mat33::GetSymInverse33(b2Mat33* M) const$/;"	f	class:b2Mat33
Solve22	include/Box2D/Common/b2Math.cpp	/^b2Vec2 b2Mat33::Solve22(const b2Vec2& b) const$/;"	f	class:b2Mat33
Solve33	include/Box2D/Common/b2Math.cpp	/^b2Vec3 b2Mat33::Solve33(const b2Vec3& b) const$/;"	f	class:b2Mat33
Advance	include/Box2D/Common/b2Math.h	/^inline void b2Sweep::Advance(float32 alpha)$/;"	f	class:b2Sweep
B2_MATH_H	include/Box2D/Common/b2Math.h	20;"	d
GetAngle	include/Box2D/Common/b2Math.h	/^	float32 GetAngle() const$/;"	f	struct:b2Rot
GetInverse	include/Box2D/Common/b2Math.h	/^	b2Mat22 GetInverse() const$/;"	f	struct:b2Mat22
GetTransform	include/Box2D/Common/b2Math.h	/^inline void b2Sweep::GetTransform(b2Transform* xf, float32 beta) const$/;"	f	class:b2Sweep
GetXAxis	include/Box2D/Common/b2Math.h	/^	b2Vec2 GetXAxis() const$/;"	f	struct:b2Rot
GetYAxis	include/Box2D/Common/b2Math.h	/^	b2Vec2 GetYAxis() const$/;"	f	struct:b2Rot
IsValid	include/Box2D/Common/b2Math.h	/^	bool IsValid() const$/;"	f	struct:b2Vec2
Length	include/Box2D/Common/b2Math.h	/^	float32 Length() const$/;"	f	struct:b2Vec2
LengthSquared	include/Box2D/Common/b2Math.h	/^	float32 LengthSquared() const$/;"	f	struct:b2Vec2
Normalize	include/Box2D/Common/b2Math.h	/^	float32 Normalize()$/;"	f	struct:b2Vec2
Normalize	include/Box2D/Common/b2Math.h	/^inline void b2Sweep::Normalize()$/;"	f	class:b2Sweep
Set	include/Box2D/Common/b2Math.h	/^	void Set(const b2Vec2& c1, const b2Vec2& c2)$/;"	f	struct:b2Mat22
Set	include/Box2D/Common/b2Math.h	/^	void Set(const b2Vec2& position, float32 angle)$/;"	f	struct:b2Transform
Set	include/Box2D/Common/b2Math.h	/^	void Set(float32 angle)$/;"	f	struct:b2Rot
Set	include/Box2D/Common/b2Math.h	/^	void Set(float32 x_, float32 y_) { x = x_; y = y_; }$/;"	f	struct:b2Vec2
Set	include/Box2D/Common/b2Math.h	/^	void Set(float32 x_, float32 y_, float32 z_) { x = x_; y = y_; z = z_; }$/;"	f	struct:b2Vec3
SetIdentity	include/Box2D/Common/b2Math.h	/^	void SetIdentity()$/;"	f	struct:b2Mat22
SetIdentity	include/Box2D/Common/b2Math.h	/^	void SetIdentity()$/;"	f	struct:b2Rot
SetIdentity	include/Box2D/Common/b2Math.h	/^	void SetIdentity()$/;"	f	struct:b2Transform
SetZero	include/Box2D/Common/b2Math.h	/^	void SetZero() { x = 0.0f; y = 0.0f; z = 0.0f; }$/;"	f	struct:b2Vec3
SetZero	include/Box2D/Common/b2Math.h	/^	void SetZero() { x = 0.0f; y = 0.0f; }$/;"	f	struct:b2Vec2
SetZero	include/Box2D/Common/b2Math.h	/^	void SetZero()$/;"	f	struct:b2Mat22
SetZero	include/Box2D/Common/b2Math.h	/^	void SetZero()$/;"	f	struct:b2Mat33
Skew	include/Box2D/Common/b2Math.h	/^	b2Vec2 Skew() const$/;"	f	struct:b2Vec2
Solve	include/Box2D/Common/b2Math.h	/^	b2Vec2 Solve(const b2Vec2& b) const$/;"	f	struct:b2Mat22
a	include/Box2D/Common/b2Math.h	/^	float32 a0, a;		\/\/\/< world angles$/;"	m	struct:b2Sweep
a0	include/Box2D/Common/b2Math.h	/^	float32 a0, a;		\/\/\/< world angles$/;"	m	struct:b2Sweep
alpha0	include/Box2D/Common/b2Math.h	/^	float32 alpha0;$/;"	m	struct:b2Sweep
b2Abs	include/Box2D/Common/b2Math.h	/^inline T b2Abs(T a)$/;"	f
b2Abs	include/Box2D/Common/b2Math.h	/^inline b2Mat22 b2Abs(const b2Mat22& A)$/;"	f
b2Abs	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Abs(const b2Vec2& a)$/;"	f
b2Atan2	include/Box2D/Common/b2Math.h	50;"	d
b2Clamp	include/Box2D/Common/b2Math.h	/^inline T b2Clamp(T a, T low, T high)$/;"	f
b2Clamp	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Clamp(const b2Vec2& a, const b2Vec2& low, const b2Vec2& high)$/;"	f
b2Cross	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Cross(const b2Vec2& a, float32 s)$/;"	f
b2Cross	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Cross(float32 s, const b2Vec2& a)$/;"	f
b2Cross	include/Box2D/Common/b2Math.h	/^inline b2Vec3 b2Cross(const b2Vec3& a, const b2Vec3& b)$/;"	f
b2Cross	include/Box2D/Common/b2Math.h	/^inline float32 b2Cross(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2Distance	include/Box2D/Common/b2Math.h	/^inline float32 b2Distance(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2DistanceSquared	include/Box2D/Common/b2Math.h	/^inline float32 b2DistanceSquared(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2Dot	include/Box2D/Common/b2Math.h	/^inline float32 b2Dot(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2Dot	include/Box2D/Common/b2Math.h	/^inline float32 b2Dot(const b2Vec3& a, const b2Vec3& b)$/;"	f
b2InvSqrt	include/Box2D/Common/b2Math.h	/^inline float32 b2InvSqrt(float32 x)$/;"	f
b2IsPowerOfTwo	include/Box2D/Common/b2Math.h	/^inline bool b2IsPowerOfTwo(uint32 x)$/;"	f
b2IsValid	include/Box2D/Common/b2Math.h	/^inline bool b2IsValid(float32 x)$/;"	f
b2Mat22	include/Box2D/Common/b2Math.h	/^	b2Mat22() {}$/;"	f	struct:b2Mat22
b2Mat22	include/Box2D/Common/b2Math.h	/^	b2Mat22(const b2Vec2& c1, const b2Vec2& c2)$/;"	f	struct:b2Mat22
b2Mat22	include/Box2D/Common/b2Math.h	/^	b2Mat22(float32 a11, float32 a12, float32 a21, float32 a22)$/;"	f	struct:b2Mat22
b2Mat22	include/Box2D/Common/b2Math.h	/^struct b2Mat22$/;"	s
b2Mat33	include/Box2D/Common/b2Math.h	/^	b2Mat33() {}$/;"	f	struct:b2Mat33
b2Mat33	include/Box2D/Common/b2Math.h	/^	b2Mat33(const b2Vec3& c1, const b2Vec3& c2, const b2Vec3& c3)$/;"	f	struct:b2Mat33
b2Mat33	include/Box2D/Common/b2Math.h	/^struct b2Mat33$/;"	s
b2Max	include/Box2D/Common/b2Math.h	/^inline T b2Max(T a, T b)$/;"	f
b2Max	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Max(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2Min	include/Box2D/Common/b2Math.h	/^inline T b2Min(T a, T b)$/;"	f
b2Min	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Min(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2Mul	include/Box2D/Common/b2Math.h	/^inline b2Mat22 b2Mul(const b2Mat22& A, const b2Mat22& B)$/;"	f
b2Mul	include/Box2D/Common/b2Math.h	/^inline b2Rot b2Mul(const b2Rot& q, const b2Rot& r)$/;"	f
b2Mul	include/Box2D/Common/b2Math.h	/^inline b2Transform b2Mul(const b2Transform& A, const b2Transform& B)$/;"	f
b2Mul	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Mul(const b2Mat22& A, const b2Vec2& v)$/;"	f
b2Mul	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Mul(const b2Rot& q, const b2Vec2& v)$/;"	f
b2Mul	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Mul(const b2Transform& T, const b2Vec2& v)$/;"	f
b2Mul	include/Box2D/Common/b2Math.h	/^inline b2Vec3 b2Mul(const b2Mat33& A, const b2Vec3& v)$/;"	f
b2Mul22	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Mul22(const b2Mat33& A, const b2Vec2& v)$/;"	f
b2MulT	include/Box2D/Common/b2Math.h	/^inline b2Mat22 b2MulT(const b2Mat22& A, const b2Mat22& B)$/;"	f
b2MulT	include/Box2D/Common/b2Math.h	/^inline b2Rot b2MulT(const b2Rot& q, const b2Rot& r)$/;"	f
b2MulT	include/Box2D/Common/b2Math.h	/^inline b2Transform b2MulT(const b2Transform& A, const b2Transform& B)$/;"	f
b2MulT	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2MulT(const b2Mat22& A, const b2Vec2& v)$/;"	f
b2MulT	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2MulT(const b2Rot& q, const b2Vec2& v)$/;"	f
b2MulT	include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2MulT(const b2Transform& T, const b2Vec2& v)$/;"	f
b2NextPowerOfTwo	include/Box2D/Common/b2Math.h	/^inline uint32 b2NextPowerOfTwo(uint32 x)$/;"	f
b2Rot	include/Box2D/Common/b2Math.h	/^	b2Rot() {}$/;"	f	struct:b2Rot
b2Rot	include/Box2D/Common/b2Math.h	/^	explicit b2Rot(float32 angle)$/;"	f	struct:b2Rot
b2Rot	include/Box2D/Common/b2Math.h	/^struct b2Rot$/;"	s
b2Sqrt	include/Box2D/Common/b2Math.h	49;"	d
b2Swap	include/Box2D/Common/b2Math.h	/^template<typename T> inline void b2Swap(T& a, T& b)$/;"	f
b2Sweep	include/Box2D/Common/b2Math.h	/^struct b2Sweep$/;"	s
b2Transform	include/Box2D/Common/b2Math.h	/^	b2Transform() {}$/;"	f	struct:b2Transform
b2Transform	include/Box2D/Common/b2Math.h	/^	b2Transform(const b2Vec2& position, const b2Rot& rotation) : p(position), q(rotation) {}$/;"	f	struct:b2Transform
b2Transform	include/Box2D/Common/b2Math.h	/^struct b2Transform$/;"	s
b2Vec2	include/Box2D/Common/b2Math.h	/^	b2Vec2() {}$/;"	f	struct:b2Vec2
b2Vec2	include/Box2D/Common/b2Math.h	/^	b2Vec2(float32 x, float32 y) : x(x), y(y) {}$/;"	f	struct:b2Vec2
b2Vec2	include/Box2D/Common/b2Math.h	/^struct b2Vec2$/;"	s
b2Vec3	include/Box2D/Common/b2Math.h	/^	b2Vec3() {}$/;"	f	struct:b2Vec3
b2Vec3	include/Box2D/Common/b2Math.h	/^	b2Vec3(float32 x, float32 y, float32 z) : x(x), y(y), z(z) {}$/;"	f	struct:b2Vec3
b2Vec3	include/Box2D/Common/b2Math.h	/^struct b2Vec3$/;"	s
c	include/Box2D/Common/b2Math.h	/^	b2Vec2 c0, c;		\/\/\/< center world positions$/;"	m	struct:b2Sweep
c	include/Box2D/Common/b2Math.h	/^	float32 s, c;$/;"	m	struct:b2Rot
c0	include/Box2D/Common/b2Math.h	/^	b2Vec2 c0, c;		\/\/\/< center world positions$/;"	m	struct:b2Sweep
ex	include/Box2D/Common/b2Math.h	/^	b2Vec2 ex, ey;$/;"	m	struct:b2Mat22
ex	include/Box2D/Common/b2Math.h	/^	b2Vec3 ex, ey, ez;$/;"	m	struct:b2Mat33
ey	include/Box2D/Common/b2Math.h	/^	b2Vec2 ex, ey;$/;"	m	struct:b2Mat22
ey	include/Box2D/Common/b2Math.h	/^	b2Vec3 ex, ey, ez;$/;"	m	struct:b2Mat33
ez	include/Box2D/Common/b2Math.h	/^	b2Vec3 ex, ey, ez;$/;"	m	struct:b2Mat33
localCenter	include/Box2D/Common/b2Math.h	/^	b2Vec2 localCenter;	\/\/\/< local center of mass position$/;"	m	struct:b2Sweep
operator ()	include/Box2D/Common/b2Math.h	/^	float32 operator () (int32 i) const$/;"	f	struct:b2Vec2
operator ()	include/Box2D/Common/b2Math.h	/^	float32& operator () (int32 i)$/;"	f	struct:b2Vec2
operator *	include/Box2D/Common/b2Math.h	/^inline b2Vec2 operator * (float32 s, const b2Vec2& a)$/;"	f
operator *	include/Box2D/Common/b2Math.h	/^inline b2Vec3 operator * (float32 s, const b2Vec3& a)$/;"	f
operator *=	include/Box2D/Common/b2Math.h	/^	void operator *= (float32 a)$/;"	f	struct:b2Vec2
operator *=	include/Box2D/Common/b2Math.h	/^	void operator *= (float32 s)$/;"	f	struct:b2Vec3
operator +	include/Box2D/Common/b2Math.h	/^inline b2Mat22 operator + (const b2Mat22& A, const b2Mat22& B)$/;"	f
operator +	include/Box2D/Common/b2Math.h	/^inline b2Vec2 operator + (const b2Vec2& a, const b2Vec2& b)$/;"	f
operator +	include/Box2D/Common/b2Math.h	/^inline b2Vec3 operator + (const b2Vec3& a, const b2Vec3& b)$/;"	f
operator +=	include/Box2D/Common/b2Math.h	/^	void operator += (const b2Vec2& v)$/;"	f	struct:b2Vec2
operator +=	include/Box2D/Common/b2Math.h	/^	void operator += (const b2Vec3& v)$/;"	f	struct:b2Vec3
operator -	include/Box2D/Common/b2Math.h	/^	b2Vec2 operator -() const { b2Vec2 v; v.Set(-x, -y); return v; }$/;"	f	struct:b2Vec2
operator -	include/Box2D/Common/b2Math.h	/^	b2Vec3 operator -() const { b2Vec3 v; v.Set(-x, -y, -z); return v; }$/;"	f	struct:b2Vec3
operator -	include/Box2D/Common/b2Math.h	/^inline b2Vec2 operator - (const b2Vec2& a, const b2Vec2& b)$/;"	f
operator -	include/Box2D/Common/b2Math.h	/^inline b2Vec3 operator - (const b2Vec3& a, const b2Vec3& b)$/;"	f
operator -=	include/Box2D/Common/b2Math.h	/^	void operator -= (const b2Vec2& v)$/;"	f	struct:b2Vec2
operator -=	include/Box2D/Common/b2Math.h	/^	void operator -= (const b2Vec3& v)$/;"	f	struct:b2Vec3
operator ==	include/Box2D/Common/b2Math.h	/^inline bool operator == (const b2Vec2& a, const b2Vec2& b)$/;"	f
p	include/Box2D/Common/b2Math.h	/^	b2Vec2 p;$/;"	m	struct:b2Transform
q	include/Box2D/Common/b2Math.h	/^	b2Rot q;$/;"	m	struct:b2Transform
s	include/Box2D/Common/b2Math.h	/^	float32 s, c;$/;"	m	struct:b2Rot
x	include/Box2D/Common/b2Math.h	/^	float32 x, y, z;$/;"	m	struct:b2Vec3
x	include/Box2D/Common/b2Math.h	/^	float32 x, y;$/;"	m	struct:b2Vec2
y	include/Box2D/Common/b2Math.h	/^	float32 x, y, z;$/;"	m	struct:b2Vec3
y	include/Box2D/Common/b2Math.h	/^	float32 x, y;$/;"	m	struct:b2Vec2
z	include/Box2D/Common/b2Math.h	/^	float32 x, y, z;$/;"	m	struct:b2Vec3
b2Alloc	include/Box2D/Common/b2Settings.cpp	/^void* b2Alloc(int32 size)$/;"	f
b2Free	include/Box2D/Common/b2Settings.cpp	/^void b2Free(void* mem)$/;"	f
b2Log	include/Box2D/Common/b2Settings.cpp	/^void b2Log(const char* string, ...)$/;"	f
b2_version	include/Box2D/Common/b2Settings.cpp	/^b2Version b2_version = {2, 3, 0};$/;"	v
B2_NOT_USED	include/Box2D/Common/b2Settings.h	26;"	d
B2_SETTINGS_H	include/Box2D/Common/b2Settings.h	20;"	d
b2Assert	include/Box2D/Common/b2Settings.h	27;"	d
b2Version	include/Box2D/Common/b2Settings.h	/^struct b2Version$/;"	s
b2_aabbExtension	include/Box2D/Common/b2Settings.h	59;"	d
b2_aabbMultiplier	include/Box2D/Common/b2Settings.h	64;"	d
b2_angularSleepTolerance	include/Box2D/Common/b2Settings.h	126;"	d
b2_angularSlop	include/Box2D/Common/b2Settings.h	72;"	d
b2_baumgarte	include/Box2D/Common/b2Settings.h	113;"	d
b2_epsilon	include/Box2D/Common/b2Settings.h	39;"	d
b2_linearSleepTolerance	include/Box2D/Common/b2Settings.h	123;"	d
b2_linearSlop	include/Box2D/Common/b2Settings.h	68;"	d
b2_maxAngularCorrection	include/Box2D/Common/b2Settings.h	98;"	d
b2_maxFloat	include/Box2D/Common/b2Settings.h	38;"	d
b2_maxLinearCorrection	include/Box2D/Common/b2Settings.h	94;"	d
b2_maxManifoldPoints	include/Box2D/Common/b2Settings.h	50;"	d
b2_maxPolygonVertices	include/Box2D/Common/b2Settings.h	54;"	d
b2_maxRotation	include/Box2D/Common/b2Settings.h	107;"	d
b2_maxRotationSquared	include/Box2D/Common/b2Settings.h	108;"	d
b2_maxSubSteps	include/Box2D/Common/b2Settings.h	80;"	d
b2_maxTOIContacts	include/Box2D/Common/b2Settings.h	86;"	d
b2_maxTranslation	include/Box2D/Common/b2Settings.h	102;"	d
b2_maxTranslationSquared	include/Box2D/Common/b2Settings.h	103;"	d
b2_pi	include/Box2D/Common/b2Settings.h	40;"	d
b2_polygonRadius	include/Box2D/Common/b2Settings.h	77;"	d
b2_timeToSleep	include/Box2D/Common/b2Settings.h	120;"	d
b2_toiBaugarte	include/Box2D/Common/b2Settings.h	114;"	d
b2_velocityThreshold	include/Box2D/Common/b2Settings.h	90;"	d
float32	include/Box2D/Common/b2Settings.h	/^typedef float float32;$/;"	t
float64	include/Box2D/Common/b2Settings.h	/^typedef double float64;$/;"	t
int16	include/Box2D/Common/b2Settings.h	/^typedef signed short int16;$/;"	t
int32	include/Box2D/Common/b2Settings.h	/^typedef signed int int32;$/;"	t
int8	include/Box2D/Common/b2Settings.h	/^typedef signed char	int8;$/;"	t
major	include/Box2D/Common/b2Settings.h	/^	int32 major;		\/\/\/< significant changes$/;"	m	struct:b2Version
minor	include/Box2D/Common/b2Settings.h	/^	int32 minor;		\/\/\/< incremental changes$/;"	m	struct:b2Version
revision	include/Box2D/Common/b2Settings.h	/^	int32 revision;		\/\/\/< bug fixes$/;"	m	struct:b2Version
uint16	include/Box2D/Common/b2Settings.h	/^typedef unsigned short uint16;$/;"	t
uint32	include/Box2D/Common/b2Settings.h	/^typedef unsigned int uint32;$/;"	t
uint8	include/Box2D/Common/b2Settings.h	/^typedef unsigned char uint8;$/;"	t
Allocate	include/Box2D/Common/b2StackAllocator.cpp	/^void* b2StackAllocator::Allocate(int32 size)$/;"	f	class:b2StackAllocator
Free	include/Box2D/Common/b2StackAllocator.cpp	/^void b2StackAllocator::Free(void* p)$/;"	f	class:b2StackAllocator
GetMaxAllocation	include/Box2D/Common/b2StackAllocator.cpp	/^int32 b2StackAllocator::GetMaxAllocation() const$/;"	f	class:b2StackAllocator
b2StackAllocator	include/Box2D/Common/b2StackAllocator.cpp	/^b2StackAllocator::b2StackAllocator()$/;"	f	class:b2StackAllocator
~b2StackAllocator	include/Box2D/Common/b2StackAllocator.cpp	/^b2StackAllocator::~b2StackAllocator()$/;"	f	class:b2StackAllocator
B2_STACK_ALLOCATOR_H	include/Box2D/Common/b2StackAllocator.h	20;"	d
b2StackAllocator	include/Box2D/Common/b2StackAllocator.h	/^class b2StackAllocator$/;"	c
b2StackEntry	include/Box2D/Common/b2StackAllocator.h	/^struct b2StackEntry$/;"	s
b2_maxStackEntries	include/Box2D/Common/b2StackAllocator.h	/^const int32 b2_maxStackEntries = 32;$/;"	v
b2_stackSize	include/Box2D/Common/b2StackAllocator.h	/^const int32 b2_stackSize = 100 * 1024;	\/\/ 100k$/;"	v
data	include/Box2D/Common/b2StackAllocator.h	/^	char* data;$/;"	m	struct:b2StackEntry
m_allocation	include/Box2D/Common/b2StackAllocator.h	/^	int32 m_allocation;$/;"	m	class:b2StackAllocator
m_data	include/Box2D/Common/b2StackAllocator.h	/^	char m_data[b2_stackSize];$/;"	m	class:b2StackAllocator
m_entries	include/Box2D/Common/b2StackAllocator.h	/^	b2StackEntry m_entries[b2_maxStackEntries];$/;"	m	class:b2StackAllocator
m_entryCount	include/Box2D/Common/b2StackAllocator.h	/^	int32 m_entryCount;$/;"	m	class:b2StackAllocator
m_index	include/Box2D/Common/b2StackAllocator.h	/^	int32 m_index;$/;"	m	class:b2StackAllocator
m_maxAllocation	include/Box2D/Common/b2StackAllocator.h	/^	int32 m_maxAllocation;$/;"	m	class:b2StackAllocator
size	include/Box2D/Common/b2StackAllocator.h	/^	int32 size;$/;"	m	struct:b2StackEntry
usedMalloc	include/Box2D/Common/b2StackAllocator.h	/^	bool usedMalloc;$/;"	m	struct:b2StackEntry
GetMilliseconds	include/Box2D/Common/b2Timer.cpp	/^float32 b2Timer::GetMilliseconds() const$/;"	f	class:b2Timer
Reset	include/Box2D/Common/b2Timer.cpp	/^void b2Timer::Reset()$/;"	f	class:b2Timer
WIN32_LEAN_AND_MEAN	include/Box2D/Common/b2Timer.cpp	25;"	d	file:
b2Timer	include/Box2D/Common/b2Timer.cpp	/^b2Timer::b2Timer()$/;"	f	class:b2Timer
s_invFrequency	include/Box2D/Common/b2Timer.cpp	/^float64 b2Timer::s_invFrequency = 0.0f;$/;"	m	class:b2Timer	file:
B2_TIMER_H	include/Box2D/Common/b2Timer.h	20;"	d
b2Timer	include/Box2D/Common/b2Timer.h	/^class b2Timer$/;"	c
m_start	include/Box2D/Common/b2Timer.h	/^	float64 m_start;$/;"	m	class:b2Timer
m_start_sec	include/Box2D/Common/b2Timer.h	/^	unsigned long m_start_sec;$/;"	m	class:b2Timer
m_start_usec	include/Box2D/Common/b2Timer.h	/^	unsigned long m_start_usec;$/;"	m	class:b2Timer
s_invFrequency	include/Box2D/Common/b2Timer.h	/^	static float64 s_invFrequency;$/;"	m	class:b2Timer
Create	include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.cpp	/^b2Contact* b2ChainAndCircleContact::Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndCircleContact
Destroy	include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.cpp	/^void b2ChainAndCircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndCircleContact
Evaluate	include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.cpp	/^void b2ChainAndCircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2ChainAndCircleContact
b2ChainAndCircleContact	include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.cpp	/^b2ChainAndCircleContact::b2ChainAndCircleContact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)$/;"	f	class:b2ChainAndCircleContact
B2_CHAIN_AND_CIRCLE_CONTACT_H	include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.h	20;"	d
b2ChainAndCircleContact	include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.h	/^class b2ChainAndCircleContact : public b2Contact$/;"	c
~b2ChainAndCircleContact	include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.h	/^	~b2ChainAndCircleContact() {}$/;"	f	class:b2ChainAndCircleContact
Create	include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.cpp	/^b2Contact* b2ChainAndPolygonContact::Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndPolygonContact
Destroy	include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.cpp	/^void b2ChainAndPolygonContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndPolygonContact
Evaluate	include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.cpp	/^void b2ChainAndPolygonContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2ChainAndPolygonContact
b2ChainAndPolygonContact	include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.cpp	/^b2ChainAndPolygonContact::b2ChainAndPolygonContact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)$/;"	f	class:b2ChainAndPolygonContact
B2_CHAIN_AND_POLYGON_CONTACT_H	include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.h	20;"	d
b2ChainAndPolygonContact	include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.h	/^class b2ChainAndPolygonContact : public b2Contact$/;"	c
~b2ChainAndPolygonContact	include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.h	/^	~b2ChainAndPolygonContact() {}$/;"	f	class:b2ChainAndPolygonContact
Create	include/Box2D/Dynamics/Contacts/b2CircleContact.cpp	/^b2Contact* b2CircleContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2CircleContact
Destroy	include/Box2D/Dynamics/Contacts/b2CircleContact.cpp	/^void b2CircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2CircleContact
Evaluate	include/Box2D/Dynamics/Contacts/b2CircleContact.cpp	/^void b2CircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2CircleContact
b2CircleContact	include/Box2D/Dynamics/Contacts/b2CircleContact.cpp	/^b2CircleContact::b2CircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2CircleContact
B2_CIRCLE_CONTACT_H	include/Box2D/Dynamics/Contacts/b2CircleContact.h	20;"	d
b2CircleContact	include/Box2D/Dynamics/Contacts/b2CircleContact.h	/^class b2CircleContact : public b2Contact$/;"	c
~b2CircleContact	include/Box2D/Dynamics/Contacts/b2CircleContact.h	/^	~b2CircleContact() {}$/;"	f	class:b2CircleContact
AddType	include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^void b2Contact::AddType(b2ContactCreateFcn* createFcn, b2ContactDestroyFcn* destoryFcn,$/;"	f	class:b2Contact
Create	include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^b2Contact* b2Contact::Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)$/;"	f	class:b2Contact
Destroy	include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^void b2Contact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2Contact
InitializeRegisters	include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^void b2Contact::InitializeRegisters()$/;"	f	class:b2Contact
Update	include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^void b2Contact::Update(b2ContactListener* listener)$/;"	f	class:b2Contact
b2Contact	include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^b2Contact::b2Contact(b2Fixture* fA, int32 indexA, b2Fixture* fB, int32 indexB)$/;"	f	class:b2Contact
s_initialized	include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^bool b2Contact::s_initialized = false;$/;"	m	class:b2Contact	file:
s_registers	include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^b2ContactRegister b2Contact::s_registers[b2Shape::e_typeCount][b2Shape::e_typeCount];$/;"	m	class:b2Contact	file:
B2_CONTACT_H	include/Box2D/Dynamics/Contacts/b2Contact.h	20;"	d
FlagForFiltering	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::FlagForFiltering()$/;"	f	class:b2Contact
GetChildIndexA	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline int32 b2Contact::GetChildIndexA() const$/;"	f	class:b2Contact
GetChildIndexB	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline int32 b2Contact::GetChildIndexB() const$/;"	f	class:b2Contact
GetFixtureA	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline b2Fixture* b2Contact::GetFixtureA()$/;"	f	class:b2Contact
GetFixtureA	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline const b2Fixture* b2Contact::GetFixtureA() const$/;"	f	class:b2Contact
GetFixtureB	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline b2Fixture* b2Contact::GetFixtureB()$/;"	f	class:b2Contact
GetFixtureB	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline const b2Fixture* b2Contact::GetFixtureB() const$/;"	f	class:b2Contact
GetFriction	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline float32 b2Contact::GetFriction() const$/;"	f	class:b2Contact
GetManifold	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline b2Manifold* b2Contact::GetManifold()$/;"	f	class:b2Contact
GetManifold	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline const b2Manifold* b2Contact::GetManifold() const$/;"	f	class:b2Contact
GetNext	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline b2Contact* b2Contact::GetNext()$/;"	f	class:b2Contact
GetNext	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline const b2Contact* b2Contact::GetNext() const$/;"	f	class:b2Contact
GetRestitution	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline float32 b2Contact::GetRestitution() const$/;"	f	class:b2Contact
GetTangentSpeed	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline float32 b2Contact::GetTangentSpeed() const$/;"	f	class:b2Contact
GetWorldManifold	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::GetWorldManifold(b2WorldManifold* worldManifold) const$/;"	f	class:b2Contact
IsEnabled	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline bool b2Contact::IsEnabled() const$/;"	f	class:b2Contact
IsTouching	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline bool b2Contact::IsTouching() const$/;"	f	class:b2Contact
ResetFriction	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::ResetFriction()$/;"	f	class:b2Contact
ResetRestitution	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::ResetRestitution()$/;"	f	class:b2Contact
SetEnabled	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::SetEnabled(bool flag)$/;"	f	class:b2Contact
SetFriction	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::SetFriction(float32 friction)$/;"	f	class:b2Contact
SetRestitution	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::SetRestitution(float32 restitution)$/;"	f	class:b2Contact
SetTangentSpeed	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::SetTangentSpeed(float32 speed)$/;"	f	class:b2Contact
b2Contact	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Contact() : m_fixtureA(NULL), m_fixtureB(NULL) {}$/;"	f	class:b2Contact
b2Contact	include/Box2D/Dynamics/Contacts/b2Contact.h	/^class b2Contact$/;"	c
b2ContactCreateFcn	include/Box2D/Dynamics/Contacts/b2Contact.h	/^typedef b2Contact* b2ContactCreateFcn(	b2Fixture* fixtureA, int32 indexA,$/;"	t
b2ContactDestroyFcn	include/Box2D/Dynamics/Contacts/b2Contact.h	/^typedef void b2ContactDestroyFcn(b2Contact* contact, b2BlockAllocator* allocator);$/;"	t
b2ContactEdge	include/Box2D/Dynamics/Contacts/b2Contact.h	/^struct b2ContactEdge$/;"	s
b2ContactRegister	include/Box2D/Dynamics/Contacts/b2Contact.h	/^struct b2ContactRegister$/;"	s
b2MixFriction	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline float32 b2MixFriction(float32 friction1, float32 friction2)$/;"	f
b2MixRestitution	include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline float32 b2MixRestitution(float32 restitution1, float32 restitution2)$/;"	f
contact	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Contact* contact;		\/\/\/< the contact$/;"	m	struct:b2ContactEdge
createFcn	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2ContactCreateFcn* createFcn;$/;"	m	struct:b2ContactRegister
destroyFcn	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2ContactDestroyFcn* destroyFcn;$/;"	m	struct:b2ContactRegister
e_bulletHitFlag	include/Box2D/Dynamics/Contacts/b2Contact.h	/^		e_bulletHitFlag		= 0x0010,$/;"	e	enum:b2Contact::__anon1
e_enabledFlag	include/Box2D/Dynamics/Contacts/b2Contact.h	/^		e_enabledFlag		= 0x0004,$/;"	e	enum:b2Contact::__anon1
e_filterFlag	include/Box2D/Dynamics/Contacts/b2Contact.h	/^		e_filterFlag		= 0x0008,$/;"	e	enum:b2Contact::__anon1
e_islandFlag	include/Box2D/Dynamics/Contacts/b2Contact.h	/^		e_islandFlag		= 0x0001,$/;"	e	enum:b2Contact::__anon1
e_toiFlag	include/Box2D/Dynamics/Contacts/b2Contact.h	/^		e_toiFlag			= 0x0020$/;"	e	enum:b2Contact::__anon1
e_touchingFlag	include/Box2D/Dynamics/Contacts/b2Contact.h	/^		e_touchingFlag		= 0x0002,$/;"	e	enum:b2Contact::__anon1
m_fixtureA	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Fixture* m_fixtureA;$/;"	m	class:b2Contact
m_fixtureB	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Fixture* m_fixtureB;$/;"	m	class:b2Contact
m_flags	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	uint32 m_flags;$/;"	m	class:b2Contact
m_friction	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	float32 m_friction;$/;"	m	class:b2Contact
m_indexA	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	int32 m_indexA;$/;"	m	class:b2Contact
m_indexB	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	int32 m_indexB;$/;"	m	class:b2Contact
m_manifold	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Manifold m_manifold;$/;"	m	class:b2Contact
m_next	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Contact* m_next;$/;"	m	class:b2Contact
m_nodeA	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2ContactEdge m_nodeA;$/;"	m	class:b2Contact
m_nodeB	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2ContactEdge m_nodeB;$/;"	m	class:b2Contact
m_prev	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Contact* m_prev;$/;"	m	class:b2Contact
m_restitution	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	float32 m_restitution;$/;"	m	class:b2Contact
m_tangentSpeed	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	float32 m_tangentSpeed;$/;"	m	class:b2Contact
m_toi	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	float32 m_toi;$/;"	m	class:b2Contact
m_toiCount	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	int32 m_toiCount;$/;"	m	class:b2Contact
next	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2ContactEdge* next;	\/\/\/< the next contact edge in the body's contact list$/;"	m	struct:b2ContactEdge
other	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Body* other;			\/\/\/< provides quick access to the other body attached.$/;"	m	struct:b2ContactEdge
prev	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2ContactEdge* prev;	\/\/\/< the previous contact edge in the body's contact list$/;"	m	struct:b2ContactEdge
primary	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	bool primary;$/;"	m	struct:b2ContactRegister
s_initialized	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	static bool s_initialized;$/;"	m	class:b2Contact
s_registers	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	static b2ContactRegister s_registers[b2Shape::e_typeCount][b2Shape::e_typeCount];$/;"	m	class:b2Contact
~b2Contact	include/Box2D/Dynamics/Contacts/b2Contact.h	/^	virtual ~b2Contact() {}$/;"	f	class:b2Contact
B2_DEBUG_SOLVER	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	27;"	d	file:
Initialize	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	void Initialize(b2ContactPositionConstraint* pc, const b2Transform& xfA, const b2Transform& xfB, int32 index)$/;"	f	struct:b2PositionSolverManifold
InitializeVelocityConstraints	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^void b2ContactSolver::InitializeVelocityConstraints()$/;"	f	class:b2ContactSolver
SolvePositionConstraints	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^bool b2ContactSolver::SolvePositionConstraints()$/;"	f	class:b2ContactSolver
SolveTOIPositionConstraints	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^bool b2ContactSolver::SolveTOIPositionConstraints(int32 toiIndexA, int32 toiIndexB)$/;"	f	class:b2ContactSolver
SolveVelocityConstraints	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^void b2ContactSolver::SolveVelocityConstraints()$/;"	f	class:b2ContactSolver
StoreImpulses	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^void b2ContactSolver::StoreImpulses()$/;"	f	class:b2ContactSolver
WarmStart	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^void b2ContactSolver::WarmStart()$/;"	f	class:b2ContactSolver
b2ContactPositionConstraint	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^struct b2ContactPositionConstraint$/;"	s	file:
b2ContactSolver	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^b2ContactSolver::b2ContactSolver(b2ContactSolverDef* def)$/;"	f	class:b2ContactSolver
b2PositionSolverManifold	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^struct b2PositionSolverManifold$/;"	s	file:
indexA	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	int32 indexA;$/;"	m	struct:b2ContactPositionConstraint	file:
indexB	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	int32 indexB;$/;"	m	struct:b2ContactPositionConstraint	file:
invIA	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactPositionConstraint	file:
invIB	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactPositionConstraint	file:
invMassA	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactPositionConstraint	file:
invMassB	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactPositionConstraint	file:
localCenterA	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 localCenterA, localCenterB;$/;"	m	struct:b2ContactPositionConstraint	file:
localCenterB	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 localCenterA, localCenterB;$/;"	m	struct:b2ContactPositionConstraint	file:
localNormal	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 localNormal;$/;"	m	struct:b2ContactPositionConstraint	file:
localPoint	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 localPoint;$/;"	m	struct:b2ContactPositionConstraint	file:
localPoints	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 localPoints[b2_maxManifoldPoints];$/;"	m	struct:b2ContactPositionConstraint	file:
normal	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 normal;$/;"	m	struct:b2PositionSolverManifold	file:
point	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 point;$/;"	m	struct:b2PositionSolverManifold	file:
pointCount	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	int32 pointCount;$/;"	m	struct:b2ContactPositionConstraint	file:
radiusA	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 radiusA, radiusB;$/;"	m	struct:b2ContactPositionConstraint	file:
radiusB	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 radiusA, radiusB;$/;"	m	struct:b2ContactPositionConstraint	file:
separation	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 separation;$/;"	m	struct:b2PositionSolverManifold	file:
type	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Manifold::Type type;$/;"	m	struct:b2ContactPositionConstraint	file:
~b2ContactSolver	include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^b2ContactSolver::~b2ContactSolver()$/;"	f	class:b2ContactSolver
B2_CONTACT_SOLVER_H	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	20;"	d
K	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Mat22 K;$/;"	m	struct:b2ContactVelocityConstraint
allocator	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2StackAllocator* allocator;$/;"	m	struct:b2ContactSolverDef
b2ContactSolver	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^class b2ContactSolver$/;"	c
b2ContactSolverDef	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^struct b2ContactSolverDef$/;"	s
b2ContactVelocityConstraint	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^struct b2ContactVelocityConstraint$/;"	s
b2VelocityConstraintPoint	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^struct b2VelocityConstraintPoint$/;"	s
contactIndex	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	int32 contactIndex;$/;"	m	struct:b2ContactVelocityConstraint
contacts	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Contact** contacts;$/;"	m	struct:b2ContactSolverDef
count	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	int32 count;$/;"	m	struct:b2ContactSolverDef
friction	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 friction;$/;"	m	struct:b2ContactVelocityConstraint
indexA	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	int32 indexA;$/;"	m	struct:b2ContactVelocityConstraint
indexB	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	int32 indexB;$/;"	m	struct:b2ContactVelocityConstraint
invIA	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactVelocityConstraint
invIB	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactVelocityConstraint
invMassA	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactVelocityConstraint
invMassB	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactVelocityConstraint
m_allocator	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2StackAllocator* m_allocator;$/;"	m	class:b2ContactSolver
m_contacts	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Contact** m_contacts;$/;"	m	class:b2ContactSolver
m_count	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	int m_count;$/;"	m	class:b2ContactSolver
m_positionConstraints	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2ContactPositionConstraint* m_positionConstraints;$/;"	m	class:b2ContactSolver
m_positions	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Position* m_positions;$/;"	m	class:b2ContactSolver
m_step	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2TimeStep m_step;$/;"	m	class:b2ContactSolver
m_velocities	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Velocity* m_velocities;$/;"	m	class:b2ContactSolver
m_velocityConstraints	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2ContactVelocityConstraint* m_velocityConstraints;$/;"	m	class:b2ContactSolver
normal	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Vec2 normal;$/;"	m	struct:b2ContactVelocityConstraint
normalImpulse	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 normalImpulse;$/;"	m	struct:b2VelocityConstraintPoint
normalMass	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Mat22 normalMass;$/;"	m	struct:b2ContactVelocityConstraint
normalMass	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 normalMass;$/;"	m	struct:b2VelocityConstraintPoint
pointCount	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	int32 pointCount;$/;"	m	struct:b2ContactVelocityConstraint
points	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2VelocityConstraintPoint points[b2_maxManifoldPoints];$/;"	m	struct:b2ContactVelocityConstraint
positions	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Position* positions;$/;"	m	struct:b2ContactSolverDef
rA	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Vec2 rA;$/;"	m	struct:b2VelocityConstraintPoint
rB	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Vec2 rB;$/;"	m	struct:b2VelocityConstraintPoint
restitution	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 restitution;$/;"	m	struct:b2ContactVelocityConstraint
step	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2TimeStep step;$/;"	m	struct:b2ContactSolverDef
tangentImpulse	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 tangentImpulse;$/;"	m	struct:b2VelocityConstraintPoint
tangentMass	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 tangentMass;$/;"	m	struct:b2VelocityConstraintPoint
tangentSpeed	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 tangentSpeed;$/;"	m	struct:b2ContactVelocityConstraint
velocities	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Velocity* velocities;$/;"	m	struct:b2ContactSolverDef
velocityBias	include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 velocityBias;$/;"	m	struct:b2VelocityConstraintPoint
Create	include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.cpp	/^b2Contact* b2EdgeAndCircleContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndCircleContact
Destroy	include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.cpp	/^void b2EdgeAndCircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndCircleContact
Evaluate	include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.cpp	/^void b2EdgeAndCircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2EdgeAndCircleContact
b2EdgeAndCircleContact	include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.cpp	/^b2EdgeAndCircleContact::b2EdgeAndCircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2EdgeAndCircleContact
B2_EDGE_AND_CIRCLE_CONTACT_H	include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.h	20;"	d
b2EdgeAndCircleContact	include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.h	/^class b2EdgeAndCircleContact : public b2Contact$/;"	c
~b2EdgeAndCircleContact	include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.h	/^	~b2EdgeAndCircleContact() {}$/;"	f	class:b2EdgeAndCircleContact
Create	include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.cpp	/^b2Contact* b2EdgeAndPolygonContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndPolygonContact
Destroy	include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.cpp	/^void b2EdgeAndPolygonContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndPolygonContact
Evaluate	include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.cpp	/^void b2EdgeAndPolygonContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2EdgeAndPolygonContact
b2EdgeAndPolygonContact	include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.cpp	/^b2EdgeAndPolygonContact::b2EdgeAndPolygonContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2EdgeAndPolygonContact
B2_EDGE_AND_POLYGON_CONTACT_H	include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.h	20;"	d
b2EdgeAndPolygonContact	include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.h	/^class b2EdgeAndPolygonContact : public b2Contact$/;"	c
~b2EdgeAndPolygonContact	include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.h	/^	~b2EdgeAndPolygonContact() {}$/;"	f	class:b2EdgeAndPolygonContact
Create	include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.cpp	/^b2Contact* b2PolygonAndCircleContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonAndCircleContact
Destroy	include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.cpp	/^void b2PolygonAndCircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonAndCircleContact
Evaluate	include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.cpp	/^void b2PolygonAndCircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2PolygonAndCircleContact
b2PolygonAndCircleContact	include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.cpp	/^b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2PolygonAndCircleContact
B2_POLYGON_AND_CIRCLE_CONTACT_H	include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.h	20;"	d
b2PolygonAndCircleContact	include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.h	/^class b2PolygonAndCircleContact : public b2Contact$/;"	c
~b2PolygonAndCircleContact	include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.h	/^	~b2PolygonAndCircleContact() {}$/;"	f	class:b2PolygonAndCircleContact
Create	include/Box2D/Dynamics/Contacts/b2PolygonContact.cpp	/^b2Contact* b2PolygonContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonContact
Destroy	include/Box2D/Dynamics/Contacts/b2PolygonContact.cpp	/^void b2PolygonContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonContact
Evaluate	include/Box2D/Dynamics/Contacts/b2PolygonContact.cpp	/^void b2PolygonContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2PolygonContact
b2PolygonContact	include/Box2D/Dynamics/Contacts/b2PolygonContact.cpp	/^b2PolygonContact::b2PolygonContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2PolygonContact
B2_POLYGON_CONTACT_H	include/Box2D/Dynamics/Contacts/b2PolygonContact.h	20;"	d
b2PolygonContact	include/Box2D/Dynamics/Contacts/b2PolygonContact.h	/^class b2PolygonContact : public b2Contact$/;"	c
~b2PolygonContact	include/Box2D/Dynamics/Contacts/b2PolygonContact.h	/^	~b2PolygonContact() {}$/;"	f	class:b2PolygonContact
Dump	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^void b2DistanceJoint::Dump()$/;"	f	class:b2DistanceJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^b2Vec2 b2DistanceJoint::GetAnchorA() const$/;"	f	class:b2DistanceJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^b2Vec2 b2DistanceJoint::GetAnchorB() const$/;"	f	class:b2DistanceJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^b2Vec2 b2DistanceJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2DistanceJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^float32 b2DistanceJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2DistanceJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^void b2DistanceJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2DistanceJoint
Initialize	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^void b2DistanceJointDef::Initialize(b2Body* b1, b2Body* b2,$/;"	f	class:b2DistanceJointDef
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^bool b2DistanceJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2DistanceJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^void b2DistanceJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2DistanceJoint
b2DistanceJoint	include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^b2DistanceJoint::b2DistanceJoint(const b2DistanceJointDef* def)$/;"	f	class:b2DistanceJoint
B2_DISTANCE_JOINT_H	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	20;"	d
GetDampingRatio	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^inline float32 b2DistanceJoint::GetDampingRatio() const$/;"	f	class:b2DistanceJoint
GetFrequency	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^inline float32 b2DistanceJoint::GetFrequency() const$/;"	f	class:b2DistanceJoint
GetLength	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^inline float32 b2DistanceJoint::GetLength() const$/;"	f	class:b2DistanceJoint
GetLocalAnchorA	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2DistanceJoint
GetLocalAnchorB	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2DistanceJoint
SetDampingRatio	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^inline void b2DistanceJoint::SetDampingRatio(float32 ratio)$/;"	f	class:b2DistanceJoint
SetFrequency	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^inline void b2DistanceJoint::SetFrequency(float32 hz)$/;"	f	class:b2DistanceJoint
SetLength	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^inline void b2DistanceJoint::SetLength(float32 length)$/;"	f	class:b2DistanceJoint
b2DistanceJoint	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^class b2DistanceJoint : public b2Joint$/;"	c
b2DistanceJointDef	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2DistanceJointDef()$/;"	f	struct:b2DistanceJointDef
b2DistanceJointDef	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^struct b2DistanceJointDef : public b2JointDef$/;"	s
dampingRatio	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2DistanceJointDef
frequencyHz	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2DistanceJointDef
length	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 length;$/;"	m	struct:b2DistanceJointDef
localAnchorA	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2DistanceJointDef
localAnchorB	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2DistanceJointDef
m_bias	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_bias;$/;"	m	class:b2DistanceJoint
m_dampingRatio	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2DistanceJoint
m_frequencyHz	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2DistanceJoint
m_gamma	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_gamma;$/;"	m	class:b2DistanceJoint
m_impulse	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_impulse;$/;"	m	class:b2DistanceJoint
m_indexA	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	int32 m_indexA;$/;"	m	class:b2DistanceJoint
m_indexB	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	int32 m_indexB;$/;"	m	class:b2DistanceJoint
m_invIA	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_invIA;$/;"	m	class:b2DistanceJoint
m_invIB	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_invIB;$/;"	m	class:b2DistanceJoint
m_invMassA	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2DistanceJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2DistanceJoint
m_length	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_length;$/;"	m	class:b2DistanceJoint
m_localAnchorA	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2DistanceJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2DistanceJoint
m_localCenterA	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2DistanceJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2DistanceJoint
m_mass	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_mass;$/;"	m	class:b2DistanceJoint
m_rA	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2DistanceJoint
m_rB	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2DistanceJoint
m_u	include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_u;$/;"	m	class:b2DistanceJoint
Dump	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::Dump()$/;"	f	class:b2FrictionJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^b2Vec2 b2FrictionJoint::GetAnchorA() const$/;"	f	class:b2FrictionJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^b2Vec2 b2FrictionJoint::GetAnchorB() const$/;"	f	class:b2FrictionJoint
GetMaxForce	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^float32 b2FrictionJoint::GetMaxForce() const$/;"	f	class:b2FrictionJoint
GetMaxTorque	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^float32 b2FrictionJoint::GetMaxTorque() const$/;"	f	class:b2FrictionJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^b2Vec2 b2FrictionJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2FrictionJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^float32 b2FrictionJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2FrictionJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2FrictionJoint
Initialize	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor)$/;"	f	class:b2FrictionJointDef
SetMaxForce	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::SetMaxForce(float32 force)$/;"	f	class:b2FrictionJoint
SetMaxTorque	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::SetMaxTorque(float32 torque)$/;"	f	class:b2FrictionJoint
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^bool b2FrictionJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2FrictionJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2FrictionJoint
b2FrictionJoint	include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^b2FrictionJoint::b2FrictionJoint(const b2FrictionJointDef* def)$/;"	f	class:b2FrictionJoint
B2_FRICTION_JOINT_H	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	20;"	d
GetLocalAnchorA	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2FrictionJoint
GetLocalAnchorB	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2FrictionJoint
b2FrictionJoint	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^class b2FrictionJoint : public b2Joint$/;"	c
b2FrictionJointDef	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2FrictionJointDef()$/;"	f	struct:b2FrictionJointDef
b2FrictionJointDef	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^struct b2FrictionJointDef : public b2JointDef$/;"	s
localAnchorA	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2FrictionJointDef
localAnchorB	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2FrictionJointDef
m_angularImpulse	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_angularImpulse;$/;"	m	class:b2FrictionJoint
m_angularMass	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_angularMass;$/;"	m	class:b2FrictionJoint
m_indexA	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	int32 m_indexA;$/;"	m	class:b2FrictionJoint
m_indexB	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	int32 m_indexB;$/;"	m	class:b2FrictionJoint
m_invIA	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_invIA;$/;"	m	class:b2FrictionJoint
m_invIB	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_invIB;$/;"	m	class:b2FrictionJoint
m_invMassA	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2FrictionJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2FrictionJoint
m_linearImpulse	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_linearImpulse;$/;"	m	class:b2FrictionJoint
m_linearMass	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Mat22 m_linearMass;$/;"	m	class:b2FrictionJoint
m_localAnchorA	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2FrictionJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2FrictionJoint
m_localCenterA	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2FrictionJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2FrictionJoint
m_maxForce	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_maxForce;$/;"	m	class:b2FrictionJoint
m_maxTorque	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_maxTorque;$/;"	m	class:b2FrictionJoint
m_rA	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2FrictionJoint
m_rB	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2FrictionJoint
maxForce	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 maxForce;$/;"	m	struct:b2FrictionJointDef
maxTorque	include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 maxTorque;$/;"	m	struct:b2FrictionJointDef
Dump	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^void b2GearJoint::Dump()$/;"	f	class:b2GearJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^b2Vec2 b2GearJoint::GetAnchorA() const$/;"	f	class:b2GearJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^b2Vec2 b2GearJoint::GetAnchorB() const$/;"	f	class:b2GearJoint
GetRatio	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^float32 b2GearJoint::GetRatio() const$/;"	f	class:b2GearJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^b2Vec2 b2GearJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2GearJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^float32 b2GearJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2GearJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^void b2GearJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2GearJoint
SetRatio	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^void b2GearJoint::SetRatio(float32 ratio)$/;"	f	class:b2GearJoint
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^bool b2GearJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2GearJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^void b2GearJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2GearJoint
b2GearJoint	include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^b2GearJoint::b2GearJoint(const b2GearJointDef* def)$/;"	f	class:b2GearJoint
B2_GEAR_JOINT_H	include/Box2D/Dynamics/Joints/b2GearJoint.h	20;"	d
GetJoint1	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Joint* GetJoint1() { return m_joint1; }$/;"	f	class:b2GearJoint
GetJoint2	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Joint* GetJoint2() { return m_joint2; }$/;"	f	class:b2GearJoint
b2GearJoint	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^class b2GearJoint : public b2Joint$/;"	c
b2GearJointDef	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2GearJointDef()$/;"	f	struct:b2GearJointDef
b2GearJointDef	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^struct b2GearJointDef : public b2JointDef$/;"	s
joint1	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Joint* joint1;$/;"	m	struct:b2GearJointDef
joint2	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Joint* joint2;$/;"	m	struct:b2GearJointDef
m_JvAC	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_JvAC, m_JvBD;$/;"	m	class:b2GearJoint
m_JvBD	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_JvAC, m_JvBD;$/;"	m	class:b2GearJoint
m_JwA	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint
m_JwB	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint
m_JwC	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint
m_JwD	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint
m_bodyC	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Body* m_bodyC;$/;"	m	class:b2GearJoint
m_bodyD	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Body* m_bodyD;$/;"	m	class:b2GearJoint
m_constant	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_constant;$/;"	m	class:b2GearJoint
m_iA	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint
m_iB	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint
m_iC	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint
m_iD	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint
m_impulse	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_impulse;$/;"	m	class:b2GearJoint
m_indexA	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint
m_indexB	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint
m_indexC	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint
m_indexD	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint
m_joint1	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Joint* m_joint1;$/;"	m	class:b2GearJoint
m_joint2	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Joint* m_joint2;$/;"	m	class:b2GearJoint
m_lcA	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint
m_lcB	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint
m_lcC	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint
m_lcD	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint
m_localAnchorA	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2GearJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2GearJoint
m_localAnchorC	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_localAnchorC;$/;"	m	class:b2GearJoint
m_localAnchorD	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_localAnchorD;$/;"	m	class:b2GearJoint
m_localAxisC	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_localAxisC;$/;"	m	class:b2GearJoint
m_localAxisD	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_localAxisD;$/;"	m	class:b2GearJoint
m_mA	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint
m_mB	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint
m_mC	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint
m_mD	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint
m_mass	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_mass;$/;"	m	class:b2GearJoint
m_ratio	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_ratio;$/;"	m	class:b2GearJoint
m_referenceAngleA	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_referenceAngleA;$/;"	m	class:b2GearJoint
m_referenceAngleB	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_referenceAngleB;$/;"	m	class:b2GearJoint
m_typeA	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2JointType m_typeA;$/;"	m	class:b2GearJoint
m_typeB	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2JointType m_typeB;$/;"	m	class:b2GearJoint
ratio	include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 ratio;$/;"	m	struct:b2GearJointDef
Create	include/Box2D/Dynamics/Joints/b2Joint.cpp	/^b2Joint* b2Joint::Create(const b2JointDef* def, b2BlockAllocator* allocator)$/;"	f	class:b2Joint
Destroy	include/Box2D/Dynamics/Joints/b2Joint.cpp	/^void b2Joint::Destroy(b2Joint* joint, b2BlockAllocator* allocator)$/;"	f	class:b2Joint
IsActive	include/Box2D/Dynamics/Joints/b2Joint.cpp	/^bool b2Joint::IsActive() const$/;"	f	class:b2Joint
b2Joint	include/Box2D/Dynamics/Joints/b2Joint.cpp	/^b2Joint::b2Joint(const b2JointDef* def)$/;"	f	class:b2Joint
B2_JOINT_H	include/Box2D/Dynamics/Joints/b2Joint.h	20;"	d
Dump	include/Box2D/Dynamics/Joints/b2Joint.h	/^	virtual void Dump() { b2Log("\/\/ Dump is not supported for this joint type.\\n"); }$/;"	f	class:b2Joint
GetBodyA	include/Box2D/Dynamics/Joints/b2Joint.h	/^inline b2Body* b2Joint::GetBodyA()$/;"	f	class:b2Joint
GetBodyB	include/Box2D/Dynamics/Joints/b2Joint.h	/^inline b2Body* b2Joint::GetBodyB()$/;"	f	class:b2Joint
GetCollideConnected	include/Box2D/Dynamics/Joints/b2Joint.h	/^inline bool b2Joint::GetCollideConnected() const$/;"	f	class:b2Joint
GetNext	include/Box2D/Dynamics/Joints/b2Joint.h	/^inline b2Joint* b2Joint::GetNext()$/;"	f	class:b2Joint
GetNext	include/Box2D/Dynamics/Joints/b2Joint.h	/^inline const b2Joint* b2Joint::GetNext() const$/;"	f	class:b2Joint
GetType	include/Box2D/Dynamics/Joints/b2Joint.h	/^inline b2JointType b2Joint::GetType() const$/;"	f	class:b2Joint
GetUserData	include/Box2D/Dynamics/Joints/b2Joint.h	/^inline void* b2Joint::GetUserData() const$/;"	f	class:b2Joint
SetUserData	include/Box2D/Dynamics/Joints/b2Joint.h	/^inline void b2Joint::SetUserData(void* data)$/;"	f	class:b2Joint
ShiftOrigin	include/Box2D/Dynamics/Joints/b2Joint.h	/^	virtual void ShiftOrigin(const b2Vec2& newOrigin) { B2_NOT_USED(newOrigin);  }$/;"	f	class:b2Joint
angularA	include/Box2D/Dynamics/Joints/b2Joint.h	/^	float32 angularA;$/;"	m	struct:b2Jacobian
angularB	include/Box2D/Dynamics/Joints/b2Joint.h	/^	float32 angularB;$/;"	m	struct:b2Jacobian
b2Jacobian	include/Box2D/Dynamics/Joints/b2Joint.h	/^struct b2Jacobian$/;"	s
b2Joint	include/Box2D/Dynamics/Joints/b2Joint.h	/^class b2Joint$/;"	c
b2JointDef	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointDef()$/;"	f	struct:b2JointDef
b2JointDef	include/Box2D/Dynamics/Joints/b2Joint.h	/^struct b2JointDef$/;"	s
b2JointEdge	include/Box2D/Dynamics/Joints/b2Joint.h	/^struct b2JointEdge$/;"	s
b2JointType	include/Box2D/Dynamics/Joints/b2Joint.h	/^enum b2JointType$/;"	g
b2LimitState	include/Box2D/Dynamics/Joints/b2Joint.h	/^enum b2LimitState$/;"	g
bodyA	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Body* bodyA;$/;"	m	struct:b2JointDef
bodyB	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Body* bodyB;$/;"	m	struct:b2JointDef
collideConnected	include/Box2D/Dynamics/Joints/b2Joint.h	/^	bool collideConnected;$/;"	m	struct:b2JointDef
e_atLowerLimit	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_atLowerLimit,$/;"	e	enum:b2LimitState
e_atUpperLimit	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_atUpperLimit,$/;"	e	enum:b2LimitState
e_distanceJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_distanceJoint,$/;"	e	enum:b2JointType
e_equalLimits	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_equalLimits$/;"	e	enum:b2LimitState
e_frictionJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_frictionJoint,$/;"	e	enum:b2JointType
e_gearJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_gearJoint,$/;"	e	enum:b2JointType
e_inactiveLimit	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_inactiveLimit,$/;"	e	enum:b2LimitState
e_motorJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_motorJoint$/;"	e	enum:b2JointType
e_mouseJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_mouseJoint,$/;"	e	enum:b2JointType
e_prismaticJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_prismaticJoint,$/;"	e	enum:b2JointType
e_pulleyJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_pulleyJoint,$/;"	e	enum:b2JointType
e_revoluteJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_revoluteJoint,$/;"	e	enum:b2JointType
e_ropeJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_ropeJoint,$/;"	e	enum:b2JointType
e_unknownJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_unknownJoint,$/;"	e	enum:b2JointType
e_weldJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^    e_weldJoint,$/;"	e	enum:b2JointType
e_wheelJoint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_wheelJoint,$/;"	e	enum:b2JointType
joint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Joint* joint;			\/\/\/< the joint$/;"	m	struct:b2JointEdge
linear	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Vec2 linear;$/;"	m	struct:b2Jacobian
m_bodyA	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Body* m_bodyA;$/;"	m	class:b2Joint
m_bodyB	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Body* m_bodyB;$/;"	m	class:b2Joint
m_collideConnected	include/Box2D/Dynamics/Joints/b2Joint.h	/^	bool m_collideConnected;$/;"	m	class:b2Joint
m_edgeA	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointEdge m_edgeA;$/;"	m	class:b2Joint
m_edgeB	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointEdge m_edgeB;$/;"	m	class:b2Joint
m_index	include/Box2D/Dynamics/Joints/b2Joint.h	/^	int32 m_index;$/;"	m	class:b2Joint
m_islandFlag	include/Box2D/Dynamics/Joints/b2Joint.h	/^	bool m_islandFlag;$/;"	m	class:b2Joint
m_next	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Joint* m_next;$/;"	m	class:b2Joint
m_prev	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Joint* m_prev;$/;"	m	class:b2Joint
m_type	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointType m_type;$/;"	m	class:b2Joint
m_userData	include/Box2D/Dynamics/Joints/b2Joint.h	/^	void* m_userData;$/;"	m	class:b2Joint
next	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointEdge* next;		\/\/\/< the next joint edge in the body's joint list$/;"	m	struct:b2JointEdge
other	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Body* other;			\/\/\/< provides quick access to the other body attached.$/;"	m	struct:b2JointEdge
prev	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointEdge* prev;		\/\/\/< the previous joint edge in the body's joint list$/;"	m	struct:b2JointEdge
type	include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointType type;$/;"	m	struct:b2JointDef
userData	include/Box2D/Dynamics/Joints/b2Joint.h	/^	void* userData;$/;"	m	struct:b2JointDef
~b2Joint	include/Box2D/Dynamics/Joints/b2Joint.h	/^	virtual ~b2Joint() {}$/;"	f	class:b2Joint
Dump	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^void b2MotorJoint::Dump()$/;"	f	class:b2MotorJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^b2Vec2 b2MotorJoint::GetAnchorA() const$/;"	f	class:b2MotorJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^b2Vec2 b2MotorJoint::GetAnchorB() const$/;"	f	class:b2MotorJoint
GetAngularOffset	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^float32 b2MotorJoint::GetAngularOffset() const$/;"	f	class:b2MotorJoint
GetCorrectionFactor	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^float32 b2MotorJoint::GetCorrectionFactor() const$/;"	f	class:b2MotorJoint
GetLinearOffset	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^const b2Vec2& b2MotorJoint::GetLinearOffset() const$/;"	f	class:b2MotorJoint
GetMaxForce	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^float32 b2MotorJoint::GetMaxForce() const$/;"	f	class:b2MotorJoint
GetMaxTorque	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^float32 b2MotorJoint::GetMaxTorque() const$/;"	f	class:b2MotorJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^b2Vec2 b2MotorJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2MotorJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^float32 b2MotorJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2MotorJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^void b2MotorJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2MotorJoint
Initialize	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^void b2MotorJointDef::Initialize(b2Body* bA, b2Body* bB)$/;"	f	class:b2MotorJointDef
SetAngularOffset	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^void b2MotorJoint::SetAngularOffset(float32 angularOffset)$/;"	f	class:b2MotorJoint
SetCorrectionFactor	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^void b2MotorJoint::SetCorrectionFactor(float32 factor)$/;"	f	class:b2MotorJoint
SetLinearOffset	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^void b2MotorJoint::SetLinearOffset(const b2Vec2& linearOffset)$/;"	f	class:b2MotorJoint
SetMaxForce	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^void b2MotorJoint::SetMaxForce(float32 force)$/;"	f	class:b2MotorJoint
SetMaxTorque	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^void b2MotorJoint::SetMaxTorque(float32 torque)$/;"	f	class:b2MotorJoint
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^bool b2MotorJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2MotorJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^void b2MotorJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2MotorJoint
b2MotorJoint	include/Box2D/Dynamics/Joints/b2MotorJoint.cpp	/^b2MotorJoint::b2MotorJoint(const b2MotorJointDef* def)$/;"	f	class:b2MotorJoint
B2_MOTOR_JOINT_H	include/Box2D/Dynamics/Joints/b2MotorJoint.h	20;"	d
angularOffset	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	float32 angularOffset;$/;"	m	struct:b2MotorJointDef
b2MotorJoint	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^class b2MotorJoint : public b2Joint$/;"	c
b2MotorJointDef	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	b2MotorJointDef()$/;"	f	struct:b2MotorJointDef
b2MotorJointDef	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^struct b2MotorJointDef : public b2JointDef$/;"	s
correctionFactor	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	float32 correctionFactor;$/;"	m	struct:b2MotorJointDef
linearOffset	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	b2Vec2 linearOffset;$/;"	m	struct:b2MotorJointDef
m_angularError	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	float32 m_angularError;$/;"	m	class:b2MotorJoint
m_angularImpulse	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	float32 m_angularImpulse;$/;"	m	class:b2MotorJoint
m_angularMass	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	float32 m_angularMass;$/;"	m	class:b2MotorJoint
m_angularOffset	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	float32 m_angularOffset;$/;"	m	class:b2MotorJoint
m_correctionFactor	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	float32 m_correctionFactor;$/;"	m	class:b2MotorJoint
m_indexA	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	int32 m_indexA;$/;"	m	class:b2MotorJoint
m_indexB	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	int32 m_indexB;$/;"	m	class:b2MotorJoint
m_invIA	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	float32 m_invIA;$/;"	m	class:b2MotorJoint
m_invIB	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	float32 m_invIB;$/;"	m	class:b2MotorJoint
m_invMassA	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2MotorJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2MotorJoint
m_linearError	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	b2Vec2 m_linearError;$/;"	m	class:b2MotorJoint
m_linearImpulse	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	b2Vec2 m_linearImpulse;$/;"	m	class:b2MotorJoint
m_linearMass	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	b2Mat22 m_linearMass;$/;"	m	class:b2MotorJoint
m_linearOffset	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	b2Vec2 m_linearOffset;$/;"	m	class:b2MotorJoint
m_localCenterA	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2MotorJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2MotorJoint
m_maxForce	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	float32 m_maxForce;$/;"	m	class:b2MotorJoint
m_maxTorque	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	float32 m_maxTorque;$/;"	m	class:b2MotorJoint
m_rA	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2MotorJoint
m_rB	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2MotorJoint
maxForce	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	float32 maxForce;$/;"	m	struct:b2MotorJointDef
maxTorque	include/Box2D/Dynamics/Joints/b2MotorJoint.h	/^	float32 maxTorque;$/;"	m	struct:b2MotorJointDef
GetAnchorA	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^b2Vec2 b2MouseJoint::GetAnchorA() const$/;"	f	class:b2MouseJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^b2Vec2 b2MouseJoint::GetAnchorB() const$/;"	f	class:b2MouseJoint
GetDampingRatio	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^float32 b2MouseJoint::GetDampingRatio() const$/;"	f	class:b2MouseJoint
GetFrequency	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^float32 b2MouseJoint::GetFrequency() const$/;"	f	class:b2MouseJoint
GetMaxForce	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^float32 b2MouseJoint::GetMaxForce() const$/;"	f	class:b2MouseJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^b2Vec2 b2MouseJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2MouseJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^float32 b2MouseJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2MouseJoint
GetTarget	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^const b2Vec2& b2MouseJoint::GetTarget() const$/;"	f	class:b2MouseJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2MouseJoint
SetDampingRatio	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SetDampingRatio(float32 ratio)$/;"	f	class:b2MouseJoint
SetFrequency	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SetFrequency(float32 hz)$/;"	f	class:b2MouseJoint
SetMaxForce	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SetMaxForce(float32 force)$/;"	f	class:b2MouseJoint
SetTarget	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SetTarget(const b2Vec2& target)$/;"	f	class:b2MouseJoint
ShiftOrigin	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::ShiftOrigin(const b2Vec2& newOrigin)$/;"	f	class:b2MouseJoint
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^bool b2MouseJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2MouseJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2MouseJoint
b2MouseJoint	include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^b2MouseJoint::b2MouseJoint(const b2MouseJointDef* def)$/;"	f	class:b2MouseJoint
B2_MOUSE_JOINT_H	include/Box2D/Dynamics/Joints/b2MouseJoint.h	20;"	d
Dump	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	void Dump() { b2Log("Mouse joint dumping is not supported.\\n"); }$/;"	f	class:b2MouseJoint
b2MouseJoint	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^class b2MouseJoint : public b2Joint$/;"	c
b2MouseJointDef	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2MouseJointDef()$/;"	f	struct:b2MouseJointDef
b2MouseJointDef	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^struct b2MouseJointDef : public b2JointDef$/;"	s
dampingRatio	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2MouseJointDef
frequencyHz	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2MouseJointDef
m_C	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 m_C;$/;"	m	class:b2MouseJoint
m_beta	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_beta;$/;"	m	class:b2MouseJoint
m_dampingRatio	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2MouseJoint
m_frequencyHz	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2MouseJoint
m_gamma	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_gamma;$/;"	m	class:b2MouseJoint
m_impulse	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 m_impulse;$/;"	m	class:b2MouseJoint
m_indexA	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	int32 m_indexA;$/;"	m	class:b2MouseJoint
m_indexB	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	int32 m_indexB;$/;"	m	class:b2MouseJoint
m_invIB	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_invIB;$/;"	m	class:b2MouseJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2MouseJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2MouseJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2MouseJoint
m_mass	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Mat22 m_mass;$/;"	m	class:b2MouseJoint
m_maxForce	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_maxForce;$/;"	m	class:b2MouseJoint
m_rB	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2MouseJoint
m_targetA	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 m_targetA;$/;"	m	class:b2MouseJoint
maxForce	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 maxForce;$/;"	m	struct:b2MouseJointDef
target	include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 target;$/;"	m	struct:b2MouseJointDef
Dump	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::Dump()$/;"	f	class:b2PrismaticJoint
EnableLimit	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::EnableLimit(bool flag)$/;"	f	class:b2PrismaticJoint
EnableMotor	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::EnableMotor(bool flag)$/;"	f	class:b2PrismaticJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^b2Vec2 b2PrismaticJoint::GetAnchorA() const$/;"	f	class:b2PrismaticJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^b2Vec2 b2PrismaticJoint::GetAnchorB() const$/;"	f	class:b2PrismaticJoint
GetJointSpeed	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetJointSpeed() const$/;"	f	class:b2PrismaticJoint
GetJointTranslation	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetJointTranslation() const$/;"	f	class:b2PrismaticJoint
GetLowerLimit	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetLowerLimit() const$/;"	f	class:b2PrismaticJoint
GetMotorForce	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetMotorForce(float32 inv_dt) const$/;"	f	class:b2PrismaticJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^b2Vec2 b2PrismaticJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2PrismaticJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2PrismaticJoint
GetUpperLimit	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetUpperLimit() const$/;"	f	class:b2PrismaticJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PrismaticJoint
Initialize	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor, const b2Vec2& axis)$/;"	f	class:b2PrismaticJointDef
IsLimitEnabled	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^bool b2PrismaticJoint::IsLimitEnabled() const$/;"	f	class:b2PrismaticJoint
IsMotorEnabled	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^bool b2PrismaticJoint::IsMotorEnabled() const$/;"	f	class:b2PrismaticJoint
SetLimits	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SetLimits(float32 lower, float32 upper)$/;"	f	class:b2PrismaticJoint
SetMaxMotorForce	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SetMaxMotorForce(float32 force)$/;"	f	class:b2PrismaticJoint
SetMotorSpeed	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SetMotorSpeed(float32 speed)$/;"	f	class:b2PrismaticJoint
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^bool b2PrismaticJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2PrismaticJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PrismaticJoint
b2PrismaticJoint	include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^b2PrismaticJoint::b2PrismaticJoint(const b2PrismaticJointDef* def)$/;"	f	class:b2PrismaticJoint
B2_PRISMATIC_JOINT_H	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	20;"	d
GetLocalAnchorA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2PrismaticJoint
GetLocalAnchorB	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2PrismaticJoint
GetLocalAxisA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	const b2Vec2& GetLocalAxisA() const { return m_localXAxisA; }$/;"	f	class:b2PrismaticJoint
GetMaxMotorForce	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 GetMaxMotorForce() const { return m_maxMotorForce; }$/;"	f	class:b2PrismaticJoint
GetMotorSpeed	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^inline float32 b2PrismaticJoint::GetMotorSpeed() const$/;"	f	class:b2PrismaticJoint
GetReferenceAngle	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 GetReferenceAngle() const { return m_referenceAngle; }$/;"	f	class:b2PrismaticJoint
b2PrismaticJoint	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^class b2PrismaticJoint : public b2Joint$/;"	c
b2PrismaticJointDef	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2PrismaticJointDef()$/;"	f	struct:b2PrismaticJointDef
b2PrismaticJointDef	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^struct b2PrismaticJointDef : public b2JointDef$/;"	s
enableLimit	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	bool enableLimit;$/;"	m	struct:b2PrismaticJointDef
enableMotor	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	bool enableMotor;$/;"	m	struct:b2PrismaticJointDef
localAnchorA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2PrismaticJointDef
localAnchorB	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2PrismaticJointDef
localAxisA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 localAxisA;$/;"	m	struct:b2PrismaticJointDef
lowerTranslation	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 lowerTranslation;$/;"	m	struct:b2PrismaticJointDef
m_K	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Mat33 m_K;$/;"	m	class:b2PrismaticJoint
m_a1	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_a1, m_a2;$/;"	m	class:b2PrismaticJoint
m_a2	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_a1, m_a2;$/;"	m	class:b2PrismaticJoint
m_axis	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_axis, m_perp;$/;"	m	class:b2PrismaticJoint
m_enableLimit	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	bool m_enableLimit;$/;"	m	class:b2PrismaticJoint
m_enableMotor	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	bool m_enableMotor;$/;"	m	class:b2PrismaticJoint
m_impulse	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec3 m_impulse;$/;"	m	class:b2PrismaticJoint
m_indexA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	int32 m_indexA;$/;"	m	class:b2PrismaticJoint
m_indexB	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	int32 m_indexB;$/;"	m	class:b2PrismaticJoint
m_invIA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_invIA;$/;"	m	class:b2PrismaticJoint
m_invIB	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_invIB;$/;"	m	class:b2PrismaticJoint
m_invMassA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2PrismaticJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2PrismaticJoint
m_limitState	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2LimitState m_limitState;$/;"	m	class:b2PrismaticJoint
m_localAnchorA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2PrismaticJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2PrismaticJoint
m_localCenterA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2PrismaticJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2PrismaticJoint
m_localXAxisA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_localXAxisA;$/;"	m	class:b2PrismaticJoint
m_localYAxisA	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_localYAxisA;$/;"	m	class:b2PrismaticJoint
m_lowerTranslation	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_lowerTranslation;$/;"	m	class:b2PrismaticJoint
m_maxMotorForce	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_maxMotorForce;$/;"	m	class:b2PrismaticJoint
m_motorImpulse	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_motorImpulse;$/;"	m	class:b2PrismaticJoint
m_motorMass	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_motorMass;$/;"	m	class:b2PrismaticJoint
m_motorSpeed	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_motorSpeed;$/;"	m	class:b2PrismaticJoint
m_perp	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_axis, m_perp;$/;"	m	class:b2PrismaticJoint
m_referenceAngle	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_referenceAngle;$/;"	m	class:b2PrismaticJoint
m_s1	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_s1, m_s2;$/;"	m	class:b2PrismaticJoint
m_s2	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_s1, m_s2;$/;"	m	class:b2PrismaticJoint
m_upperTranslation	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_upperTranslation;$/;"	m	class:b2PrismaticJoint
maxMotorForce	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 maxMotorForce;$/;"	m	struct:b2PrismaticJointDef
motorSpeed	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 motorSpeed;$/;"	m	struct:b2PrismaticJointDef
referenceAngle	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 referenceAngle;$/;"	m	struct:b2PrismaticJointDef
upperTranslation	include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 upperTranslation;$/;"	m	struct:b2PrismaticJointDef
Dump	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^void b2PulleyJoint::Dump()$/;"	f	class:b2PulleyJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetAnchorA() const$/;"	f	class:b2PulleyJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetAnchorB() const$/;"	f	class:b2PulleyJoint
GetCurrentLengthA	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetCurrentLengthA() const$/;"	f	class:b2PulleyJoint
GetCurrentLengthB	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetCurrentLengthB() const$/;"	f	class:b2PulleyJoint
GetGroundAnchorA	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetGroundAnchorA() const$/;"	f	class:b2PulleyJoint
GetGroundAnchorB	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetGroundAnchorB() const$/;"	f	class:b2PulleyJoint
GetLengthA	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetLengthA() const$/;"	f	class:b2PulleyJoint
GetLengthB	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetLengthB() const$/;"	f	class:b2PulleyJoint
GetRatio	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetRatio() const$/;"	f	class:b2PulleyJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2PulleyJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2PulleyJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^void b2PulleyJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PulleyJoint
Initialize	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^void b2PulleyJointDef::Initialize(b2Body* bA, b2Body* bB,$/;"	f	class:b2PulleyJointDef
ShiftOrigin	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^void b2PulleyJoint::ShiftOrigin(const b2Vec2& newOrigin)$/;"	f	class:b2PulleyJoint
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^bool b2PulleyJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2PulleyJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^void b2PulleyJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PulleyJoint
b2PulleyJoint	include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^b2PulleyJoint::b2PulleyJoint(const b2PulleyJointDef* def)$/;"	f	class:b2PulleyJoint
B2_PULLEY_JOINT_H	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	20;"	d
b2PulleyJoint	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^class b2PulleyJoint : public b2Joint$/;"	c
b2PulleyJointDef	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2PulleyJointDef()$/;"	f	struct:b2PulleyJointDef
b2PulleyJointDef	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^struct b2PulleyJointDef : public b2JointDef$/;"	s
b2_minPulleyLength	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^const float32 b2_minPulleyLength = 2.0f;$/;"	v
groundAnchorA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 groundAnchorA;$/;"	m	struct:b2PulleyJointDef
groundAnchorB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 groundAnchorB;$/;"	m	struct:b2PulleyJointDef
lengthA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 lengthA;$/;"	m	struct:b2PulleyJointDef
lengthB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 lengthB;$/;"	m	struct:b2PulleyJointDef
localAnchorA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2PulleyJointDef
localAnchorB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2PulleyJointDef
m_constant	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_constant;$/;"	m	class:b2PulleyJoint
m_groundAnchorA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_groundAnchorA;$/;"	m	class:b2PulleyJoint
m_groundAnchorB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_groundAnchorB;$/;"	m	class:b2PulleyJoint
m_impulse	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_impulse;$/;"	m	class:b2PulleyJoint
m_indexA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	int32 m_indexA;$/;"	m	class:b2PulleyJoint
m_indexB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	int32 m_indexB;$/;"	m	class:b2PulleyJoint
m_invIA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_invIA;$/;"	m	class:b2PulleyJoint
m_invIB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_invIB;$/;"	m	class:b2PulleyJoint
m_invMassA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2PulleyJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2PulleyJoint
m_lengthA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_lengthA;$/;"	m	class:b2PulleyJoint
m_lengthB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_lengthB;$/;"	m	class:b2PulleyJoint
m_localAnchorA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2PulleyJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2PulleyJoint
m_localCenterA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2PulleyJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2PulleyJoint
m_mass	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_mass;$/;"	m	class:b2PulleyJoint
m_rA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2PulleyJoint
m_rB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2PulleyJoint
m_ratio	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_ratio;$/;"	m	class:b2PulleyJoint
m_uA	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_uA;$/;"	m	class:b2PulleyJoint
m_uB	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_uB;$/;"	m	class:b2PulleyJoint
ratio	include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 ratio;$/;"	m	struct:b2PulleyJointDef
Dump	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::Dump()$/;"	f	class:b2RevoluteJoint
EnableLimit	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::EnableLimit(bool flag)$/;"	f	class:b2RevoluteJoint
EnableMotor	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::EnableMotor(bool flag)$/;"	f	class:b2RevoluteJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^b2Vec2 b2RevoluteJoint::GetAnchorA() const$/;"	f	class:b2RevoluteJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^b2Vec2 b2RevoluteJoint::GetAnchorB() const$/;"	f	class:b2RevoluteJoint
GetJointAngle	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetJointAngle() const$/;"	f	class:b2RevoluteJoint
GetJointSpeed	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetJointSpeed() const$/;"	f	class:b2RevoluteJoint
GetLowerLimit	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetLowerLimit() const$/;"	f	class:b2RevoluteJoint
GetMotorTorque	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetMotorTorque(float32 inv_dt) const$/;"	f	class:b2RevoluteJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^b2Vec2 b2RevoluteJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2RevoluteJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2RevoluteJoint
GetUpperLimit	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetUpperLimit() const$/;"	f	class:b2RevoluteJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RevoluteJoint
Initialize	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor)$/;"	f	class:b2RevoluteJointDef
IsLimitEnabled	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^bool b2RevoluteJoint::IsLimitEnabled() const$/;"	f	class:b2RevoluteJoint
IsMotorEnabled	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^bool b2RevoluteJoint::IsMotorEnabled() const$/;"	f	class:b2RevoluteJoint
SetLimits	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SetLimits(float32 lower, float32 upper)$/;"	f	class:b2RevoluteJoint
SetMaxMotorTorque	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SetMaxMotorTorque(float32 torque)$/;"	f	class:b2RevoluteJoint
SetMotorSpeed	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SetMotorSpeed(float32 speed)$/;"	f	class:b2RevoluteJoint
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^bool b2RevoluteJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2RevoluteJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RevoluteJoint
b2RevoluteJoint	include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^b2RevoluteJoint::b2RevoluteJoint(const b2RevoluteJointDef* def)$/;"	f	class:b2RevoluteJoint
B2_REVOLUTE_JOINT_H	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	20;"	d
GetLocalAnchorA	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2RevoluteJoint
GetLocalAnchorB	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2RevoluteJoint
GetMaxMotorTorque	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 GetMaxMotorTorque() const { return m_maxMotorTorque; }$/;"	f	class:b2RevoluteJoint
GetMotorSpeed	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^inline float32 b2RevoluteJoint::GetMotorSpeed() const$/;"	f	class:b2RevoluteJoint
GetReferenceAngle	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 GetReferenceAngle() const { return m_referenceAngle; }$/;"	f	class:b2RevoluteJoint
b2RevoluteJoint	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^class b2RevoluteJoint : public b2Joint$/;"	c
b2RevoluteJointDef	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2RevoluteJointDef()$/;"	f	struct:b2RevoluteJointDef
b2RevoluteJointDef	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^struct b2RevoluteJointDef : public b2JointDef$/;"	s
enableLimit	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	bool enableLimit;$/;"	m	struct:b2RevoluteJointDef
enableMotor	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	bool enableMotor;$/;"	m	struct:b2RevoluteJointDef
localAnchorA	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2RevoluteJointDef
localAnchorB	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2RevoluteJointDef
lowerAngle	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 lowerAngle;$/;"	m	struct:b2RevoluteJointDef
m_enableLimit	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	bool m_enableLimit;$/;"	m	class:b2RevoluteJoint
m_enableMotor	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	bool m_enableMotor;$/;"	m	class:b2RevoluteJoint
m_impulse	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec3 m_impulse;$/;"	m	class:b2RevoluteJoint
m_indexA	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	int32 m_indexA;$/;"	m	class:b2RevoluteJoint
m_indexB	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	int32 m_indexB;$/;"	m	class:b2RevoluteJoint
m_invIA	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_invIA;$/;"	m	class:b2RevoluteJoint
m_invIB	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_invIB;$/;"	m	class:b2RevoluteJoint
m_invMassA	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2RevoluteJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2RevoluteJoint
m_limitState	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2LimitState m_limitState;$/;"	m	class:b2RevoluteJoint
m_localAnchorA	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2RevoluteJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2RevoluteJoint
m_localCenterA	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2RevoluteJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2RevoluteJoint
m_lowerAngle	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_lowerAngle;$/;"	m	class:b2RevoluteJoint
m_mass	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Mat33 m_mass;			\/\/ effective mass for point-to-point constraint.$/;"	m	class:b2RevoluteJoint
m_maxMotorTorque	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_maxMotorTorque;$/;"	m	class:b2RevoluteJoint
m_motorImpulse	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_motorImpulse;$/;"	m	class:b2RevoluteJoint
m_motorMass	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_motorMass;	\/\/ effective mass for motor\/limit angular constraint.$/;"	m	class:b2RevoluteJoint
m_motorSpeed	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_motorSpeed;$/;"	m	class:b2RevoluteJoint
m_rA	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2RevoluteJoint
m_rB	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2RevoluteJoint
m_referenceAngle	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_referenceAngle;$/;"	m	class:b2RevoluteJoint
m_upperAngle	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_upperAngle;$/;"	m	class:b2RevoluteJoint
maxMotorTorque	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 maxMotorTorque;$/;"	m	struct:b2RevoluteJointDef
motorSpeed	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 motorSpeed;$/;"	m	struct:b2RevoluteJointDef
referenceAngle	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 referenceAngle;$/;"	m	struct:b2RevoluteJointDef
upperAngle	include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 upperAngle;$/;"	m	struct:b2RevoluteJointDef
Dump	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^void b2RopeJoint::Dump()$/;"	f	class:b2RopeJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^b2Vec2 b2RopeJoint::GetAnchorA() const$/;"	f	class:b2RopeJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^b2Vec2 b2RopeJoint::GetAnchorB() const$/;"	f	class:b2RopeJoint
GetLimitState	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^b2LimitState b2RopeJoint::GetLimitState() const$/;"	f	class:b2RopeJoint
GetMaxLength	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^float32 b2RopeJoint::GetMaxLength() const$/;"	f	class:b2RopeJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^b2Vec2 b2RopeJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2RopeJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^float32 b2RopeJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2RopeJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^void b2RopeJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RopeJoint
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^bool b2RopeJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2RopeJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^void b2RopeJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RopeJoint
b2RopeJoint	include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^b2RopeJoint::b2RopeJoint(const b2RopeJointDef* def)$/;"	f	class:b2RopeJoint
B2_ROPE_JOINT_H	include/Box2D/Dynamics/Joints/b2RopeJoint.h	20;"	d
GetLocalAnchorA	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2RopeJoint
GetLocalAnchorB	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2RopeJoint
SetMaxLength	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	void SetMaxLength(float32 length) { m_maxLength = length; }$/;"	f	class:b2RopeJoint
b2RopeJoint	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^class b2RopeJoint : public b2Joint$/;"	c
b2RopeJointDef	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2RopeJointDef()$/;"	f	struct:b2RopeJointDef
b2RopeJointDef	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^struct b2RopeJointDef : public b2JointDef$/;"	s
localAnchorA	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2RopeJointDef
localAnchorB	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2RopeJointDef
m_impulse	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_impulse;$/;"	m	class:b2RopeJoint
m_indexA	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	int32 m_indexA;$/;"	m	class:b2RopeJoint
m_indexB	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	int32 m_indexB;$/;"	m	class:b2RopeJoint
m_invIA	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_invIA;$/;"	m	class:b2RopeJoint
m_invIB	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_invIB;$/;"	m	class:b2RopeJoint
m_invMassA	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2RopeJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2RopeJoint
m_length	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_length;$/;"	m	class:b2RopeJoint
m_localAnchorA	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2RopeJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2RopeJoint
m_localCenterA	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2RopeJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2RopeJoint
m_mass	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_mass;$/;"	m	class:b2RopeJoint
m_maxLength	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_maxLength;$/;"	m	class:b2RopeJoint
m_rA	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2RopeJoint
m_rB	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2RopeJoint
m_state	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2LimitState m_state;$/;"	m	class:b2RopeJoint
m_u	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_u;$/;"	m	class:b2RopeJoint
maxLength	include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 maxLength;$/;"	m	struct:b2RopeJointDef
Dump	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^void b2WeldJoint::Dump()$/;"	f	class:b2WeldJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^b2Vec2 b2WeldJoint::GetAnchorA() const$/;"	f	class:b2WeldJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^b2Vec2 b2WeldJoint::GetAnchorB() const$/;"	f	class:b2WeldJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^b2Vec2 b2WeldJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2WeldJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^float32 b2WeldJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2WeldJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^void b2WeldJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WeldJoint
Initialize	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^void b2WeldJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor)$/;"	f	class:b2WeldJointDef
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^bool b2WeldJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2WeldJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^void b2WeldJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WeldJoint
b2WeldJoint	include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^b2WeldJoint::b2WeldJoint(const b2WeldJointDef* def)$/;"	f	class:b2WeldJoint
B2_WELD_JOINT_H	include/Box2D/Dynamics/Joints/b2WeldJoint.h	20;"	d
GetDampingRatio	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 GetDampingRatio() const { return m_dampingRatio; }$/;"	f	class:b2WeldJoint
GetFrequency	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 GetFrequency() const { return m_frequencyHz; }$/;"	f	class:b2WeldJoint
GetLocalAnchorA	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2WeldJoint
GetLocalAnchorB	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2WeldJoint
GetReferenceAngle	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 GetReferenceAngle() const { return m_referenceAngle; }$/;"	f	class:b2WeldJoint
SetDampingRatio	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	void SetDampingRatio(float32 ratio) { m_dampingRatio = ratio; }$/;"	f	class:b2WeldJoint
SetFrequency	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	void SetFrequency(float32 hz) { m_frequencyHz = hz; }$/;"	f	class:b2WeldJoint
b2WeldJoint	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^class b2WeldJoint : public b2Joint$/;"	c
b2WeldJointDef	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2WeldJointDef()$/;"	f	struct:b2WeldJointDef
b2WeldJointDef	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^struct b2WeldJointDef : public b2JointDef$/;"	s
dampingRatio	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2WeldJointDef
frequencyHz	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2WeldJointDef
localAnchorA	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2WeldJointDef
localAnchorB	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2WeldJointDef
m_bias	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_bias;$/;"	m	class:b2WeldJoint
m_dampingRatio	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2WeldJoint
m_frequencyHz	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2WeldJoint
m_gamma	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_gamma;$/;"	m	class:b2WeldJoint
m_impulse	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec3 m_impulse;$/;"	m	class:b2WeldJoint
m_indexA	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	int32 m_indexA;$/;"	m	class:b2WeldJoint
m_indexB	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	int32 m_indexB;$/;"	m	class:b2WeldJoint
m_invIA	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_invIA;$/;"	m	class:b2WeldJoint
m_invIB	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_invIB;$/;"	m	class:b2WeldJoint
m_invMassA	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2WeldJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2WeldJoint
m_localAnchorA	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2WeldJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2WeldJoint
m_localCenterA	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2WeldJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2WeldJoint
m_mass	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Mat33 m_mass;$/;"	m	class:b2WeldJoint
m_rA	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2WeldJoint
m_rB	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2WeldJoint
m_referenceAngle	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_referenceAngle;$/;"	m	class:b2WeldJoint
referenceAngle	include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 referenceAngle;$/;"	m	struct:b2WeldJointDef
Dump	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::Dump()$/;"	f	class:b2WheelJoint
EnableMotor	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::EnableMotor(bool flag)$/;"	f	class:b2WheelJoint
GetAnchorA	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^b2Vec2 b2WheelJoint::GetAnchorA() const$/;"	f	class:b2WheelJoint
GetAnchorB	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^b2Vec2 b2WheelJoint::GetAnchorB() const$/;"	f	class:b2WheelJoint
GetJointSpeed	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^float32 b2WheelJoint::GetJointSpeed() const$/;"	f	class:b2WheelJoint
GetJointTranslation	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^float32 b2WheelJoint::GetJointTranslation() const$/;"	f	class:b2WheelJoint
GetMotorTorque	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^float32 b2WheelJoint::GetMotorTorque(float32 inv_dt) const$/;"	f	class:b2WheelJoint
GetReactionForce	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^b2Vec2 b2WheelJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2WheelJoint
GetReactionTorque	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^float32 b2WheelJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2WheelJoint
InitVelocityConstraints	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WheelJoint
Initialize	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor, const b2Vec2& axis)$/;"	f	class:b2WheelJointDef
IsMotorEnabled	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^bool b2WheelJoint::IsMotorEnabled() const$/;"	f	class:b2WheelJoint
SetMaxMotorTorque	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::SetMaxMotorTorque(float32 torque)$/;"	f	class:b2WheelJoint
SetMotorSpeed	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::SetMotorSpeed(float32 speed)$/;"	f	class:b2WheelJoint
SolvePositionConstraints	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^bool b2WheelJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2WheelJoint
SolveVelocityConstraints	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WheelJoint
b2WheelJoint	include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^b2WheelJoint::b2WheelJoint(const b2WheelJointDef* def)$/;"	f	class:b2WheelJoint
B2_WHEEL_JOINT_H	include/Box2D/Dynamics/Joints/b2WheelJoint.h	20;"	d
GetLocalAnchorA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2WheelJoint
GetLocalAnchorB	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2WheelJoint
GetLocalAxisA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	const b2Vec2& GetLocalAxisA() const { return m_localXAxisA; }$/;"	f	class:b2WheelJoint
GetMaxMotorTorque	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^inline float32 b2WheelJoint::GetMaxMotorTorque() const$/;"	f	class:b2WheelJoint
GetMotorSpeed	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^inline float32 b2WheelJoint::GetMotorSpeed() const$/;"	f	class:b2WheelJoint
GetSpringDampingRatio	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^inline float32 b2WheelJoint::GetSpringDampingRatio() const$/;"	f	class:b2WheelJoint
GetSpringFrequencyHz	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^inline float32 b2WheelJoint::GetSpringFrequencyHz() const$/;"	f	class:b2WheelJoint
SetSpringDampingRatio	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^inline void b2WheelJoint::SetSpringDampingRatio(float32 ratio)$/;"	f	class:b2WheelJoint
SetSpringFrequencyHz	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^inline void b2WheelJoint::SetSpringFrequencyHz(float32 hz)$/;"	f	class:b2WheelJoint
b2WheelJoint	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^class b2WheelJoint : public b2Joint$/;"	c
b2WheelJointDef	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2WheelJointDef()$/;"	f	struct:b2WheelJointDef
b2WheelJointDef	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^struct b2WheelJointDef : public b2JointDef$/;"	s
dampingRatio	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2WheelJointDef
enableMotor	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	bool enableMotor;$/;"	m	struct:b2WheelJointDef
frequencyHz	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2WheelJointDef
localAnchorA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2WheelJointDef
localAnchorB	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2WheelJointDef
localAxisA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 localAxisA;$/;"	m	struct:b2WheelJointDef
m_ax	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_ax, m_ay;$/;"	m	class:b2WheelJoint
m_ay	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_ax, m_ay;$/;"	m	class:b2WheelJoint
m_bias	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_bias;$/;"	m	class:b2WheelJoint
m_dampingRatio	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2WheelJoint
m_enableMotor	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	bool m_enableMotor;$/;"	m	class:b2WheelJoint
m_frequencyHz	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2WheelJoint
m_gamma	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_gamma;$/;"	m	class:b2WheelJoint
m_impulse	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_impulse;$/;"	m	class:b2WheelJoint
m_indexA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	int32 m_indexA;$/;"	m	class:b2WheelJoint
m_indexB	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	int32 m_indexB;$/;"	m	class:b2WheelJoint
m_invIA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_invIA;$/;"	m	class:b2WheelJoint
m_invIB	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_invIB;$/;"	m	class:b2WheelJoint
m_invMassA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2WheelJoint
m_invMassB	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2WheelJoint
m_localAnchorA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2WheelJoint
m_localAnchorB	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2WheelJoint
m_localCenterA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2WheelJoint
m_localCenterB	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2WheelJoint
m_localXAxisA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_localXAxisA;$/;"	m	class:b2WheelJoint
m_localYAxisA	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_localYAxisA;$/;"	m	class:b2WheelJoint
m_mass	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_mass;$/;"	m	class:b2WheelJoint
m_maxMotorTorque	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_maxMotorTorque;$/;"	m	class:b2WheelJoint
m_motorImpulse	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_motorImpulse;$/;"	m	class:b2WheelJoint
m_motorMass	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_motorMass;$/;"	m	class:b2WheelJoint
m_motorSpeed	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_motorSpeed;$/;"	m	class:b2WheelJoint
m_sAx	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_sAx, m_sBx;$/;"	m	class:b2WheelJoint
m_sAy	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_sAy, m_sBy;$/;"	m	class:b2WheelJoint
m_sBx	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_sAx, m_sBx;$/;"	m	class:b2WheelJoint
m_sBy	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_sAy, m_sBy;$/;"	m	class:b2WheelJoint
m_springImpulse	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_springImpulse;$/;"	m	class:b2WheelJoint
m_springMass	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_springMass;$/;"	m	class:b2WheelJoint
maxMotorTorque	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 maxMotorTorque;$/;"	m	struct:b2WheelJointDef
motorSpeed	include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 motorSpeed;$/;"	m	struct:b2WheelJointDef
CreateFixture	include/Box2D/Dynamics/b2Body.cpp	/^b2Fixture* b2Body::CreateFixture(const b2FixtureDef* def)$/;"	f	class:b2Body
CreateFixture	include/Box2D/Dynamics/b2Body.cpp	/^b2Fixture* b2Body::CreateFixture(const b2Shape* shape, float32 density)$/;"	f	class:b2Body
DestroyFixture	include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::DestroyFixture(b2Fixture* fixture)$/;"	f	class:b2Body
Dump	include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::Dump()$/;"	f	class:b2Body
ResetMassData	include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::ResetMassData()$/;"	f	class:b2Body
SetActive	include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::SetActive(bool flag)$/;"	f	class:b2Body
SetFixedRotation	include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::SetFixedRotation(bool flag)$/;"	f	class:b2Body
SetMassData	include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::SetMassData(const b2MassData* massData)$/;"	f	class:b2Body
SetTransform	include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::SetTransform(const b2Vec2& position, float32 angle)$/;"	f	class:b2Body
SetType	include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::SetType(b2BodyType type)$/;"	f	class:b2Body
ShouldCollide	include/Box2D/Dynamics/b2Body.cpp	/^bool b2Body::ShouldCollide(const b2Body* other) const$/;"	f	class:b2Body
SynchronizeFixtures	include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::SynchronizeFixtures()$/;"	f	class:b2Body
b2Body	include/Box2D/Dynamics/b2Body.cpp	/^b2Body::b2Body(const b2BodyDef* bd, b2World* world)$/;"	f	class:b2Body
~b2Body	include/Box2D/Dynamics/b2Body.cpp	/^b2Body::~b2Body()$/;"	f	class:b2Body
Advance	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::Advance(float32 alpha)$/;"	f	class:b2Body
ApplyAngularImpulse	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::ApplyAngularImpulse(float32 impulse, bool wake)$/;"	f	class:b2Body
ApplyForce	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::ApplyForce(const b2Vec2& force, const b2Vec2& point, bool wake)$/;"	f	class:b2Body
ApplyForceToCenter	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::ApplyForceToCenter(const b2Vec2& force, bool wake)$/;"	f	class:b2Body
ApplyLinearImpulse	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::ApplyLinearImpulse(const b2Vec2& impulse, const b2Vec2& point, bool wake)$/;"	f	class:b2Body
ApplyTorque	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::ApplyTorque(float32 torque, bool wake)$/;"	f	class:b2Body
B2_BODY_H	include/Box2D/Dynamics/b2Body.h	20;"	d
GetAngle	include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetAngle() const$/;"	f	class:b2Body
GetAngularDamping	include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetAngularDamping() const$/;"	f	class:b2Body
GetAngularVelocity	include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetAngularVelocity() const$/;"	f	class:b2Body
GetContactList	include/Box2D/Dynamics/b2Body.h	/^inline b2ContactEdge* b2Body::GetContactList()$/;"	f	class:b2Body
GetContactList	include/Box2D/Dynamics/b2Body.h	/^inline const b2ContactEdge* b2Body::GetContactList() const$/;"	f	class:b2Body
GetFixtureList	include/Box2D/Dynamics/b2Body.h	/^inline b2Fixture* b2Body::GetFixtureList()$/;"	f	class:b2Body
GetFixtureList	include/Box2D/Dynamics/b2Body.h	/^inline const b2Fixture* b2Body::GetFixtureList() const$/;"	f	class:b2Body
GetGravityScale	include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetGravityScale() const$/;"	f	class:b2Body
GetInertia	include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetInertia() const$/;"	f	class:b2Body
GetJointList	include/Box2D/Dynamics/b2Body.h	/^inline b2JointEdge* b2Body::GetJointList()$/;"	f	class:b2Body
GetJointList	include/Box2D/Dynamics/b2Body.h	/^inline const b2JointEdge* b2Body::GetJointList() const$/;"	f	class:b2Body
GetLinearDamping	include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetLinearDamping() const$/;"	f	class:b2Body
GetLinearVelocity	include/Box2D/Dynamics/b2Body.h	/^inline const b2Vec2& b2Body::GetLinearVelocity() const$/;"	f	class:b2Body
GetLinearVelocityFromLocalPoint	include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2& localPoint) const$/;"	f	class:b2Body
GetLinearVelocityFromWorldPoint	include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2& worldPoint) const$/;"	f	class:b2Body
GetLocalCenter	include/Box2D/Dynamics/b2Body.h	/^inline const b2Vec2& b2Body::GetLocalCenter() const$/;"	f	class:b2Body
GetLocalPoint	include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLocalPoint(const b2Vec2& worldPoint) const$/;"	f	class:b2Body
GetLocalVector	include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLocalVector(const b2Vec2& worldVector) const$/;"	f	class:b2Body
GetMass	include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetMass() const$/;"	f	class:b2Body
GetMassData	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::GetMassData(b2MassData* data) const$/;"	f	class:b2Body
GetNext	include/Box2D/Dynamics/b2Body.h	/^inline b2Body* b2Body::GetNext()$/;"	f	class:b2Body
GetNext	include/Box2D/Dynamics/b2Body.h	/^inline const b2Body* b2Body::GetNext() const$/;"	f	class:b2Body
GetPosition	include/Box2D/Dynamics/b2Body.h	/^inline const b2Vec2& b2Body::GetPosition() const$/;"	f	class:b2Body
GetTransform	include/Box2D/Dynamics/b2Body.h	/^inline const b2Transform& b2Body::GetTransform() const$/;"	f	class:b2Body
GetType	include/Box2D/Dynamics/b2Body.h	/^inline b2BodyType b2Body::GetType() const$/;"	f	class:b2Body
GetUserData	include/Box2D/Dynamics/b2Body.h	/^inline void* b2Body::GetUserData() const$/;"	f	class:b2Body
GetWorld	include/Box2D/Dynamics/b2Body.h	/^inline b2World* b2Body::GetWorld()$/;"	f	class:b2Body
GetWorld	include/Box2D/Dynamics/b2Body.h	/^inline const b2World* b2Body::GetWorld() const$/;"	f	class:b2Body
GetWorldCenter	include/Box2D/Dynamics/b2Body.h	/^inline const b2Vec2& b2Body::GetWorldCenter() const$/;"	f	class:b2Body
GetWorldPoint	include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetWorldPoint(const b2Vec2& localPoint) const$/;"	f	class:b2Body
GetWorldVector	include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetWorldVector(const b2Vec2& localVector) const$/;"	f	class:b2Body
IsActive	include/Box2D/Dynamics/b2Body.h	/^inline bool b2Body::IsActive() const$/;"	f	class:b2Body
IsAwake	include/Box2D/Dynamics/b2Body.h	/^inline bool b2Body::IsAwake() const$/;"	f	class:b2Body
IsBullet	include/Box2D/Dynamics/b2Body.h	/^inline bool b2Body::IsBullet() const$/;"	f	class:b2Body
IsFixedRotation	include/Box2D/Dynamics/b2Body.h	/^inline bool b2Body::IsFixedRotation() const$/;"	f	class:b2Body
IsSleepingAllowed	include/Box2D/Dynamics/b2Body.h	/^inline bool b2Body::IsSleepingAllowed() const$/;"	f	class:b2Body
SetAngularDamping	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetAngularDamping(float32 angularDamping)$/;"	f	class:b2Body
SetAngularVelocity	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetAngularVelocity(float32 w)$/;"	f	class:b2Body
SetAwake	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetAwake(bool flag)$/;"	f	class:b2Body
SetBullet	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetBullet(bool flag)$/;"	f	class:b2Body
SetGravityScale	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetGravityScale(float32 scale)$/;"	f	class:b2Body
SetLinearDamping	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetLinearDamping(float32 linearDamping)$/;"	f	class:b2Body
SetLinearVelocity	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetLinearVelocity(const b2Vec2& v)$/;"	f	class:b2Body
SetSleepingAllowed	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetSleepingAllowed(bool flag)$/;"	f	class:b2Body
SetUserData	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetUserData(void* data)$/;"	f	class:b2Body
SynchronizeTransform	include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SynchronizeTransform()$/;"	f	class:b2Body
active	include/Box2D/Dynamics/b2Body.h	/^	bool active;$/;"	m	struct:b2BodyDef
allowSleep	include/Box2D/Dynamics/b2Body.h	/^	bool allowSleep;$/;"	m	struct:b2BodyDef
angle	include/Box2D/Dynamics/b2Body.h	/^	float32 angle;$/;"	m	struct:b2BodyDef
angularDamping	include/Box2D/Dynamics/b2Body.h	/^	float32 angularDamping;$/;"	m	struct:b2BodyDef
angularVelocity	include/Box2D/Dynamics/b2Body.h	/^	float32 angularVelocity;$/;"	m	struct:b2BodyDef
awake	include/Box2D/Dynamics/b2Body.h	/^	bool awake;$/;"	m	struct:b2BodyDef
b2Body	include/Box2D/Dynamics/b2Body.h	/^class b2Body$/;"	c
b2BodyDef	include/Box2D/Dynamics/b2Body.h	/^	b2BodyDef()$/;"	f	struct:b2BodyDef
b2BodyDef	include/Box2D/Dynamics/b2Body.h	/^struct b2BodyDef$/;"	s
b2BodyType	include/Box2D/Dynamics/b2Body.h	/^enum b2BodyType$/;"	g
b2_dynamicBody	include/Box2D/Dynamics/b2Body.h	/^	b2_dynamicBody$/;"	e	enum:b2BodyType
b2_kinematicBody	include/Box2D/Dynamics/b2Body.h	/^	b2_kinematicBody,$/;"	e	enum:b2BodyType
b2_staticBody	include/Box2D/Dynamics/b2Body.h	/^	b2_staticBody = 0,$/;"	e	enum:b2BodyType
bullet	include/Box2D/Dynamics/b2Body.h	/^	bool bullet;$/;"	m	struct:b2BodyDef
e_activeFlag	include/Box2D/Dynamics/b2Body.h	/^		e_activeFlag		= 0x0020,$/;"	e	enum:b2Body::__anon2
e_autoSleepFlag	include/Box2D/Dynamics/b2Body.h	/^		e_autoSleepFlag		= 0x0004,$/;"	e	enum:b2Body::__anon2
e_awakeFlag	include/Box2D/Dynamics/b2Body.h	/^		e_awakeFlag			= 0x0002,$/;"	e	enum:b2Body::__anon2
e_bulletFlag	include/Box2D/Dynamics/b2Body.h	/^		e_bulletFlag		= 0x0008,$/;"	e	enum:b2Body::__anon2
e_fixedRotationFlag	include/Box2D/Dynamics/b2Body.h	/^		e_fixedRotationFlag	= 0x0010,$/;"	e	enum:b2Body::__anon2
e_islandFlag	include/Box2D/Dynamics/b2Body.h	/^		e_islandFlag		= 0x0001,$/;"	e	enum:b2Body::__anon2
e_toiFlag	include/Box2D/Dynamics/b2Body.h	/^		e_toiFlag			= 0x0040$/;"	e	enum:b2Body::__anon2
fixedRotation	include/Box2D/Dynamics/b2Body.h	/^	bool fixedRotation;$/;"	m	struct:b2BodyDef
gravityScale	include/Box2D/Dynamics/b2Body.h	/^	float32 gravityScale;$/;"	m	struct:b2BodyDef
linearDamping	include/Box2D/Dynamics/b2Body.h	/^	float32 linearDamping;$/;"	m	struct:b2BodyDef
linearVelocity	include/Box2D/Dynamics/b2Body.h	/^	b2Vec2 linearVelocity;$/;"	m	struct:b2BodyDef
m_I	include/Box2D/Dynamics/b2Body.h	/^	float32 m_I, m_invI;$/;"	m	class:b2Body
m_angularDamping	include/Box2D/Dynamics/b2Body.h	/^	float32 m_angularDamping;$/;"	m	class:b2Body
m_angularVelocity	include/Box2D/Dynamics/b2Body.h	/^	float32 m_angularVelocity;$/;"	m	class:b2Body
m_contactList	include/Box2D/Dynamics/b2Body.h	/^	b2ContactEdge* m_contactList;$/;"	m	class:b2Body
m_fixtureCount	include/Box2D/Dynamics/b2Body.h	/^	int32 m_fixtureCount;$/;"	m	class:b2Body
m_fixtureList	include/Box2D/Dynamics/b2Body.h	/^	b2Fixture* m_fixtureList;$/;"	m	class:b2Body
m_flags	include/Box2D/Dynamics/b2Body.h	/^	uint16 m_flags;$/;"	m	class:b2Body
m_force	include/Box2D/Dynamics/b2Body.h	/^	b2Vec2 m_force;$/;"	m	class:b2Body
m_gravityScale	include/Box2D/Dynamics/b2Body.h	/^	float32 m_gravityScale;$/;"	m	class:b2Body
m_invI	include/Box2D/Dynamics/b2Body.h	/^	float32 m_I, m_invI;$/;"	m	class:b2Body
m_invMass	include/Box2D/Dynamics/b2Body.h	/^	float32 m_mass, m_invMass;$/;"	m	class:b2Body
m_islandIndex	include/Box2D/Dynamics/b2Body.h	/^	int32 m_islandIndex;$/;"	m	class:b2Body
m_jointList	include/Box2D/Dynamics/b2Body.h	/^	b2JointEdge* m_jointList;$/;"	m	class:b2Body
m_linearDamping	include/Box2D/Dynamics/b2Body.h	/^	float32 m_linearDamping;$/;"	m	class:b2Body
m_linearVelocity	include/Box2D/Dynamics/b2Body.h	/^	b2Vec2 m_linearVelocity;$/;"	m	class:b2Body
m_mass	include/Box2D/Dynamics/b2Body.h	/^	float32 m_mass, m_invMass;$/;"	m	class:b2Body
m_next	include/Box2D/Dynamics/b2Body.h	/^	b2Body* m_next;$/;"	m	class:b2Body
m_prev	include/Box2D/Dynamics/b2Body.h	/^	b2Body* m_prev;$/;"	m	class:b2Body
m_sleepTime	include/Box2D/Dynamics/b2Body.h	/^	float32 m_sleepTime;$/;"	m	class:b2Body
m_sweep	include/Box2D/Dynamics/b2Body.h	/^	b2Sweep m_sweep;		\/\/ the swept motion for CCD$/;"	m	class:b2Body
m_torque	include/Box2D/Dynamics/b2Body.h	/^	float32 m_torque;$/;"	m	class:b2Body
m_type	include/Box2D/Dynamics/b2Body.h	/^	b2BodyType m_type;$/;"	m	class:b2Body
m_userData	include/Box2D/Dynamics/b2Body.h	/^	void* m_userData;$/;"	m	class:b2Body
m_world	include/Box2D/Dynamics/b2Body.h	/^	b2World* m_world;$/;"	m	class:b2Body
m_xf	include/Box2D/Dynamics/b2Body.h	/^	b2Transform m_xf;		\/\/ the body origin transform$/;"	m	class:b2Body
position	include/Box2D/Dynamics/b2Body.h	/^	b2Vec2 position;$/;"	m	struct:b2BodyDef
type	include/Box2D/Dynamics/b2Body.h	/^	b2BodyType type;$/;"	m	struct:b2BodyDef
userData	include/Box2D/Dynamics/b2Body.h	/^	void* userData;$/;"	m	struct:b2BodyDef
AddPair	include/Box2D/Dynamics/b2ContactManager.cpp	/^void b2ContactManager::AddPair(void* proxyUserDataA, void* proxyUserDataB)$/;"	f	class:b2ContactManager
Collide	include/Box2D/Dynamics/b2ContactManager.cpp	/^void b2ContactManager::Collide()$/;"	f	class:b2ContactManager
Destroy	include/Box2D/Dynamics/b2ContactManager.cpp	/^void b2ContactManager::Destroy(b2Contact* c)$/;"	f	class:b2ContactManager
FindNewContacts	include/Box2D/Dynamics/b2ContactManager.cpp	/^void b2ContactManager::FindNewContacts()$/;"	f	class:b2ContactManager
b2ContactManager	include/Box2D/Dynamics/b2ContactManager.cpp	/^b2ContactManager::b2ContactManager()$/;"	f	class:b2ContactManager
b2_defaultFilter	include/Box2D/Dynamics/b2ContactManager.cpp	/^b2ContactFilter b2_defaultFilter;$/;"	v
b2_defaultListener	include/Box2D/Dynamics/b2ContactManager.cpp	/^b2ContactListener b2_defaultListener;$/;"	v
B2_CONTACT_MANAGER_H	include/Box2D/Dynamics/b2ContactManager.h	20;"	d
b2ContactManager	include/Box2D/Dynamics/b2ContactManager.h	/^class b2ContactManager$/;"	c
m_allocator	include/Box2D/Dynamics/b2ContactManager.h	/^	b2BlockAllocator* m_allocator;$/;"	m	class:b2ContactManager
m_broadPhase	include/Box2D/Dynamics/b2ContactManager.h	/^	b2BroadPhase m_broadPhase;$/;"	m	class:b2ContactManager
m_contactCount	include/Box2D/Dynamics/b2ContactManager.h	/^	int32 m_contactCount;$/;"	m	class:b2ContactManager
m_contactFilter	include/Box2D/Dynamics/b2ContactManager.h	/^	b2ContactFilter* m_contactFilter;$/;"	m	class:b2ContactManager
m_contactList	include/Box2D/Dynamics/b2ContactManager.h	/^	b2Contact* m_contactList;$/;"	m	class:b2ContactManager
m_contactListener	include/Box2D/Dynamics/b2ContactManager.h	/^	b2ContactListener* m_contactListener;$/;"	m	class:b2ContactManager
Create	include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::Create(b2BlockAllocator* allocator, b2Body* body, const b2FixtureDef* def)$/;"	f	class:b2Fixture
CreateProxies	include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::CreateProxies(b2BroadPhase* broadPhase, const b2Transform& xf)$/;"	f	class:b2Fixture
Destroy	include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::Destroy(b2BlockAllocator* allocator)$/;"	f	class:b2Fixture
DestroyProxies	include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::DestroyProxies(b2BroadPhase* broadPhase)$/;"	f	class:b2Fixture
Dump	include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::Dump(int32 bodyIndex)$/;"	f	class:b2Fixture
Refilter	include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::Refilter()$/;"	f	class:b2Fixture
SetFilterData	include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::SetFilterData(const b2Filter& filter)$/;"	f	class:b2Fixture
SetSensor	include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::SetSensor(bool sensor)$/;"	f	class:b2Fixture
Synchronize	include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::Synchronize(b2BroadPhase* broadPhase, const b2Transform& transform1, const b2Transform& transform2)$/;"	f	class:b2Fixture
b2Fixture	include/Box2D/Dynamics/b2Fixture.cpp	/^b2Fixture::b2Fixture()$/;"	f	class:b2Fixture
B2_FIXTURE_H	include/Box2D/Dynamics/b2Fixture.h	20;"	d
GetAABB	include/Box2D/Dynamics/b2Fixture.h	/^inline const b2AABB& b2Fixture::GetAABB(int32 childIndex) const$/;"	f	class:b2Fixture
GetBody	include/Box2D/Dynamics/b2Fixture.h	/^inline b2Body* b2Fixture::GetBody()$/;"	f	class:b2Fixture
GetBody	include/Box2D/Dynamics/b2Fixture.h	/^inline const b2Body* b2Fixture::GetBody() const$/;"	f	class:b2Fixture
GetDensity	include/Box2D/Dynamics/b2Fixture.h	/^inline float32 b2Fixture::GetDensity() const$/;"	f	class:b2Fixture
GetFilterData	include/Box2D/Dynamics/b2Fixture.h	/^inline const b2Filter& b2Fixture::GetFilterData() const$/;"	f	class:b2Fixture
GetFriction	include/Box2D/Dynamics/b2Fixture.h	/^inline float32 b2Fixture::GetFriction() const$/;"	f	class:b2Fixture
GetMassData	include/Box2D/Dynamics/b2Fixture.h	/^inline void b2Fixture::GetMassData(b2MassData* massData) const$/;"	f	class:b2Fixture
GetNext	include/Box2D/Dynamics/b2Fixture.h	/^inline b2Fixture* b2Fixture::GetNext()$/;"	f	class:b2Fixture
GetNext	include/Box2D/Dynamics/b2Fixture.h	/^inline const b2Fixture* b2Fixture::GetNext() const$/;"	f	class:b2Fixture
GetRestitution	include/Box2D/Dynamics/b2Fixture.h	/^inline float32 b2Fixture::GetRestitution() const$/;"	f	class:b2Fixture
GetShape	include/Box2D/Dynamics/b2Fixture.h	/^inline b2Shape* b2Fixture::GetShape()$/;"	f	class:b2Fixture
GetShape	include/Box2D/Dynamics/b2Fixture.h	/^inline const b2Shape* b2Fixture::GetShape() const$/;"	f	class:b2Fixture
GetType	include/Box2D/Dynamics/b2Fixture.h	/^inline b2Shape::Type b2Fixture::GetType() const$/;"	f	class:b2Fixture
GetUserData	include/Box2D/Dynamics/b2Fixture.h	/^inline void* b2Fixture::GetUserData() const$/;"	f	class:b2Fixture
IsSensor	include/Box2D/Dynamics/b2Fixture.h	/^inline bool b2Fixture::IsSensor() const$/;"	f	class:b2Fixture
RayCast	include/Box2D/Dynamics/b2Fixture.h	/^inline bool b2Fixture::RayCast(b2RayCastOutput* output, const b2RayCastInput& input, int32 childIndex) const$/;"	f	class:b2Fixture
SetDensity	include/Box2D/Dynamics/b2Fixture.h	/^inline void b2Fixture::SetDensity(float32 density)$/;"	f	class:b2Fixture
SetFriction	include/Box2D/Dynamics/b2Fixture.h	/^inline void b2Fixture::SetFriction(float32 friction)$/;"	f	class:b2Fixture
SetRestitution	include/Box2D/Dynamics/b2Fixture.h	/^inline void b2Fixture::SetRestitution(float32 restitution)$/;"	f	class:b2Fixture
SetUserData	include/Box2D/Dynamics/b2Fixture.h	/^inline void b2Fixture::SetUserData(void* data)$/;"	f	class:b2Fixture
TestPoint	include/Box2D/Dynamics/b2Fixture.h	/^inline bool b2Fixture::TestPoint(const b2Vec2& p) const$/;"	f	class:b2Fixture
aabb	include/Box2D/Dynamics/b2Fixture.h	/^	b2AABB aabb;$/;"	m	struct:b2FixtureProxy
b2Filter	include/Box2D/Dynamics/b2Fixture.h	/^	b2Filter()$/;"	f	struct:b2Filter
b2Filter	include/Box2D/Dynamics/b2Fixture.h	/^struct b2Filter$/;"	s
b2Fixture	include/Box2D/Dynamics/b2Fixture.h	/^class b2Fixture$/;"	c
b2FixtureDef	include/Box2D/Dynamics/b2Fixture.h	/^	b2FixtureDef()$/;"	f	struct:b2FixtureDef
b2FixtureDef	include/Box2D/Dynamics/b2Fixture.h	/^struct b2FixtureDef$/;"	s
b2FixtureProxy	include/Box2D/Dynamics/b2Fixture.h	/^struct b2FixtureProxy$/;"	s
categoryBits	include/Box2D/Dynamics/b2Fixture.h	/^	uint16 categoryBits;$/;"	m	struct:b2Filter
childIndex	include/Box2D/Dynamics/b2Fixture.h	/^	int32 childIndex;$/;"	m	struct:b2FixtureProxy
density	include/Box2D/Dynamics/b2Fixture.h	/^	float32 density;$/;"	m	struct:b2FixtureDef
filter	include/Box2D/Dynamics/b2Fixture.h	/^	b2Filter filter;$/;"	m	struct:b2FixtureDef
fixture	include/Box2D/Dynamics/b2Fixture.h	/^	b2Fixture* fixture;$/;"	m	struct:b2FixtureProxy
friction	include/Box2D/Dynamics/b2Fixture.h	/^	float32 friction;$/;"	m	struct:b2FixtureDef
groupIndex	include/Box2D/Dynamics/b2Fixture.h	/^	int16 groupIndex;$/;"	m	struct:b2Filter
isSensor	include/Box2D/Dynamics/b2Fixture.h	/^	bool isSensor;$/;"	m	struct:b2FixtureDef
m_body	include/Box2D/Dynamics/b2Fixture.h	/^	b2Body* m_body;$/;"	m	class:b2Fixture
m_density	include/Box2D/Dynamics/b2Fixture.h	/^	float32 m_density;$/;"	m	class:b2Fixture
m_filter	include/Box2D/Dynamics/b2Fixture.h	/^	b2Filter m_filter;$/;"	m	class:b2Fixture
m_friction	include/Box2D/Dynamics/b2Fixture.h	/^	float32 m_friction;$/;"	m	class:b2Fixture
m_isSensor	include/Box2D/Dynamics/b2Fixture.h	/^	bool m_isSensor;$/;"	m	class:b2Fixture
m_next	include/Box2D/Dynamics/b2Fixture.h	/^	b2Fixture* m_next;$/;"	m	class:b2Fixture
m_proxies	include/Box2D/Dynamics/b2Fixture.h	/^	b2FixtureProxy* m_proxies;$/;"	m	class:b2Fixture
m_proxyCount	include/Box2D/Dynamics/b2Fixture.h	/^	int32 m_proxyCount;$/;"	m	class:b2Fixture
m_restitution	include/Box2D/Dynamics/b2Fixture.h	/^	float32 m_restitution;$/;"	m	class:b2Fixture
m_shape	include/Box2D/Dynamics/b2Fixture.h	/^	b2Shape* m_shape;$/;"	m	class:b2Fixture
m_userData	include/Box2D/Dynamics/b2Fixture.h	/^	void* m_userData;$/;"	m	class:b2Fixture
maskBits	include/Box2D/Dynamics/b2Fixture.h	/^	uint16 maskBits;$/;"	m	struct:b2Filter
proxyId	include/Box2D/Dynamics/b2Fixture.h	/^	int32 proxyId;$/;"	m	struct:b2FixtureProxy
restitution	include/Box2D/Dynamics/b2Fixture.h	/^	float32 restitution;$/;"	m	struct:b2FixtureDef
shape	include/Box2D/Dynamics/b2Fixture.h	/^	const b2Shape* shape;$/;"	m	struct:b2FixtureDef
userData	include/Box2D/Dynamics/b2Fixture.h	/^	void* userData;$/;"	m	struct:b2FixtureDef
Report	include/Box2D/Dynamics/b2Island.cpp	/^void b2Island::Report(const b2ContactVelocityConstraint* constraints)$/;"	f	class:b2Island
Solve	include/Box2D/Dynamics/b2Island.cpp	/^void b2Island::Solve(b2Profile* profile, const b2TimeStep& step, const b2Vec2& gravity, bool allowSleep)$/;"	f	class:b2Island
SolveTOI	include/Box2D/Dynamics/b2Island.cpp	/^void b2Island::SolveTOI(const b2TimeStep& subStep, int32 toiIndexA, int32 toiIndexB)$/;"	f	class:b2Island
b2Island	include/Box2D/Dynamics/b2Island.cpp	/^b2Island::b2Island($/;"	f	class:b2Island
~b2Island	include/Box2D/Dynamics/b2Island.cpp	/^b2Island::~b2Island()$/;"	f	class:b2Island
Add	include/Box2D/Dynamics/b2Island.h	/^	void Add(b2Body* body)$/;"	f	class:b2Island
Add	include/Box2D/Dynamics/b2Island.h	/^	void Add(b2Contact* contact)$/;"	f	class:b2Island
Add	include/Box2D/Dynamics/b2Island.h	/^	void Add(b2Joint* joint)$/;"	f	class:b2Island
B2_ISLAND_H	include/Box2D/Dynamics/b2Island.h	20;"	d
Clear	include/Box2D/Dynamics/b2Island.h	/^	void Clear()$/;"	f	class:b2Island
b2Island	include/Box2D/Dynamics/b2Island.h	/^class b2Island$/;"	c
m_allocator	include/Box2D/Dynamics/b2Island.h	/^	b2StackAllocator* m_allocator;$/;"	m	class:b2Island
m_bodies	include/Box2D/Dynamics/b2Island.h	/^	b2Body** m_bodies;$/;"	m	class:b2Island
m_bodyCapacity	include/Box2D/Dynamics/b2Island.h	/^	int32 m_bodyCapacity;$/;"	m	class:b2Island
m_bodyCount	include/Box2D/Dynamics/b2Island.h	/^	int32 m_bodyCount;$/;"	m	class:b2Island
m_contactCapacity	include/Box2D/Dynamics/b2Island.h	/^	int32 m_contactCapacity;$/;"	m	class:b2Island
m_contactCount	include/Box2D/Dynamics/b2Island.h	/^	int32 m_contactCount;$/;"	m	class:b2Island
m_contacts	include/Box2D/Dynamics/b2Island.h	/^	b2Contact** m_contacts;$/;"	m	class:b2Island
m_jointCapacity	include/Box2D/Dynamics/b2Island.h	/^	int32 m_jointCapacity;$/;"	m	class:b2Island
m_jointCount	include/Box2D/Dynamics/b2Island.h	/^	int32 m_jointCount;$/;"	m	class:b2Island
m_joints	include/Box2D/Dynamics/b2Island.h	/^	b2Joint** m_joints;$/;"	m	class:b2Island
m_listener	include/Box2D/Dynamics/b2Island.h	/^	b2ContactListener* m_listener;$/;"	m	class:b2Island
m_positions	include/Box2D/Dynamics/b2Island.h	/^	b2Position* m_positions;$/;"	m	class:b2Island
m_velocities	include/Box2D/Dynamics/b2Island.h	/^	b2Velocity* m_velocities;$/;"	m	class:b2Island
B2_TIME_STEP_H	include/Box2D/Dynamics/b2TimeStep.h	20;"	d
a	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 a;$/;"	m	struct:b2Position
b2Position	include/Box2D/Dynamics/b2TimeStep.h	/^struct b2Position$/;"	s
b2Profile	include/Box2D/Dynamics/b2TimeStep.h	/^struct b2Profile$/;"	s
b2SolverData	include/Box2D/Dynamics/b2TimeStep.h	/^struct b2SolverData$/;"	s
b2TimeStep	include/Box2D/Dynamics/b2TimeStep.h	/^struct b2TimeStep$/;"	s
b2Velocity	include/Box2D/Dynamics/b2TimeStep.h	/^struct b2Velocity$/;"	s
broadphase	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 broadphase;$/;"	m	struct:b2Profile
c	include/Box2D/Dynamics/b2TimeStep.h	/^	b2Vec2 c;$/;"	m	struct:b2Position
collide	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 collide;$/;"	m	struct:b2Profile
dt	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 dt;			\/\/ time step$/;"	m	struct:b2TimeStep
dtRatio	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 dtRatio;	\/\/ dt * inv_dt0$/;"	m	struct:b2TimeStep
inv_dt	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 inv_dt;		\/\/ inverse time step (0 if dt == 0).$/;"	m	struct:b2TimeStep
positionIterations	include/Box2D/Dynamics/b2TimeStep.h	/^	int32 positionIterations;$/;"	m	struct:b2TimeStep
positions	include/Box2D/Dynamics/b2TimeStep.h	/^	b2Position* positions;$/;"	m	struct:b2SolverData
solve	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 solve;$/;"	m	struct:b2Profile
solveInit	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 solveInit;$/;"	m	struct:b2Profile
solvePosition	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 solvePosition;$/;"	m	struct:b2Profile
solveTOI	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 solveTOI;$/;"	m	struct:b2Profile
solveVelocity	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 solveVelocity;$/;"	m	struct:b2Profile
step	include/Box2D/Dynamics/b2TimeStep.h	/^	b2TimeStep step;$/;"	m	struct:b2SolverData
step	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 step;$/;"	m	struct:b2Profile
v	include/Box2D/Dynamics/b2TimeStep.h	/^	b2Vec2 v;$/;"	m	struct:b2Velocity
velocities	include/Box2D/Dynamics/b2TimeStep.h	/^	b2Velocity* velocities;$/;"	m	struct:b2SolverData
velocityIterations	include/Box2D/Dynamics/b2TimeStep.h	/^	int32 velocityIterations;$/;"	m	struct:b2TimeStep
w	include/Box2D/Dynamics/b2TimeStep.h	/^	float32 w;$/;"	m	struct:b2Velocity
warmStarting	include/Box2D/Dynamics/b2TimeStep.h	/^	bool warmStarting;$/;"	m	struct:b2TimeStep
ClearForces	include/Box2D/Dynamics/b2World.cpp	/^void b2World::ClearForces()$/;"	f	class:b2World
CreateBody	include/Box2D/Dynamics/b2World.cpp	/^b2Body* b2World::CreateBody(const b2BodyDef* def)$/;"	f	class:b2World
CreateJoint	include/Box2D/Dynamics/b2World.cpp	/^b2Joint* b2World::CreateJoint(const b2JointDef* def)$/;"	f	class:b2World
DestroyBody	include/Box2D/Dynamics/b2World.cpp	/^void b2World::DestroyBody(b2Body* b)$/;"	f	class:b2World
DestroyJoint	include/Box2D/Dynamics/b2World.cpp	/^void b2World::DestroyJoint(b2Joint* j)$/;"	f	class:b2World
DrawDebugData	include/Box2D/Dynamics/b2World.cpp	/^void b2World::DrawDebugData()$/;"	f	class:b2World
DrawJoint	include/Box2D/Dynamics/b2World.cpp	/^void b2World::DrawJoint(b2Joint* joint)$/;"	f	class:b2World
DrawShape	include/Box2D/Dynamics/b2World.cpp	/^void b2World::DrawShape(b2Fixture* fixture, const b2Transform& xf, const b2Color& color)$/;"	f	class:b2World
Dump	include/Box2D/Dynamics/b2World.cpp	/^void b2World::Dump()$/;"	f	class:b2World
GetProxyCount	include/Box2D/Dynamics/b2World.cpp	/^int32 b2World::GetProxyCount() const$/;"	f	class:b2World
GetTreeBalance	include/Box2D/Dynamics/b2World.cpp	/^int32 b2World::GetTreeBalance() const$/;"	f	class:b2World
GetTreeHeight	include/Box2D/Dynamics/b2World.cpp	/^int32 b2World::GetTreeHeight() const$/;"	f	class:b2World
GetTreeQuality	include/Box2D/Dynamics/b2World.cpp	/^float32 b2World::GetTreeQuality() const$/;"	f	class:b2World
QueryAABB	include/Box2D/Dynamics/b2World.cpp	/^void b2World::QueryAABB(b2QueryCallback* callback, const b2AABB& aabb) const$/;"	f	class:b2World
QueryCallback	include/Box2D/Dynamics/b2World.cpp	/^	bool QueryCallback(int32 proxyId)$/;"	f	struct:b2WorldQueryWrapper
RayCast	include/Box2D/Dynamics/b2World.cpp	/^void b2World::RayCast(b2RayCastCallback* callback, const b2Vec2& point1, const b2Vec2& point2) const$/;"	f	class:b2World
RayCastCallback	include/Box2D/Dynamics/b2World.cpp	/^	float32 RayCastCallback(const b2RayCastInput& input, int32 proxyId)$/;"	f	struct:b2WorldRayCastWrapper
SetAllowSleeping	include/Box2D/Dynamics/b2World.cpp	/^void b2World::SetAllowSleeping(bool flag)$/;"	f	class:b2World
SetContactFilter	include/Box2D/Dynamics/b2World.cpp	/^void b2World::SetContactFilter(b2ContactFilter* filter)$/;"	f	class:b2World
SetContactListener	include/Box2D/Dynamics/b2World.cpp	/^void b2World::SetContactListener(b2ContactListener* listener)$/;"	f	class:b2World
SetDebugDraw	include/Box2D/Dynamics/b2World.cpp	/^void b2World::SetDebugDraw(b2Draw* debugDraw)$/;"	f	class:b2World
SetDestructionListener	include/Box2D/Dynamics/b2World.cpp	/^void b2World::SetDestructionListener(b2DestructionListener* listener)$/;"	f	class:b2World
ShiftOrigin	include/Box2D/Dynamics/b2World.cpp	/^void b2World::ShiftOrigin(const b2Vec2& newOrigin)$/;"	f	class:b2World
Solve	include/Box2D/Dynamics/b2World.cpp	/^void b2World::Solve(const b2TimeStep& step)$/;"	f	class:b2World
SolveTOI	include/Box2D/Dynamics/b2World.cpp	/^void b2World::SolveTOI(const b2TimeStep& step)$/;"	f	class:b2World
Step	include/Box2D/Dynamics/b2World.cpp	/^void b2World::Step(float32 dt, int32 velocityIterations, int32 positionIterations)$/;"	f	class:b2World
b2World	include/Box2D/Dynamics/b2World.cpp	/^b2World::b2World(const b2Vec2& gravity)$/;"	f	class:b2World
b2WorldQueryWrapper	include/Box2D/Dynamics/b2World.cpp	/^struct b2WorldQueryWrapper$/;"	s	file:
b2WorldRayCastWrapper	include/Box2D/Dynamics/b2World.cpp	/^struct b2WorldRayCastWrapper$/;"	s	file:
broadPhase	include/Box2D/Dynamics/b2World.cpp	/^	const b2BroadPhase* broadPhase;$/;"	m	struct:b2WorldQueryWrapper	file:
broadPhase	include/Box2D/Dynamics/b2World.cpp	/^	const b2BroadPhase* broadPhase;$/;"	m	struct:b2WorldRayCastWrapper	file:
callback	include/Box2D/Dynamics/b2World.cpp	/^	b2QueryCallback* callback;$/;"	m	struct:b2WorldQueryWrapper	file:
callback	include/Box2D/Dynamics/b2World.cpp	/^	b2RayCastCallback* callback;$/;"	m	struct:b2WorldRayCastWrapper	file:
~b2World	include/Box2D/Dynamics/b2World.cpp	/^b2World::~b2World()$/;"	f	class:b2World
B2_WORLD_H	include/Box2D/Dynamics/b2World.h	20;"	d
GetAllowSleeping	include/Box2D/Dynamics/b2World.h	/^	bool GetAllowSleeping() const { return m_allowSleep; }$/;"	f	class:b2World
GetAutoClearForces	include/Box2D/Dynamics/b2World.h	/^inline bool b2World::GetAutoClearForces() const$/;"	f	class:b2World
GetBodyCount	include/Box2D/Dynamics/b2World.h	/^inline int32 b2World::GetBodyCount() const$/;"	f	class:b2World
GetBodyList	include/Box2D/Dynamics/b2World.h	/^inline b2Body* b2World::GetBodyList()$/;"	f	class:b2World
GetBodyList	include/Box2D/Dynamics/b2World.h	/^inline const b2Body* b2World::GetBodyList() const$/;"	f	class:b2World
GetContactCount	include/Box2D/Dynamics/b2World.h	/^inline int32 b2World::GetContactCount() const$/;"	f	class:b2World
GetContactList	include/Box2D/Dynamics/b2World.h	/^inline b2Contact* b2World::GetContactList()$/;"	f	class:b2World
GetContactList	include/Box2D/Dynamics/b2World.h	/^inline const b2Contact* b2World::GetContactList() const$/;"	f	class:b2World
GetContactManager	include/Box2D/Dynamics/b2World.h	/^inline const b2ContactManager& b2World::GetContactManager() const$/;"	f	class:b2World
GetContinuousPhysics	include/Box2D/Dynamics/b2World.h	/^	bool GetContinuousPhysics() const { return m_continuousPhysics; }$/;"	f	class:b2World
GetGravity	include/Box2D/Dynamics/b2World.h	/^inline b2Vec2 b2World::GetGravity() const$/;"	f	class:b2World
GetJointCount	include/Box2D/Dynamics/b2World.h	/^inline int32 b2World::GetJointCount() const$/;"	f	class:b2World
GetJointList	include/Box2D/Dynamics/b2World.h	/^inline b2Joint* b2World::GetJointList()$/;"	f	class:b2World
GetJointList	include/Box2D/Dynamics/b2World.h	/^inline const b2Joint* b2World::GetJointList() const$/;"	f	class:b2World
GetProfile	include/Box2D/Dynamics/b2World.h	/^inline const b2Profile& b2World::GetProfile() const$/;"	f	class:b2World
GetSubStepping	include/Box2D/Dynamics/b2World.h	/^	bool GetSubStepping() const { return m_subStepping; }$/;"	f	class:b2World
GetWarmStarting	include/Box2D/Dynamics/b2World.h	/^	bool GetWarmStarting() const { return m_warmStarting; }$/;"	f	class:b2World
IsLocked	include/Box2D/Dynamics/b2World.h	/^inline bool b2World::IsLocked() const$/;"	f	class:b2World
SetAutoClearForces	include/Box2D/Dynamics/b2World.h	/^inline void b2World::SetAutoClearForces(bool flag)$/;"	f	class:b2World
SetContinuousPhysics	include/Box2D/Dynamics/b2World.h	/^	void SetContinuousPhysics(bool flag) { m_continuousPhysics = flag; }$/;"	f	class:b2World
SetGravity	include/Box2D/Dynamics/b2World.h	/^inline void b2World::SetGravity(const b2Vec2& gravity)$/;"	f	class:b2World
SetSubStepping	include/Box2D/Dynamics/b2World.h	/^	void SetSubStepping(bool flag) { m_subStepping = flag; }$/;"	f	class:b2World
SetWarmStarting	include/Box2D/Dynamics/b2World.h	/^	void SetWarmStarting(bool flag) { m_warmStarting = flag; }$/;"	f	class:b2World
b2World	include/Box2D/Dynamics/b2World.h	/^class b2World$/;"	c
e_clearForces	include/Box2D/Dynamics/b2World.h	/^		e_clearForces	= 0x0004$/;"	e	enum:b2World::__anon3
e_locked	include/Box2D/Dynamics/b2World.h	/^		e_locked		= 0x0002,$/;"	e	enum:b2World::__anon3
e_newFixture	include/Box2D/Dynamics/b2World.h	/^		e_newFixture	= 0x0001,$/;"	e	enum:b2World::__anon3
m_allowSleep	include/Box2D/Dynamics/b2World.h	/^	bool m_allowSleep;$/;"	m	class:b2World
m_blockAllocator	include/Box2D/Dynamics/b2World.h	/^	b2BlockAllocator m_blockAllocator;$/;"	m	class:b2World
m_bodyCount	include/Box2D/Dynamics/b2World.h	/^	int32 m_bodyCount;$/;"	m	class:b2World
m_bodyList	include/Box2D/Dynamics/b2World.h	/^	b2Body* m_bodyList;$/;"	m	class:b2World
m_contactManager	include/Box2D/Dynamics/b2World.h	/^	b2ContactManager m_contactManager;$/;"	m	class:b2World
m_continuousPhysics	include/Box2D/Dynamics/b2World.h	/^	bool m_continuousPhysics;$/;"	m	class:b2World
m_debugDraw	include/Box2D/Dynamics/b2World.h	/^	b2Draw* m_debugDraw;$/;"	m	class:b2World
m_destructionListener	include/Box2D/Dynamics/b2World.h	/^	b2DestructionListener* m_destructionListener;$/;"	m	class:b2World
m_flags	include/Box2D/Dynamics/b2World.h	/^	int32 m_flags;$/;"	m	class:b2World
m_gravity	include/Box2D/Dynamics/b2World.h	/^	b2Vec2 m_gravity;$/;"	m	class:b2World
m_inv_dt0	include/Box2D/Dynamics/b2World.h	/^	float32 m_inv_dt0;$/;"	m	class:b2World
m_jointCount	include/Box2D/Dynamics/b2World.h	/^	int32 m_jointCount;$/;"	m	class:b2World
m_jointList	include/Box2D/Dynamics/b2World.h	/^	b2Joint* m_jointList;$/;"	m	class:b2World
m_profile	include/Box2D/Dynamics/b2World.h	/^	b2Profile m_profile;$/;"	m	class:b2World
m_stackAllocator	include/Box2D/Dynamics/b2World.h	/^	b2StackAllocator m_stackAllocator;$/;"	m	class:b2World
m_stepComplete	include/Box2D/Dynamics/b2World.h	/^	bool m_stepComplete;$/;"	m	class:b2World
m_subStepping	include/Box2D/Dynamics/b2World.h	/^	bool m_subStepping;$/;"	m	class:b2World
m_warmStarting	include/Box2D/Dynamics/b2World.h	/^	bool m_warmStarting;$/;"	m	class:b2World
ShouldCollide	include/Box2D/Dynamics/b2WorldCallbacks.cpp	/^bool b2ContactFilter::ShouldCollide(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2ContactFilter
B2_WORLD_CALLBACKS_H	include/Box2D/Dynamics/b2WorldCallbacks.h	20;"	d
BeginContact	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual void BeginContact(b2Contact* contact) { B2_NOT_USED(contact); }$/;"	f	class:b2ContactListener
EndContact	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual void EndContact(b2Contact* contact) { B2_NOT_USED(contact); }$/;"	f	class:b2ContactListener
PostSolve	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual void PostSolve(b2Contact* contact, const b2ContactImpulse* impulse)$/;"	f	class:b2ContactListener
PreSolve	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual void PreSolve(b2Contact* contact, const b2Manifold* oldManifold)$/;"	f	class:b2ContactListener
b2ContactFilter	include/Box2D/Dynamics/b2WorldCallbacks.h	/^class b2ContactFilter$/;"	c
b2ContactImpulse	include/Box2D/Dynamics/b2WorldCallbacks.h	/^struct b2ContactImpulse$/;"	s
b2ContactListener	include/Box2D/Dynamics/b2WorldCallbacks.h	/^class b2ContactListener$/;"	c
b2DestructionListener	include/Box2D/Dynamics/b2WorldCallbacks.h	/^class b2DestructionListener$/;"	c
b2QueryCallback	include/Box2D/Dynamics/b2WorldCallbacks.h	/^class b2QueryCallback$/;"	c
b2RayCastCallback	include/Box2D/Dynamics/b2WorldCallbacks.h	/^class b2RayCastCallback$/;"	c
count	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	int32 count;$/;"	m	struct:b2ContactImpulse
normalImpulses	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	float32 normalImpulses[b2_maxManifoldPoints];$/;"	m	struct:b2ContactImpulse
tangentImpulses	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	float32 tangentImpulses[b2_maxManifoldPoints];$/;"	m	struct:b2ContactImpulse
~b2ContactFilter	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual ~b2ContactFilter() {}$/;"	f	class:b2ContactFilter
~b2ContactListener	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual ~b2ContactListener() {}$/;"	f	class:b2ContactListener
~b2DestructionListener	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual ~b2DestructionListener() {}$/;"	f	class:b2DestructionListener
~b2QueryCallback	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual ~b2QueryCallback() {}$/;"	f	class:b2QueryCallback
~b2RayCastCallback	include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual ~b2RayCastCallback() {}$/;"	f	class:b2RayCastCallback
Draw	include/Box2D/Rope/b2Rope.cpp	/^void b2Rope::Draw(b2Draw* draw) const$/;"	f	class:b2Rope
Initialize	include/Box2D/Rope/b2Rope.cpp	/^void b2Rope::Initialize(const b2RopeDef* def)$/;"	f	class:b2Rope
SetAngle	include/Box2D/Rope/b2Rope.cpp	/^void b2Rope::SetAngle(float32 angle)$/;"	f	class:b2Rope
SolveC2	include/Box2D/Rope/b2Rope.cpp	/^void b2Rope::SolveC2()$/;"	f	class:b2Rope
SolveC3	include/Box2D/Rope/b2Rope.cpp	/^void b2Rope::SolveC3()$/;"	f	class:b2Rope
Step	include/Box2D/Rope/b2Rope.cpp	/^void b2Rope::Step(float32 h, int32 iterations)$/;"	f	class:b2Rope
b2Rope	include/Box2D/Rope/b2Rope.cpp	/^b2Rope::b2Rope()$/;"	f	class:b2Rope
~b2Rope	include/Box2D/Rope/b2Rope.cpp	/^b2Rope::~b2Rope()$/;"	f	class:b2Rope
B2_ROPE_H	include/Box2D/Rope/b2Rope.h	20;"	d
GetVertexCount	include/Box2D/Rope/b2Rope.h	/^	int32 GetVertexCount() const$/;"	f	class:b2Rope
GetVertices	include/Box2D/Rope/b2Rope.h	/^	const b2Vec2* GetVertices() const$/;"	f	class:b2Rope
b2Rope	include/Box2D/Rope/b2Rope.h	/^class b2Rope$/;"	c
b2RopeDef	include/Box2D/Rope/b2Rope.h	/^	b2RopeDef()$/;"	f	struct:b2RopeDef
b2RopeDef	include/Box2D/Rope/b2Rope.h	/^struct b2RopeDef$/;"	s
count	include/Box2D/Rope/b2Rope.h	/^	int32 count;$/;"	m	struct:b2RopeDef
damping	include/Box2D/Rope/b2Rope.h	/^	float32 damping;$/;"	m	struct:b2RopeDef
gravity	include/Box2D/Rope/b2Rope.h	/^	b2Vec2 gravity;$/;"	m	struct:b2RopeDef
k2	include/Box2D/Rope/b2Rope.h	/^	float32 k2;$/;"	m	struct:b2RopeDef
k3	include/Box2D/Rope/b2Rope.h	/^	float32 k3;$/;"	m	struct:b2RopeDef
m_Ls	include/Box2D/Rope/b2Rope.h	/^	float32* m_Ls;$/;"	m	class:b2Rope
m_as	include/Box2D/Rope/b2Rope.h	/^	float32* m_as;$/;"	m	class:b2Rope
m_count	include/Box2D/Rope/b2Rope.h	/^	int32 m_count;$/;"	m	class:b2Rope
m_damping	include/Box2D/Rope/b2Rope.h	/^	float32 m_damping;$/;"	m	class:b2Rope
m_gravity	include/Box2D/Rope/b2Rope.h	/^	b2Vec2 m_gravity;$/;"	m	class:b2Rope
m_ims	include/Box2D/Rope/b2Rope.h	/^	float32* m_ims;$/;"	m	class:b2Rope
m_k2	include/Box2D/Rope/b2Rope.h	/^	float32 m_k2;$/;"	m	class:b2Rope
m_k3	include/Box2D/Rope/b2Rope.h	/^	float32 m_k3;$/;"	m	class:b2Rope
m_p0s	include/Box2D/Rope/b2Rope.h	/^	b2Vec2* m_p0s;$/;"	m	class:b2Rope
m_ps	include/Box2D/Rope/b2Rope.h	/^	b2Vec2* m_ps;$/;"	m	class:b2Rope
m_vs	include/Box2D/Rope/b2Rope.h	/^	b2Vec2* m_vs;$/;"	m	class:b2Rope
masses	include/Box2D/Rope/b2Rope.h	/^	float32* masses;$/;"	m	struct:b2RopeDef
vertices	include/Box2D/Rope/b2Rope.h	/^	b2Vec2* vertices;$/;"	m	struct:b2RopeDef
SFML_AUDIO_HPP	include/SFML/Audio.hpp	26;"	d
SFML_AUDIO_API	include/SFML/Audio/Export.hpp	39;"	d
SFML_AUDIO_API	include/SFML/Audio/Export.hpp	43;"	d
SFML_AUDIO_EXPORT_HPP	include/SFML/Audio/Export.hpp	26;"	d
Listener	include/SFML/Audio/Listener.hpp	/^class SFML_AUDIO_API Listener$/;"	c	namespace:sf
SFML_LISTENER_HPP	include/SFML/Audio/Listener.hpp	26;"	d
sf	include/SFML/Audio/Listener.hpp	/^namespace sf$/;"	n
Music	include/SFML/Audio/Music.hpp	/^class SFML_AUDIO_API Music : public SoundStream$/;"	c	namespace:sf
SFML_MUSIC_HPP	include/SFML/Audio/Music.hpp	26;"	d
m_duration	include/SFML/Audio/Music.hpp	/^    Time               m_duration; \/\/\/< Music duration$/;"	m	class:sf::Music
m_file	include/SFML/Audio/Music.hpp	/^    priv::SoundFile*   m_file;     \/\/\/< Sound file$/;"	m	class:sf::Music
m_mutex	include/SFML/Audio/Music.hpp	/^    Mutex              m_mutex;    \/\/\/< Mutex protecting the data$/;"	m	class:sf::Music
m_samples	include/SFML/Audio/Music.hpp	/^    std::vector<Int16> m_samples;  \/\/\/< Temporary buffer of samples$/;"	m	class:sf::Music
priv	include/SFML/Audio/Music.hpp	/^namespace priv$/;"	n	namespace:sf
sf	include/SFML/Audio/Music.hpp	/^namespace sf$/;"	n
SFML_SOUND_HPP	include/SFML/Audio/Sound.hpp	26;"	d
Sound	include/SFML/Audio/Sound.hpp	/^class SFML_AUDIO_API Sound : public SoundSource$/;"	c	namespace:sf
m_buffer	include/SFML/Audio/Sound.hpp	/^    const SoundBuffer* m_buffer; \/\/\/< Sound buffer bound to the source$/;"	m	class:sf::Sound
sf	include/SFML/Audio/Sound.hpp	/^namespace sf$/;"	n
SFML_SOUNDBUFFER_HPP	include/SFML/Audio/SoundBuffer.hpp	26;"	d
SoundBuffer	include/SFML/Audio/SoundBuffer.hpp	/^class SFML_AUDIO_API SoundBuffer$/;"	c	namespace:sf
SoundList	include/SFML/Audio/SoundBuffer.hpp	/^    typedef std::set<Sound*> SoundList; \/\/\/< Set of unique sound instances$/;"	t	class:sf::SoundBuffer
m_buffer	include/SFML/Audio/SoundBuffer.hpp	/^    unsigned int       m_buffer;   \/\/\/< OpenAL buffer identifier$/;"	m	class:sf::SoundBuffer
m_duration	include/SFML/Audio/SoundBuffer.hpp	/^    Time               m_duration; \/\/\/< Sound duration$/;"	m	class:sf::SoundBuffer
m_samples	include/SFML/Audio/SoundBuffer.hpp	/^    std::vector<Int16> m_samples;  \/\/\/< Samples buffer$/;"	m	class:sf::SoundBuffer
m_sounds	include/SFML/Audio/SoundBuffer.hpp	/^    mutable SoundList  m_sounds;   \/\/\/< List of sounds that are using this buffer$/;"	m	class:sf::SoundBuffer
priv	include/SFML/Audio/SoundBuffer.hpp	/^namespace priv$/;"	n	namespace:sf
sf	include/SFML/Audio/SoundBuffer.hpp	/^namespace sf$/;"	n
SFML_SOUNDBUFFERRECORDER_HPP	include/SFML/Audio/SoundBufferRecorder.hpp	26;"	d
SoundBufferRecorder	include/SFML/Audio/SoundBufferRecorder.hpp	/^class SFML_AUDIO_API SoundBufferRecorder : public SoundRecorder$/;"	c	namespace:sf
m_buffer	include/SFML/Audio/SoundBufferRecorder.hpp	/^    SoundBuffer        m_buffer;  \/\/\/< Sound buffer that will contain the recorded data$/;"	m	class:sf::SoundBufferRecorder
m_samples	include/SFML/Audio/SoundBufferRecorder.hpp	/^    std::vector<Int16> m_samples; \/\/\/< Temporary sample buffer to hold the recorded data$/;"	m	class:sf::SoundBufferRecorder
sf	include/SFML/Audio/SoundBufferRecorder.hpp	/^namespace sf$/;"	n
SFML_SOUNDRECORDER_HPP	include/SFML/Audio/SoundRecorder.hpp	26;"	d
SoundRecorder	include/SFML/Audio/SoundRecorder.hpp	/^class SFML_AUDIO_API SoundRecorder$/;"	c	namespace:sf
m_isCapturing	include/SFML/Audio/SoundRecorder.hpp	/^    bool               m_isCapturing; \/\/\/< Capturing state$/;"	m	class:sf::SoundRecorder
m_sampleRate	include/SFML/Audio/SoundRecorder.hpp	/^    unsigned int       m_sampleRate;  \/\/\/< Sample rate$/;"	m	class:sf::SoundRecorder
m_samples	include/SFML/Audio/SoundRecorder.hpp	/^    std::vector<Int16> m_samples;     \/\/\/< Buffer to store captured samples$/;"	m	class:sf::SoundRecorder
m_thread	include/SFML/Audio/SoundRecorder.hpp	/^    Thread             m_thread;      \/\/\/< Thread running the background recording task$/;"	m	class:sf::SoundRecorder
sf	include/SFML/Audio/SoundRecorder.hpp	/^namespace sf$/;"	n
Paused	include/SFML/Audio/SoundSource.hpp	/^        Paused,  \/\/\/< Sound is paused$/;"	e	enum:sf::SoundSource::Status
Playing	include/SFML/Audio/SoundSource.hpp	/^        Playing  \/\/\/< Sound is playing$/;"	e	enum:sf::SoundSource::Status
SFML_SOUNDSOURCE_HPP	include/SFML/Audio/SoundSource.hpp	26;"	d
SoundSource	include/SFML/Audio/SoundSource.hpp	/^class SFML_AUDIO_API SoundSource$/;"	c	namespace:sf
Status	include/SFML/Audio/SoundSource.hpp	/^    enum Status$/;"	g	class:sf::SoundSource
Stopped	include/SFML/Audio/SoundSource.hpp	/^        Stopped, \/\/\/< Sound is not playing$/;"	e	enum:sf::SoundSource::Status
m_source	include/SFML/Audio/SoundSource.hpp	/^    unsigned int m_source; \/\/\/< OpenAL source identifier$/;"	m	class:sf::SoundSource
sf	include/SFML/Audio/SoundSource.hpp	/^namespace sf$/;"	n
BufferCount	include/SFML/Audio/SoundStream.hpp	/^        BufferCount = 3 \/\/\/< Number of audio buffers used by the streaming loop$/;"	e	enum:sf::SoundStream::__anon14
Chunk	include/SFML/Audio/SoundStream.hpp	/^    struct Chunk$/;"	s	class:sf::SoundStream
SFML_SOUNDSTREAM_HPP	include/SFML/Audio/SoundStream.hpp	26;"	d
SoundStream	include/SFML/Audio/SoundStream.hpp	/^class SFML_AUDIO_API SoundStream : public SoundSource$/;"	c	namespace:sf
m_buffers	include/SFML/Audio/SoundStream.hpp	/^    unsigned int  m_buffers[BufferCount];    \/\/\/< Sound buffers used to store temporary audio data$/;"	m	class:sf::SoundStream
m_channelCount	include/SFML/Audio/SoundStream.hpp	/^    unsigned int  m_channelCount;            \/\/\/< Number of channels (1 = mono, 2 = stereo, ...)$/;"	m	class:sf::SoundStream
m_endBuffers	include/SFML/Audio/SoundStream.hpp	/^    bool          m_endBuffers[BufferCount]; \/\/\/< Each buffer is marked as "end buffer" or not, for proper duration calculation$/;"	m	class:sf::SoundStream
m_format	include/SFML/Audio/SoundStream.hpp	/^    Uint32        m_format;                  \/\/\/< Format of the internal sound buffers$/;"	m	class:sf::SoundStream
m_isStreaming	include/SFML/Audio/SoundStream.hpp	/^    bool          m_isStreaming;             \/\/\/< Streaming state (true = playing, false = stopped)$/;"	m	class:sf::SoundStream
m_loop	include/SFML/Audio/SoundStream.hpp	/^    bool          m_loop;                    \/\/\/< Loop flag (true to loop, false to play once)$/;"	m	class:sf::SoundStream
m_sampleRate	include/SFML/Audio/SoundStream.hpp	/^    unsigned int  m_sampleRate;              \/\/\/< Frequency (samples \/ second)$/;"	m	class:sf::SoundStream
m_samplesProcessed	include/SFML/Audio/SoundStream.hpp	/^    Uint64        m_samplesProcessed;        \/\/\/< Number of buffers processed since beginning of the stream$/;"	m	class:sf::SoundStream
m_thread	include/SFML/Audio/SoundStream.hpp	/^    Thread        m_thread;                  \/\/\/< Thread running the background tasks$/;"	m	class:sf::SoundStream
sampleCount	include/SFML/Audio/SoundStream.hpp	/^        std::size_t  sampleCount; \/\/\/< Number of samples pointed by Samples$/;"	m	struct:sf::SoundStream::Chunk
samples	include/SFML/Audio/SoundStream.hpp	/^        const Int16* samples;     \/\/\/< Pointer to the audio samples$/;"	m	struct:sf::SoundStream::Chunk
sf	include/SFML/Audio/SoundStream.hpp	/^namespace sf$/;"	n
Int16	include/SFML/Config.hpp	/^    typedef signed   short Int16;$/;"	t	namespace:sf
Int32	include/SFML/Config.hpp	/^    typedef signed   int Int32;$/;"	t	namespace:sf
Int64	include/SFML/Config.hpp	/^        typedef signed   __int64 Int64;$/;"	t	namespace:sf
Int64	include/SFML/Config.hpp	/^        typedef signed   long long Int64;$/;"	t	namespace:sf
Int8	include/SFML/Config.hpp	/^    typedef signed   char Int8;$/;"	t	namespace:sf
NOMINMAX	include/SFML/Config.hpp	44;"	d
SFML_API_EXPORT	include/SFML/Config.hpp	104;"	d
SFML_API_EXPORT	include/SFML/Config.hpp	110;"	d
SFML_API_EXPORT	include/SFML/Config.hpp	120;"	d
SFML_API_EXPORT	include/SFML/Config.hpp	88;"	d
SFML_API_IMPORT	include/SFML/Config.hpp	105;"	d
SFML_API_IMPORT	include/SFML/Config.hpp	111;"	d
SFML_API_IMPORT	include/SFML/Config.hpp	121;"	d
SFML_API_IMPORT	include/SFML/Config.hpp	89;"	d
SFML_CONFIG_HPP	include/SFML/Config.hpp	26;"	d
SFML_DEBUG	include/SFML/Config.hpp	75;"	d
SFML_SYSTEM_FREEBSD	include/SFML/Config.hpp	60;"	d
SFML_SYSTEM_LINUX	include/SFML/Config.hpp	50;"	d
SFML_SYSTEM_MACOS	include/SFML/Config.hpp	55;"	d
SFML_SYSTEM_WINDOWS	include/SFML/Config.hpp	42;"	d
SFML_VERSION_MAJOR	include/SFML/Config.hpp	32;"	d
SFML_VERSION_MINOR	include/SFML/Config.hpp	33;"	d
Uint16	include/SFML/Config.hpp	/^    typedef unsigned short Uint16;$/;"	t	namespace:sf
Uint32	include/SFML/Config.hpp	/^    typedef unsigned int Uint32;$/;"	t	namespace:sf
Uint64	include/SFML/Config.hpp	/^        typedef unsigned __int64 Uint64;$/;"	t	namespace:sf
Uint64	include/SFML/Config.hpp	/^        typedef unsigned long long Uint64;$/;"	t	namespace:sf
Uint8	include/SFML/Config.hpp	/^    typedef unsigned char Uint8;$/;"	t	namespace:sf
sf	include/SFML/Config.hpp	/^namespace sf$/;"	n
SFML_GRAPHICS_HPP	include/SFML/Graphics.hpp	26;"	d
BlendAdd	include/SFML/Graphics/BlendMode.hpp	/^    BlendAdd,      \/\/\/< Pixel = Source + Dest$/;"	e	enum:sf::BlendMode
BlendAlpha	include/SFML/Graphics/BlendMode.hpp	/^    BlendAlpha,    \/\/\/< Pixel = Source * Source.a + Dest * (1 - Source.a)$/;"	e	enum:sf::BlendMode
BlendMode	include/SFML/Graphics/BlendMode.hpp	/^enum BlendMode$/;"	g	namespace:sf
BlendMultiply	include/SFML/Graphics/BlendMode.hpp	/^    BlendMultiply, \/\/\/< Pixel = Source * Dest$/;"	e	enum:sf::BlendMode
BlendNone	include/SFML/Graphics/BlendMode.hpp	/^    BlendNone      \/\/\/< Pixel = Source$/;"	e	enum:sf::BlendMode
SFML_BLENDMODE_HPP	include/SFML/Graphics/BlendMode.hpp	26;"	d
sf	include/SFML/Graphics/BlendMode.hpp	/^namespace sf$/;"	n
CircleShape	include/SFML/Graphics/CircleShape.hpp	/^class SFML_GRAPHICS_API CircleShape : public Shape$/;"	c	namespace:sf
SFML_CIRCLESHAPE_HPP	include/SFML/Graphics/CircleShape.hpp	26;"	d
m_pointCount	include/SFML/Graphics/CircleShape.hpp	/^    unsigned int m_pointCount; \/\/\/< Number of points composing the circle$/;"	m	class:sf::CircleShape
m_radius	include/SFML/Graphics/CircleShape.hpp	/^    float        m_radius;     \/\/\/< Radius of the circle$/;"	m	class:sf::CircleShape
sf	include/SFML/Graphics/CircleShape.hpp	/^namespace sf$/;"	n
Black	include/SFML/Graphics/Color.hpp	/^    static const Color Black;       \/\/\/< Black predefined color$/;"	m	class:sf::Color
Blue	include/SFML/Graphics/Color.hpp	/^    static const Color Blue;        \/\/\/< Blue predefined color$/;"	m	class:sf::Color
Color	include/SFML/Graphics/Color.hpp	/^class SFML_GRAPHICS_API Color$/;"	c	namespace:sf
Cyan	include/SFML/Graphics/Color.hpp	/^    static const Color Cyan;        \/\/\/< Cyan predefined color$/;"	m	class:sf::Color
Green	include/SFML/Graphics/Color.hpp	/^    static const Color Green;       \/\/\/< Green predefined color$/;"	m	class:sf::Color
Magenta	include/SFML/Graphics/Color.hpp	/^    static const Color Magenta;     \/\/\/< Magenta predefined color$/;"	m	class:sf::Color
Red	include/SFML/Graphics/Color.hpp	/^    static const Color Red;         \/\/\/< Red predefined color$/;"	m	class:sf::Color
SFML_COLOR_HPP	include/SFML/Graphics/Color.hpp	26;"	d
Transparent	include/SFML/Graphics/Color.hpp	/^    static const Color Transparent; \/\/\/< Transparent (black) predefined color$/;"	m	class:sf::Color
White	include/SFML/Graphics/Color.hpp	/^    static const Color White;       \/\/\/< White predefined color$/;"	m	class:sf::Color
Yellow	include/SFML/Graphics/Color.hpp	/^    static const Color Yellow;      \/\/\/< Yellow predefined color$/;"	m	class:sf::Color
a	include/SFML/Graphics/Color.hpp	/^    Uint8 a; \/\/\/< Alpha (opacity) component$/;"	m	class:sf::Color
b	include/SFML/Graphics/Color.hpp	/^    Uint8 b; \/\/\/< Blue component$/;"	m	class:sf::Color
g	include/SFML/Graphics/Color.hpp	/^    Uint8 g; \/\/\/< Green component$/;"	m	class:sf::Color
r	include/SFML/Graphics/Color.hpp	/^    Uint8 r; \/\/\/< Red component$/;"	m	class:sf::Color
sf	include/SFML/Graphics/Color.hpp	/^namespace sf$/;"	n
ConvexShape	include/SFML/Graphics/ConvexShape.hpp	/^class SFML_GRAPHICS_API ConvexShape : public Shape$/;"	c	namespace:sf
SFML_CONVEXSHAPE_HPP	include/SFML/Graphics/ConvexShape.hpp	26;"	d
m_points	include/SFML/Graphics/ConvexShape.hpp	/^    std::vector<Vector2f> m_points; \/\/\/< Points composing the convex polygon$/;"	m	class:sf::ConvexShape
sf	include/SFML/Graphics/ConvexShape.hpp	/^namespace sf$/;"	n
Drawable	include/SFML/Graphics/Drawable.hpp	/^class SFML_GRAPHICS_API Drawable$/;"	c	namespace:sf
SFML_DRAWABLE_HPP	include/SFML/Graphics/Drawable.hpp	26;"	d
sf	include/SFML/Graphics/Drawable.hpp	/^namespace sf$/;"	n
~Drawable	include/SFML/Graphics/Drawable.hpp	/^    virtual ~Drawable() {}$/;"	f	class:sf::Drawable
SFML_GRAPHICS_API	include/SFML/Graphics/Export.hpp	39;"	d
SFML_GRAPHICS_API	include/SFML/Graphics/Export.hpp	43;"	d
SFML_GRAPHICS_EXPORT_HPP	include/SFML/Graphics/Export.hpp	26;"	d
Font	include/SFML/Graphics/Font.hpp	/^class SFML_GRAPHICS_API Font$/;"	c	namespace:sf
GlyphTable	include/SFML/Graphics/Font.hpp	/^    typedef std::map<Uint32, Glyph> GlyphTable; \/\/\/< Table mapping a codepoint to its glyph$/;"	t	class:sf::Font
Page	include/SFML/Graphics/Font.hpp	/^    struct Page$/;"	s	class:sf::Font
PageTable	include/SFML/Graphics/Font.hpp	/^    typedef std::map<unsigned int, Page> PageTable; \/\/\/< Table mapping a character size to its page (texture)$/;"	t	class:sf::Font
Row	include/SFML/Graphics/Font.hpp	/^        Row(unsigned int rowTop, unsigned int rowHeight) : width(0), top(rowTop), height(rowHeight) {}$/;"	f	struct:sf::Font::Row
Row	include/SFML/Graphics/Font.hpp	/^    struct Row$/;"	s	class:sf::Font
SFML_FONT_HPP	include/SFML/Graphics/Font.hpp	26;"	d
glyphs	include/SFML/Graphics/Font.hpp	/^        GlyphTable       glyphs;  \/\/\/< Table mapping code points to their corresponding glyph$/;"	m	struct:sf::Font::Page
height	include/SFML/Graphics/Font.hpp	/^        unsigned int height; \/\/\/< Height of the row$/;"	m	struct:sf::Font::Row
m_face	include/SFML/Graphics/Font.hpp	/^    void*                      m_face;        \/\/\/< Pointer to the internal font face (it is typeless to avoid exposing implementation details)$/;"	m	class:sf::Font
m_library	include/SFML/Graphics/Font.hpp	/^    void*                      m_library;     \/\/\/< Pointer to the internal library interface (it is typeless to avoid exposing implementation details)$/;"	m	class:sf::Font
m_pages	include/SFML/Graphics/Font.hpp	/^    mutable PageTable          m_pages;       \/\/\/< Table containing the glyphs pages by character size$/;"	m	class:sf::Font
m_pixelBuffer	include/SFML/Graphics/Font.hpp	/^    mutable std::vector<Uint8> m_pixelBuffer; \/\/\/< Pixel buffer holding a glyph's pixels before being written to the texture$/;"	m	class:sf::Font
m_refCount	include/SFML/Graphics/Font.hpp	/^    int*                       m_refCount;    \/\/\/< Reference counter used by implicit sharing$/;"	m	class:sf::Font
m_streamRec	include/SFML/Graphics/Font.hpp	/^    void*                      m_streamRec;   \/\/\/< Pointer to the stream rec instance (it is typeless to avoid exposing implementation details)$/;"	m	class:sf::Font
nextRow	include/SFML/Graphics/Font.hpp	/^        unsigned int     nextRow; \/\/\/< Y position of the next new row in the texture$/;"	m	struct:sf::Font::Page
rows	include/SFML/Graphics/Font.hpp	/^        std::vector<Row> rows;    \/\/\/< List containing the position of all the existing rows$/;"	m	struct:sf::Font::Page
sf	include/SFML/Graphics/Font.hpp	/^namespace sf$/;"	n
texture	include/SFML/Graphics/Font.hpp	/^        sf::Texture      texture; \/\/\/< Texture containing the pixels of the glyphs$/;"	m	struct:sf::Font::Page
top	include/SFML/Graphics/Font.hpp	/^        unsigned int top;    \/\/\/< Y position of the row into the texture$/;"	m	struct:sf::Font::Row
width	include/SFML/Graphics/Font.hpp	/^        unsigned int width;  \/\/\/< Current width of the row$/;"	m	struct:sf::Font::Row
Glyph	include/SFML/Graphics/Glyph.hpp	/^    Glyph() : advance(0) {}$/;"	f	class:sf::Glyph
Glyph	include/SFML/Graphics/Glyph.hpp	/^class SFML_GRAPHICS_API Glyph$/;"	c	namespace:sf
SFML_GLYPH_HPP	include/SFML/Graphics/Glyph.hpp	26;"	d
advance	include/SFML/Graphics/Glyph.hpp	/^    int     advance;     \/\/\/< Offset to move horizontically to the next character$/;"	m	class:sf::Glyph
bounds	include/SFML/Graphics/Glyph.hpp	/^    IntRect bounds;      \/\/\/< Bounding rectangle of the glyph, in coordinates relative to the baseline$/;"	m	class:sf::Glyph
sf	include/SFML/Graphics/Glyph.hpp	/^namespace sf$/;"	n
textureRect	include/SFML/Graphics/Glyph.hpp	/^    IntRect textureRect; \/\/\/< Texture coordinates of the glyph inside the font's texture$/;"	m	class:sf::Glyph
Image	include/SFML/Graphics/Image.hpp	/^class SFML_GRAPHICS_API Image$/;"	c	namespace:sf
SFML_IMAGE_HPP	include/SFML/Graphics/Image.hpp	26;"	d
m_pixels	include/SFML/Graphics/Image.hpp	/^    std::vector<Uint8> m_pixels; \/\/\/< Pixels of the image$/;"	m	class:sf::Image
m_size	include/SFML/Graphics/Image.hpp	/^    Vector2u           m_size;   \/\/\/< Image size$/;"	m	class:sf::Image
sf	include/SFML/Graphics/Image.hpp	/^namespace sf$/;"	n
Lines	include/SFML/Graphics/PrimitiveType.hpp	/^    Lines,          \/\/\/< List of individual lines$/;"	e	enum:sf::PrimitiveType
LinesStrip	include/SFML/Graphics/PrimitiveType.hpp	/^    LinesStrip,     \/\/\/< List of connected lines, a point uses the previous point to form a line$/;"	e	enum:sf::PrimitiveType
Points	include/SFML/Graphics/PrimitiveType.hpp	/^    Points,         \/\/\/< List of individual points$/;"	e	enum:sf::PrimitiveType
PrimitiveType	include/SFML/Graphics/PrimitiveType.hpp	/^enum PrimitiveType$/;"	g	namespace:sf
Quads	include/SFML/Graphics/PrimitiveType.hpp	/^    Quads           \/\/\/< List of individual quads$/;"	e	enum:sf::PrimitiveType
SFML_PRIMITIVETYPE_HPP	include/SFML/Graphics/PrimitiveType.hpp	26;"	d
Triangles	include/SFML/Graphics/PrimitiveType.hpp	/^    Triangles,      \/\/\/< List of individual triangles$/;"	e	enum:sf::PrimitiveType
TrianglesFan	include/SFML/Graphics/PrimitiveType.hpp	/^    TrianglesFan,   \/\/\/< List of connected triangles, a point uses the common center and the previous point to form a triangle$/;"	e	enum:sf::PrimitiveType
TrianglesStrip	include/SFML/Graphics/PrimitiveType.hpp	/^    TrianglesStrip, \/\/\/< List of connected triangles, a point uses the two previous points to form a triangle$/;"	e	enum:sf::PrimitiveType
sf	include/SFML/Graphics/PrimitiveType.hpp	/^namespace sf$/;"	n
FloatRect	include/SFML/Graphics/Rect.hpp	/^typedef Rect<float> FloatRect;$/;"	t	namespace:sf
IntRect	include/SFML/Graphics/Rect.hpp	/^typedef Rect<int>   IntRect;$/;"	t	namespace:sf
Rect	include/SFML/Graphics/Rect.hpp	/^class Rect$/;"	c	namespace:sf
SFML_RECT_HPP	include/SFML/Graphics/Rect.hpp	26;"	d
height	include/SFML/Graphics/Rect.hpp	/^    T height; \/\/\/< Height of the rectangle$/;"	m	class:sf::Rect
left	include/SFML/Graphics/Rect.hpp	/^    T left;   \/\/\/< Left coordinate of the rectangle$/;"	m	class:sf::Rect
sf	include/SFML/Graphics/Rect.hpp	/^namespace sf$/;"	n
top	include/SFML/Graphics/Rect.hpp	/^    T top;    \/\/\/< Top coordinate of the rectangle$/;"	m	class:sf::Rect
width	include/SFML/Graphics/Rect.hpp	/^    T width;  \/\/\/< Width of the rectangle$/;"	m	class:sf::Rect
RectangleShape	include/SFML/Graphics/RectangleShape.hpp	/^class SFML_GRAPHICS_API RectangleShape : public Shape$/;"	c	namespace:sf
SFML_RECTANGLESHAPE_HPP	include/SFML/Graphics/RectangleShape.hpp	26;"	d
m_size	include/SFML/Graphics/RectangleShape.hpp	/^    Vector2f m_size; \/\/\/< Size of the rectangle$/;"	m	class:sf::RectangleShape
sf	include/SFML/Graphics/RectangleShape.hpp	/^namespace sf$/;"	n
Default	include/SFML/Graphics/RenderStates.hpp	/^    static const RenderStates Default; \/\/\/< Special instance holding the default render states$/;"	m	class:sf::RenderStates
RenderStates	include/SFML/Graphics/RenderStates.hpp	/^class SFML_GRAPHICS_API RenderStates$/;"	c	namespace:sf
SFML_RENDERSTATES_HPP	include/SFML/Graphics/RenderStates.hpp	26;"	d
blendMode	include/SFML/Graphics/RenderStates.hpp	/^    BlendMode      blendMode; \/\/\/< Blending mode$/;"	m	class:sf::RenderStates
sf	include/SFML/Graphics/RenderStates.hpp	/^namespace sf$/;"	n
shader	include/SFML/Graphics/RenderStates.hpp	/^    const Shader*  shader;    \/\/\/< Shader$/;"	m	class:sf::RenderStates
texture	include/SFML/Graphics/RenderStates.hpp	/^    const Texture* texture;   \/\/\/< Texture$/;"	m	class:sf::RenderStates
transform	include/SFML/Graphics/RenderStates.hpp	/^    Transform      transform; \/\/\/< Transform$/;"	m	class:sf::RenderStates
RenderTarget	include/SFML/Graphics/RenderTarget.hpp	/^class SFML_GRAPHICS_API RenderTarget : NonCopyable$/;"	c	namespace:sf
SFML_RENDERTARGET_HPP	include/SFML/Graphics/RenderTarget.hpp	26;"	d
StatesCache	include/SFML/Graphics/RenderTarget.hpp	/^    struct StatesCache$/;"	s	class:sf::RenderTarget
VertexCacheSize	include/SFML/Graphics/RenderTarget.hpp	/^        enum {VertexCacheSize = 4};$/;"	e	enum:sf::RenderTarget::StatesCache::__anon8
glStatesSet	include/SFML/Graphics/RenderTarget.hpp	/^        bool      glStatesSet;    \/\/\/< Are our internal GL states set yet?$/;"	m	struct:sf::RenderTarget::StatesCache
lastBlendMode	include/SFML/Graphics/RenderTarget.hpp	/^        BlendMode lastBlendMode;  \/\/\/< Cached blending mode$/;"	m	struct:sf::RenderTarget::StatesCache
lastTextureId	include/SFML/Graphics/RenderTarget.hpp	/^        Uint64    lastTextureId;  \/\/\/< Cached texture$/;"	m	struct:sf::RenderTarget::StatesCache
m_cache	include/SFML/Graphics/RenderTarget.hpp	/^    StatesCache m_cache;       \/\/\/< Render states cache$/;"	m	class:sf::RenderTarget
m_defaultView	include/SFML/Graphics/RenderTarget.hpp	/^    View        m_defaultView; \/\/\/< Default view$/;"	m	class:sf::RenderTarget
m_view	include/SFML/Graphics/RenderTarget.hpp	/^    View        m_view;        \/\/\/< Current view$/;"	m	class:sf::RenderTarget
sf	include/SFML/Graphics/RenderTarget.hpp	/^namespace sf$/;"	n
useVertexCache	include/SFML/Graphics/RenderTarget.hpp	/^        bool      useVertexCache; \/\/\/< Did we previously use the vertex cache?$/;"	m	struct:sf::RenderTarget::StatesCache
vertexCache	include/SFML/Graphics/RenderTarget.hpp	/^        Vertex    vertexCache[VertexCacheSize]; \/\/\/< Pre-transformed vertices cache$/;"	m	struct:sf::RenderTarget::StatesCache
viewChanged	include/SFML/Graphics/RenderTarget.hpp	/^        bool      viewChanged;    \/\/\/< Has the current view changed since last draw?$/;"	m	struct:sf::RenderTarget::StatesCache
RenderTexture	include/SFML/Graphics/RenderTexture.hpp	/^class SFML_GRAPHICS_API RenderTexture : public RenderTarget$/;"	c	namespace:sf
SFML_RENDERTEXTURE_HPP	include/SFML/Graphics/RenderTexture.hpp	26;"	d
m_impl	include/SFML/Graphics/RenderTexture.hpp	/^    priv::RenderTextureImpl* m_impl;    \/\/\/< Platform\/hardware specific implementation$/;"	m	class:sf::RenderTexture
m_texture	include/SFML/Graphics/RenderTexture.hpp	/^    Texture                  m_texture; \/\/\/< Target texture to draw on$/;"	m	class:sf::RenderTexture
priv	include/SFML/Graphics/RenderTexture.hpp	/^namespace priv$/;"	n	namespace:sf
sf	include/SFML/Graphics/RenderTexture.hpp	/^namespace sf$/;"	n
RenderWindow	include/SFML/Graphics/RenderWindow.hpp	/^class SFML_GRAPHICS_API RenderWindow : public Window, public RenderTarget$/;"	c	namespace:sf
SFML_RENDERWINDOW_HPP	include/SFML/Graphics/RenderWindow.hpp	26;"	d
sf	include/SFML/Graphics/RenderWindow.hpp	/^namespace sf$/;"	n
CurrentTexture	include/SFML/Graphics/Shader.hpp	/^    static CurrentTextureType CurrentTexture;$/;"	m	class:sf::Shader
CurrentTextureType	include/SFML/Graphics/Shader.hpp	/^    struct CurrentTextureType {};$/;"	s	class:sf::Shader
Fragment	include/SFML/Graphics/Shader.hpp	/^        Fragment \/\/\/< Fragment (pixel) shader$/;"	e	enum:sf::Shader::Type
ParamTable	include/SFML/Graphics/Shader.hpp	/^    typedef std::map<std::string, int> ParamTable;$/;"	t	class:sf::Shader
SFML_SHADER_HPP	include/SFML/Graphics/Shader.hpp	26;"	d
Shader	include/SFML/Graphics/Shader.hpp	/^class SFML_GRAPHICS_API Shader : GlResource, NonCopyable$/;"	c	namespace:sf
TextureTable	include/SFML/Graphics/Shader.hpp	/^    typedef std::map<int, const Texture*> TextureTable;$/;"	t	class:sf::Shader
Type	include/SFML/Graphics/Shader.hpp	/^    enum Type$/;"	g	class:sf::Shader
Vertex	include/SFML/Graphics/Shader.hpp	/^        Vertex,  \/\/\/< Vertex shader$/;"	e	enum:sf::Shader::Type
m_currentTexture	include/SFML/Graphics/Shader.hpp	/^    int          m_currentTexture; \/\/\/< Location of the current texture in the shader$/;"	m	class:sf::Shader
m_params	include/SFML/Graphics/Shader.hpp	/^    ParamTable   m_params;         \/\/\/< Parameters location cache$/;"	m	class:sf::Shader
m_shaderProgram	include/SFML/Graphics/Shader.hpp	/^    unsigned int m_shaderProgram;  \/\/\/< OpenGL identifier for the program$/;"	m	class:sf::Shader
m_textures	include/SFML/Graphics/Shader.hpp	/^    TextureTable m_textures;       \/\/\/< Texture variables in the shader, mapped to their location$/;"	m	class:sf::Shader
sf	include/SFML/Graphics/Shader.hpp	/^namespace sf$/;"	n
SFML_SHAPE_HPP	include/SFML/Graphics/Shape.hpp	26;"	d
Shape	include/SFML/Graphics/Shape.hpp	/^class SFML_GRAPHICS_API Shape : public Drawable, public Transformable$/;"	c	namespace:sf
m_bounds	include/SFML/Graphics/Shape.hpp	/^    FloatRect      m_bounds;           \/\/\/< Bounding rectangle of the whole shape (outline + fill)$/;"	m	class:sf::Shape
m_fillColor	include/SFML/Graphics/Shape.hpp	/^    Color          m_fillColor;        \/\/\/< Fill color$/;"	m	class:sf::Shape
m_insideBounds	include/SFML/Graphics/Shape.hpp	/^    FloatRect      m_insideBounds;     \/\/\/< Bounding rectangle of the inside (fill)$/;"	m	class:sf::Shape
m_outlineColor	include/SFML/Graphics/Shape.hpp	/^    Color          m_outlineColor;     \/\/\/< Outline color$/;"	m	class:sf::Shape
m_outlineThickness	include/SFML/Graphics/Shape.hpp	/^    float          m_outlineThickness; \/\/\/< Thickness of the shape's outline$/;"	m	class:sf::Shape
m_outlineVertices	include/SFML/Graphics/Shape.hpp	/^    VertexArray    m_outlineVertices;  \/\/\/< Vertex array containing the outline geometry$/;"	m	class:sf::Shape
m_texture	include/SFML/Graphics/Shape.hpp	/^    const Texture* m_texture;          \/\/\/< Texture of the shape$/;"	m	class:sf::Shape
m_textureRect	include/SFML/Graphics/Shape.hpp	/^    IntRect        m_textureRect;      \/\/\/< Rectangle defining the area of the source texture to display$/;"	m	class:sf::Shape
m_vertices	include/SFML/Graphics/Shape.hpp	/^    VertexArray    m_vertices;         \/\/\/< Vertex array containing the fill geometry$/;"	m	class:sf::Shape
sf	include/SFML/Graphics/Shape.hpp	/^namespace sf$/;"	n
SFML_SPRITE_HPP	include/SFML/Graphics/Sprite.hpp	26;"	d
Sprite	include/SFML/Graphics/Sprite.hpp	/^class SFML_GRAPHICS_API Sprite : public Drawable, public Transformable$/;"	c	namespace:sf
m_texture	include/SFML/Graphics/Sprite.hpp	/^    const Texture* m_texture;     \/\/\/< Texture of the sprite$/;"	m	class:sf::Sprite
m_textureRect	include/SFML/Graphics/Sprite.hpp	/^    IntRect        m_textureRect; \/\/\/< Rectangle defining the area of the source texture to display$/;"	m	class:sf::Sprite
m_vertices	include/SFML/Graphics/Sprite.hpp	/^    Vertex         m_vertices[4]; \/\/\/< Vertices defining the sprite's geometry$/;"	m	class:sf::Sprite
sf	include/SFML/Graphics/Sprite.hpp	/^namespace sf$/;"	n
Bold	include/SFML/Graphics/Text.hpp	/^        Bold       = 1 << 0, \/\/\/< Bold characters$/;"	e	enum:sf::Text::Style
Italic	include/SFML/Graphics/Text.hpp	/^        Italic     = 1 << 1, \/\/\/< Italic characters$/;"	e	enum:sf::Text::Style
Regular	include/SFML/Graphics/Text.hpp	/^        Regular    = 0,      \/\/\/< Regular characters, no style$/;"	e	enum:sf::Text::Style
SFML_TEXT_HPP	include/SFML/Graphics/Text.hpp	26;"	d
Style	include/SFML/Graphics/Text.hpp	/^    enum Style$/;"	g	class:sf::Text
Text	include/SFML/Graphics/Text.hpp	/^class SFML_GRAPHICS_API Text : public Drawable, public Transformable$/;"	c	namespace:sf
Underlined	include/SFML/Graphics/Text.hpp	/^        Underlined = 1 << 2  \/\/\/< Underlined characters$/;"	e	enum:sf::Text::Style
m_bounds	include/SFML/Graphics/Text.hpp	/^    FloatRect     m_bounds;        \/\/\/< Bounding rectangle of the text (in local coordinates)$/;"	m	class:sf::Text
m_characterSize	include/SFML/Graphics/Text.hpp	/^    unsigned int  m_characterSize; \/\/\/< Base size of characters, in pixels$/;"	m	class:sf::Text
m_color	include/SFML/Graphics/Text.hpp	/^    Color         m_color;         \/\/\/< Text color$/;"	m	class:sf::Text
m_font	include/SFML/Graphics/Text.hpp	/^    const Font*   m_font;          \/\/\/< Font used to display the string$/;"	m	class:sf::Text
m_string	include/SFML/Graphics/Text.hpp	/^    String        m_string;        \/\/\/< String to display$/;"	m	class:sf::Text
m_style	include/SFML/Graphics/Text.hpp	/^    Uint32        m_style;         \/\/\/< Text style (see Style enum)$/;"	m	class:sf::Text
m_vertices	include/SFML/Graphics/Text.hpp	/^    VertexArray   m_vertices;      \/\/\/< Vertex array containing the text's geometry$/;"	m	class:sf::Text
sf	include/SFML/Graphics/Text.hpp	/^namespace sf$/;"	n
CoordinateType	include/SFML/Graphics/Texture.hpp	/^    enum CoordinateType$/;"	g	class:sf::Texture
Normalized	include/SFML/Graphics/Texture.hpp	/^        Normalized, \/\/\/< Texture coordinates in range [0 .. 1]$/;"	e	enum:sf::Texture::CoordinateType
Pixels	include/SFML/Graphics/Texture.hpp	/^        Pixels      \/\/\/< Texture coordinates in range [0 .. size]$/;"	e	enum:sf::Texture::CoordinateType
SFML_TEXTURE_HPP	include/SFML/Graphics/Texture.hpp	26;"	d
Texture	include/SFML/Graphics/Texture.hpp	/^class SFML_GRAPHICS_API Texture : GlResource$/;"	c	namespace:sf
m_actualSize	include/SFML/Graphics/Texture.hpp	/^    Vector2u     m_actualSize;    \/\/\/< Actual texture size (can be greater than public size because of padding)$/;"	m	class:sf::Texture
m_cacheId	include/SFML/Graphics/Texture.hpp	/^    Uint64       m_cacheId;       \/\/\/< Unique number that identifies the texture to the render target's cache$/;"	m	class:sf::Texture
m_isRepeated	include/SFML/Graphics/Texture.hpp	/^    bool         m_isRepeated;    \/\/\/< Is the texture in repeat mode?$/;"	m	class:sf::Texture
m_isSmooth	include/SFML/Graphics/Texture.hpp	/^    bool         m_isSmooth;      \/\/\/< Status of the smooth filter$/;"	m	class:sf::Texture
m_pixelsFlipped	include/SFML/Graphics/Texture.hpp	/^    mutable bool m_pixelsFlipped; \/\/\/< To work around the inconsistency in Y orientation$/;"	m	class:sf::Texture
m_size	include/SFML/Graphics/Texture.hpp	/^    Vector2u     m_size;          \/\/\/< Public texture size$/;"	m	class:sf::Texture
m_texture	include/SFML/Graphics/Texture.hpp	/^    unsigned int m_texture;       \/\/\/< Internal texture identifier$/;"	m	class:sf::Texture
sf	include/SFML/Graphics/Texture.hpp	/^namespace sf$/;"	n
Identity	include/SFML/Graphics/Transform.hpp	/^    static const Transform Identity; \/\/\/< The identity transform (does nothing)$/;"	m	class:sf::Transform
SFML_TRANSFORM_HPP	include/SFML/Graphics/Transform.hpp	26;"	d
Transform	include/SFML/Graphics/Transform.hpp	/^class SFML_GRAPHICS_API Transform$/;"	c	namespace:sf
m_matrix	include/SFML/Graphics/Transform.hpp	/^    float m_matrix[16]; \/\/\/< 4x4 matrix defining the transformation$/;"	m	class:sf::Transform
sf	include/SFML/Graphics/Transform.hpp	/^namespace sf$/;"	n
SFML_TRANSFORMABLE_HPP	include/SFML/Graphics/Transformable.hpp	26;"	d
Transformable	include/SFML/Graphics/Transformable.hpp	/^class SFML_GRAPHICS_API Transformable$/;"	c	namespace:sf
m_inverseTransform	include/SFML/Graphics/Transformable.hpp	/^    mutable Transform m_inverseTransform;           \/\/\/< Combined transformation of the object$/;"	m	class:sf::Transformable
m_inverseTransformNeedUpdate	include/SFML/Graphics/Transformable.hpp	/^    mutable bool      m_inverseTransformNeedUpdate; \/\/\/< Does the transform need to be recomputed?$/;"	m	class:sf::Transformable
m_origin	include/SFML/Graphics/Transformable.hpp	/^    Vector2f          m_origin;                     \/\/\/< Origin of translation\/rotation\/scaling of the object$/;"	m	class:sf::Transformable
m_position	include/SFML/Graphics/Transformable.hpp	/^    Vector2f          m_position;                   \/\/\/< Position of the object in the 2D world$/;"	m	class:sf::Transformable
m_rotation	include/SFML/Graphics/Transformable.hpp	/^    float             m_rotation;                   \/\/\/< Orientation of the object, in degrees$/;"	m	class:sf::Transformable
m_scale	include/SFML/Graphics/Transformable.hpp	/^    Vector2f          m_scale;                      \/\/\/< Scale of the object$/;"	m	class:sf::Transformable
m_transform	include/SFML/Graphics/Transformable.hpp	/^    mutable Transform m_transform;                  \/\/\/< Combined transformation of the object$/;"	m	class:sf::Transformable
m_transformNeedUpdate	include/SFML/Graphics/Transformable.hpp	/^    mutable bool      m_transformNeedUpdate;        \/\/\/< Does the transform need to be recomputed?$/;"	m	class:sf::Transformable
sf	include/SFML/Graphics/Transformable.hpp	/^namespace sf$/;"	n
SFML_VERTEX_HPP	include/SFML/Graphics/Vertex.hpp	26;"	d
Vertex	include/SFML/Graphics/Vertex.hpp	/^class SFML_GRAPHICS_API Vertex$/;"	c	namespace:sf
color	include/SFML/Graphics/Vertex.hpp	/^    Color     color;     \/\/\/< Color of the vertex$/;"	m	class:sf::Vertex
position	include/SFML/Graphics/Vertex.hpp	/^    Vector2f  position;  \/\/\/< 2D position of the vertex$/;"	m	class:sf::Vertex
sf	include/SFML/Graphics/Vertex.hpp	/^namespace sf$/;"	n
texCoords	include/SFML/Graphics/Vertex.hpp	/^    Vector2f  texCoords; \/\/\/< Coordinates of the texture's pixel to map to the vertex$/;"	m	class:sf::Vertex
SFML_VERTEXARRAY_HPP	include/SFML/Graphics/VertexArray.hpp	26;"	d
VertexArray	include/SFML/Graphics/VertexArray.hpp	/^class SFML_GRAPHICS_API VertexArray : public Drawable$/;"	c	namespace:sf
m_primitiveType	include/SFML/Graphics/VertexArray.hpp	/^    PrimitiveType       m_primitiveType; \/\/\/< Type of primitives to draw$/;"	m	class:sf::VertexArray
m_vertices	include/SFML/Graphics/VertexArray.hpp	/^    std::vector<Vertex> m_vertices;      \/\/\/< Vertices contained in the array$/;"	m	class:sf::VertexArray
sf	include/SFML/Graphics/VertexArray.hpp	/^namespace sf$/;"	n
SFML_VIEW_HPP	include/SFML/Graphics/View.hpp	26;"	d
View	include/SFML/Graphics/View.hpp	/^class SFML_GRAPHICS_API View$/;"	c	namespace:sf
m_center	include/SFML/Graphics/View.hpp	/^    Vector2f          m_center;              \/\/\/< Center of the view, in scene coordinates$/;"	m	class:sf::View
m_invTransformUpdated	include/SFML/Graphics/View.hpp	/^    mutable bool      m_invTransformUpdated; \/\/\/< Internal state telling if the inverse transform needs to be updated$/;"	m	class:sf::View
m_inverseTransform	include/SFML/Graphics/View.hpp	/^    mutable Transform m_inverseTransform;    \/\/\/< Precomputed inverse projection transform corresponding to the view$/;"	m	class:sf::View
m_rotation	include/SFML/Graphics/View.hpp	/^    float             m_rotation;            \/\/\/< Angle of rotation of the view rectangle, in degrees$/;"	m	class:sf::View
m_size	include/SFML/Graphics/View.hpp	/^    Vector2f          m_size;                \/\/\/< Size of the view, in scene coordinates$/;"	m	class:sf::View
m_transform	include/SFML/Graphics/View.hpp	/^    mutable Transform m_transform;           \/\/\/< Precomputed projection transform corresponding to the view$/;"	m	class:sf::View
m_transformUpdated	include/SFML/Graphics/View.hpp	/^    mutable bool      m_transformUpdated;    \/\/\/< Internal state telling if the transform needs to be updated$/;"	m	class:sf::View
m_viewport	include/SFML/Graphics/View.hpp	/^    FloatRect         m_viewport;            \/\/\/< Viewport rectangle, expressed as a factor of the render-target's size$/;"	m	class:sf::View
sf	include/SFML/Graphics/View.hpp	/^namespace sf$/;"	n
SFML_NETWORK_HPP	include/SFML/Network.hpp	26;"	d
SFML_NETWORK_API	include/SFML/Network/Export.hpp	39;"	d
SFML_NETWORK_API	include/SFML/Network/Export.hpp	43;"	d
SFML_NETWORK_EXPORT_HPP	include/SFML/Network/Export.hpp	26;"	d
Ascii	include/SFML/Network/Ftp.hpp	/^        Ascii,  \/\/\/< Text mode using ASCII encoding$/;"	e	enum:sf::Ftp::TransferMode
BadCommandSequence	include/SFML/Network/Ftp.hpp	/^            BadCommandSequence      = 503, \/\/\/< Bad sequence of commands$/;"	e	enum:sf::Ftp::Response::Status
Binary	include/SFML/Network/Ftp.hpp	/^        Binary, \/\/\/< Binary mode (file is transfered as a sequence of bytes)$/;"	e	enum:sf::Ftp::TransferMode
ClosingConnection	include/SFML/Network/Ftp.hpp	/^            ClosingConnection     = 221, \/\/\/< Service closing control connection$/;"	e	enum:sf::Ftp::Response::Status
ClosingDataConnection	include/SFML/Network/Ftp.hpp	/^            ClosingDataConnection = 226, \/\/\/< Closing data connection, requested file action successful$/;"	e	enum:sf::Ftp::Response::Status
CommandNotImplemented	include/SFML/Network/Ftp.hpp	/^            CommandNotImplemented   = 502, \/\/\/< Command not implemented$/;"	e	enum:sf::Ftp::Response::Status
CommandUnknown	include/SFML/Network/Ftp.hpp	/^            CommandUnknown          = 500, \/\/\/< Syntax error, command unrecognized$/;"	e	enum:sf::Ftp::Response::Status
ConnectionClosed	include/SFML/Network/Ftp.hpp	/^            ConnectionClosed = 1002, \/\/\/< Connection with server closed$/;"	e	enum:sf::Ftp::Response::Status
ConnectionFailed	include/SFML/Network/Ftp.hpp	/^            ConnectionFailed = 1001, \/\/\/< Connection with server failed$/;"	e	enum:sf::Ftp::Response::Status
DataConnectionAlreadyOpened	include/SFML/Network/Ftp.hpp	/^            DataConnectionAlreadyOpened = 125, \/\/\/< Data connection already opened, transfer starting$/;"	e	enum:sf::Ftp::Response::Status
DataConnectionOpened	include/SFML/Network/Ftp.hpp	/^            DataConnectionOpened  = 225, \/\/\/< Data connection open, no transfer in progress$/;"	e	enum:sf::Ftp::Response::Status
DataConnectionUnavailable	include/SFML/Network/Ftp.hpp	/^            DataConnectionUnavailable = 425, \/\/\/< Can't open data connection$/;"	e	enum:sf::Ftp::Response::Status
DirectoryOk	include/SFML/Network/Ftp.hpp	/^            DirectoryOk           = 257, \/\/\/< PATHNAME created$/;"	e	enum:sf::Ftp::Response::Status
DirectoryResponse	include/SFML/Network/Ftp.hpp	/^    class SFML_NETWORK_API DirectoryResponse : public Response$/;"	c	class:sf::Ftp
DirectoryStatus	include/SFML/Network/Ftp.hpp	/^            DirectoryStatus       = 212, \/\/\/< Directory status$/;"	e	enum:sf::Ftp::Response::Status
Ebcdic	include/SFML/Network/Ftp.hpp	/^        Ebcdic  \/\/\/< Text mode using EBCDIC encoding$/;"	e	enum:sf::Ftp::TransferMode
EnteringPassiveMode	include/SFML/Network/Ftp.hpp	/^            EnteringPassiveMode   = 227, \/\/\/< Entering passive mode$/;"	e	enum:sf::Ftp::Response::Status
FileActionAborted	include/SFML/Network/Ftp.hpp	/^            FileActionAborted         = 450, \/\/\/< Requested file action not taken$/;"	e	enum:sf::Ftp::Response::Status
FileActionOk	include/SFML/Network/Ftp.hpp	/^            FileActionOk          = 250, \/\/\/< Requested file action ok$/;"	e	enum:sf::Ftp::Response::Status
FileStatus	include/SFML/Network/Ftp.hpp	/^            FileStatus            = 213, \/\/\/< File status$/;"	e	enum:sf::Ftp::Response::Status
FileUnavailable	include/SFML/Network/Ftp.hpp	/^            FileUnavailable         = 550, \/\/\/< Requested action not taken, file unavailable$/;"	e	enum:sf::Ftp::Response::Status
FilenameNotAllowed	include/SFML/Network/Ftp.hpp	/^            FilenameNotAllowed      = 553, \/\/\/< Requested action not taken, file name not allowed$/;"	e	enum:sf::Ftp::Response::Status
Ftp	include/SFML/Network/Ftp.hpp	/^class SFML_NETWORK_API Ftp : NonCopyable$/;"	c	namespace:sf
HelpMessage	include/SFML/Network/Ftp.hpp	/^            HelpMessage           = 214, \/\/\/< Help message$/;"	e	enum:sf::Ftp::Response::Status
InsufficientStorageSpace	include/SFML/Network/Ftp.hpp	/^            InsufficientStorageSpace  = 452, \/\/\/< Requested action not taken; insufficient storage space in system, file unavailable$/;"	e	enum:sf::Ftp::Response::Status
InvalidFile	include/SFML/Network/Ftp.hpp	/^            InvalidFile      = 1003  \/\/\/< Invalid file to upload \/ download$/;"	e	enum:sf::Ftp::Response::Status
InvalidResponse	include/SFML/Network/Ftp.hpp	/^            InvalidResponse  = 1000, \/\/\/< Response is not a valid FTP one$/;"	e	enum:sf::Ftp::Response::Status
ListingResponse	include/SFML/Network/Ftp.hpp	/^    class SFML_NETWORK_API ListingResponse : public Response$/;"	c	class:sf::Ftp
LocalError	include/SFML/Network/Ftp.hpp	/^            LocalError                = 451, \/\/\/< Requested action aborted, local error in processing$/;"	e	enum:sf::Ftp::Response::Status
LoggedIn	include/SFML/Network/Ftp.hpp	/^            LoggedIn              = 230, \/\/\/< User logged in, proceed. Logged out if appropriate$/;"	e	enum:sf::Ftp::Response::Status
NeedAccountToLogIn	include/SFML/Network/Ftp.hpp	/^            NeedAccountToLogIn = 332, \/\/\/< Need account for login$/;"	e	enum:sf::Ftp::Response::Status
NeedAccountToStore	include/SFML/Network/Ftp.hpp	/^            NeedAccountToStore      = 532, \/\/\/< Need account for storing files$/;"	e	enum:sf::Ftp::Response::Status
NeedInformation	include/SFML/Network/Ftp.hpp	/^            NeedInformation    = 350, \/\/\/< Requested file action pending further information$/;"	e	enum:sf::Ftp::Response::Status
NeedPassword	include/SFML/Network/Ftp.hpp	/^            NeedPassword       = 331, \/\/\/< User name ok, need password$/;"	e	enum:sf::Ftp::Response::Status
NotEnoughMemory	include/SFML/Network/Ftp.hpp	/^            NotEnoughMemory         = 552, \/\/\/< Requested file action aborted, exceeded storage allocation$/;"	e	enum:sf::Ftp::Response::Status
NotLoggedIn	include/SFML/Network/Ftp.hpp	/^            NotLoggedIn             = 530, \/\/\/< Not logged in$/;"	e	enum:sf::Ftp::Response::Status
Ok	include/SFML/Network/Ftp.hpp	/^            Ok                    = 200, \/\/\/< Command ok$/;"	e	enum:sf::Ftp::Response::Status
OpeningDataConnection	include/SFML/Network/Ftp.hpp	/^            OpeningDataConnection       = 150, \/\/\/< File status ok, about to open data connection$/;"	e	enum:sf::Ftp::Response::Status
PageTypeUnknown	include/SFML/Network/Ftp.hpp	/^            PageTypeUnknown         = 551, \/\/\/< Requested action aborted, page type unknown$/;"	e	enum:sf::Ftp::Response::Status
ParameterNotImplemented	include/SFML/Network/Ftp.hpp	/^            ParameterNotImplemented = 504, \/\/\/< Command not implemented for that parameter$/;"	e	enum:sf::Ftp::Response::Status
ParametersUnknown	include/SFML/Network/Ftp.hpp	/^            ParametersUnknown       = 501, \/\/\/< Syntax error in parameters or arguments$/;"	e	enum:sf::Ftp::Response::Status
PointlessCommand	include/SFML/Network/Ftp.hpp	/^            PointlessCommand      = 202, \/\/\/< Command not implemented$/;"	e	enum:sf::Ftp::Response::Status
Response	include/SFML/Network/Ftp.hpp	/^    class SFML_NETWORK_API Response$/;"	c	class:sf::Ftp
RestartMarkerReply	include/SFML/Network/Ftp.hpp	/^            RestartMarkerReply          = 110, \/\/\/< Restart marker reply$/;"	e	enum:sf::Ftp::Response::Status
SFML_FTP_HPP	include/SFML/Network/Ftp.hpp	26;"	d
ServiceReady	include/SFML/Network/Ftp.hpp	/^            ServiceReady          = 220, \/\/\/< Service ready for new user$/;"	e	enum:sf::Ftp::Response::Status
ServiceReadySoon	include/SFML/Network/Ftp.hpp	/^            ServiceReadySoon            = 120, \/\/\/< Service ready in N minutes$/;"	e	enum:sf::Ftp::Response::Status
ServiceUnavailable	include/SFML/Network/Ftp.hpp	/^            ServiceUnavailable        = 421, \/\/\/< Service not available, closing control connection$/;"	e	enum:sf::Ftp::Response::Status
Status	include/SFML/Network/Ftp.hpp	/^        enum Status$/;"	g	class:sf::Ftp::Response
SystemStatus	include/SFML/Network/Ftp.hpp	/^            SystemStatus          = 211, \/\/\/< System status, or system help reply$/;"	e	enum:sf::Ftp::Response::Status
SystemType	include/SFML/Network/Ftp.hpp	/^            SystemType            = 215, \/\/\/< NAME system type, where NAME is an official system name from the list in the Assigned Numbers document$/;"	e	enum:sf::Ftp::Response::Status
TransferAborted	include/SFML/Network/Ftp.hpp	/^            TransferAborted           = 426, \/\/\/< Connection closed, transfer aborted$/;"	e	enum:sf::Ftp::Response::Status
TransferMode	include/SFML/Network/Ftp.hpp	/^    enum TransferMode$/;"	g	class:sf::Ftp
m_commandSocket	include/SFML/Network/Ftp.hpp	/^    TcpSocket m_commandSocket; \/\/\/< Socket holding the control connection with the server$/;"	m	class:sf::Ftp
m_directory	include/SFML/Network/Ftp.hpp	/^        std::string m_directory; \/\/\/< Directory extracted from the response message$/;"	m	class:sf::Ftp::DirectoryResponse
m_listing	include/SFML/Network/Ftp.hpp	/^        std::vector<std::string> m_listing; \/\/\/< Directory\/file names extracted from the data$/;"	m	class:sf::Ftp::ListingResponse
m_message	include/SFML/Network/Ftp.hpp	/^        std::string m_message; \/\/\/< Last message received from the server$/;"	m	class:sf::Ftp::Response
m_status	include/SFML/Network/Ftp.hpp	/^        Status      m_status;  \/\/\/< Status code returned from the server$/;"	m	class:sf::Ftp::Response
sf	include/SFML/Network/Ftp.hpp	/^namespace sf$/;"	n
Accepted	include/SFML/Network/Http.hpp	/^            Accepted       = 202, \/\/\/< The request has been accepted, but will be processed later by the server$/;"	e	enum:sf::Http::Response::Status
BadGateway	include/SFML/Network/Http.hpp	/^            BadGateway          = 502, \/\/\/< The gateway server has received an error from the source server$/;"	e	enum:sf::Http::Response::Status
BadRequest	include/SFML/Network/Http.hpp	/^            BadRequest          = 400, \/\/\/< The server couldn't understand the request (syntax error)$/;"	e	enum:sf::Http::Response::Status
ConnectionFailed	include/SFML/Network/Http.hpp	/^            ConnectionFailed = 1001  \/\/\/< Connection with server failed$/;"	e	enum:sf::Http::Response::Status
Created	include/SFML/Network/Http.hpp	/^            Created        = 201, \/\/\/< The resource has successfully been created$/;"	e	enum:sf::Http::Response::Status
FieldTable	include/SFML/Network/Http.hpp	/^        typedef std::map<std::string, std::string> FieldTable;$/;"	t	class:sf::Http::Request
FieldTable	include/SFML/Network/Http.hpp	/^        typedef std::map<std::string, std::string> FieldTable;$/;"	t	class:sf::Http::Response
Forbidden	include/SFML/Network/Http.hpp	/^            Forbidden           = 403, \/\/\/< The requested page cannot be accessed at all, even with authentification$/;"	e	enum:sf::Http::Response::Status
GatewayTimeout	include/SFML/Network/Http.hpp	/^            GatewayTimeout      = 504, \/\/\/< The gateway server couldn't receive a response from the source server$/;"	e	enum:sf::Http::Response::Status
Get	include/SFML/Network/Http.hpp	/^            Get,  \/\/\/< Request in get mode, standard method to retrieve a page$/;"	e	enum:sf::Http::Request::Method
Head	include/SFML/Network/Http.hpp	/^            Head  \/\/\/< Request a page's header only$/;"	e	enum:sf::Http::Request::Method
Http	include/SFML/Network/Http.hpp	/^class SFML_NETWORK_API Http : NonCopyable$/;"	c	namespace:sf
InternalServerError	include/SFML/Network/Http.hpp	/^            InternalServerError = 500, \/\/\/< The server encountered an unexpected error$/;"	e	enum:sf::Http::Response::Status
InvalidResponse	include/SFML/Network/Http.hpp	/^            InvalidResponse  = 1000, \/\/\/< Response is not a valid HTTP one$/;"	e	enum:sf::Http::Response::Status
Method	include/SFML/Network/Http.hpp	/^        enum Method$/;"	g	class:sf::Http::Request
MovedPermanently	include/SFML/Network/Http.hpp	/^            MovedPermanently = 301, \/\/\/< The requested page has permanently moved to a new location$/;"	e	enum:sf::Http::Response::Status
MovedTemporarily	include/SFML/Network/Http.hpp	/^            MovedTemporarily = 302, \/\/\/< The requested page has temporarily moved to a new location$/;"	e	enum:sf::Http::Response::Status
MultipleChoices	include/SFML/Network/Http.hpp	/^            MultipleChoices  = 300, \/\/\/< The requested page can be accessed from several locations$/;"	e	enum:sf::Http::Response::Status
NoContent	include/SFML/Network/Http.hpp	/^            NoContent      = 204, \/\/\/< The server didn't send any data in return$/;"	e	enum:sf::Http::Response::Status
NotFound	include/SFML/Network/Http.hpp	/^            NotFound            = 404, \/\/\/< The requested page doesn't exist$/;"	e	enum:sf::Http::Response::Status
NotImplemented	include/SFML/Network/Http.hpp	/^            NotImplemented      = 501, \/\/\/< The server doesn't implement a requested feature$/;"	e	enum:sf::Http::Response::Status
NotModified	include/SFML/Network/Http.hpp	/^            NotModified      = 304, \/\/\/< For conditionnal requests, means the requested page hasn't changed and doesn't need to be refreshed$/;"	e	enum:sf::Http::Response::Status
Ok	include/SFML/Network/Http.hpp	/^            Ok             = 200, \/\/\/< Most common code returned when operation was successful$/;"	e	enum:sf::Http::Response::Status
PartialContent	include/SFML/Network/Http.hpp	/^            PartialContent = 206, \/\/\/< The server has sent a part of the resource, as a response to a partial GET request$/;"	e	enum:sf::Http::Response::Status
Post	include/SFML/Network/Http.hpp	/^            Post, \/\/\/< Request in post mode, usually to send data to a page$/;"	e	enum:sf::Http::Request::Method
RangeNotSatisfiable	include/SFML/Network/Http.hpp	/^            RangeNotSatisfiable = 407, \/\/\/< The server can't satisfy the partial GET request (with a "Range" header field)$/;"	e	enum:sf::Http::Response::Status
Request	include/SFML/Network/Http.hpp	/^    class SFML_NETWORK_API Request$/;"	c	class:sf::Http
ResetContent	include/SFML/Network/Http.hpp	/^            ResetContent   = 205, \/\/\/< The server informs the client that it should clear the view (form) that caused the request to be sent$/;"	e	enum:sf::Http::Response::Status
Response	include/SFML/Network/Http.hpp	/^    class SFML_NETWORK_API Response$/;"	c	class:sf::Http
SFML_HTTP_HPP	include/SFML/Network/Http.hpp	26;"	d
ServiceNotAvailable	include/SFML/Network/Http.hpp	/^            ServiceNotAvailable = 503, \/\/\/< The server is temporarily unavailable (overloaded, in maintenance, ...)$/;"	e	enum:sf::Http::Response::Status
Status	include/SFML/Network/Http.hpp	/^        enum Status$/;"	g	class:sf::Http::Response
Unauthorized	include/SFML/Network/Http.hpp	/^            Unauthorized        = 401, \/\/\/< The requested page needs an authentification to be accessed$/;"	e	enum:sf::Http::Response::Status
VersionNotSupported	include/SFML/Network/Http.hpp	/^            VersionNotSupported = 505, \/\/\/< The server doesn't support the requested HTTP version$/;"	e	enum:sf::Http::Response::Status
m_body	include/SFML/Network/Http.hpp	/^        std::string  m_body;         \/\/\/< Body of the request$/;"	m	class:sf::Http::Request
m_body	include/SFML/Network/Http.hpp	/^        std::string  m_body;         \/\/\/< Body of the response$/;"	m	class:sf::Http::Response
m_connection	include/SFML/Network/Http.hpp	/^    TcpSocket      m_connection; \/\/\/< Connection to the host$/;"	m	class:sf::Http
m_fields	include/SFML/Network/Http.hpp	/^        FieldTable   m_fields;       \/\/\/< Fields of the header associated to their value$/;"	m	class:sf::Http::Request
m_fields	include/SFML/Network/Http.hpp	/^        FieldTable   m_fields;       \/\/\/< Fields of the header$/;"	m	class:sf::Http::Response
m_host	include/SFML/Network/Http.hpp	/^    IpAddress      m_host;       \/\/\/< Web host address$/;"	m	class:sf::Http
m_hostName	include/SFML/Network/Http.hpp	/^    std::string    m_hostName;   \/\/\/< Web host name$/;"	m	class:sf::Http
m_majorVersion	include/SFML/Network/Http.hpp	/^        unsigned int m_majorVersion; \/\/\/< Major HTTP version$/;"	m	class:sf::Http::Request
m_majorVersion	include/SFML/Network/Http.hpp	/^        unsigned int m_majorVersion; \/\/\/< Major HTTP version$/;"	m	class:sf::Http::Response
m_method	include/SFML/Network/Http.hpp	/^        Method       m_method;       \/\/\/< Method to use for the request$/;"	m	class:sf::Http::Request
m_minorVersion	include/SFML/Network/Http.hpp	/^        unsigned int m_minorVersion; \/\/\/< Minor HTTP version$/;"	m	class:sf::Http::Request
m_minorVersion	include/SFML/Network/Http.hpp	/^        unsigned int m_minorVersion; \/\/\/< Minor HTTP version$/;"	m	class:sf::Http::Response
m_port	include/SFML/Network/Http.hpp	/^    unsigned short m_port;       \/\/\/< Port used for connection with host$/;"	m	class:sf::Http
m_status	include/SFML/Network/Http.hpp	/^        Status       m_status;       \/\/\/< Status code$/;"	m	class:sf::Http::Response
m_uri	include/SFML/Network/Http.hpp	/^        std::string  m_uri;          \/\/\/< Target URI of the request$/;"	m	class:sf::Http::Request
sf	include/SFML/Network/Http.hpp	/^namespace sf$/;"	n
Broadcast	include/SFML/Network/IpAddress.hpp	/^    static const IpAddress Broadcast; \/\/\/< The "broadcast" address (for sending UDP messages to everyone on a local network)$/;"	m	class:sf::IpAddress
IpAddress	include/SFML/Network/IpAddress.hpp	/^class SFML_NETWORK_API IpAddress$/;"	c	namespace:sf
LocalHost	include/SFML/Network/IpAddress.hpp	/^    static const IpAddress LocalHost; \/\/\/< The "localhost" address (for connecting a computer to itself locally)$/;"	m	class:sf::IpAddress
None	include/SFML/Network/IpAddress.hpp	/^    static const IpAddress None;      \/\/\/< Value representing an empty\/invalid address$/;"	m	class:sf::IpAddress
SFML_IPADDRESS_HPP	include/SFML/Network/IpAddress.hpp	26;"	d
m_address	include/SFML/Network/IpAddress.hpp	/^    Uint32 m_address; \/\/\/< Address stored as an unsigned 32 bits integer$/;"	m	class:sf::IpAddress
sf	include/SFML/Network/IpAddress.hpp	/^namespace sf$/;"	n
BoolType	include/SFML/Network/Packet.hpp	/^    typedef bool (Packet::*BoolType)(std::size_t);$/;"	t	class:sf::Packet
Packet	include/SFML/Network/Packet.hpp	/^class SFML_NETWORK_API Packet$/;"	c	namespace:sf
SFML_PACKET_HPP	include/SFML/Network/Packet.hpp	26;"	d
m_data	include/SFML/Network/Packet.hpp	/^    std::vector<char> m_data;    \/\/\/< Data stored in the packet$/;"	m	class:sf::Packet
m_isValid	include/SFML/Network/Packet.hpp	/^    bool              m_isValid; \/\/\/< Reading state of the packet$/;"	m	class:sf::Packet
m_readPos	include/SFML/Network/Packet.hpp	/^    std::size_t       m_readPos; \/\/\/< Current reading position in the packet$/;"	m	class:sf::Packet
sf	include/SFML/Network/Packet.hpp	/^namespace sf$/;"	n
AnyPort	include/SFML/Network/Socket.hpp	/^        AnyPort = 0 \/\/\/< Special value that tells the system to pick any available port$/;"	e	enum:sf::Socket::__anon12
Disconnected	include/SFML/Network/Socket.hpp	/^        Disconnected, \/\/\/< The TCP socket has been disconnected$/;"	e	enum:sf::Socket::Status
Done	include/SFML/Network/Socket.hpp	/^        Done,         \/\/\/< The socket has sent \/ received the data$/;"	e	enum:sf::Socket::Status
Error	include/SFML/Network/Socket.hpp	/^        Error         \/\/\/< An unexpected error happened$/;"	e	enum:sf::Socket::Status
NotReady	include/SFML/Network/Socket.hpp	/^        NotReady,     \/\/\/< The socket is not ready to send \/ receive data yet$/;"	e	enum:sf::Socket::Status
SFML_SOCKET_HPP	include/SFML/Network/Socket.hpp	26;"	d
Socket	include/SFML/Network/Socket.hpp	/^class SFML_NETWORK_API Socket : NonCopyable$/;"	c	namespace:sf
Status	include/SFML/Network/Socket.hpp	/^    enum Status$/;"	g	class:sf::Socket
Tcp	include/SFML/Network/Socket.hpp	/^        Tcp, \/\/\/< TCP protocol$/;"	e	enum:sf::Socket::Type
Type	include/SFML/Network/Socket.hpp	/^    enum Type$/;"	g	class:sf::Socket
Udp	include/SFML/Network/Socket.hpp	/^        Udp  \/\/\/< UDP protocol$/;"	e	enum:sf::Socket::Type
m_isBlocking	include/SFML/Network/Socket.hpp	/^    bool         m_isBlocking; \/\/\/< Current blocking mode of the socket$/;"	m	class:sf::Socket
m_socket	include/SFML/Network/Socket.hpp	/^    SocketHandle m_socket;     \/\/\/< Socket descriptor$/;"	m	class:sf::Socket
m_type	include/SFML/Network/Socket.hpp	/^    Type         m_type;       \/\/\/< Type of the socket (TCP or UDP)$/;"	m	class:sf::Socket
sf	include/SFML/Network/Socket.hpp	/^namespace sf$/;"	n
SFML_SOCKETHANDLE_HPP	include/SFML/Network/SocketHandle.hpp	26;"	d
SocketHandle	include/SFML/Network/SocketHandle.hpp	/^    typedef UINT_PTR SocketHandle;$/;"	t	namespace:sf
sf	include/SFML/Network/SocketHandle.hpp	/^namespace sf$/;"	n
SFML_SOCKETSELECTOR_HPP	include/SFML/Network/SocketSelector.hpp	26;"	d
SocketSelector	include/SFML/Network/SocketSelector.hpp	/^class SFML_NETWORK_API SocketSelector$/;"	c	namespace:sf
m_impl	include/SFML/Network/SocketSelector.hpp	/^    SocketSelectorImpl* m_impl; \/\/\/< Opaque pointer to the implementation (which requires OS-specific types)$/;"	m	class:sf::SocketSelector
sf	include/SFML/Network/SocketSelector.hpp	/^namespace sf$/;"	n
SFML_TCPLISTENER_HPP	include/SFML/Network/TcpListener.hpp	26;"	d
TcpListener	include/SFML/Network/TcpListener.hpp	/^class SFML_NETWORK_API TcpListener : public Socket$/;"	c	namespace:sf
sf	include/SFML/Network/TcpListener.hpp	/^namespace sf$/;"	n
Data	include/SFML/Network/TcpSocket.hpp	/^        std::vector<char> Data;         \/\/\/< Data of the packet$/;"	m	struct:sf::TcpSocket::PendingPacket
PendingPacket	include/SFML/Network/TcpSocket.hpp	/^    struct PendingPacket$/;"	s	class:sf::TcpSocket
SFML_TCPSOCKET_HPP	include/SFML/Network/TcpSocket.hpp	26;"	d
Size	include/SFML/Network/TcpSocket.hpp	/^        Uint32            Size;         \/\/\/< Data of packet size$/;"	m	struct:sf::TcpSocket::PendingPacket
SizeReceived	include/SFML/Network/TcpSocket.hpp	/^        std::size_t       SizeReceived; \/\/\/< Number of size bytes received so far$/;"	m	struct:sf::TcpSocket::PendingPacket
TcpSocket	include/SFML/Network/TcpSocket.hpp	/^class SFML_NETWORK_API TcpSocket : public Socket$/;"	c	namespace:sf
m_pendingPacket	include/SFML/Network/TcpSocket.hpp	/^    PendingPacket m_pendingPacket; \/\/\/< Temporary data of the packet currently being received$/;"	m	class:sf::TcpSocket
sf	include/SFML/Network/TcpSocket.hpp	/^namespace sf$/;"	n
MaxDatagramSize	include/SFML/Network/UdpSocket.hpp	/^        MaxDatagramSize = 65507 \/\/\/< The maximum number of bytes that can be sent in a single UDP datagram$/;"	e	enum:sf::UdpSocket::__anon13
SFML_UDPSOCKET_HPP	include/SFML/Network/UdpSocket.hpp	26;"	d
UdpSocket	include/SFML/Network/UdpSocket.hpp	/^class SFML_NETWORK_API UdpSocket : public Socket$/;"	c	namespace:sf
m_buffer	include/SFML/Network/UdpSocket.hpp	/^    std::vector<char> m_buffer; \/\/\/< Temporary buffer holding the received data in Receive(Packet)$/;"	m	class:sf::UdpSocket
sf	include/SFML/Network/UdpSocket.hpp	/^namespace sf$/;"	n
SFML_OPENGL_HPP	include/SFML/OpenGL.hpp	26;"	d
SFML_SYSTEM_HPP	include/SFML/System.hpp	26;"	d
Clock	include/SFML/System/Clock.hpp	/^class SFML_SYSTEM_API Clock$/;"	c	namespace:sf
SFML_CLOCK_HPP	include/SFML/System/Clock.hpp	26;"	d
m_startTime	include/SFML/System/Clock.hpp	/^    Time m_startTime; \/\/\/< Time of last reset, in microseconds$/;"	m	class:sf::Clock
sf	include/SFML/System/Clock.hpp	/^namespace sf$/;"	n
SFML_ERR_HPP	include/SFML/System/Err.hpp	26;"	d
sf	include/SFML/System/Err.hpp	/^namespace sf$/;"	n
SFML_SYSTEM_API	include/SFML/System/Export.hpp	39;"	d
SFML_SYSTEM_API	include/SFML/System/Export.hpp	43;"	d
SFML_SYSTEM_EXPORT_HPP	include/SFML/System/Export.hpp	26;"	d
InputStream	include/SFML/System/InputStream.hpp	/^class InputStream$/;"	c	namespace:sf
SFML_INPUTSTREAM_HPP	include/SFML/System/InputStream.hpp	26;"	d
sf	include/SFML/System/InputStream.hpp	/^namespace sf$/;"	n
~InputStream	include/SFML/System/InputStream.hpp	/^    virtual ~InputStream() {}$/;"	f	class:sf::InputStream
Lock	include/SFML/System/Lock.hpp	/^class SFML_SYSTEM_API Lock : NonCopyable$/;"	c	namespace:sf
SFML_LOCK_HPP	include/SFML/System/Lock.hpp	26;"	d
m_mutex	include/SFML/System/Lock.hpp	/^    Mutex& m_mutex; \/\/\/< Mutex to lock \/ unlock$/;"	m	class:sf::Lock
sf	include/SFML/System/Lock.hpp	/^namespace sf$/;"	n
Mutex	include/SFML/System/Mutex.hpp	/^class SFML_SYSTEM_API Mutex : NonCopyable$/;"	c	namespace:sf
SFML_MUTEX_HPP	include/SFML/System/Mutex.hpp	26;"	d
m_mutexImpl	include/SFML/System/Mutex.hpp	/^    priv::MutexImpl* m_mutexImpl; \/\/\/< OS-specific implementation$/;"	m	class:sf::Mutex
priv	include/SFML/System/Mutex.hpp	/^namespace priv$/;"	n	namespace:sf
sf	include/SFML/System/Mutex.hpp	/^namespace sf$/;"	n
NonCopyable	include/SFML/System/NonCopyable.hpp	/^    NonCopyable() {}$/;"	f	class:sf::NonCopyable
NonCopyable	include/SFML/System/NonCopyable.hpp	/^class SFML_SYSTEM_API NonCopyable$/;"	c	namespace:sf
SFML_NONCOPYABLE_HPP	include/SFML/System/NonCopyable.hpp	26;"	d
sf	include/SFML/System/NonCopyable.hpp	/^namespace sf$/;"	n
SFML_SLEEP_HPP	include/SFML/System/Sleep.hpp	26;"	d
sf	include/SFML/System/Sleep.hpp	/^namespace sf$/;"	n
ConstIterator	include/SFML/System/String.hpp	/^    typedef std::basic_string<Uint32>::const_iterator ConstIterator; \/\/\/< Constant iterator type$/;"	t	class:sf::String
InvalidPos	include/SFML/System/String.hpp	/^    static const std::size_t InvalidPos; \/\/\/< Represents an invalid position in the string$/;"	m	class:sf::String
Iterator	include/SFML/System/String.hpp	/^    typedef std::basic_string<Uint32>::iterator       Iterator;      \/\/\/< Iterator type$/;"	t	class:sf::String
SFML_STRING_HPP	include/SFML/System/String.hpp	26;"	d
String	include/SFML/System/String.hpp	/^class SFML_SYSTEM_API String$/;"	c	namespace:sf
m_string	include/SFML/System/String.hpp	/^    std::basic_string<Uint32> m_string; \/\/\/< Internal string of UTF-32 characters$/;"	m	class:sf::String
sf	include/SFML/System/String.hpp	/^namespace sf$/;"	n
SFML_THREAD_HPP	include/SFML/System/Thread.hpp	26;"	d
Thread	include/SFML/System/Thread.hpp	/^class SFML_SYSTEM_API Thread : NonCopyable$/;"	c	namespace:sf
m_entryPoint	include/SFML/System/Thread.hpp	/^    priv::ThreadFunc* m_entryPoint; \/\/\/< Abstraction of the function to run$/;"	m	class:sf::Thread
m_impl	include/SFML/System/Thread.hpp	/^    priv::ThreadImpl* m_impl;       \/\/\/< OS-specific implementation of the thread$/;"	m	class:sf::Thread
priv	include/SFML/System/Thread.hpp	/^namespace priv$/;"	n	namespace:sf
sf	include/SFML/System/Thread.hpp	/^namespace sf$/;"	n
SFML_THREADLOCAL_HPP	include/SFML/System/ThreadLocal.hpp	26;"	d
ThreadLocal	include/SFML/System/ThreadLocal.hpp	/^class SFML_SYSTEM_API ThreadLocal : NonCopyable$/;"	c	namespace:sf
m_impl	include/SFML/System/ThreadLocal.hpp	/^    priv::ThreadLocalImpl* m_impl; \/\/\/< Pointer to the OS specific implementation$/;"	m	class:sf::ThreadLocal
priv	include/SFML/System/ThreadLocal.hpp	/^namespace priv$/;"	n	namespace:sf
sf	include/SFML/System/ThreadLocal.hpp	/^namespace sf$/;"	n
SFML_THREADLOCALPTR_HPP	include/SFML/System/ThreadLocalPtr.hpp	26;"	d
ThreadLocalPtr	include/SFML/System/ThreadLocalPtr.hpp	/^class ThreadLocalPtr : private ThreadLocal$/;"	c	namespace:sf
sf	include/SFML/System/ThreadLocalPtr.hpp	/^namespace sf$/;"	n
SFML_TIME_HPP	include/SFML/System/Time.hpp	26;"	d
Time	include/SFML/System/Time.hpp	/^class SFML_SYSTEM_API Time$/;"	c	namespace:sf
Zero	include/SFML/System/Time.hpp	/^    static const Time Zero; \/\/\/< Predefined "zero" time value $/;"	m	class:sf::Time
m_microseconds	include/SFML/System/Time.hpp	/^    Int64 m_microseconds; \/\/\/< Time value stored as microseconds$/;"	m	class:sf::Time
sf	include/SFML/System/Time.hpp	/^namespace sf$/;"	n
SFML_UTF_HPP	include/SFML/System/Utf.hpp	26;"	d
Utf	include/SFML/System/Utf.hpp	/^class Utf<16>$/;"	c	namespace:sf
Utf	include/SFML/System/Utf.hpp	/^class Utf<32>$/;"	c	namespace:sf
Utf	include/SFML/System/Utf.hpp	/^class Utf<8>$/;"	c	namespace:sf
Utf16	include/SFML/System/Utf.hpp	/^typedef Utf<16> Utf16;$/;"	t	namespace:sf
Utf32	include/SFML/System/Utf.hpp	/^typedef Utf<32> Utf32;$/;"	t	namespace:sf
Utf8	include/SFML/System/Utf.hpp	/^typedef Utf<8>  Utf8;$/;"	t	namespace:sf
sf	include/SFML/System/Utf.hpp	/^namespace sf$/;"	n
SFML_VECTOR2_HPP	include/SFML/System/Vector2.hpp	26;"	d
Vector2	include/SFML/System/Vector2.hpp	/^class Vector2$/;"	c	namespace:sf
Vector2f	include/SFML/System/Vector2.hpp	/^typedef Vector2<float>        Vector2f;$/;"	t	namespace:sf
Vector2i	include/SFML/System/Vector2.hpp	/^typedef Vector2<int>          Vector2i;$/;"	t	namespace:sf
Vector2u	include/SFML/System/Vector2.hpp	/^typedef Vector2<unsigned int> Vector2u;$/;"	t	namespace:sf
sf	include/SFML/System/Vector2.hpp	/^namespace sf$/;"	n
x	include/SFML/System/Vector2.hpp	/^    T x; \/\/\/< X coordinate of the vector$/;"	m	class:sf::Vector2
y	include/SFML/System/Vector2.hpp	/^    T y; \/\/\/< Y coordinate of the vector$/;"	m	class:sf::Vector2
SFML_VECTOR3_HPP	include/SFML/System/Vector3.hpp	26;"	d
Vector3	include/SFML/System/Vector3.hpp	/^class Vector3$/;"	c	namespace:sf
Vector3f	include/SFML/System/Vector3.hpp	/^typedef Vector3<float> Vector3f;$/;"	t	namespace:sf
Vector3i	include/SFML/System/Vector3.hpp	/^typedef Vector3<int>   Vector3i;$/;"	t	namespace:sf
sf	include/SFML/System/Vector3.hpp	/^namespace sf$/;"	n
x	include/SFML/System/Vector3.hpp	/^    T x; \/\/\/< X coordinate of the vector$/;"	m	class:sf::Vector3
y	include/SFML/System/Vector3.hpp	/^    T y; \/\/\/< Y coordinate of the vector$/;"	m	class:sf::Vector3
z	include/SFML/System/Vector3.hpp	/^    T z; \/\/\/< Z coordinate of the vector$/;"	m	class:sf::Vector3
SFML_SFML_WINDOW_HPP	include/SFML/Window.hpp	26;"	d
Context	include/SFML/Window/Context.hpp	/^class SFML_WINDOW_API Context : GlResource, NonCopyable$/;"	c	namespace:sf
SFML_CONTEXT_HPP	include/SFML/Window/Context.hpp	26;"	d
m_context	include/SFML/Window/Context.hpp	/^    priv::GlContext* m_context; \/\/\/< Internal OpenGL context$/;"	m	class:sf::Context
priv	include/SFML/Window/Context.hpp	/^namespace priv$/;"	n	namespace:sf
sf	include/SFML/Window/Context.hpp	/^namespace sf$/;"	n
ContextSettings	include/SFML/Window/ContextSettings.hpp	/^    explicit ContextSettings(unsigned int depth = 0, unsigned int stencil = 0, unsigned int antialiasing = 0, unsigned int major = 2, unsigned int minor = 0) :$/;"	f	struct:sf::ContextSettings
ContextSettings	include/SFML/Window/ContextSettings.hpp	/^struct ContextSettings$/;"	s	namespace:sf
SFML_CONTEXTSETTINGS_HPP	include/SFML/Window/ContextSettings.hpp	26;"	d
antialiasingLevel	include/SFML/Window/ContextSettings.hpp	/^    unsigned int antialiasingLevel; \/\/\/< Level of antialiasing$/;"	m	struct:sf::ContextSettings
depthBits	include/SFML/Window/ContextSettings.hpp	/^    unsigned int depthBits;         \/\/\/< Bits of the depth buffer$/;"	m	struct:sf::ContextSettings
majorVersion	include/SFML/Window/ContextSettings.hpp	/^    unsigned int majorVersion;      \/\/\/< Major number of the context version to create$/;"	m	struct:sf::ContextSettings
minorVersion	include/SFML/Window/ContextSettings.hpp	/^    unsigned int minorVersion;      \/\/\/< Minor number of the context version to create$/;"	m	struct:sf::ContextSettings
sf	include/SFML/Window/ContextSettings.hpp	/^namespace sf$/;"	n
stencilBits	include/SFML/Window/ContextSettings.hpp	/^    unsigned int stencilBits;       \/\/\/< Bits of the stencil buffer$/;"	m	struct:sf::ContextSettings
Closed	include/SFML/Window/Event.hpp	/^        Closed,                 \/\/\/< The window requested to be closed (no data)$/;"	e	enum:sf::Event::EventType
Count	include/SFML/Window/Event.hpp	/^        Count                   \/\/\/< Keep last -- the total number of event types$/;"	e	enum:sf::Event::EventType
Event	include/SFML/Window/Event.hpp	/^class Event$/;"	c	namespace:sf
EventType	include/SFML/Window/Event.hpp	/^    enum EventType$/;"	g	class:sf::Event
GainedFocus	include/SFML/Window/Event.hpp	/^        GainedFocus,            \/\/\/< The window gained the focus (no data)$/;"	e	enum:sf::Event::EventType
JoystickButtonEvent	include/SFML/Window/Event.hpp	/^    struct JoystickButtonEvent$/;"	s	class:sf::Event
JoystickButtonPressed	include/SFML/Window/Event.hpp	/^        JoystickButtonPressed,  \/\/\/< A joystick button was pressed (data in event.joystickButton)$/;"	e	enum:sf::Event::EventType
JoystickButtonReleased	include/SFML/Window/Event.hpp	/^        JoystickButtonReleased, \/\/\/< A joystick button was released (data in event.joystickButton)$/;"	e	enum:sf::Event::EventType
JoystickConnectEvent	include/SFML/Window/Event.hpp	/^    struct JoystickConnectEvent$/;"	s	class:sf::Event
JoystickConnected	include/SFML/Window/Event.hpp	/^        JoystickConnected,      \/\/\/< A joystick was connected (data in event.joystickConnect)$/;"	e	enum:sf::Event::EventType
JoystickDisconnected	include/SFML/Window/Event.hpp	/^        JoystickDisconnected,   \/\/\/< A joystick was disconnected (data in event.joystickConnect)$/;"	e	enum:sf::Event::EventType
JoystickMoveEvent	include/SFML/Window/Event.hpp	/^    struct JoystickMoveEvent$/;"	s	class:sf::Event
JoystickMoved	include/SFML/Window/Event.hpp	/^        JoystickMoved,          \/\/\/< The joystick moved along an axis (data in event.joystickMove)$/;"	e	enum:sf::Event::EventType
KeyEvent	include/SFML/Window/Event.hpp	/^    struct KeyEvent$/;"	s	class:sf::Event
KeyPressed	include/SFML/Window/Event.hpp	/^        KeyPressed,             \/\/\/< A key was pressed (data in event.key)$/;"	e	enum:sf::Event::EventType
KeyReleased	include/SFML/Window/Event.hpp	/^        KeyReleased,            \/\/\/< A key was released (data in event.key)$/;"	e	enum:sf::Event::EventType
LostFocus	include/SFML/Window/Event.hpp	/^        LostFocus,              \/\/\/< The window lost the focus (no data)$/;"	e	enum:sf::Event::EventType
MouseButtonEvent	include/SFML/Window/Event.hpp	/^    struct MouseButtonEvent$/;"	s	class:sf::Event
MouseButtonPressed	include/SFML/Window/Event.hpp	/^        MouseButtonPressed,     \/\/\/< A mouse button was pressed (data in event.mouseButton)$/;"	e	enum:sf::Event::EventType
MouseButtonReleased	include/SFML/Window/Event.hpp	/^        MouseButtonReleased,    \/\/\/< A mouse button was released (data in event.mouseButton)$/;"	e	enum:sf::Event::EventType
MouseEntered	include/SFML/Window/Event.hpp	/^        MouseEntered,           \/\/\/< The mouse cursor entered the area of the window (no data)$/;"	e	enum:sf::Event::EventType
MouseLeft	include/SFML/Window/Event.hpp	/^        MouseLeft,              \/\/\/< The mouse cursor left the area of the window (no data)$/;"	e	enum:sf::Event::EventType
MouseMoveEvent	include/SFML/Window/Event.hpp	/^    struct MouseMoveEvent$/;"	s	class:sf::Event
MouseMoved	include/SFML/Window/Event.hpp	/^        MouseMoved,             \/\/\/< The mouse cursor moved (data in event.mouseMove)$/;"	e	enum:sf::Event::EventType
MouseWheelEvent	include/SFML/Window/Event.hpp	/^    struct MouseWheelEvent$/;"	s	class:sf::Event
MouseWheelMoved	include/SFML/Window/Event.hpp	/^        MouseWheelMoved,        \/\/\/< The mouse wheel was scrolled (data in event.mouseWheel)$/;"	e	enum:sf::Event::EventType
Resized	include/SFML/Window/Event.hpp	/^        Resized,                \/\/\/< The window was resized (data in event.size)$/;"	e	enum:sf::Event::EventType
SFML_EVENT_HPP	include/SFML/Window/Event.hpp	26;"	d
SizeEvent	include/SFML/Window/Event.hpp	/^    struct SizeEvent$/;"	s	class:sf::Event
TextEntered	include/SFML/Window/Event.hpp	/^        TextEntered,            \/\/\/< A character was entered (data in event.text)$/;"	e	enum:sf::Event::EventType
TextEvent	include/SFML/Window/Event.hpp	/^    struct TextEvent$/;"	s	class:sf::Event
alt	include/SFML/Window/Event.hpp	/^        bool          alt;     \/\/\/< Is the Alt key pressed?$/;"	m	struct:sf::Event::KeyEvent
axis	include/SFML/Window/Event.hpp	/^        Joystick::Axis axis;       \/\/\/< Axis on which the joystick moved$/;"	m	struct:sf::Event::JoystickMoveEvent
button	include/SFML/Window/Event.hpp	/^        Mouse::Button button; \/\/\/< Code of the button that has been pressed$/;"	m	struct:sf::Event::MouseButtonEvent
button	include/SFML/Window/Event.hpp	/^        unsigned int button;     \/\/\/< Index of the button that has been pressed (in range [0 .. Joystick::ButtonCount - 1])$/;"	m	struct:sf::Event::JoystickButtonEvent
code	include/SFML/Window/Event.hpp	/^        Keyboard::Key code;    \/\/\/< Code of the key that has been pressed$/;"	m	struct:sf::Event::KeyEvent
control	include/SFML/Window/Event.hpp	/^        bool          control; \/\/\/< Is the Control key pressed?$/;"	m	struct:sf::Event::KeyEvent
delta	include/SFML/Window/Event.hpp	/^        int delta; \/\/\/< Number of ticks the wheel has moved (positive is up, negative is down)$/;"	m	struct:sf::Event::MouseWheelEvent
height	include/SFML/Window/Event.hpp	/^        unsigned int height; \/\/\/< New height, in pixels$/;"	m	struct:sf::Event::SizeEvent
joystickButton	include/SFML/Window/Event.hpp	/^        JoystickButtonEvent  joystickButton;  \/\/\/< Joystick button event parameters (Event::JoystickButtonPressed, Event::JoystickButtonReleased)$/;"	m	union:sf::Event::__anon10
joystickConnect	include/SFML/Window/Event.hpp	/^        JoystickConnectEvent joystickConnect; \/\/\/< Joystick (dis)connect event parameters (Event::JoystickConnected, Event::JoystickDisconnected)$/;"	m	union:sf::Event::__anon10
joystickId	include/SFML/Window/Event.hpp	/^        unsigned int   joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count - 1])$/;"	m	struct:sf::Event::JoystickMoveEvent
joystickId	include/SFML/Window/Event.hpp	/^        unsigned int joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count - 1])$/;"	m	struct:sf::Event::JoystickButtonEvent
joystickId	include/SFML/Window/Event.hpp	/^        unsigned int joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count - 1])$/;"	m	struct:sf::Event::JoystickConnectEvent
joystickMove	include/SFML/Window/Event.hpp	/^        JoystickMoveEvent    joystickMove;    \/\/\/< Joystick move event parameters (Event::JoystickMoved)$/;"	m	union:sf::Event::__anon10
key	include/SFML/Window/Event.hpp	/^        KeyEvent             key;             \/\/\/< Key event parameters (Event::KeyPressed, Event::KeyReleased)$/;"	m	union:sf::Event::__anon10
mouseButton	include/SFML/Window/Event.hpp	/^        MouseButtonEvent     mouseButton;     \/\/\/< Mouse button event parameters (Event::MouseButtonPressed, Event::MouseButtonReleased)$/;"	m	union:sf::Event::__anon10
mouseMove	include/SFML/Window/Event.hpp	/^        MouseMoveEvent       mouseMove;       \/\/\/< Mouse move event parameters (Event::MouseMoved)$/;"	m	union:sf::Event::__anon10
mouseWheel	include/SFML/Window/Event.hpp	/^        MouseWheelEvent      mouseWheel;      \/\/\/< Mouse wheel event parameters (Event::MouseWheelMoved)$/;"	m	union:sf::Event::__anon10
position	include/SFML/Window/Event.hpp	/^        float          position;   \/\/\/< New position on the axis (in range [-100 .. 100])$/;"	m	struct:sf::Event::JoystickMoveEvent
sf	include/SFML/Window/Event.hpp	/^namespace sf$/;"	n
shift	include/SFML/Window/Event.hpp	/^        bool          shift;   \/\/\/< Is the Shift key pressed?$/;"	m	struct:sf::Event::KeyEvent
size	include/SFML/Window/Event.hpp	/^        SizeEvent            size;            \/\/\/< Size event parameters (Event::Resized)$/;"	m	union:sf::Event::__anon10
system	include/SFML/Window/Event.hpp	/^        bool          system;  \/\/\/< Is the System key pressed?$/;"	m	struct:sf::Event::KeyEvent
text	include/SFML/Window/Event.hpp	/^        TextEvent            text;            \/\/\/< Text event parameters (Event::TextEntered)$/;"	m	union:sf::Event::__anon10
type	include/SFML/Window/Event.hpp	/^    EventType type; \/\/\/< Type of the event$/;"	m	class:sf::Event
unicode	include/SFML/Window/Event.hpp	/^        Uint32 unicode; \/\/\/< UTF-32 unicode value of the character$/;"	m	struct:sf::Event::TextEvent
width	include/SFML/Window/Event.hpp	/^        unsigned int width;  \/\/\/< New width, in pixels$/;"	m	struct:sf::Event::SizeEvent
x	include/SFML/Window/Event.hpp	/^        int           x;      \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseButtonEvent
x	include/SFML/Window/Event.hpp	/^        int x;     \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseWheelEvent
x	include/SFML/Window/Event.hpp	/^        int x; \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseMoveEvent
y	include/SFML/Window/Event.hpp	/^        int           y;      \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseButtonEvent
y	include/SFML/Window/Event.hpp	/^        int y;     \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseWheelEvent
y	include/SFML/Window/Event.hpp	/^        int y; \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseMoveEvent
SFML_WINDOW_API	include/SFML/Window/Export.hpp	39;"	d
SFML_WINDOW_API	include/SFML/Window/Export.hpp	43;"	d
SFML_WINDOW_EXPORT_HPP	include/SFML/Window/Export.hpp	26;"	d
GlResource	include/SFML/Window/GlResource.hpp	/^class SFML_WINDOW_API GlResource$/;"	c	namespace:sf
SFML_GLRESOURCE_HPP	include/SFML/Window/GlResource.hpp	26;"	d
sf	include/SFML/Window/GlResource.hpp	/^namespace sf$/;"	n
Axis	include/SFML/Window/Joystick.hpp	/^    enum Axis$/;"	g	class:sf::Joystick
AxisCount	include/SFML/Window/Joystick.hpp	/^        AxisCount   = 8   \/\/\/< Maximum number of supported axes$/;"	e	enum:sf::Joystick::__anon9
ButtonCount	include/SFML/Window/Joystick.hpp	/^        ButtonCount = 32, \/\/\/< Maximum number of supported buttons$/;"	e	enum:sf::Joystick::__anon9
Count	include/SFML/Window/Joystick.hpp	/^        Count       = 8,  \/\/\/< Maximum number of supported joysticks$/;"	e	enum:sf::Joystick::__anon9
Joystick	include/SFML/Window/Joystick.hpp	/^class SFML_WINDOW_API Joystick$/;"	c	namespace:sf
PovX	include/SFML/Window/Joystick.hpp	/^        PovX, \/\/\/< The X axis of the point-of-view hat$/;"	e	enum:sf::Joystick::Axis
PovY	include/SFML/Window/Joystick.hpp	/^        PovY  \/\/\/< The Y axis of the point-of-view hat$/;"	e	enum:sf::Joystick::Axis
R	include/SFML/Window/Joystick.hpp	/^        R,    \/\/\/< The R axis$/;"	e	enum:sf::Joystick::Axis
SFML_JOYSTICK_HPP	include/SFML/Window/Joystick.hpp	26;"	d
U	include/SFML/Window/Joystick.hpp	/^        U,    \/\/\/< The U axis$/;"	e	enum:sf::Joystick::Axis
V	include/SFML/Window/Joystick.hpp	/^        V,    \/\/\/< The V axis$/;"	e	enum:sf::Joystick::Axis
X	include/SFML/Window/Joystick.hpp	/^        X,    \/\/\/< The X axis$/;"	e	enum:sf::Joystick::Axis
Y	include/SFML/Window/Joystick.hpp	/^        Y,    \/\/\/< The Y axis$/;"	e	enum:sf::Joystick::Axis
Z	include/SFML/Window/Joystick.hpp	/^        Z,    \/\/\/< The Z axis$/;"	e	enum:sf::Joystick::Axis
sf	include/SFML/Window/Joystick.hpp	/^namespace sf$/;"	n
A	include/SFML/Window/Keyboard.hpp	/^        A = 0,        \/\/\/< The A key$/;"	e	enum:sf::Keyboard::Key
Add	include/SFML/Window/Keyboard.hpp	/^        Add,          \/\/\/< The + key$/;"	e	enum:sf::Keyboard::Key
B	include/SFML/Window/Keyboard.hpp	/^        B,            \/\/\/< The B key$/;"	e	enum:sf::Keyboard::Key
BackSlash	include/SFML/Window/Keyboard.hpp	/^        BackSlash,    \/\/\/< The \\ key$/;"	e	enum:sf::Keyboard::Key
BackSpace	include/SFML/Window/Keyboard.hpp	/^        BackSpace,    \/\/\/< The Backspace key$/;"	e	enum:sf::Keyboard::Key
C	include/SFML/Window/Keyboard.hpp	/^        C,            \/\/\/< The C key$/;"	e	enum:sf::Keyboard::Key
Comma	include/SFML/Window/Keyboard.hpp	/^        Comma,        \/\/\/< The , key$/;"	e	enum:sf::Keyboard::Key
D	include/SFML/Window/Keyboard.hpp	/^        D,            \/\/\/< The D key$/;"	e	enum:sf::Keyboard::Key
Dash	include/SFML/Window/Keyboard.hpp	/^        Dash,         \/\/\/< The - key$/;"	e	enum:sf::Keyboard::Key
Delete	include/SFML/Window/Keyboard.hpp	/^        Delete,       \/\/\/< The Delete key$/;"	e	enum:sf::Keyboard::Key
Divide	include/SFML/Window/Keyboard.hpp	/^        Divide,       \/\/\/< The \/ key$/;"	e	enum:sf::Keyboard::Key
Down	include/SFML/Window/Keyboard.hpp	/^        Down,         \/\/\/< Down arrow$/;"	e	enum:sf::Keyboard::Key
E	include/SFML/Window/Keyboard.hpp	/^        E,            \/\/\/< The E key$/;"	e	enum:sf::Keyboard::Key
End	include/SFML/Window/Keyboard.hpp	/^        End,          \/\/\/< The End key$/;"	e	enum:sf::Keyboard::Key
Equal	include/SFML/Window/Keyboard.hpp	/^        Equal,        \/\/\/< The = key$/;"	e	enum:sf::Keyboard::Key
Escape	include/SFML/Window/Keyboard.hpp	/^        Escape,       \/\/\/< The Escape key$/;"	e	enum:sf::Keyboard::Key
F	include/SFML/Window/Keyboard.hpp	/^        F,            \/\/\/< The F key$/;"	e	enum:sf::Keyboard::Key
F1	include/SFML/Window/Keyboard.hpp	/^        F1,           \/\/\/< The F1 key$/;"	e	enum:sf::Keyboard::Key
F10	include/SFML/Window/Keyboard.hpp	/^        F10,          \/\/\/< The F10 key$/;"	e	enum:sf::Keyboard::Key
F11	include/SFML/Window/Keyboard.hpp	/^        F11,          \/\/\/< The F11 key$/;"	e	enum:sf::Keyboard::Key
F12	include/SFML/Window/Keyboard.hpp	/^        F12,          \/\/\/< The F12 key$/;"	e	enum:sf::Keyboard::Key
F13	include/SFML/Window/Keyboard.hpp	/^        F13,          \/\/\/< The F13 key$/;"	e	enum:sf::Keyboard::Key
F14	include/SFML/Window/Keyboard.hpp	/^        F14,          \/\/\/< The F14 key$/;"	e	enum:sf::Keyboard::Key
F15	include/SFML/Window/Keyboard.hpp	/^        F15,          \/\/\/< The F15 key$/;"	e	enum:sf::Keyboard::Key
F2	include/SFML/Window/Keyboard.hpp	/^        F2,           \/\/\/< The F2 key$/;"	e	enum:sf::Keyboard::Key
F3	include/SFML/Window/Keyboard.hpp	/^        F3,           \/\/\/< The F3 key$/;"	e	enum:sf::Keyboard::Key
F4	include/SFML/Window/Keyboard.hpp	/^        F4,           \/\/\/< The F4 key$/;"	e	enum:sf::Keyboard::Key
F5	include/SFML/Window/Keyboard.hpp	/^        F5,           \/\/\/< The F5 key$/;"	e	enum:sf::Keyboard::Key
F6	include/SFML/Window/Keyboard.hpp	/^        F6,           \/\/\/< The F6 key$/;"	e	enum:sf::Keyboard::Key
F7	include/SFML/Window/Keyboard.hpp	/^        F7,           \/\/\/< The F7 key$/;"	e	enum:sf::Keyboard::Key
F8	include/SFML/Window/Keyboard.hpp	/^        F8,           \/\/\/< The F8 key$/;"	e	enum:sf::Keyboard::Key
F9	include/SFML/Window/Keyboard.hpp	/^        F9,           \/\/\/< The F9 key$/;"	e	enum:sf::Keyboard::Key
G	include/SFML/Window/Keyboard.hpp	/^        G,            \/\/\/< The G key$/;"	e	enum:sf::Keyboard::Key
H	include/SFML/Window/Keyboard.hpp	/^        H,            \/\/\/< The H key$/;"	e	enum:sf::Keyboard::Key
Home	include/SFML/Window/Keyboard.hpp	/^        Home,         \/\/\/< The Home key$/;"	e	enum:sf::Keyboard::Key
I	include/SFML/Window/Keyboard.hpp	/^        I,            \/\/\/< The I key$/;"	e	enum:sf::Keyboard::Key
Insert	include/SFML/Window/Keyboard.hpp	/^        Insert,       \/\/\/< The Insert key$/;"	e	enum:sf::Keyboard::Key
J	include/SFML/Window/Keyboard.hpp	/^        J,            \/\/\/< The J key$/;"	e	enum:sf::Keyboard::Key
K	include/SFML/Window/Keyboard.hpp	/^        K,            \/\/\/< The K key$/;"	e	enum:sf::Keyboard::Key
Key	include/SFML/Window/Keyboard.hpp	/^    enum Key$/;"	g	class:sf::Keyboard
KeyCount	include/SFML/Window/Keyboard.hpp	/^        KeyCount      \/\/\/< Keep last -- the total number of keyboard keys$/;"	e	enum:sf::Keyboard::Key
Keyboard	include/SFML/Window/Keyboard.hpp	/^class SFML_WINDOW_API Keyboard$/;"	c	namespace:sf
L	include/SFML/Window/Keyboard.hpp	/^        L,            \/\/\/< The L key$/;"	e	enum:sf::Keyboard::Key
LAlt	include/SFML/Window/Keyboard.hpp	/^        LAlt,         \/\/\/< The left Alt key$/;"	e	enum:sf::Keyboard::Key
LBracket	include/SFML/Window/Keyboard.hpp	/^        LBracket,     \/\/\/< The [ key$/;"	e	enum:sf::Keyboard::Key
LControl	include/SFML/Window/Keyboard.hpp	/^        LControl,     \/\/\/< The left Control key$/;"	e	enum:sf::Keyboard::Key
LShift	include/SFML/Window/Keyboard.hpp	/^        LShift,       \/\/\/< The left Shift key$/;"	e	enum:sf::Keyboard::Key
LSystem	include/SFML/Window/Keyboard.hpp	/^        LSystem,      \/\/\/< The left OS specific key: window (Windows and Linux), apple (MacOS X), ...$/;"	e	enum:sf::Keyboard::Key
Left	include/SFML/Window/Keyboard.hpp	/^        Left,         \/\/\/< Left arrow$/;"	e	enum:sf::Keyboard::Key
M	include/SFML/Window/Keyboard.hpp	/^        M,            \/\/\/< The M key$/;"	e	enum:sf::Keyboard::Key
Menu	include/SFML/Window/Keyboard.hpp	/^        Menu,         \/\/\/< The Menu key$/;"	e	enum:sf::Keyboard::Key
Multiply	include/SFML/Window/Keyboard.hpp	/^        Multiply,     \/\/\/< The * key$/;"	e	enum:sf::Keyboard::Key
N	include/SFML/Window/Keyboard.hpp	/^        N,            \/\/\/< The N key$/;"	e	enum:sf::Keyboard::Key
Num0	include/SFML/Window/Keyboard.hpp	/^        Num0,         \/\/\/< The 0 key$/;"	e	enum:sf::Keyboard::Key
Num1	include/SFML/Window/Keyboard.hpp	/^        Num1,         \/\/\/< The 1 key$/;"	e	enum:sf::Keyboard::Key
Num2	include/SFML/Window/Keyboard.hpp	/^        Num2,         \/\/\/< The 2 key$/;"	e	enum:sf::Keyboard::Key
Num3	include/SFML/Window/Keyboard.hpp	/^        Num3,         \/\/\/< The 3 key$/;"	e	enum:sf::Keyboard::Key
Num4	include/SFML/Window/Keyboard.hpp	/^        Num4,         \/\/\/< The 4 key$/;"	e	enum:sf::Keyboard::Key
Num5	include/SFML/Window/Keyboard.hpp	/^        Num5,         \/\/\/< The 5 key$/;"	e	enum:sf::Keyboard::Key
Num6	include/SFML/Window/Keyboard.hpp	/^        Num6,         \/\/\/< The 6 key$/;"	e	enum:sf::Keyboard::Key
Num7	include/SFML/Window/Keyboard.hpp	/^        Num7,         \/\/\/< The 7 key$/;"	e	enum:sf::Keyboard::Key
Num8	include/SFML/Window/Keyboard.hpp	/^        Num8,         \/\/\/< The 8 key$/;"	e	enum:sf::Keyboard::Key
Num9	include/SFML/Window/Keyboard.hpp	/^        Num9,         \/\/\/< The 9 key$/;"	e	enum:sf::Keyboard::Key
Numpad0	include/SFML/Window/Keyboard.hpp	/^        Numpad0,      \/\/\/< The numpad 0 key$/;"	e	enum:sf::Keyboard::Key
Numpad1	include/SFML/Window/Keyboard.hpp	/^        Numpad1,      \/\/\/< The numpad 1 key$/;"	e	enum:sf::Keyboard::Key
Numpad2	include/SFML/Window/Keyboard.hpp	/^        Numpad2,      \/\/\/< The numpad 2 key$/;"	e	enum:sf::Keyboard::Key
Numpad3	include/SFML/Window/Keyboard.hpp	/^        Numpad3,      \/\/\/< The numpad 3 key$/;"	e	enum:sf::Keyboard::Key
Numpad4	include/SFML/Window/Keyboard.hpp	/^        Numpad4,      \/\/\/< The numpad 4 key$/;"	e	enum:sf::Keyboard::Key
Numpad5	include/SFML/Window/Keyboard.hpp	/^        Numpad5,      \/\/\/< The numpad 5 key$/;"	e	enum:sf::Keyboard::Key
Numpad6	include/SFML/Window/Keyboard.hpp	/^        Numpad6,      \/\/\/< The numpad 6 key$/;"	e	enum:sf::Keyboard::Key
Numpad7	include/SFML/Window/Keyboard.hpp	/^        Numpad7,      \/\/\/< The numpad 7 key$/;"	e	enum:sf::Keyboard::Key
Numpad8	include/SFML/Window/Keyboard.hpp	/^        Numpad8,      \/\/\/< The numpad 8 key$/;"	e	enum:sf::Keyboard::Key
Numpad9	include/SFML/Window/Keyboard.hpp	/^        Numpad9,      \/\/\/< The numpad 9 key$/;"	e	enum:sf::Keyboard::Key
O	include/SFML/Window/Keyboard.hpp	/^        O,            \/\/\/< The O key$/;"	e	enum:sf::Keyboard::Key
P	include/SFML/Window/Keyboard.hpp	/^        P,            \/\/\/< The P key$/;"	e	enum:sf::Keyboard::Key
PageDown	include/SFML/Window/Keyboard.hpp	/^        PageDown,     \/\/\/< The Page down key$/;"	e	enum:sf::Keyboard::Key
PageUp	include/SFML/Window/Keyboard.hpp	/^        PageUp,       \/\/\/< The Page up key$/;"	e	enum:sf::Keyboard::Key
Pause	include/SFML/Window/Keyboard.hpp	/^        Pause,        \/\/\/< The Pause key$/;"	e	enum:sf::Keyboard::Key
Period	include/SFML/Window/Keyboard.hpp	/^        Period,       \/\/\/< The . key$/;"	e	enum:sf::Keyboard::Key
Q	include/SFML/Window/Keyboard.hpp	/^        Q,            \/\/\/< The Q key$/;"	e	enum:sf::Keyboard::Key
Quote	include/SFML/Window/Keyboard.hpp	/^        Quote,        \/\/\/< The ' key$/;"	e	enum:sf::Keyboard::Key
R	include/SFML/Window/Keyboard.hpp	/^        R,            \/\/\/< The R key$/;"	e	enum:sf::Keyboard::Key
RAlt	include/SFML/Window/Keyboard.hpp	/^        RAlt,         \/\/\/< The right Alt key$/;"	e	enum:sf::Keyboard::Key
RBracket	include/SFML/Window/Keyboard.hpp	/^        RBracket,     \/\/\/< The ] key$/;"	e	enum:sf::Keyboard::Key
RControl	include/SFML/Window/Keyboard.hpp	/^        RControl,     \/\/\/< The right Control key$/;"	e	enum:sf::Keyboard::Key
RShift	include/SFML/Window/Keyboard.hpp	/^        RShift,       \/\/\/< The right Shift key$/;"	e	enum:sf::Keyboard::Key
RSystem	include/SFML/Window/Keyboard.hpp	/^        RSystem,      \/\/\/< The right OS specific key: window (Windows and Linux), apple (MacOS X), ...$/;"	e	enum:sf::Keyboard::Key
Return	include/SFML/Window/Keyboard.hpp	/^        Return,       \/\/\/< The Return key$/;"	e	enum:sf::Keyboard::Key
Right	include/SFML/Window/Keyboard.hpp	/^        Right,        \/\/\/< Right arrow$/;"	e	enum:sf::Keyboard::Key
S	include/SFML/Window/Keyboard.hpp	/^        S,            \/\/\/< The S key$/;"	e	enum:sf::Keyboard::Key
SFML_KEYBOARD_HPP	include/SFML/Window/Keyboard.hpp	26;"	d
SemiColon	include/SFML/Window/Keyboard.hpp	/^        SemiColon,    \/\/\/< The ; key$/;"	e	enum:sf::Keyboard::Key
Slash	include/SFML/Window/Keyboard.hpp	/^        Slash,        \/\/\/< The \/ key$/;"	e	enum:sf::Keyboard::Key
Space	include/SFML/Window/Keyboard.hpp	/^        Space,        \/\/\/< The Space key$/;"	e	enum:sf::Keyboard::Key
Subtract	include/SFML/Window/Keyboard.hpp	/^        Subtract,     \/\/\/< The - key$/;"	e	enum:sf::Keyboard::Key
T	include/SFML/Window/Keyboard.hpp	/^        T,            \/\/\/< The T key$/;"	e	enum:sf::Keyboard::Key
Tab	include/SFML/Window/Keyboard.hpp	/^        Tab,          \/\/\/< The Tabulation key$/;"	e	enum:sf::Keyboard::Key
Tilde	include/SFML/Window/Keyboard.hpp	/^        Tilde,        \/\/\/< The ~ key$/;"	e	enum:sf::Keyboard::Key
U	include/SFML/Window/Keyboard.hpp	/^        U,            \/\/\/< The U key$/;"	e	enum:sf::Keyboard::Key
Unknown	include/SFML/Window/Keyboard.hpp	/^        Unknown = -1, \/\/\/< Unhandled key$/;"	e	enum:sf::Keyboard::Key
Up	include/SFML/Window/Keyboard.hpp	/^        Up,           \/\/\/< Up arrow$/;"	e	enum:sf::Keyboard::Key
V	include/SFML/Window/Keyboard.hpp	/^        V,            \/\/\/< The V key$/;"	e	enum:sf::Keyboard::Key
W	include/SFML/Window/Keyboard.hpp	/^        W,            \/\/\/< The W key$/;"	e	enum:sf::Keyboard::Key
X	include/SFML/Window/Keyboard.hpp	/^        X,            \/\/\/< The X key$/;"	e	enum:sf::Keyboard::Key
Y	include/SFML/Window/Keyboard.hpp	/^        Y,            \/\/\/< The Y key$/;"	e	enum:sf::Keyboard::Key
Z	include/SFML/Window/Keyboard.hpp	/^        Z,            \/\/\/< The Z key$/;"	e	enum:sf::Keyboard::Key
sf	include/SFML/Window/Keyboard.hpp	/^namespace sf$/;"	n
Button	include/SFML/Window/Mouse.hpp	/^    enum Button$/;"	g	class:sf::Mouse
ButtonCount	include/SFML/Window/Mouse.hpp	/^        ButtonCount \/\/\/< Keep last -- the total number of mouse buttons$/;"	e	enum:sf::Mouse::Button
Left	include/SFML/Window/Mouse.hpp	/^        Left,       \/\/\/< The left mouse button$/;"	e	enum:sf::Mouse::Button
Middle	include/SFML/Window/Mouse.hpp	/^        Middle,     \/\/\/< The middle (wheel) mouse button$/;"	e	enum:sf::Mouse::Button
Mouse	include/SFML/Window/Mouse.hpp	/^class SFML_WINDOW_API Mouse$/;"	c	namespace:sf
Right	include/SFML/Window/Mouse.hpp	/^        Right,      \/\/\/< The right mouse button$/;"	e	enum:sf::Mouse::Button
SFML_MOUSE_HPP	include/SFML/Window/Mouse.hpp	26;"	d
XButton1	include/SFML/Window/Mouse.hpp	/^        XButton1,   \/\/\/< The first extra mouse button$/;"	e	enum:sf::Mouse::Button
XButton2	include/SFML/Window/Mouse.hpp	/^        XButton2,   \/\/\/< The second extra mouse button$/;"	e	enum:sf::Mouse::Button
sf	include/SFML/Window/Mouse.hpp	/^namespace sf$/;"	n
SFML_VIDEOMODE_HPP	include/SFML/Window/VideoMode.hpp	26;"	d
VideoMode	include/SFML/Window/VideoMode.hpp	/^class SFML_WINDOW_API VideoMode$/;"	c	namespace:sf
bitsPerPixel	include/SFML/Window/VideoMode.hpp	/^    unsigned int bitsPerPixel; \/\/\/< Video mode pixel depth, in bits per pixels$/;"	m	class:sf::VideoMode
height	include/SFML/Window/VideoMode.hpp	/^    unsigned int height;       \/\/\/< Video mode height, in pixels$/;"	m	class:sf::VideoMode
sf	include/SFML/Window/VideoMode.hpp	/^namespace sf$/;"	n
width	include/SFML/Window/VideoMode.hpp	/^    unsigned int width;        \/\/\/< Video mode width, in pixels$/;"	m	class:sf::VideoMode
SFML_WINDOW_HPP	include/SFML/Window/Window.hpp	26;"	d
Window	include/SFML/Window/Window.hpp	/^class SFML_WINDOW_API Window : GlResource, NonCopyable$/;"	c	namespace:sf
m_clock	include/SFML/Window/Window.hpp	/^    Clock             m_clock;          \/\/\/< Clock for measuring the elapsed time between frames$/;"	m	class:sf::Window
m_context	include/SFML/Window/Window.hpp	/^    priv::GlContext*  m_context;        \/\/\/< Platform-specific implementation of the OpenGL context$/;"	m	class:sf::Window
m_frameTimeLimit	include/SFML/Window/Window.hpp	/^    Time              m_frameTimeLimit; \/\/\/< Current framerate limit$/;"	m	class:sf::Window
m_impl	include/SFML/Window/Window.hpp	/^    priv::WindowImpl* m_impl;           \/\/\/< Platform-specific implementation of the window$/;"	m	class:sf::Window
m_size	include/SFML/Window/Window.hpp	/^    Vector2u          m_size;           \/\/\/< Current size of the window$/;"	m	class:sf::Window
priv	include/SFML/Window/Window.hpp	/^namespace priv$/;"	n	namespace:sf
sf	include/SFML/Window/Window.hpp	/^namespace sf$/;"	n
SFML_WINDOWHANDLE_HPP	include/SFML/Window/WindowHandle.hpp	26;"	d
WindowHandle	include/SFML/Window/WindowHandle.hpp	/^    typedef HWND__* WindowHandle;$/;"	t	namespace:sf
sf	include/SFML/Window/WindowHandle.hpp	/^namespace sf$/;"	n
Close	include/SFML/Window/WindowStyle.hpp	/^        Close      = 1 << 2, \/\/\/< Titlebar + close button$/;"	e	enum:sf::Style::__anon11
Default	include/SFML/Window/WindowStyle.hpp	/^        Default = Titlebar | Resize | Close \/\/\/< Default window style$/;"	e	enum:sf::Style::__anon11
Fullscreen	include/SFML/Window/WindowStyle.hpp	/^        Fullscreen = 1 << 3, \/\/\/< Fullscreen mode (this flag and all others are mutually exclusive)$/;"	e	enum:sf::Style::__anon11
None	include/SFML/Window/WindowStyle.hpp	/^        None       = 0,      \/\/\/< No border \/ title bar (this flag and all others are mutually exclusive)$/;"	e	enum:sf::Style::__anon11
Resize	include/SFML/Window/WindowStyle.hpp	/^        Resize     = 1 << 1, \/\/\/< Titlebar + resizable border + maximize button$/;"	e	enum:sf::Style::__anon11
SFML_WINDOWSTYLE_HPP	include/SFML/Window/WindowStyle.hpp	26;"	d
Style	include/SFML/Window/WindowStyle.hpp	/^namespace Style$/;"	n	namespace:sf
Titlebar	include/SFML/Window/WindowStyle.hpp	/^        Titlebar   = 1 << 0, \/\/\/< Title bar + fixed border$/;"	e	enum:sf::Style::__anon11
sf	include/SFML/Window/WindowStyle.hpp	/^namespace sf$/;"	n
backward	include/backward/backward.cpp	/^namespace backward {$/;"	n	file:
sh	include/backward/backward.cpp	/^backward::SignalHandling sh;$/;"	m	namespace:backward	file:
BACKWARD_CXX11	include/backward/backward.hpp	35;"	d
BACKWARD_CXX98	include/backward/backward.hpp	37;"	d
BACKWARD_HAS_BACKTRACE	include/backward/backward.hpp	95;"	d
BACKWARD_HAS_BACKTRACE	include/backward/backward.hpp	96;"	d
BACKWARD_HAS_BACKTRACE_SYMBOL	include/backward/backward.hpp	142;"	d
BACKWARD_HAS_BACKTRACE_SYMBOL	include/backward/backward.hpp	143;"	d
BACKWARD_HAS_BFD	include/backward/backward.hpp	140;"	d
BACKWARD_HAS_BFD	include/backward/backward.hpp	141;"	d
BACKWARD_HAS_DW	include/backward/backward.hpp	138;"	d
BACKWARD_HAS_DW	include/backward/backward.hpp	139;"	d
BACKWARD_HAS_UNWIND	include/backward/backward.hpp	93;"	d
BACKWARD_HAS_UNWIND	include/backward/backward.hpp	94;"	d
BACKWARD_SYSTEM_LINUX	include/backward/backward.hpp	53;"	d
BACKWARD_SYSTEM_UNKNOWN	include/backward/backward.hpp	55;"	d
Color	include/backward/backward.hpp	/^namespace Color {$/;"	n	namespace:backward
Colorize	include/backward/backward.hpp	/^	Colorize(std::FILE* os):$/;"	f	class:backward::Colorize
Colorize	include/backward/backward.hpp	/^	Colorize(std::FILE*) {}$/;"	f	class:backward::Colorize
Colorize	include/backward/backward.hpp	/^class Colorize {$/;"	c	namespace:backward
H_6B9572DA_A64B_49E6_B234_051480991C89	include/backward/backward.hpp	25;"	d
Kind	include/backward/backward.hpp	/^	enum Kind { VALUE, LIST, MAP };$/;"	g	class:backward::Variable
LIST	include/backward/backward.hpp	/^	enum Kind { VALUE, LIST, MAP };$/;"	e	enum:backward::Variable::Kind
MAP	include/backward/backward.hpp	/^	enum Kind { VALUE, LIST, MAP };$/;"	e	enum:backward::Variable::Kind
Printer	include/backward/backward.hpp	/^	Printer():$/;"	f	class:backward::Printer
Printer	include/backward/backward.hpp	/^class Printer {$/;"	c	namespace:backward
ResolvedTrace	include/backward/backward.hpp	/^	ResolvedTrace(const Trace& mini_trace):$/;"	f	struct:backward::ResolvedTrace
ResolvedTrace	include/backward/backward.hpp	/^	ResolvedTrace(const TraceWithLocals& mini_trace_with_locals):$/;"	f	struct:backward::ResolvedTrace
ResolvedTrace	include/backward/backward.hpp	/^struct ResolvedTrace: public TraceWithLocals {$/;"	s	namespace:backward
SignalHandling	include/backward/backward.hpp	/^	SignalHandling(const std::vector<int>& = std::vector<int>()) {}$/;"	f	class:backward::SignalHandling
SignalHandling	include/backward/backward.hpp	/^  SignalHandling(const std::vector<int>& signals = make_default_signals()) : _loaded(false) { $/;"	f	class:backward::SignalHandling
SignalHandling	include/backward/backward.hpp	/^class SignalHandling {$/;"	c	namespace:backward
SnippetFactory	include/backward/backward.hpp	/^class SnippetFactory {$/;"	c	namespace:backward
SourceFile	include/backward/backward.hpp	/^	SourceFile() {}$/;"	f	class:backward::SourceFile
SourceFile	include/backward/backward.hpp	/^	SourceFile(SourceFile&& from): _file(0) {$/;"	f	class:backward::SourceFile
SourceFile	include/backward/backward.hpp	/^	SourceFile(const std::string& path): _file(new std::ifstream(path.c_str())) {}$/;"	f	class:backward::SourceFile
SourceFile	include/backward/backward.hpp	/^	explicit SourceFile(const SourceFile& from) {$/;"	f	class:backward::SourceFile
SourceFile	include/backward/backward.hpp	/^class SourceFile {$/;"	c	namespace:backward
SourceLoc	include/backward/backward.hpp	/^		SourceLoc(): line(0), col(0) {}$/;"	f	struct:backward::ResolvedTrace::SourceLoc
SourceLoc	include/backward/backward.hpp	/^	struct SourceLoc {$/;"	s	struct:backward::ResolvedTrace
StackTrace	include/backward/backward.hpp	/^class StackTrace:$/;"	c	namespace:backward
StackTraceImpl	include/backward/backward.hpp	/^class StackTraceImpl {$/;"	c	namespace:backward
StackTraceImpl	include/backward/backward.hpp	/^class StackTraceImpl<system_tag::linux_tag>: public StackTraceLinuxImplHolder {$/;"	c	namespace:backward
StackTraceLinuxImplBase	include/backward/backward.hpp	/^	StackTraceLinuxImplBase(): _thread_id(0), _skip(0) {}$/;"	f	class:backward::StackTraceLinuxImplBase
StackTraceLinuxImplBase	include/backward/backward.hpp	/^class StackTraceLinuxImplBase {$/;"	c	namespace:backward
StackTraceLinuxImplHolder	include/backward/backward.hpp	/^class StackTraceLinuxImplHolder: public StackTraceLinuxImplBase {$/;"	c	namespace:backward
StackTraceWithLocals	include/backward/backward.hpp	/^class StackTraceWithLocals:$/;"	c	namespace:backward
StackTraceWithLocalsImpl	include/backward/backward.hpp	/^class StackTraceWithLocalsImpl:$/;"	c	namespace:backward
StackTraceWithLocalsImpl	include/backward/backward.hpp	/^class StackTraceWithLocalsImpl<system_tag::linux_tag>:$/;"	c	namespace:backward
Trace	include/backward/backward.hpp	/^	Trace():$/;"	f	struct:backward::Trace
Trace	include/backward/backward.hpp	/^	explicit Trace(void* addr, size_t idx):$/;"	f	struct:backward::Trace
Trace	include/backward/backward.hpp	/^struct Trace {$/;"	s	namespace:backward
TraceResolver	include/backward/backward.hpp	/^class TraceResolver:$/;"	c	namespace:backward
TraceResolverImpl	include/backward/backward.hpp	/^class TraceResolverImpl<system_tag::linux_tag>:$/;"	c	namespace:backward
TraceResolverImpl	include/backward/backward.hpp	/^class TraceResolverImpl<system_tag::unknown_tag> {$/;"	c	namespace:backward
TraceResolverLinuxImpl	include/backward/backward.hpp	/^	TraceResolverLinuxImpl(): _bfd_loaded(false) {}$/;"	f	class:backward::TraceResolverLinuxImpl
TraceResolverLinuxImpl	include/backward/backward.hpp	/^	TraceResolverLinuxImpl(): _dwfl_handle_initialized(false) {}$/;"	f	class:backward::TraceResolverLinuxImpl
TraceResolverLinuxImpl	include/backward/backward.hpp	/^class TraceResolverLinuxImpl<trace_resolver_tag::backtrace_symbol>:$/;"	c	namespace:backward
TraceResolverLinuxImpl	include/backward/backward.hpp	/^class TraceResolverLinuxImpl<trace_resolver_tag::libbfd>:$/;"	c	namespace:backward
TraceResolverLinuxImpl	include/backward/backward.hpp	/^class TraceResolverLinuxImpl<trace_resolver_tag::libdw>:$/;"	c	namespace:backward
TraceResolverLinuxImplBase	include/backward/backward.hpp	/^class TraceResolverLinuxImplBase {$/;"	c	namespace:backward
TraceWithLocals	include/backward/backward.hpp	/^	TraceWithLocals(): Trace() {}$/;"	f	struct:backward::TraceWithLocals
TraceWithLocals	include/backward/backward.hpp	/^	TraceWithLocals(const Trace& mini_trace):$/;"	f	struct:backward::TraceWithLocals
TraceWithLocals	include/backward/backward.hpp	/^struct TraceWithLocals: public Trace {$/;"	s	namespace:backward
Unwinder	include/backward/backward.hpp	/^class Unwinder {$/;"	c	namespace:backward::details
VALUE	include/backward/backward.hpp	/^	enum Kind { VALUE, LIST, MAP };$/;"	e	enum:backward::Variable::Kind
Variable	include/backward/backward.hpp	/^	Variable(Kind k): kind(k) {$/;"	f	class:backward::Variable
Variable	include/backward/backward.hpp	/^class Variable {$/;"	c	namespace:backward
_GNU_SOURCE	include/backward/backward.hpp	182;"	d
_GNU_SOURCE	include/backward/backward.hpp	184;"	d
_bfd_loaded	include/backward/backward.hpp	/^	bool                _bfd_loaded;$/;"	m	class:backward::TraceResolverLinuxImpl
_demangle_buffer	include/backward/backward.hpp	/^	details::handle<char*> _demangle_buffer;$/;"	m	class:backward::TraceResolverLinuxImplBase
_demangle_buffer_length	include/backward/backward.hpp	/^	size_t                 _demangle_buffer_length;$/;"	m	class:backward::TraceResolverLinuxImplBase
_depth	include/backward/backward.hpp	/^	size_t  _depth;$/;"	m	class:backward::details::Unwinder
_dwfl_cb	include/backward/backward.hpp	/^		           _dwfl_cb;$/;"	m	class:backward::TraceResolverLinuxImpl
_dwfl_handle	include/backward/backward.hpp	/^	dwfl_handle_t  _dwfl_handle;$/;"	m	class:backward::TraceResolverLinuxImpl
_dwfl_handle_initialized	include/backward/backward.hpp	/^	bool           _dwfl_handle_initialized;$/;"	m	class:backward::TraceResolverLinuxImpl
_empty	include/backward/backward.hpp	/^	bool _empty;$/;"	m	class:backward::details::handle
_f	include/backward/backward.hpp	/^	F*      _f;$/;"	m	class:backward::details::Unwinder
_file	include/backward/backward.hpp	/^			> _file;$/;"	m	class:backward::SourceFile
_fobj_bfd_map	include/backward/backward.hpp	/^	fobj_bfd_map_t      _fobj_bfd_map;$/;"	m	class:backward::TraceResolverLinuxImpl
_index	include/backward/backward.hpp	/^	ssize_t _index;$/;"	m	class:backward::details::Unwinder
_istty	include/backward/backward.hpp	/^	bool       _istty;$/;"	m	class:backward::Colorize
_loaded	include/backward/backward.hpp	/^	bool                   _loaded;$/;"	m	class:backward::SignalHandling
_nil_trace	include/backward/backward.hpp	/^	TraceWithLocals              _nil_trace;$/;"	m	class:backward::StackTraceWithLocalsImpl
_os	include/backward/backward.hpp	/^	std::FILE* _os;$/;"	m	class:backward::Colorize
_reset	include/backward/backward.hpp	/^	bool       _reset;$/;"	m	class:backward::Colorize
_resolver	include/backward/backward.hpp	/^	TraceResolver  _resolver;$/;"	m	class:backward::Printer
_skip	include/backward/backward.hpp	/^	size_t _skip;$/;"	m	class:backward::StackTraceLinuxImplBase
_snippets	include/backward/backward.hpp	/^	SnippetFactory _snippets;$/;"	m	class:backward::Printer
_src_files	include/backward/backward.hpp	/^	src_files_t _src_files;$/;"	m	class:backward::SnippetFactory
_stack_content	include/backward/backward.hpp	/^	details::handle<char*> _stack_content;$/;"	m	class:backward::SignalHandling
_stacktrace	include/backward/backward.hpp	/^	std::vector<TraceWithLocals> _stacktrace;$/;"	m	class:backward::StackTraceWithLocalsImpl
_stacktrace	include/backward/backward.hpp	/^	std::vector<void*> _stacktrace;$/;"	m	class:backward::StackTraceLinuxImplHolder
_symbols	include/backward/backward.hpp	/^	details::handle<char**> _symbols;$/;"	m	class:backward::TraceResolverLinuxImpl
_thread_id	include/backward/backward.hpp	/^	size_t _thread_id;$/;"	m	class:backward::StackTraceLinuxImplBase
_val	include/backward/backward.hpp	/^	T    _val;$/;"	m	class:backward::details::handle
addr	include/backward/backward.hpp	/^		void* addr;$/;"	m	struct:backward::TraceResolverLinuxImpl::find_sym_context
addr	include/backward/backward.hpp	/^	void*  addr;$/;"	m	struct:backward::Trace
address	include/backward/backward.hpp	/^	bool address;$/;"	m	class:backward::Printer
backtrace	include/backward/backward.hpp	/^	_Unwind_Reason_Code backtrace(_Unwind_Context* ctx) {$/;"	f	class:backward::details::Unwinder
backtrace_inliners	include/backward/backward.hpp	/^	ResolvedTrace::source_locs_t backtrace_inliners(bfd_fileobject& fobj,$/;"	f	class:backward::TraceResolverLinuxImpl
backtrace_trampoline	include/backward/backward.hpp	/^	static _Unwind_Reason_Code backtrace_trampoline($/;"	f	class:backward::details::Unwinder
backward	include/backward/backward.hpp	/^	namespace backward {$/;"	n
backward	include/backward/backward.hpp	/^namespace backward {$/;"	n
base_addr	include/backward/backward.hpp	/^		bfd_vma      base_addr;$/;"	m	struct:backward::TraceResolverLinuxImpl::bfd_fileobject
base_addr	include/backward/backward.hpp	/^		void* base_addr;$/;"	m	struct:backward::TraceResolverLinuxImpl::find_sym_context
begin	include/backward/backward.hpp	/^	void** begin() {$/;"	f	class:backward::StackTraceLinuxImplHolder
bfd_fileobject	include/backward/backward.hpp	/^	struct bfd_fileobject {$/;"	s	class:backward::TraceResolverLinuxImpl
bfd_handle_t	include/backward/backward.hpp	/^				> bfd_handle_t;$/;"	t	class:backward::TraceResolverLinuxImpl
bfd_symtab_t	include/backward/backward.hpp	/^	typedef details::handle<asymbol**> bfd_symtab_t;$/;"	t	class:backward::TraceResolverLinuxImpl
callback	include/backward/backward.hpp	/^		callback(StackTraceImpl& self): self(self) {}$/;"	f	struct:backward::StackTraceImpl::callback
callback	include/backward/backward.hpp	/^		callback(StackTraceWithLocalsImpl& self): self(self) {}$/;"	f	struct:backward::StackTraceWithLocalsImpl::callback
callback	include/backward/backward.hpp	/^	struct callback {$/;"	s	class:backward::StackTraceImpl
callback	include/backward/backward.hpp	/^	struct callback {$/;"	s	class:backward::StackTraceWithLocalsImpl
col	include/backward/backward.hpp	/^		unsigned    col;$/;"	m	struct:backward::ResolvedTrace::SourceLoc
color	include/backward/backward.hpp	/^	bool color;$/;"	m	class:backward::Printer
cstrings_eq	include/backward/backward.hpp	/^	bool cstrings_eq(const char* a, const char* b) {$/;"	f	class:backward::TraceResolverLinuxImpl
current	include/backward/backward.hpp	/^	typedef backtrace current;$/;"	t	namespace:backward::stacktrace_tag
current	include/backward/backward.hpp	/^	typedef backtrace_symbol current;$/;"	t	namespace:backward::trace_resolver_tag
current	include/backward/backward.hpp	/^	typedef libbfd current;$/;"	t	namespace:backward::trace_resolver_tag
current	include/backward/backward.hpp	/^	typedef libdw current;$/;"	t	namespace:backward::trace_resolver_tag
current	include/backward/backward.hpp	/^	typedef unwind current;$/;"	t	namespace:backward::stacktrace_tag
current_tag	include/backward/backward.hpp	/^	typedef linux_tag current_tag;$/;"	t	namespace:backward::system_tag
current_tag	include/backward/backward.hpp	/^	typedef unknown_tag current_tag;$/;"	t	namespace:backward::system_tag
deep_first_search_by_pc	include/backward/backward.hpp	/^		static bool deep_first_search_by_pc(Dwarf_Die* parent_die,$/;"	f	class:backward::TraceResolverLinuxImpl
default_delete	include/backward/backward.hpp	/^struct default_delete {$/;"	s	namespace:backward::details
deleter	include/backward/backward.hpp	/^struct deleter {$/;"	s	namespace:backward::details
demangle	include/backward/backward.hpp	/^	std::string demangle(const char* funcname) {$/;"	f	class:backward::TraceResolverLinuxImplBase
details	include/backward/backward.hpp	/^	namespace details {$/;"	n	namespace:backward
details	include/backward/backward.hpp	/^namespace details {$/;"	n	namespace:backward
die_call_file	include/backward/backward.hpp	/^	static const char* die_call_file(Dwarf_Die *die) {$/;"	f	class:backward::TraceResolverLinuxImpl
die_has_pc	include/backward/backward.hpp	/^	static bool die_has_pc(Dwarf_Die* die, Dwarf_Addr pc) {$/;"	f	class:backward::TraceResolverLinuxImpl
dwfl_handle_t	include/backward/backward.hpp	/^		dwfl_handle_t;$/;"	t	class:backward::TraceResolverLinuxImpl
dynamic_symtab	include/backward/backward.hpp	/^		bfd_symtab_t dynamic_symtab;$/;"	m	struct:backward::TraceResolverLinuxImpl::bfd_fileobject
filename	include/backward/backward.hpp	/^		const char* filename;$/;"	m	struct:backward::TraceResolverLinuxImpl::find_sym_result
filename	include/backward/backward.hpp	/^		std::string filename;$/;"	m	struct:backward::ResolvedTrace::SourceLoc
find_fundie_by_pc	include/backward/backward.hpp	/^	static Dwarf_Die* find_fundie_by_pc(Dwarf_Die* parent_die, Dwarf_Addr pc,$/;"	f	class:backward::TraceResolverLinuxImpl
find_in_section	include/backward/backward.hpp	/^	void find_in_section(bfd_vma addr, bfd_vma base_addr,$/;"	f	class:backward::TraceResolverLinuxImpl
find_in_section_trampoline	include/backward/backward.hpp	/^	static void find_in_section_trampoline(bfd*, asection* section,$/;"	f	class:backward::TraceResolverLinuxImpl
find_sym_context	include/backward/backward.hpp	/^	struct find_sym_context {$/;"	s	class:backward::TraceResolverLinuxImpl
find_sym_result	include/backward/backward.hpp	/^	struct find_sym_result {$/;"	s	class:backward::TraceResolverLinuxImpl
find_symbol_details	include/backward/backward.hpp	/^	find_sym_result find_symbol_details(bfd_fileobject& fobj, void* addr,$/;"	f	class:backward::TraceResolverLinuxImpl
fobj	include/backward/backward.hpp	/^		bfd_fileobject* fobj;$/;"	m	struct:backward::TraceResolverLinuxImpl::find_sym_context
fobj_bfd_map_t	include/backward/backward.hpp	/^		fobj_bfd_map_t;$/;"	t	class:backward::TraceResolverLinuxImpl
found	include/backward/backward.hpp	/^		bool found;$/;"	m	struct:backward::TraceResolverLinuxImpl::find_sym_result
funcname	include/backward/backward.hpp	/^		const char* funcname;$/;"	m	struct:backward::TraceResolverLinuxImpl::find_sym_result
function	include/backward/backward.hpp	/^		std::string function;$/;"	m	struct:backward::ResolvedTrace::SourceLoc
get	include/backward/backward.hpp	/^	T get() {$/;"	f	class:backward::details::handle
get_coalesced_snippet	include/backward/backward.hpp	/^	lines_t get_coalesced_snippet(const std::string& filename,$/;"	f	class:backward::SnippetFactory
get_combined_snippet	include/backward/backward.hpp	/^	lines_t get_combined_snippet($/;"	f	class:backward::SnippetFactory
get_lines	include/backward/backward.hpp	/^	lines_t get_lines(unsigned line_start, unsigned line_count) {$/;"	f	class:backward::SourceFile
get_lines	include/backward/backward.hpp	/^	lines_t& get_lines(unsigned line_start, unsigned line_count, lines_t& lines) {$/;"	f	class:backward::SourceFile
get_snippet	include/backward/backward.hpp	/^	lines_t get_snippet(const std::string& filename,$/;"	f	class:backward::SnippetFactory
get_src_file	include/backward/backward.hpp	/^	SourceFile& get_src_file(const std::string& filename) {$/;"	f	class:backward::SnippetFactory
handle	include/backward/backward.hpp	/^		bfd_handle_t handle;$/;"	m	struct:backward::TraceResolverLinuxImpl::bfd_fileobject
handle	include/backward/backward.hpp	/^	explicit handle(): _val(), _empty(true) {}$/;"	f	class:backward::details::handle
handle	include/backward/backward.hpp	/^	explicit handle(T val): _val(val), _empty(false) {}$/;"	f	class:backward::details::handle
handle	include/backward/backward.hpp	/^	explicit handle(const handle& from): _empty(true) {$/;"	f	class:backward::details::handle
handle	include/backward/backward.hpp	/^	handle(handle&& from): _empty(true) {$/;"	f	class:backward::details::handle
handle	include/backward/backward.hpp	/^class handle {$/;"	c	namespace:backward::details
hashtable	include/backward/backward.hpp	/^		struct hashtable {$/;"	s	namespace:backward::details
idx	include/backward/backward.hpp	/^	size_t idx;$/;"	m	struct:backward::Trace
init	include/backward/backward.hpp	/^	bool init() { return false; }$/;"	f	class:backward::SignalHandling
init	include/backward/backward.hpp	/^	void init() {$/;"	f	class:backward::Colorize
init	include/backward/backward.hpp	/^	void init() {}$/;"	f	class:backward::Colorize
inliners	include/backward/backward.hpp	/^	source_locs_t                  inliners;$/;"	m	struct:backward::ResolvedTrace
inliners_search_cb	include/backward/backward.hpp	/^		inliners_search_cb(ResolvedTrace& t): trace(t) {}$/;"	f	struct:backward::TraceResolverLinuxImpl::inliners_search_cb
inliners_search_cb	include/backward/backward.hpp	/^	struct inliners_search_cb {$/;"	s	class:backward::TraceResolverLinuxImpl
is_open	include/backward/backward.hpp	/^	bool is_open() const { return _file->is_open(); }$/;"	f	class:backward::SourceFile
kind	include/backward/backward.hpp	/^	Kind kind;$/;"	m	class:backward::Variable
line	include/backward/backward.hpp	/^		unsigned    line;$/;"	m	struct:backward::ResolvedTrace::SourceLoc
line	include/backward/backward.hpp	/^		unsigned int line;$/;"	m	struct:backward::TraceResolverLinuxImpl::find_sym_result
lines_t	include/backward/backward.hpp	/^	typedef SourceFile::lines_t lines_t;$/;"	t	class:backward::SnippetFactory
lines_t	include/backward/backward.hpp	/^	typedef std::vector<std::pair<unsigned, std::string> > lines_t;$/;"	t	class:backward::SourceFile
list	include/backward/backward.hpp	/^	const list_t& list() const {$/;"	f	class:backward::Variable
list	include/backward/backward.hpp	/^	list_t& list() {$/;"	f	class:backward::Variable
list_t	include/backward/backward.hpp	/^	typedef std::vector<std::string> list_t;$/;"	t	class:backward::Variable
load_from	include/backward/backward.hpp	/^	size_t load_from(void* addr, size_t depth=32) {$/;"	f	class:backward::StackTraceImpl
load_from	include/backward/backward.hpp	/^	size_t load_from(void* addr, size_t depth=32) {$/;"	f	class:backward::StackTraceWithLocalsImpl
load_from	include/backward/backward.hpp	/^	size_t load_from(void*, size_t=0) { return 0; }$/;"	f	class:backward::StackTraceImpl
load_here	include/backward/backward.hpp	/^	size_t load_here(size_t depth=32) {$/;"	f	class:backward::StackTraceImpl
load_here	include/backward/backward.hpp	/^	size_t load_here(size_t depth=32) {$/;"	f	class:backward::StackTraceWithLocalsImpl
load_here	include/backward/backward.hpp	/^	size_t load_here(size_t=0) { return 0; }$/;"	f	class:backward::StackTraceImpl
load_object_with_bfd	include/backward/backward.hpp	/^	bfd_fileobject& load_object_with_bfd(const std::string& filename_object) {$/;"	f	class:backward::TraceResolverLinuxImpl
load_stacktrace	include/backward/backward.hpp	/^		void load_stacktrace(ST& st) {$/;"	f	class:backward::TraceResolverLinuxImpl
load_stacktrace	include/backward/backward.hpp	/^		void load_stacktrace(ST&) {}$/;"	f	class:backward::TraceResolverImpl
load_stacktrace	include/backward/backward.hpp	/^		void load_stacktrace(ST&) {}$/;"	f	class:backward::TraceResolverLinuxImpl
load_thread_info	include/backward/backward.hpp	/^	void load_thread_info() {$/;"	f	class:backward::StackTraceLinuxImplBase
loaded	include/backward/backward.hpp	/^	bool loaded() const { return _loaded; }$/;"	f	class:backward::SignalHandling
locals	include/backward/backward.hpp	/^	std::vector<Variable> locals;$/;"	m	struct:backward::TraceWithLocals
make_default_signals	include/backward/backward.hpp	/^   static std::vector<int> make_default_signals() {$/;"	f	class:backward::SignalHandling
map	include/backward/backward.hpp	/^	const map_t& map() const {$/;"	f	class:backward::Variable
map	include/backward/backward.hpp	/^	map_t& map() {$/;"	f	class:backward::Variable
map_t	include/backward/backward.hpp	/^	typedef std::vector<Variable>    map_t;$/;"	t	class:backward::Variable
name	include/backward/backward.hpp	/^	std::string name;$/;"	m	class:backward::Variable
not_isempty	include/backward/backward.hpp	/^	struct not_isempty {$/;"	s	class:backward::SourceFile
not_isspace	include/backward/backward.hpp	/^	struct not_isspace {$/;"	s	class:backward::SourceFile
object	include/backward/backward.hpp	/^	bool object;$/;"	m	class:backward::Printer
object_filename	include/backward/backward.hpp	/^	std::string                    object_filename;$/;"	m	struct:backward::ResolvedTrace
object_function	include/backward/backward.hpp	/^	std::string                    object_function;$/;"	m	struct:backward::ResolvedTrace
operator !=	include/backward/backward.hpp	/^		bool operator!=(const SourceLoc& b) const {$/;"	f	struct:backward::ResolvedTrace::SourceLoc
operator &	include/backward/backward.hpp	/^	T* operator&() {$/;"	f	class:backward::details::handle
operator ()	include/backward/backward.hpp	/^		bool operator()(char c) {$/;"	f	struct:backward::SourceFile::not_isspace
operator ()	include/backward/backward.hpp	/^		bool operator()(const lines_t::value_type& p) {$/;"	f	struct:backward::SourceFile::not_isempty
operator ()	include/backward/backward.hpp	/^		void operator()(Dwarf_Die* die) {$/;"	f	struct:backward::TraceResolverLinuxImpl::inliners_search_cb
operator ()	include/backward/backward.hpp	/^		void operator()(U& ptr) const {$/;"	f	struct:backward::details::deleter
operator ()	include/backward/backward.hpp	/^		void operator()(size_t idx, void* addr) {$/;"	f	struct:backward::StackTraceImpl::callback
operator ()	include/backward/backward.hpp	/^		void operator()(size_t idx, void* addr) {$/;"	f	struct:backward::StackTraceWithLocalsImpl::callback
operator ()	include/backward/backward.hpp	/^	size_t operator()(F& f, size_t depth) {$/;"	f	class:backward::details::Unwinder
operator ()	include/backward/backward.hpp	/^	void operator()(T& ptr) const {$/;"	f	struct:backward::details::default_delete
operator *	include/backward/backward.hpp	/^	const ref_t operator*() const { return *_val; }$/;"	f	class:backward::details::handle
operator *	include/backward/backward.hpp	/^	ref_t operator*() { return *_val; }$/;"	f	class:backward::details::handle
operator ->	include/backward/backward.hpp	/^	T operator->() { return _val; }$/;"	f	class:backward::details::handle
operator ->	include/backward/backward.hpp	/^	const T operator->() const { return _val; }$/;"	f	class:backward::details::handle
operator =	include/backward/backward.hpp	/^	SourceFile& operator=(SourceFile&& from) {$/;"	f	class:backward::SourceFile
operator =	include/backward/backward.hpp	/^	SourceFile& operator=(const SourceFile& from) {$/;"	f	class:backward::SourceFile
operator =	include/backward/backward.hpp	/^	handle& operator=(const handle& from) {$/;"	f	class:backward::details::handle
operator =	include/backward/backward.hpp	/^	handle& operator=(handle&& from) {$/;"	f	class:backward::details::handle
operator ==	include/backward/backward.hpp	/^		bool operator==(const SourceLoc& b) const {$/;"	f	struct:backward::ResolvedTrace::SourceLoc
operator []	include/backward/backward.hpp	/^	Trace operator[](size_t idx) {$/;"	f	class:backward::StackTraceLinuxImplHolder
operator []	include/backward/backward.hpp	/^	Trace operator[](size_t) { return Trace(); }$/;"	f	class:backward::StackTraceImpl
operator []	include/backward/backward.hpp	/^	const TraceWithLocals& operator[](size_t idx) {$/;"	f	class:backward::StackTraceWithLocalsImpl
operator []	include/backward/backward.hpp	/^	ref_t operator[](size_t idx) { return _val[idx]; }$/;"	f	class:backward::details::handle
operator const dummy*	include/backward/backward.hpp	/^	operator const dummy*() const {$/;"	f	class:backward::details::handle
print	include/backward/backward.hpp	/^		FILE* print(StackTrace& st, FILE* os = stderr) {$/;"	f	class:backward::Printer
print_locals	include/backward/backward.hpp	/^	void print_locals(FILE* os, const char* indent,$/;"	f	class:backward::Printer
print_snippet	include/backward/backward.hpp	/^	void print_snippet(FILE* os, const char* indent,$/;"	f	class:backward::Printer
print_source_loc	include/backward/backward.hpp	/^	void print_source_loc(FILE* os, const char* indent,$/;"	f	class:backward::Printer
print_var	include/backward/backward.hpp	/^	void print_var(FILE* os, const char* base_indent, int indent,$/;"	f	class:backward::Printer
purple	include/backward/backward.hpp	/^		purple = 0,$/;"	e	enum:backward::Color::type
purple	include/backward/backward.hpp	/^		purple = 35,$/;"	e	enum:backward::Color::type
ref_t	include/backward/backward.hpp	/^	typedef typename rm_ptr<T>::type& ref_t;$/;"	t	class:backward::details::handle
release	include/backward/backward.hpp	/^	T release() {$/;"	f	class:backward::details::handle
reset	include/backward/backward.hpp	/^		reset  = 0$/;"	e	enum:backward::Color::type
reset	include/backward/backward.hpp	/^		reset  = 39$/;"	e	enum:backward::Color::type
reset	include/backward/backward.hpp	/^	void reset(T new_val) {$/;"	f	class:backward::details::handle
resolve	include/backward/backward.hpp	/^	ResolvedTrace resolve(ResolvedTrace t) {$/;"	f	class:backward::TraceResolverImpl
resolve	include/backward/backward.hpp	/^	ResolvedTrace resolve(ResolvedTrace trace) {$/;"	f	class:backward::TraceResolverLinuxImpl
resolve_trace	include/backward/backward.hpp	/^	void resolve_trace(TraceWithLocals& trace) {$/;"	f	class:backward::StackTraceWithLocalsImpl
result	include/backward/backward.hpp	/^		find_sym_result result;$/;"	m	struct:backward::TraceResolverLinuxImpl::find_sym_context
rm_ptr	include/backward/backward.hpp	/^	struct rm_ptr { typedef T type; };$/;"	s	namespace:backward::details
rm_ptr	include/backward/backward.hpp	/^	struct rm_ptr<T*> { typedef T type; };$/;"	s	namespace:backward::details
rm_ptr	include/backward/backward.hpp	/^	struct rm_ptr<const T*> { typedef const T type; };$/;"	s	namespace:backward::details
s1	include/backward/backward.hpp	/^		char s1[sizeof (std::string)];$/;"	m	union:backward::Variable::__anon7
s2	include/backward/backward.hpp	/^		char s2[sizeof (list_t)];$/;"	m	union:backward::Variable::__anon7
s3	include/backward/backward.hpp	/^		char s3[sizeof (map_t)];$/;"	m	union:backward::Variable::__anon7
self	include/backward/backward.hpp	/^		StackTraceImpl& self;$/;"	m	struct:backward::StackTraceImpl::callback
self	include/backward/backward.hpp	/^		StackTraceWithLocalsImpl& self;$/;"	m	struct:backward::StackTraceWithLocalsImpl::callback
self	include/backward/backward.hpp	/^		TraceResolverLinuxImpl* self;$/;"	m	struct:backward::TraceResolverLinuxImpl::find_sym_context
set_color	include/backward/backward.hpp	/^	void set_color(Color::type ccode) {$/;"	f	class:backward::Colorize
set_color	include/backward/backward.hpp	/^	void set_color(Color::type) {}$/;"	f	class:backward::Colorize
sig_handler	include/backward/backward.hpp	/^	static void sig_handler(int, siginfo_t* info, void* _ctx) {$/;"	f	class:backward::SignalHandling
size	include/backward/backward.hpp	/^	size_t size() const { return 0; }$/;"	f	class:backward::StackTraceImpl
size	include/backward/backward.hpp	/^	size_t size() const {$/;"	f	class:backward::StackTraceLinuxImplHolder
size	include/backward/backward.hpp	/^	size_t size() const {$/;"	f	class:backward::StackTraceWithLocalsImpl
skip_n_firsts	include/backward/backward.hpp	/^	size_t skip_n_firsts() const { return _skip; }$/;"	f	class:backward::StackTraceLinuxImplBase
skip_n_firsts	include/backward/backward.hpp	/^	void skip_n_firsts(size_t n) { _skip = n; }$/;"	f	class:backward::StackTraceLinuxImplBase
snippet	include/backward/backward.hpp	/^	bool snippet;$/;"	m	class:backward::Printer
source	include/backward/backward.hpp	/^	SourceLoc                      source;$/;"	m	struct:backward::ResolvedTrace
source_locs_t	include/backward/backward.hpp	/^	typedef std::vector<SourceLoc> source_locs_t;$/;"	t	struct:backward::ResolvedTrace
src_files_t	include/backward/backward.hpp	/^	typedef details::hashtable<std::string, SourceFile>::type src_files_t;$/;"	t	class:backward::SnippetFactory
stacktrace_tag	include/backward/backward.hpp	/^namespace stacktrace_tag {$/;"	n	namespace:backward
storage	include/backward/backward.hpp	/^	} storage;$/;"	m	class:backward::Variable	typeref:union:backward::Variable::__anon7
swap	include/backward/backward.hpp	/^	void swap(SourceFile& b) {$/;"	f	class:backward::SourceFile
swap	include/backward/backward.hpp	/^	void swap(handle& b) {$/;"	f	class:backward::details::handle
symtab	include/backward/backward.hpp	/^		bfd_symtab_t symtab;$/;"	m	struct:backward::TraceResolverLinuxImpl::bfd_fileobject
system_tag	include/backward/backward.hpp	/^namespace system_tag {$/;"	n	namespace:backward
thread_id	include/backward/backward.hpp	/^	unsigned thread_id() const { return 0; }$/;"	f	class:backward::StackTraceImpl
thread_id	include/backward/backward.hpp	/^	unsigned thread_id() const {$/;"	f	class:backward::StackTraceLinuxImplBase
trace	include/backward/backward.hpp	/^		ResolvedTrace& trace;$/;"	m	struct:backward::TraceResolverLinuxImpl::inliners_search_cb
trace_resolver_tag	include/backward/backward.hpp	/^namespace trace_resolver_tag {$/;"	n	namespace:backward
type	include/backward/backward.hpp	/^			typedef std::unordered_map<K, V> type;$/;"	t	struct:backward::details::hashtable
type	include/backward/backward.hpp	/^	enum type {$/;"	g	namespace:backward::Color
type	include/backward/backward.hpp	/^	struct rm_ptr { typedef T type; };$/;"	t	struct:backward::details::rm_ptr
type	include/backward/backward.hpp	/^	struct rm_ptr<T*> { typedef T type; };$/;"	t	struct:backward::details::rm_ptr
type	include/backward/backward.hpp	/^	struct rm_ptr<const T*> { typedef const T type; };$/;"	t	struct:backward::details::rm_ptr
unwind	include/backward/backward.hpp	/^size_t unwind(F f, size_t depth) {$/;"	f	namespace:backward::details
value	include/backward/backward.hpp	/^	const std::string& value() const {$/;"	f	class:backward::Variable
value	include/backward/backward.hpp	/^	std::string& value() {$/;"	f	class:backward::Variable
yellow	include/backward/backward.hpp	/^		yellow = 0,$/;"	e	enum:backward::Color::type
yellow	include/backward/backward.hpp	/^		yellow = 33,$/;"	e	enum:backward::Color::type
~Colorize	include/backward/backward.hpp	/^	~Colorize() {$/;"	f	class:backward::Colorize
~handle	include/backward/backward.hpp	/^	~handle() {$/;"	f	class:backward::details::handle
_addProcesses	main.cc	/^void _addProcesses(processMgr &processManager, Settings &settings, eventMgr &eventManager){$/;"	f
_createObjectProcessors	main.cc	/^void _createObjectProcessors(objectMgrProcess *objMgrProc, processMgr &processManager,$/;"	f
_createStates	main.cc	/^void _createStates(stateProcess *stateProc){$/;"	f
_loadSettings	main.cc	/^void _loadSettings(Settings &settings){$/;"	f
main	main.cc	/^int main(){$/;"	f
isWindowClosed	mainLoopListener.h	/^	bool isWindowClosed(){$/;"	f	class:mainLoopListener
mainLoopListener	mainLoopListener.h	/^	mainLoopListener(eventMgr &eventManager) : windowClosed(false){$/;"	f	class:mainLoopListener
mainLoopListener	mainLoopListener.h	/^class mainLoopListener : public Observer{$/;"	c
recieveEvent	mainLoopListener.h	/^	void recieveEvent(const Hash *eventName, baseProperty *eventData){$/;"	f	class:mainLoopListener
windowClosed	mainLoopListener.h	/^	bool windowClosed;$/;"	m	class:mainLoopListener
