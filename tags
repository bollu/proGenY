!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	src/include/SFML/Window/Keyboard.hpp	/^        A = 0,        \/\/\/< The A key$/;"	e	enum:sf::Keyboard::Key
Accepted	src/include/SFML/Network/Http.hpp	/^            Accepted       = 202, \/\/\/< The request has been accepted, but will be processed later by the server$/;"	e	enum:sf::Http::Response::Status
Add	src/include/Box2D/Dynamics/b2Island.h	/^	void Add(b2Body* body)$/;"	f	class:b2Island
Add	src/include/Box2D/Dynamics/b2Island.h	/^	void Add(b2Contact* contact)$/;"	f	class:b2Island
Add	src/include/Box2D/Dynamics/b2Island.h	/^	void Add(b2Joint* joint)$/;"	f	class:b2Island
Add	src/include/SFML/Window/Keyboard.hpp	/^        Add,          \/\/\/< The + key$/;"	e	enum:sf::Keyboard::Key
AddPair	src/include/Box2D/Dynamics/b2ContactManager.cpp	/^void b2ContactManager::AddPair(void* proxyUserDataA, void* proxyUserDataB)$/;"	f	class:b2ContactManager
AddType	src/include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^void b2Contact::AddType(b2ContactCreateFcn* createFcn, b2ContactDestroyFcn* destoryFcn,$/;"	f	class:b2Contact
Advance	src/include/Box2D/Common/b2Math.h	/^inline void b2Sweep::Advance(float32 alpha)$/;"	f	class:b2Sweep
Advance	src/include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::Advance(float32 alpha)$/;"	f	class:b2Body
Allocate	src/include/Box2D/Common/b2BlockAllocator.cpp	/^void* b2BlockAllocator::Allocate(int32 size)$/;"	f	class:b2BlockAllocator
Allocate	src/include/Box2D/Common/b2StackAllocator.cpp	/^void* b2StackAllocator::Allocate(int32 size)$/;"	f	class:b2StackAllocator
AllocateNode	src/include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::AllocateNode()$/;"	f	class:b2DynamicTree
Angle	src/util/mathUtil.h	/^		Angle(){$/;"	f	class:util::Angle
Angle	src/util/mathUtil.h	/^		Angle(float rad){$/;"	f	class:util::Angle
Angle	src/util/mathUtil.h	/^		Angle(vector2 vec){$/;"	f	class:util::Angle
Angle	src/util/mathUtil.h	/^	class Angle{$/;"	c	namespace:util
AnyPort	src/include/SFML/Network/Socket.hpp	/^        AnyPort = 0 \/\/\/< Special value that tells the system to pick any available port$/;"	e	enum:sf::Socket::__anon2
AppendFlags	src/include/Box2D/Common/b2Draw.cpp	/^void b2Draw::AppendFlags(uint32 flags)$/;"	f	class:b2Draw
ApplyAngularImpulse	src/include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::ApplyAngularImpulse(float32 impulse)$/;"	f	class:b2Body
ApplyForce	src/include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::ApplyForce(const b2Vec2& force, const b2Vec2& point)$/;"	f	class:b2Body
ApplyForceToCenter	src/include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::ApplyForceToCenter(const b2Vec2& force)$/;"	f	class:b2Body
ApplyLinearImpulse	src/include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::ApplyLinearImpulse(const b2Vec2& impulse, const b2Vec2& point)$/;"	f	class:b2Body
ApplyTorque	src/include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::ApplyTorque(float32 torque)$/;"	f	class:b2Body
Archetype	src/game/generators/gunDataGenerator.h	/^	enum Archetype{$/;"	g	class:gunDataGenerator
Ascii	src/include/SFML/Network/Ftp.hpp	/^        Ascii,  \/\/\/< Text mode using ASCII encoding$/;"	e	enum:sf::Ftp::TransferMode
Axis	src/include/SFML/Window/Joystick.hpp	/^    enum Axis$/;"	g	class:sf::Joystick
AxisCount	src/include/SFML/Window/Joystick.hpp	/^        AxisCount   = 8   \/\/\/< Maximum number of supported axes$/;"	e	enum:sf::Joystick::__anon6
B	src/include/SFML/Window/Keyboard.hpp	/^        B,            \/\/\/< The B key$/;"	e	enum:sf::Keyboard::Key
B2_BLOCK_ALLOCATOR_H	src/include/Box2D/Common/b2BlockAllocator.h	20;"	d
B2_BODY_H	src/include/Box2D/Dynamics/b2Body.h	20;"	d
B2_BROAD_PHASE_H	src/include/Box2D/Collision/b2BroadPhase.h	20;"	d
B2_CHAIN_AND_CIRCLE_CONTACT_H	src/include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.h	20;"	d
B2_CHAIN_AND_POLYGON_CONTACT_H	src/include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.h	20;"	d
B2_CHAIN_SHAPE_H	src/include/Box2D/Collision/Shapes/b2ChainShape.h	20;"	d
B2_CIRCLE_CONTACT_H	src/include/Box2D/Dynamics/Contacts/b2CircleContact.h	20;"	d
B2_CIRCLE_SHAPE_H	src/include/Box2D/Collision/Shapes/b2CircleShape.h	20;"	d
B2_COLLISION_H	src/include/Box2D/Collision/b2Collision.h	20;"	d
B2_CONTACT_H	src/include/Box2D/Dynamics/Contacts/b2Contact.h	20;"	d
B2_CONTACT_MANAGER_H	src/include/Box2D/Dynamics/b2ContactManager.h	20;"	d
B2_CONTACT_SOLVER_H	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	20;"	d
B2_DEBUG_SOLVER	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	27;"	d	file:
B2_DISTANCE_H	src/include/Box2D/Collision/b2Distance.h	21;"	d
B2_DISTANCE_JOINT_H	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	20;"	d
B2_DYNAMIC_TREE_H	src/include/Box2D/Collision/b2DynamicTree.h	20;"	d
B2_EDGE_AND_CIRCLE_CONTACT_H	src/include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.h	20;"	d
B2_EDGE_AND_POLYGON_CONTACT_H	src/include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.h	20;"	d
B2_EDGE_SHAPE_H	src/include/Box2D/Collision/Shapes/b2EdgeShape.h	20;"	d
B2_FIXTURE_H	src/include/Box2D/Dynamics/b2Fixture.h	20;"	d
B2_FRICTION_JOINT_H	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	20;"	d
B2_GEAR_JOINT_H	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	20;"	d
B2_GROWABLE_STACK_H	src/include/Box2D/Common/b2GrowableStack.h	20;"	d
B2_ISLAND_H	src/include/Box2D/Dynamics/b2Island.h	20;"	d
B2_JOINT_H	src/include/Box2D/Dynamics/Joints/b2Joint.h	20;"	d
B2_MATH_H	src/include/Box2D/Common/b2Math.h	20;"	d
B2_MOUSE_JOINT_H	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	20;"	d
B2_NOT_USED	src/include/Box2D/Common/b2Settings.h	25;"	d
B2_POLYGON_AND_CIRCLE_CONTACT_H	src/include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.h	20;"	d
B2_POLYGON_CONTACT_H	src/include/Box2D/Dynamics/Contacts/b2PolygonContact.h	20;"	d
B2_POLYGON_SHAPE_H	src/include/Box2D/Collision/Shapes/b2PolygonShape.h	20;"	d
B2_PRISMATIC_JOINT_H	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	20;"	d
B2_PULLEY_JOINT_H	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	20;"	d
B2_REVOLUTE_JOINT_H	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	20;"	d
B2_ROPE_H	src/include/Box2D/Rope/b2Rope.h	20;"	d
B2_ROPE_JOINT_H	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	20;"	d
B2_SETTINGS_H	src/include/Box2D/Common/b2Settings.h	20;"	d
B2_SHAPE_H	src/include/Box2D/Collision/Shapes/b2Shape.h	20;"	d
B2_STACK_ALLOCATOR_H	src/include/Box2D/Common/b2StackAllocator.h	20;"	d
B2_TIME_OF_IMPACT_H	src/include/Box2D/Collision/b2TimeOfImpact.h	20;"	d
B2_TIME_STEP_H	src/include/Box2D/Dynamics/b2TimeStep.h	20;"	d
B2_WELD_JOINT_H	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	20;"	d
B2_WHEEL_JOINT_H	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	20;"	d
B2_WORLD_CALLBACKS_H	src/include/Box2D/Dynamics/b2WorldCallbacks.h	20;"	d
B2_WORLD_H	src/include/Box2D/Dynamics/b2World.h	20;"	d
BACK	src/game/defines/renderingLayers.h	/^	BACK = -100,$/;"	e	enum:renderingLayers
BACKWARD_CXX11	src/include/backward/backward.hpp	35;"	d
BACKWARD_CXX98	src/include/backward/backward.hpp	37;"	d
BACKWARD_HAS_BACKTRACE	src/include/backward/backward.hpp	95;"	d
BACKWARD_HAS_BACKTRACE	src/include/backward/backward.hpp	96;"	d
BACKWARD_HAS_BACKTRACE_SYMBOL	src/include/backward/backward.hpp	142;"	d
BACKWARD_HAS_BACKTRACE_SYMBOL	src/include/backward/backward.hpp	143;"	d
BACKWARD_HAS_BFD	src/include/backward/backward.hpp	140;"	d
BACKWARD_HAS_BFD	src/include/backward/backward.hpp	141;"	d
BACKWARD_HAS_DW	src/include/backward/backward.hpp	138;"	d
BACKWARD_HAS_DW	src/include/backward/backward.hpp	139;"	d
BACKWARD_HAS_UNWIND	src/include/backward/backward.hpp	93;"	d
BACKWARD_HAS_UNWIND	src/include/backward/backward.hpp	94;"	d
BACKWARD_SYSTEM_LINUX	src/include/backward/backward.hpp	53;"	d
BACKWARD_SYSTEM_UNKNOWN	src/include/backward/backward.hpp	55;"	d
BOX2D_H	src/include/Box2D/Box2D.h	20;"	d
BackSlash	src/include/SFML/Window/Keyboard.hpp	/^        BackSlash,    \/\/\/< The \\ key$/;"	e	enum:sf::Keyboard::Key
BackSpace	src/include/SFML/Window/Keyboard.hpp	/^        BackSpace,    \/\/\/< The Backspace key$/;"	e	enum:sf::Keyboard::Key
BadCommandSequence	src/include/SFML/Network/Ftp.hpp	/^            BadCommandSequence      = 503, \/\/\/< Bad sequence of commands$/;"	e	enum:sf::Ftp::Response::Status
BadGateway	src/include/SFML/Network/Http.hpp	/^            BadGateway          = 502, \/\/\/< The gateway server has received an error from the source server$/;"	e	enum:sf::Http::Response::Status
BadRequest	src/include/SFML/Network/Http.hpp	/^            BadRequest          = 400, \/\/\/< The server couldn't understand the request (syntax error)$/;"	e	enum:sf::Http::Response::Status
Balance	src/include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::Balance(int32 iA)$/;"	f	class:b2DynamicTree
BeginContact	src/core/ObjProcessors/objContactListener.cpp	/^void objContactListener::BeginContact(b2Contact* contact){$/;"	f	class:objContactListener
BeginContact	src/include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual void BeginContact(b2Contact* contact) { B2_NOT_USED(contact); }$/;"	f	class:b2ContactListener
BeginContact	tools/beautified.cpp	/^void objContactListener::BeginContact ( b2Contact *contact ){$/;"	f	class:objContactListener
BeginContact	tools/input.cpp	/^void objContactListener::BeginContact(b2Contact*contact){$/;"	f	class:objContactListener
Binary	src/include/SFML/Network/Ftp.hpp	/^        Binary, \/\/\/< Binary mode (file is transfered as a sequence of bytes)$/;"	e	enum:sf::Ftp::TransferMode
Black	src/include/SFML/Graphics/Color.hpp	/^    static const Color Black;       \/\/\/< Black predefined color$/;"	m	class:sf::Color
BlendAdd	src/include/SFML/Graphics/BlendMode.hpp	/^    BlendAdd,      \/\/\/< Pixel = Source + Dest$/;"	e	enum:sf::BlendMode
BlendAlpha	src/include/SFML/Graphics/BlendMode.hpp	/^    BlendAlpha,    \/\/\/< Pixel = Source * Source.a + Dest * (1 - Source.a)$/;"	e	enum:sf::BlendMode
BlendMode	src/include/SFML/Graphics/BlendMode.hpp	/^enum BlendMode$/;"	g	namespace:sf
BlendMultiply	src/include/SFML/Graphics/BlendMode.hpp	/^    BlendMultiply, \/\/\/< Pixel = Source * Dest$/;"	e	enum:sf::BlendMode
BlendNone	src/include/SFML/Graphics/BlendMode.hpp	/^    BlendNone      \/\/\/< Pixel = Source$/;"	e	enum:sf::BlendMode
Blue	src/include/SFML/Graphics/Color.hpp	/^    static const Color Blue;        \/\/\/< Blue predefined color$/;"	m	class:sf::Color
Bold	src/include/SFML/Graphics/Text.hpp	/^        Bold       = 1 << 0, \/\/\/< Bold characters$/;"	e	enum:sf::Text::Style
BoolType	src/include/SFML/Network/Packet.hpp	/^    typedef bool (Packet::*BoolType)(std::size_t);$/;"	t	class:sf::Packet
Broadcast	src/include/SFML/Network/IpAddress.hpp	/^    static const IpAddress Broadcast; \/\/\/< The "broadcast" address (for sending UDP messages to everyone on a local network)$/;"	m	class:sf::IpAddress
BufferCount	src/include/SFML/Audio/SoundStream.hpp	/^        BufferCount = 3 \/\/\/< Number of audio buffers used by the streaming loop$/;"	e	enum:sf::SoundStream::__anon3
BufferMove	src/include/Box2D/Collision/b2BroadPhase.cpp	/^void b2BroadPhase::BufferMove(int32 proxyId)$/;"	f	class:b2BroadPhase
Button	src/include/SFML/Window/Mouse.hpp	/^    enum Button$/;"	g	class:sf::Mouse
ButtonCount	src/include/SFML/Window/Joystick.hpp	/^        ButtonCount = 32, \/\/\/< Maximum number of supported buttons$/;"	e	enum:sf::Joystick::__anon6
ButtonCount	src/include/SFML/Window/Mouse.hpp	/^        ButtonCount \/\/\/< Keep last -- the total number of mouse buttons$/;"	e	enum:sf::Mouse::Button
C	src/include/SFML/Window/Keyboard.hpp	/^        C,            \/\/\/< The C key$/;"	e	enum:sf::Keyboard::Key
Chunk	src/game/terrainGen/terrainGenerator.h	/^		Chunk(chunkType _type = empty) : type(_type){$/;"	f	struct:terrainGenerator::Chunk
Chunk	src/game/terrainGen/terrainGenerator.h	/^	struct Chunk{$/;"	s	class:terrainGenerator
Chunk	src/include/SFML/Audio/SoundStream.hpp	/^    struct Chunk$/;"	s	class:sf::SoundStream
CircleShape	src/include/SFML/Graphics/CircleShape.hpp	/^class SFML_GRAPHICS_API CircleShape : public Shape$/;"	c	namespace:sf
Clear	src/include/Box2D/Common/b2BlockAllocator.cpp	/^void b2BlockAllocator::Clear()$/;"	f	class:b2BlockAllocator
Clear	src/include/Box2D/Dynamics/b2Island.h	/^	void Clear()$/;"	f	class:b2Island
ClearFlags	src/include/Box2D/Common/b2Draw.cpp	/^void b2Draw::ClearFlags(uint32 flags)$/;"	f	class:b2Draw
ClearForces	src/include/Box2D/Dynamics/b2World.cpp	/^void b2World::ClearForces()$/;"	f	class:b2World
Clock	src/include/SFML/System/Clock.hpp	/^class SFML_SYSTEM_API Clock$/;"	c	namespace:sf
Clone	src/include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^b2Shape* b2ChainShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2ChainShape
Clone	src/include/Box2D/Collision/Shapes/b2CircleShape.cpp	/^b2Shape* b2CircleShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2CircleShape
Clone	src/include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^b2Shape* b2EdgeShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2EdgeShape
Clone	src/include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^b2Shape* b2PolygonShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2PolygonShape
Close	src/include/SFML/Window/WindowStyle.hpp	/^        Close      = 1 << 2, \/\/\/< Titlebar + close button$/;"	e	enum:sf::Style::__anon5
Closed	src/include/SFML/Window/Event.hpp	/^        Closed,                 \/\/\/< The window requested to be closed (no data)$/;"	e	enum:sf::Event::EventType
ClosingConnection	src/include/SFML/Network/Ftp.hpp	/^            ClosingConnection     = 221, \/\/\/< Service closing control connection$/;"	e	enum:sf::Ftp::Response::Status
ClosingDataConnection	src/include/SFML/Network/Ftp.hpp	/^            ClosingDataConnection = 226, \/\/\/< Closing data connection, requested file action successful$/;"	e	enum:sf::Ftp::Response::Status
Collide	src/include/Box2D/Collision/b2CollideEdge.cpp	/^void b2EPCollider::Collide(b2Manifold* manifold, const b2EdgeShape* edgeA, const b2Transform& xfA,$/;"	f	class:b2EPCollider
Collide	src/include/Box2D/Dynamics/b2ContactManager.cpp	/^void b2ContactManager::Collide()$/;"	f	class:b2ContactManager
Color	src/include/SFML/Graphics/Color.hpp	/^class SFML_GRAPHICS_API Color$/;"	c	namespace:sf
Color	src/include/backward/backward.hpp	/^namespace Color {$/;"	n	namespace:backward
Colorize	src/include/backward/backward.hpp	/^	Colorize(std::FILE* os):$/;"	f	class:backward::Colorize
Colorize	src/include/backward/backward.hpp	/^	Colorize(std::FILE*) {}$/;"	f	class:backward::Colorize
Colorize	src/include/backward/backward.hpp	/^class Colorize {$/;"	c	namespace:backward
Combine	src/include/Box2D/Collision/b2Collision.h	/^	void Combine(const b2AABB& aabb)$/;"	f	struct:b2AABB
Combine	src/include/Box2D/Collision/b2Collision.h	/^	void Combine(const b2AABB& aabb1, const b2AABB& aabb2)$/;"	f	struct:b2AABB
Comma	src/include/SFML/Window/Keyboard.hpp	/^        Comma,        \/\/\/< The , key$/;"	e	enum:sf::Keyboard::Key
CommandNotImplemented	src/include/SFML/Network/Ftp.hpp	/^            CommandNotImplemented   = 502, \/\/\/< Command not implemented$/;"	e	enum:sf::Ftp::Response::Status
CommandUnknown	src/include/SFML/Network/Ftp.hpp	/^            CommandUnknown          = 500, \/\/\/< Syntax error, command unrecognized$/;"	e	enum:sf::Ftp::Response::Status
ComputeAABB	src/include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const$/;"	f	class:b2ChainShape
ComputeAABB	src/include/Box2D/Collision/Shapes/b2CircleShape.cpp	/^void b2CircleShape::ComputeAABB(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const$/;"	f	class:b2CircleShape
ComputeAABB	src/include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^void b2EdgeShape::ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const$/;"	f	class:b2EdgeShape
ComputeAABB	src/include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const$/;"	f	class:b2PolygonShape
ComputeCentroid	src/include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^static b2Vec2 ComputeCentroid(const b2Vec2* vs, int32 count)$/;"	f	file:
ComputeEdgeSeparation	src/include/Box2D/Collision/b2CollideEdge.cpp	/^b2EPAxis b2EPCollider::ComputeEdgeSeparation()$/;"	f	class:b2EPCollider
ComputeHeight	src/include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::ComputeHeight() const$/;"	f	class:b2DynamicTree
ComputeHeight	src/include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::ComputeHeight(int32 nodeId) const$/;"	f	class:b2DynamicTree
ComputeMass	src/include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2ChainShape
ComputeMass	src/include/Box2D/Collision/Shapes/b2CircleShape.cpp	/^void b2CircleShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2CircleShape
ComputeMass	src/include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^void b2EdgeShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2EdgeShape
ComputeMass	src/include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2PolygonShape
ComputePolygonSeparation	src/include/Box2D/Collision/b2CollideEdge.cpp	/^b2EPAxis b2EPCollider::ComputePolygonSeparation()$/;"	f	class:b2EPCollider
ConnectionClosed	src/include/SFML/Network/Ftp.hpp	/^            ConnectionClosed = 1002, \/\/\/< Connection with server closed$/;"	e	enum:sf::Ftp::Response::Status
ConnectionFailed	src/include/SFML/Network/Ftp.hpp	/^            ConnectionFailed = 1001, \/\/\/< Connection with server failed$/;"	e	enum:sf::Ftp::Response::Status
ConnectionFailed	src/include/SFML/Network/Http.hpp	/^            ConnectionFailed = 1001  \/\/\/< Connection with server failed$/;"	e	enum:sf::Http::Response::Status
ConstIterator	src/include/SFML/System/String.hpp	/^    typedef std::basic_string<Uint32>::const_iterator ConstIterator; \/\/\/< Constant iterator type$/;"	t	class:sf::String
Contains	src/include/Box2D/Collision/b2Collision.h	/^	bool Contains(const b2AABB& aabb) const$/;"	f	struct:b2AABB
Context	src/include/SFML/Window/Context.hpp	/^class SFML_WINDOW_API Context : GlResource, NonCopyable$/;"	c	namespace:sf
ContextSettings	src/include/SFML/Window/ContextSettings.hpp	/^    explicit ContextSettings(unsigned int depth = 0, unsigned int stencil = 0, unsigned int antialiasing = 0, unsigned int major = 2, unsigned int minor = 0) :$/;"	f	struct:sf::ContextSettings
ContextSettings	src/include/SFML/Window/ContextSettings.hpp	/^struct ContextSettings$/;"	s	namespace:sf
ConvexShape	src/include/SFML/Graphics/ConvexShape.hpp	/^class SFML_GRAPHICS_API ConvexShape : public Shape$/;"	c	namespace:sf
CoordinateType	src/include/SFML/Graphics/Texture.hpp	/^    enum CoordinateType$/;"	g	class:sf::Texture
Count	src/include/SFML/Window/Event.hpp	/^        Count                   \/\/\/< Keep last -- the total number of event types$/;"	e	enum:sf::Event::EventType
Count	src/include/SFML/Window/Joystick.hpp	/^        Count       = 8,  \/\/\/< Maximum number of supported joysticks$/;"	e	enum:sf::Joystick::__anon6
Create	src/include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.cpp	/^b2Contact* b2ChainAndCircleContact::Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndCircleContact
Create	src/include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.cpp	/^b2Contact* b2ChainAndPolygonContact::Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndPolygonContact
Create	src/include/Box2D/Dynamics/Contacts/b2CircleContact.cpp	/^b2Contact* b2CircleContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2CircleContact
Create	src/include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^b2Contact* b2Contact::Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)$/;"	f	class:b2Contact
Create	src/include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.cpp	/^b2Contact* b2EdgeAndCircleContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndCircleContact
Create	src/include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.cpp	/^b2Contact* b2EdgeAndPolygonContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndPolygonContact
Create	src/include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.cpp	/^b2Contact* b2PolygonAndCircleContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonAndCircleContact
Create	src/include/Box2D/Dynamics/Contacts/b2PolygonContact.cpp	/^b2Contact* b2PolygonContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonContact
Create	src/include/Box2D/Dynamics/Joints/b2Joint.cpp	/^b2Joint* b2Joint::Create(const b2JointDef* def, b2BlockAllocator* allocator)$/;"	f	class:b2Joint
Create	src/include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::Create(b2BlockAllocator* allocator, b2Body* body, const b2FixtureDef* def)$/;"	f	class:b2Fixture
CreateBody	src/include/Box2D/Dynamics/b2World.cpp	/^b2Body* b2World::CreateBody(const b2BodyDef* def)$/;"	f	class:b2World
CreateChain	src/include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::CreateChain(const b2Vec2* vertices, int32 count)$/;"	f	class:b2ChainShape
CreateFixture	src/include/Box2D/Dynamics/b2Body.cpp	/^b2Fixture* b2Body::CreateFixture(const b2FixtureDef* def)$/;"	f	class:b2Body
CreateFixture	src/include/Box2D/Dynamics/b2Body.cpp	/^b2Fixture* b2Body::CreateFixture(const b2Shape* shape, float32 density)$/;"	f	class:b2Body
CreateJoint	src/include/Box2D/Dynamics/b2World.cpp	/^b2Joint* b2World::CreateJoint(const b2JointDef* def)$/;"	f	class:b2World
CreateLoop	src/include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::CreateLoop(const b2Vec2* vertices, int32 count)$/;"	f	class:b2ChainShape
CreateProxies	src/include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::CreateProxies(b2BroadPhase* broadPhase, const b2Transform& xf)$/;"	f	class:b2Fixture
CreateProxy	src/include/Box2D/Collision/b2BroadPhase.cpp	/^int32 b2BroadPhase::CreateProxy(const b2AABB& aabb, void* userData)$/;"	f	class:b2BroadPhase
CreateProxy	src/include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::CreateProxy(const b2AABB& aabb, void* userData)$/;"	f	class:b2DynamicTree
Created	src/include/SFML/Network/Http.hpp	/^            Created        = 201, \/\/\/< The resource has successfully been created$/;"	e	enum:sf::Http::Response::Status
CurrentTexture	src/include/SFML/Graphics/Shader.hpp	/^    static CurrentTextureType CurrentTexture;$/;"	m	class:sf::Shader
CurrentTextureType	src/include/SFML/Graphics/Shader.hpp	/^    struct CurrentTextureType {};$/;"	s	class:sf::Shader
Cyan	src/include/SFML/Graphics/Color.hpp	/^    static const Color Cyan;        \/\/\/< Cyan predefined color$/;"	m	class:sf::Color
D	src/include/SFML/Window/Keyboard.hpp	/^        D,            \/\/\/< The D key$/;"	e	enum:sf::Keyboard::Key
DEG2RAD	src/util/mathUtil.h	/^	const double DEG2RAD = util::PI \/ 180.0;$/;"	m	namespace:util
Damage	src/game/ObjProcessors/healthProcessor.h	/^	void Damage(unsigned int damage){$/;"	f	struct:healthData
Dash	src/include/SFML/Window/Keyboard.hpp	/^        Dash,         \/\/\/< The - key$/;"	e	enum:sf::Keyboard::Key
Data	src/include/SFML/Network/TcpSocket.hpp	/^        std::vector<char> Data;         \/\/\/< Data of the packet$/;"	m	struct:sf::TcpSocket::PendingPacket
DataConnectionAlreadyOpened	src/include/SFML/Network/Ftp.hpp	/^            DataConnectionAlreadyOpened = 125, \/\/\/< Data connection already opened, transfer starting$/;"	e	enum:sf::Ftp::Response::Status
DataConnectionOpened	src/include/SFML/Network/Ftp.hpp	/^            DataConnectionOpened  = 225, \/\/\/< Data connection open, no transfer in progress$/;"	e	enum:sf::Ftp::Response::Status
DataConnectionUnavailable	src/include/SFML/Network/Ftp.hpp	/^            DataConnectionUnavailable = 425, \/\/\/< Can't open data connection$/;"	e	enum:sf::Ftp::Response::Status
Default	src/include/SFML/Graphics/RenderStates.hpp	/^    static const RenderStates Default; \/\/\/< Special instance holding the default render states$/;"	m	class:sf::RenderStates
Default	src/include/SFML/Window/WindowStyle.hpp	/^        Default = Titlebar | Resize | Close \/\/\/< Default window style$/;"	e	enum:sf::Style::__anon5
Deg	src/util/mathUtil.h	/^		static Angle Deg(float deg){$/;"	f	class:util::Angle
Delete	src/include/SFML/Window/Keyboard.hpp	/^        Delete,       \/\/\/< The Delete key$/;"	e	enum:sf::Keyboard::Key
Destroy	src/include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.cpp	/^void b2ChainAndCircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndCircleContact
Destroy	src/include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.cpp	/^void b2ChainAndPolygonContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndPolygonContact
Destroy	src/include/Box2D/Dynamics/Contacts/b2CircleContact.cpp	/^void b2CircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2CircleContact
Destroy	src/include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^void b2Contact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2Contact
Destroy	src/include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.cpp	/^void b2EdgeAndCircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndCircleContact
Destroy	src/include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.cpp	/^void b2EdgeAndPolygonContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndPolygonContact
Destroy	src/include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.cpp	/^void b2PolygonAndCircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonAndCircleContact
Destroy	src/include/Box2D/Dynamics/Contacts/b2PolygonContact.cpp	/^void b2PolygonContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonContact
Destroy	src/include/Box2D/Dynamics/Joints/b2Joint.cpp	/^void b2Joint::Destroy(b2Joint* joint, b2BlockAllocator* allocator)$/;"	f	class:b2Joint
Destroy	src/include/Box2D/Dynamics/b2ContactManager.cpp	/^void b2ContactManager::Destroy(b2Contact* c)$/;"	f	class:b2ContactManager
Destroy	src/include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::Destroy(b2BlockAllocator* allocator)$/;"	f	class:b2Fixture
DestroyBody	src/include/Box2D/Dynamics/b2World.cpp	/^void b2World::DestroyBody(b2Body* b)$/;"	f	class:b2World
DestroyFixture	src/include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::DestroyFixture(b2Fixture* fixture)$/;"	f	class:b2Body
DestroyJoint	src/include/Box2D/Dynamics/b2World.cpp	/^void b2World::DestroyJoint(b2Joint* j)$/;"	f	class:b2World
DestroyProxies	src/include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::DestroyProxies(b2BroadPhase* broadPhase)$/;"	f	class:b2Fixture
DestroyProxy	src/include/Box2D/Collision/b2BroadPhase.cpp	/^void b2BroadPhase::DestroyProxy(int32 proxyId)$/;"	f	class:b2BroadPhase
DestroyProxy	src/include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::DestroyProxy(int32 proxyId)$/;"	f	class:b2DynamicTree
DirectoryOk	src/include/SFML/Network/Ftp.hpp	/^            DirectoryOk           = 257, \/\/\/< PATHNAME created$/;"	e	enum:sf::Ftp::Response::Status
DirectoryResponse	src/include/SFML/Network/Ftp.hpp	/^    class SFML_NETWORK_API DirectoryResponse : public Response$/;"	c	class:sf::Ftp
DirectoryStatus	src/include/SFML/Network/Ftp.hpp	/^            DirectoryStatus       = 212, \/\/\/< Directory status$/;"	e	enum:sf::Ftp::Response::Status
Disconnected	src/include/SFML/Network/Socket.hpp	/^        Disconnected, \/\/\/< The TCP socket has been disconnected$/;"	e	enum:sf::Socket::Status
Divide	src/include/SFML/Window/Keyboard.hpp	/^        Divide,       \/\/\/< The \/ key$/;"	e	enum:sf::Keyboard::Key
Done	src/include/SFML/Network/Socket.hpp	/^        Done,         \/\/\/< The socket has sent \/ received the data$/;"	e	enum:sf::Socket::Status
Down	src/include/SFML/Window/Keyboard.hpp	/^        Down,         \/\/\/< Down arrow$/;"	e	enum:sf::Keyboard::Key
Draw	src/core/Process/Process.h	/^	virtual void Draw(){};$/;"	f	class:Process
Draw	src/core/Process/processMgr.cpp	/^void processMgr::Draw(){$/;"	f	class:processMgr
Draw	src/core/Process/renderProcess.cpp	/^void renderProcess::Draw(){$/;"	f	class:renderProcess
Draw	src/core/Process/renderProcess.h	/^		void Draw(sf::RenderWindow *window){$/;"	f	class:renderProcess::renderNode
Draw	src/core/Process/stateProcess.h	/^	 void Draw(){$/;"	f	class:stateProcess
Draw	src/core/Process/worldProcess.h	/^	 void Draw(){};$/;"	f	class:worldProcess
Draw	src/game/States/gameSegmentLoader.h	/^	void Draw(){};$/;"	f	class:gameSegmentLoader
Draw	src/game/States/gameState.h	/^	void Draw(){};$/;"	f	class:gameState
Draw	src/game/States/mainMenuState.h	/^	void Draw(){};$/;"	f	class:mainMenuState
Draw	src/include/Box2D/Rope/b2Rope.cpp	/^void b2Rope::Draw(b2Draw* draw) const$/;"	f	class:b2Rope
Draw	tools/beautified.cpp	/^	void Draw (){}$/;"	f	class:gameState
Draw	tools/input.cpp	/^	void Draw(){};$/;"	f	class:gameState
DrawDebugData	src/include/Box2D/Dynamics/b2World.cpp	/^void b2World::DrawDebugData()$/;"	f	class:b2World
DrawJoint	src/include/Box2D/Dynamics/b2World.cpp	/^void b2World::DrawJoint(b2Joint* joint)$/;"	f	class:b2World
DrawShape	src/include/Box2D/Dynamics/b2World.cpp	/^void b2World::DrawShape(b2Fixture* fixture, const b2Transform& xf, const b2Color& color)$/;"	f	class:b2World
Drawable	src/include/SFML/Graphics/Drawable.hpp	/^class SFML_GRAPHICS_API Drawable$/;"	c	namespace:sf
Dump	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^void b2DistanceJoint::Dump()$/;"	f	class:b2DistanceJoint
Dump	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::Dump()$/;"	f	class:b2FrictionJoint
Dump	src/include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^void b2GearJoint::Dump()$/;"	f	class:b2GearJoint
Dump	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	virtual void Dump() { b2Log("\/\/ Dump is not supported for this joint type.\\n"); }$/;"	f	class:b2Joint
Dump	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	void Dump() { b2Log("Mouse joint dumping is not supported.\\n"); }$/;"	f	class:b2MouseJoint
Dump	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::Dump()$/;"	f	class:b2PrismaticJoint
Dump	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^void b2PulleyJoint::Dump()$/;"	f	class:b2PulleyJoint
Dump	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::Dump()$/;"	f	class:b2RevoluteJoint
Dump	src/include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^void b2RopeJoint::Dump()$/;"	f	class:b2RopeJoint
Dump	src/include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^void b2WeldJoint::Dump()$/;"	f	class:b2WeldJoint
Dump	src/include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::Dump()$/;"	f	class:b2WheelJoint
Dump	src/include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::Dump()$/;"	f	class:b2Body
Dump	src/include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::Dump(int32 bodyIndex)$/;"	f	class:b2Fixture
Dump	src/include/Box2D/Dynamics/b2World.cpp	/^void b2World::Dump()$/;"	f	class:b2World
E	src/include/SFML/Window/Keyboard.hpp	/^        E,            \/\/\/< The E key$/;"	e	enum:sf::Keyboard::Key
Ebcdic	src/include/SFML/Network/Ftp.hpp	/^        Ebcdic  \/\/\/< Text mode using EBCDIC encoding$/;"	e	enum:sf::Ftp::TransferMode
EnableLimit	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::EnableLimit(bool flag)$/;"	f	class:b2PrismaticJoint
EnableLimit	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::EnableLimit(bool flag)$/;"	f	class:b2RevoluteJoint
EnableMotor	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::EnableMotor(bool flag)$/;"	f	class:b2PrismaticJoint
EnableMotor	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::EnableMotor(bool flag)$/;"	f	class:b2RevoluteJoint
EnableMotor	src/include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::EnableMotor(bool flag)$/;"	f	class:b2WheelJoint
End	src/include/SFML/Window/Keyboard.hpp	/^        End,          \/\/\/< The End key$/;"	e	enum:sf::Keyboard::Key
EndContact	src/core/ObjProcessors/objContactListener.cpp	/^void objContactListener::EndContact(b2Contact* contact){$/;"	f	class:objContactListener
EndContact	src/include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual void EndContact(b2Contact* contact) { B2_NOT_USED(contact); }$/;"	f	class:b2ContactListener
EndContact	tools/beautified.cpp	/^void objContactListener::EndContact ( b2Contact *contact ){$/;"	f	class:objContactListener
EndContact	tools/input.cpp	/^void objContactListener::EndContact(b2Contact*contact){$/;"	f	class:objContactListener
EnteringPassiveMode	src/include/SFML/Network/Ftp.hpp	/^            EnteringPassiveMode   = 227, \/\/\/< Entering passive mode$/;"	e	enum:sf::Ftp::Response::Status
Equal	src/include/SFML/Window/Keyboard.hpp	/^        Equal,        \/\/\/< The = key$/;"	e	enum:sf::Keyboard::Key
Error	src/include/SFML/Network/Socket.hpp	/^        Error         \/\/\/< An unexpected error happened$/;"	e	enum:sf::Socket::Status
Escape	src/include/SFML/Window/Keyboard.hpp	/^        Escape,       \/\/\/< The Escape key$/;"	e	enum:sf::Keyboard::Key
Evaluate	src/include/Box2D/Collision/b2TimeOfImpact.cpp	/^	float32 Evaluate(int32 indexA, int32 indexB, float32 t) const$/;"	f	struct:b2SeparationFunction
Evaluate	src/include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.cpp	/^void b2ChainAndCircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2ChainAndCircleContact
Evaluate	src/include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.cpp	/^void b2ChainAndPolygonContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2ChainAndPolygonContact
Evaluate	src/include/Box2D/Dynamics/Contacts/b2CircleContact.cpp	/^void b2CircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2CircleContact
Evaluate	src/include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.cpp	/^void b2EdgeAndCircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2EdgeAndCircleContact
Evaluate	src/include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.cpp	/^void b2EdgeAndPolygonContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2EdgeAndPolygonContact
Evaluate	src/include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.cpp	/^void b2PolygonAndCircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2PolygonAndCircleContact
Evaluate	src/include/Box2D/Dynamics/Contacts/b2PolygonContact.cpp	/^void b2PolygonContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2PolygonContact
Event	src/core/Messaging/eventMgr.h	/^	struct Event{$/;"	s	class:eventMgr
Event	src/include/SFML/Window/Event.hpp	/^class Event$/;"	c	namespace:sf
EventType	src/include/SFML/Window/Event.hpp	/^    enum EventType$/;"	g	class:sf::Event
F	src/include/SFML/Window/Keyboard.hpp	/^        F,            \/\/\/< The F key$/;"	e	enum:sf::Keyboard::Key
F1	src/include/SFML/Window/Keyboard.hpp	/^        F1,           \/\/\/< The F1 key$/;"	e	enum:sf::Keyboard::Key
F10	src/include/SFML/Window/Keyboard.hpp	/^        F10,          \/\/\/< The F10 key$/;"	e	enum:sf::Keyboard::Key
F11	src/include/SFML/Window/Keyboard.hpp	/^        F11,          \/\/\/< The F11 key$/;"	e	enum:sf::Keyboard::Key
F12	src/include/SFML/Window/Keyboard.hpp	/^        F12,          \/\/\/< The F12 key$/;"	e	enum:sf::Keyboard::Key
F13	src/include/SFML/Window/Keyboard.hpp	/^        F13,          \/\/\/< The F13 key$/;"	e	enum:sf::Keyboard::Key
F14	src/include/SFML/Window/Keyboard.hpp	/^        F14,          \/\/\/< The F14 key$/;"	e	enum:sf::Keyboard::Key
F15	src/include/SFML/Window/Keyboard.hpp	/^        F15,          \/\/\/< The F15 key$/;"	e	enum:sf::Keyboard::Key
F2	src/include/SFML/Window/Keyboard.hpp	/^        F2,           \/\/\/< The F2 key$/;"	e	enum:sf::Keyboard::Key
F3	src/include/SFML/Window/Keyboard.hpp	/^        F3,           \/\/\/< The F3 key$/;"	e	enum:sf::Keyboard::Key
F4	src/include/SFML/Window/Keyboard.hpp	/^        F4,           \/\/\/< The F4 key$/;"	e	enum:sf::Keyboard::Key
F5	src/include/SFML/Window/Keyboard.hpp	/^        F5,           \/\/\/< The F5 key$/;"	e	enum:sf::Keyboard::Key
F6	src/include/SFML/Window/Keyboard.hpp	/^        F6,           \/\/\/< The F6 key$/;"	e	enum:sf::Keyboard::Key
F7	src/include/SFML/Window/Keyboard.hpp	/^        F7,           \/\/\/< The F7 key$/;"	e	enum:sf::Keyboard::Key
F8	src/include/SFML/Window/Keyboard.hpp	/^        F8,           \/\/\/< The F8 key$/;"	e	enum:sf::Keyboard::Key
F9	src/include/SFML/Window/Keyboard.hpp	/^        F9,           \/\/\/< The F9 key$/;"	e	enum:sf::Keyboard::Key
FieldTable	src/include/SFML/Network/Http.hpp	/^        typedef std::map<std::string, std::string> FieldTable;$/;"	t	class:sf::Http::Request
FieldTable	src/include/SFML/Network/Http.hpp	/^        typedef std::map<std::string, std::string> FieldTable;$/;"	t	class:sf::Http::Response
FileActionAborted	src/include/SFML/Network/Ftp.hpp	/^            FileActionAborted         = 450, \/\/\/< Requested file action not taken$/;"	e	enum:sf::Ftp::Response::Status
FileActionOk	src/include/SFML/Network/Ftp.hpp	/^            FileActionOk          = 250, \/\/\/< Requested file action ok$/;"	e	enum:sf::Ftp::Response::Status
FileStatus	src/include/SFML/Network/Ftp.hpp	/^            FileStatus            = 213, \/\/\/< File status$/;"	e	enum:sf::Ftp::Response::Status
FileUnavailable	src/include/SFML/Network/Ftp.hpp	/^            FileUnavailable         = 550, \/\/\/< Requested action not taken, file unavailable$/;"	e	enum:sf::Ftp::Response::Status
FilenameNotAllowed	src/include/SFML/Network/Ftp.hpp	/^            FilenameNotAllowed      = 553, \/\/\/< Requested action not taken, file name not allowed$/;"	e	enum:sf::Ftp::Response::Status
FindMinSeparation	src/include/Box2D/Collision/b2TimeOfImpact.cpp	/^	float32 FindMinSeparation(int32* indexA, int32* indexB, float32 t) const$/;"	f	struct:b2SeparationFunction
FindNewContacts	src/include/Box2D/Dynamics/b2ContactManager.cpp	/^void b2ContactManager::FindNewContacts()$/;"	f	class:b2ContactManager
Fire	src/game/ObjProcessors/gunProcessor.cpp	/^void gunData::Fire(){$/;"	f	class:gunData
FlagForFiltering	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::FlagForFiltering()$/;"	f	class:b2Contact
FloatRect	src/include/SFML/Graphics/Rect.hpp	/^typedef Rect<float> FloatRect;$/;"	t	namespace:sf
Font	src/include/SFML/Graphics/Font.hpp	/^class SFML_GRAPHICS_API Font$/;"	c	namespace:sf
Forbidden	src/include/SFML/Network/Http.hpp	/^            Forbidden           = 403, \/\/\/< The requested page cannot be accessed at all, even with authentification$/;"	e	enum:sf::Http::Response::Status
Fragment	src/include/SFML/Graphics/Shader.hpp	/^        Fragment \/\/\/< Fragment (pixel) shader$/;"	e	enum:sf::Shader::Type
Free	src/include/Box2D/Common/b2BlockAllocator.cpp	/^void b2BlockAllocator::Free(void* p, int32 size)$/;"	f	class:b2BlockAllocator
Free	src/include/Box2D/Common/b2StackAllocator.cpp	/^void b2StackAllocator::Free(void* p)$/;"	f	class:b2StackAllocator
FreeNode	src/include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::FreeNode(int32 nodeId)$/;"	f	class:b2DynamicTree
Ftp	src/include/SFML/Network/Ftp.hpp	/^class SFML_NETWORK_API Ftp : NonCopyable$/;"	c	namespace:sf
Fullscreen	src/include/SFML/Window/WindowStyle.hpp	/^        Fullscreen = 1 << 3, \/\/\/< Fullscreen mode (this flag and all others are mutually exclusive)$/;"	e	enum:sf::Style::__anon5
G	src/include/SFML/Window/Keyboard.hpp	/^        G,            \/\/\/< The G key$/;"	e	enum:sf::Keyboard::Key
GainedFocus	src/include/SFML/Window/Event.hpp	/^        GainedFocus,            \/\/\/< The window gained the focus (no data)$/;"	e	enum:sf::Event::EventType
GatewayTimeout	src/include/SFML/Network/Http.hpp	/^            GatewayTimeout      = 504, \/\/\/< The gateway server couldn't receive a response from the source server$/;"	e	enum:sf::Http::Response::Status
Generate	src/game/generators/bulletDataGenerator.cpp	/^bulletData bulletDataGenerator::Generate(){$/;"	f	class:bulletDataGenerator
Generate	src/game/generators/gunDataGenerator.cpp	/^gunData gunDataGenerator::Generate(){$/;"	f	class:gunDataGenerator
Generator	src/game/generators/Generator.h	/^	Generator(){};$/;"	f	class:Generator
Generator	src/game/generators/Generator.h	/^class Generator{$/;"	c
Get	src/include/SFML/Network/Http.hpp	/^            Get,  \/\/\/< Request in get mode, standard method to retrieve a page$/;"	e	enum:sf::Http::Request::Method
GetAABB	src/include/Box2D/Dynamics/b2Fixture.h	/^inline const b2AABB& b2Fixture::GetAABB(int32 childIndex) const$/;"	f	class:b2Fixture
GetAllowSleeping	src/include/Box2D/Dynamics/b2World.h	/^	bool GetAllowSleeping() const { return m_allowSleep; }$/;"	f	class:b2World
GetAnchorA	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^b2Vec2 b2DistanceJoint::GetAnchorA() const$/;"	f	class:b2DistanceJoint
GetAnchorA	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^b2Vec2 b2FrictionJoint::GetAnchorA() const$/;"	f	class:b2FrictionJoint
GetAnchorA	src/include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^b2Vec2 b2GearJoint::GetAnchorA() const$/;"	f	class:b2GearJoint
GetAnchorA	src/include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^b2Vec2 b2MouseJoint::GetAnchorA() const$/;"	f	class:b2MouseJoint
GetAnchorA	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^b2Vec2 b2PrismaticJoint::GetAnchorA() const$/;"	f	class:b2PrismaticJoint
GetAnchorA	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetAnchorA() const$/;"	f	class:b2PulleyJoint
GetAnchorA	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^b2Vec2 b2RevoluteJoint::GetAnchorA() const$/;"	f	class:b2RevoluteJoint
GetAnchorA	src/include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^b2Vec2 b2RopeJoint::GetAnchorA() const$/;"	f	class:b2RopeJoint
GetAnchorA	src/include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^b2Vec2 b2WeldJoint::GetAnchorA() const$/;"	f	class:b2WeldJoint
GetAnchorA	src/include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^b2Vec2 b2WheelJoint::GetAnchorA() const$/;"	f	class:b2WheelJoint
GetAnchorB	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^b2Vec2 b2DistanceJoint::GetAnchorB() const$/;"	f	class:b2DistanceJoint
GetAnchorB	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^b2Vec2 b2FrictionJoint::GetAnchorB() const$/;"	f	class:b2FrictionJoint
GetAnchorB	src/include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^b2Vec2 b2GearJoint::GetAnchorB() const$/;"	f	class:b2GearJoint
GetAnchorB	src/include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^b2Vec2 b2MouseJoint::GetAnchorB() const$/;"	f	class:b2MouseJoint
GetAnchorB	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^b2Vec2 b2PrismaticJoint::GetAnchorB() const$/;"	f	class:b2PrismaticJoint
GetAnchorB	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetAnchorB() const$/;"	f	class:b2PulleyJoint
GetAnchorB	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^b2Vec2 b2RevoluteJoint::GetAnchorB() const$/;"	f	class:b2RevoluteJoint
GetAnchorB	src/include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^b2Vec2 b2RopeJoint::GetAnchorB() const$/;"	f	class:b2RopeJoint
GetAnchorB	src/include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^b2Vec2 b2WeldJoint::GetAnchorB() const$/;"	f	class:b2WeldJoint
GetAnchorB	src/include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^b2Vec2 b2WheelJoint::GetAnchorB() const$/;"	f	class:b2WheelJoint
GetAngle	src/include/Box2D/Common/b2Math.h	/^	float32 GetAngle() const$/;"	f	struct:b2Rot
GetAngle	src/include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetAngle() const$/;"	f	class:b2Body
GetAngularDamping	src/include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetAngularDamping() const$/;"	f	class:b2Body
GetAngularVelocity	src/include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetAngularVelocity() const$/;"	f	class:b2Body
GetAreaRatio	src/include/Box2D/Collision/b2DynamicTree.cpp	/^float32 b2DynamicTree::GetAreaRatio() const$/;"	f	class:b2DynamicTree
GetAutoClearForces	src/include/Box2D/Dynamics/b2World.h	/^inline bool b2World::GetAutoClearForces() const$/;"	f	class:b2World
GetBody	src/include/Box2D/Dynamics/b2Fixture.h	/^inline b2Body* b2Fixture::GetBody()$/;"	f	class:b2Fixture
GetBody	src/include/Box2D/Dynamics/b2Fixture.h	/^inline const b2Body* b2Fixture::GetBody() const$/;"	f	class:b2Fixture
GetBodyA	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^inline b2Body* b2Joint::GetBodyA()$/;"	f	class:b2Joint
GetBodyB	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^inline b2Body* b2Joint::GetBodyB()$/;"	f	class:b2Joint
GetBodyCount	src/include/Box2D/Dynamics/b2World.h	/^inline int32 b2World::GetBodyCount() const$/;"	f	class:b2World
GetBodyList	src/include/Box2D/Dynamics/b2World.h	/^inline b2Body* b2World::GetBodyList()$/;"	f	class:b2World
GetBodyList	src/include/Box2D/Dynamics/b2World.h	/^inline const b2Body* b2World::GetBodyList() const$/;"	f	class:b2World
GetCenter	src/include/Box2D/Collision/b2Collision.h	/^	b2Vec2 GetCenter() const$/;"	f	struct:b2AABB
GetChildCount	src/include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^int32 b2ChainShape::GetChildCount() const$/;"	f	class:b2ChainShape
GetChildCount	src/include/Box2D/Collision/Shapes/b2CircleShape.cpp	/^int32 b2CircleShape::GetChildCount() const$/;"	f	class:b2CircleShape
GetChildCount	src/include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^int32 b2EdgeShape::GetChildCount() const$/;"	f	class:b2EdgeShape
GetChildCount	src/include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^int32 b2PolygonShape::GetChildCount() const$/;"	f	class:b2PolygonShape
GetChildEdge	src/include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::GetChildEdge(b2EdgeShape* edge, int32 index) const$/;"	f	class:b2ChainShape
GetChildIndexA	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline int32 b2Contact::GetChildIndexA() const$/;"	f	class:b2Contact
GetChildIndexB	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline int32 b2Contact::GetChildIndexB() const$/;"	f	class:b2Contact
GetClosestPoint	src/include/Box2D/Collision/b2Distance.cpp	/^	b2Vec2 GetClosestPoint() const$/;"	f	struct:b2Simplex
GetCollideConnected	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^inline bool b2Joint::GetCollideConnected() const$/;"	f	class:b2Joint
GetContactCount	src/include/Box2D/Dynamics/b2World.h	/^inline int32 b2World::GetContactCount() const$/;"	f	class:b2World
GetContactList	src/include/Box2D/Dynamics/b2Body.h	/^inline b2ContactEdge* b2Body::GetContactList()$/;"	f	class:b2Body
GetContactList	src/include/Box2D/Dynamics/b2Body.h	/^inline const b2ContactEdge* b2Body::GetContactList() const$/;"	f	class:b2Body
GetContactList	src/include/Box2D/Dynamics/b2World.h	/^inline b2Contact* b2World::GetContactList()$/;"	f	class:b2World
GetContactList	src/include/Box2D/Dynamics/b2World.h	/^inline const b2Contact* b2World::GetContactList() const$/;"	f	class:b2World
GetContactManager	src/include/Box2D/Dynamics/b2World.h	/^inline const b2ContactManager& b2World::GetContactManager() const$/;"	f	class:b2World
GetContinuousPhysics	src/include/Box2D/Dynamics/b2World.h	/^	bool GetContinuousPhysics() const { return m_continuousPhysics; }$/;"	f	class:b2World
GetCount	src/include/Box2D/Common/b2GrowableStack.h	/^	int32 GetCount()$/;"	f	class:b2GrowableStack
GetDampingRatio	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^inline float32 b2DistanceJoint::GetDampingRatio() const$/;"	f	class:b2DistanceJoint
GetDampingRatio	src/include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^float32 b2MouseJoint::GetDampingRatio() const$/;"	f	class:b2MouseJoint
GetDampingRatio	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 GetDampingRatio() const { return m_dampingRatio; }$/;"	f	class:b2WeldJoint
GetDensity	src/include/Box2D/Dynamics/b2Fixture.h	/^inline float32 b2Fixture::GetDensity() const$/;"	f	class:b2Fixture
GetExtents	src/include/Box2D/Collision/b2Collision.h	/^	b2Vec2 GetExtents() const$/;"	f	struct:b2AABB
GetFatAABB	src/include/Box2D/Collision/b2BroadPhase.h	/^inline const b2AABB& b2BroadPhase::GetFatAABB(int32 proxyId) const$/;"	f	class:b2BroadPhase
GetFatAABB	src/include/Box2D/Collision/b2DynamicTree.h	/^inline const b2AABB& b2DynamicTree::GetFatAABB(int32 proxyId) const$/;"	f	class:b2DynamicTree
GetFilterData	src/include/Box2D/Dynamics/b2Fixture.h	/^inline const b2Filter& b2Fixture::GetFilterData() const$/;"	f	class:b2Fixture
GetFixtureA	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline b2Fixture* b2Contact::GetFixtureA()$/;"	f	class:b2Contact
GetFixtureA	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline const b2Fixture* b2Contact::GetFixtureA() const$/;"	f	class:b2Contact
GetFixtureB	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline b2Fixture* b2Contact::GetFixtureB()$/;"	f	class:b2Contact
GetFixtureB	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline const b2Fixture* b2Contact::GetFixtureB() const$/;"	f	class:b2Contact
GetFixtureList	src/include/Box2D/Dynamics/b2Body.h	/^inline b2Fixture* b2Body::GetFixtureList()$/;"	f	class:b2Body
GetFixtureList	src/include/Box2D/Dynamics/b2Body.h	/^inline const b2Fixture* b2Body::GetFixtureList() const$/;"	f	class:b2Body
GetFlags	src/include/Box2D/Common/b2Draw.cpp	/^uint32 b2Draw::GetFlags() const$/;"	f	class:b2Draw
GetFrequency	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^inline float32 b2DistanceJoint::GetFrequency() const$/;"	f	class:b2DistanceJoint
GetFrequency	src/include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^float32 b2MouseJoint::GetFrequency() const$/;"	f	class:b2MouseJoint
GetFrequency	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 GetFrequency() const { return m_frequencyHz; }$/;"	f	class:b2WeldJoint
GetFriction	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline float32 b2Contact::GetFriction() const$/;"	f	class:b2Contact
GetFriction	src/include/Box2D/Dynamics/b2Fixture.h	/^inline float32 b2Fixture::GetFriction() const$/;"	f	class:b2Fixture
GetGravity	src/include/Box2D/Dynamics/b2World.h	/^inline b2Vec2 b2World::GetGravity() const$/;"	f	class:b2World
GetGravityScale	src/include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetGravityScale() const$/;"	f	class:b2Body
GetGroundAnchorA	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetGroundAnchorA() const$/;"	f	class:b2PulleyJoint
GetGroundAnchorB	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetGroundAnchorB() const$/;"	f	class:b2PulleyJoint
GetHeight	src/include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::GetHeight() const$/;"	f	class:b2DynamicTree
GetInertia	src/include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetInertia() const$/;"	f	class:b2Body
GetInverse	src/include/Box2D/Common/b2Math.h	/^	b2Mat22 GetInverse() const$/;"	f	struct:b2Mat22
GetInverse22	src/include/Box2D/Common/b2Math.cpp	/^void b2Mat33::GetInverse22(b2Mat33* M) const$/;"	f	class:b2Mat33
GetJoint1	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Joint* GetJoint1() { return m_joint1; }$/;"	f	class:b2GearJoint
GetJoint2	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Joint* GetJoint2() { return m_joint2; }$/;"	f	class:b2GearJoint
GetJointAngle	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetJointAngle() const$/;"	f	class:b2RevoluteJoint
GetJointCount	src/include/Box2D/Dynamics/b2World.h	/^inline int32 b2World::GetJointCount() const$/;"	f	class:b2World
GetJointList	src/include/Box2D/Dynamics/b2Body.h	/^inline b2JointEdge* b2Body::GetJointList()$/;"	f	class:b2Body
GetJointList	src/include/Box2D/Dynamics/b2Body.h	/^inline const b2JointEdge* b2Body::GetJointList() const$/;"	f	class:b2Body
GetJointList	src/include/Box2D/Dynamics/b2World.h	/^inline b2Joint* b2World::GetJointList()$/;"	f	class:b2World
GetJointList	src/include/Box2D/Dynamics/b2World.h	/^inline const b2Joint* b2World::GetJointList() const$/;"	f	class:b2World
GetJointSpeed	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetJointSpeed() const$/;"	f	class:b2PrismaticJoint
GetJointSpeed	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetJointSpeed() const$/;"	f	class:b2RevoluteJoint
GetJointSpeed	src/include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^float32 b2WheelJoint::GetJointSpeed() const$/;"	f	class:b2WheelJoint
GetJointTranslation	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetJointTranslation() const$/;"	f	class:b2PrismaticJoint
GetJointTranslation	src/include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^float32 b2WheelJoint::GetJointTranslation() const$/;"	f	class:b2WheelJoint
GetLength	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^inline float32 b2DistanceJoint::GetLength() const$/;"	f	class:b2DistanceJoint
GetLengthA	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetLengthA() const$/;"	f	class:b2PulleyJoint
GetLengthB	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetLengthB() const$/;"	f	class:b2PulleyJoint
GetLimitState	src/include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^b2LimitState b2RopeJoint::GetLimitState() const$/;"	f	class:b2RopeJoint
GetLinearDamping	src/include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetLinearDamping() const$/;"	f	class:b2Body
GetLinearVelocity	src/include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLinearVelocity() const$/;"	f	class:b2Body
GetLinearVelocityFromLocalPoint	src/include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2& localPoint) const$/;"	f	class:b2Body
GetLinearVelocityFromWorldPoint	src/include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2& worldPoint) const$/;"	f	class:b2Body
GetLocalAnchorA	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2DistanceJoint
GetLocalAnchorA	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2FrictionJoint
GetLocalAnchorA	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2PrismaticJoint
GetLocalAnchorA	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2RevoluteJoint
GetLocalAnchorA	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2RopeJoint
GetLocalAnchorA	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2WeldJoint
GetLocalAnchorA	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2WheelJoint
GetLocalAnchorB	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2DistanceJoint
GetLocalAnchorB	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2FrictionJoint
GetLocalAnchorB	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2PrismaticJoint
GetLocalAnchorB	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2RevoluteJoint
GetLocalAnchorB	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2RopeJoint
GetLocalAnchorB	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2WeldJoint
GetLocalAnchorB	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2WheelJoint
GetLocalAxisA	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	const b2Vec2& GetLocalAxisA() const { return m_localXAxisA; }$/;"	f	class:b2PrismaticJoint
GetLocalAxisA	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	const b2Vec2& GetLocalAxisA() const { return m_localXAxisA; }$/;"	f	class:b2WheelJoint
GetLocalCenter	src/include/Box2D/Dynamics/b2Body.h	/^inline const b2Vec2& b2Body::GetLocalCenter() const$/;"	f	class:b2Body
GetLocalPoint	src/include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLocalPoint(const b2Vec2& worldPoint) const$/;"	f	class:b2Body
GetLocalVector	src/include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLocalVector(const b2Vec2& worldVector) const$/;"	f	class:b2Body
GetLowerLimit	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetLowerLimit() const$/;"	f	class:b2PrismaticJoint
GetLowerLimit	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetLowerLimit() const$/;"	f	class:b2RevoluteJoint
GetManifold	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline b2Manifold* b2Contact::GetManifold()$/;"	f	class:b2Contact
GetManifold	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline const b2Manifold* b2Contact::GetManifold() const$/;"	f	class:b2Contact
GetMass	src/include/Box2D/Dynamics/b2Body.h	/^inline float32 b2Body::GetMass() const$/;"	f	class:b2Body
GetMassData	src/include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::GetMassData(b2MassData* data) const$/;"	f	class:b2Body
GetMassData	src/include/Box2D/Dynamics/b2Fixture.h	/^inline void b2Fixture::GetMassData(b2MassData* massData) const$/;"	f	class:b2Fixture
GetMaxAllocation	src/include/Box2D/Common/b2StackAllocator.cpp	/^int32 b2StackAllocator::GetMaxAllocation() const$/;"	f	class:b2StackAllocator
GetMaxBalance	src/include/Box2D/Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::GetMaxBalance() const$/;"	f	class:b2DynamicTree
GetMaxForce	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^float32 b2FrictionJoint::GetMaxForce() const$/;"	f	class:b2FrictionJoint
GetMaxForce	src/include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^float32 b2MouseJoint::GetMaxForce() const$/;"	f	class:b2MouseJoint
GetMaxLength	src/include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^float32 b2RopeJoint::GetMaxLength() const$/;"	f	class:b2RopeJoint
GetMaxMotorForce	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 GetMaxMotorForce() const { return m_maxMotorForce; }$/;"	f	class:b2PrismaticJoint
GetMaxMotorTorque	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 GetMaxMotorTorque() const { return m_maxMotorTorque; }$/;"	f	class:b2RevoluteJoint
GetMaxMotorTorque	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^inline float32 b2WheelJoint::GetMaxMotorTorque() const$/;"	f	class:b2WheelJoint
GetMaxTorque	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^float32 b2FrictionJoint::GetMaxTorque() const$/;"	f	class:b2FrictionJoint
GetMetric	src/include/Box2D/Collision/b2Distance.cpp	/^	float32 GetMetric() const$/;"	f	struct:b2Simplex
GetMilliseconds	src/include/Box2D/Common/b2Timer.cpp	/^float32 b2Timer::GetMilliseconds() const$/;"	f	class:b2Timer
GetMotorForce	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetMotorForce(float32 inv_dt) const$/;"	f	class:b2PrismaticJoint
GetMotorSpeed	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^inline float32 b2PrismaticJoint::GetMotorSpeed() const$/;"	f	class:b2PrismaticJoint
GetMotorSpeed	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^inline float32 b2RevoluteJoint::GetMotorSpeed() const$/;"	f	class:b2RevoluteJoint
GetMotorSpeed	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^inline float32 b2WheelJoint::GetMotorSpeed() const$/;"	f	class:b2WheelJoint
GetMotorTorque	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetMotorTorque(float32 inv_dt) const$/;"	f	class:b2RevoluteJoint
GetMotorTorque	src/include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^float32 b2WheelJoint::GetMotorTorque(float32 inv_dt) const$/;"	f	class:b2WheelJoint
GetNext	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline b2Contact* b2Contact::GetNext()$/;"	f	class:b2Contact
GetNext	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline const b2Contact* b2Contact::GetNext() const$/;"	f	class:b2Contact
GetNext	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^inline b2Joint* b2Joint::GetNext()$/;"	f	class:b2Joint
GetNext	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^inline const b2Joint* b2Joint::GetNext() const$/;"	f	class:b2Joint
GetNext	src/include/Box2D/Dynamics/b2Body.h	/^inline b2Body* b2Body::GetNext()$/;"	f	class:b2Body
GetNext	src/include/Box2D/Dynamics/b2Body.h	/^inline const b2Body* b2Body::GetNext() const$/;"	f	class:b2Body
GetNext	src/include/Box2D/Dynamics/b2Fixture.h	/^inline b2Fixture* b2Fixture::GetNext()$/;"	f	class:b2Fixture
GetNext	src/include/Box2D/Dynamics/b2Fixture.h	/^inline const b2Fixture* b2Fixture::GetNext() const$/;"	f	class:b2Fixture
GetPerimeter	src/include/Box2D/Collision/b2Collision.h	/^	float32 GetPerimeter() const$/;"	f	struct:b2AABB
GetPosition	src/include/Box2D/Dynamics/b2Body.h	/^inline const b2Vec2& b2Body::GetPosition() const$/;"	f	class:b2Body
GetProfile	src/include/Box2D/Dynamics/b2World.h	/^inline const b2Profile& b2World::GetProfile() const$/;"	f	class:b2World
GetProxyCount	src/include/Box2D/Collision/b2BroadPhase.h	/^inline int32 b2BroadPhase::GetProxyCount() const$/;"	f	class:b2BroadPhase
GetProxyCount	src/include/Box2D/Dynamics/b2World.cpp	/^int32 b2World::GetProxyCount() const$/;"	f	class:b2World
GetRatio	src/include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^float32 b2GearJoint::GetRatio() const$/;"	f	class:b2GearJoint
GetRatio	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetRatio() const$/;"	f	class:b2PulleyJoint
GetReactionForce	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^b2Vec2 b2DistanceJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2DistanceJoint
GetReactionForce	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^b2Vec2 b2FrictionJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2FrictionJoint
GetReactionForce	src/include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^b2Vec2 b2GearJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2GearJoint
GetReactionForce	src/include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^b2Vec2 b2MouseJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2MouseJoint
GetReactionForce	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^b2Vec2 b2PrismaticJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2PrismaticJoint
GetReactionForce	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2PulleyJoint
GetReactionForce	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^b2Vec2 b2RevoluteJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2RevoluteJoint
GetReactionForce	src/include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^b2Vec2 b2RopeJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2RopeJoint
GetReactionForce	src/include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^b2Vec2 b2WeldJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2WeldJoint
GetReactionForce	src/include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^b2Vec2 b2WheelJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2WheelJoint
GetReactionTorque	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^float32 b2DistanceJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2DistanceJoint
GetReactionTorque	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^float32 b2FrictionJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2FrictionJoint
GetReactionTorque	src/include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^float32 b2GearJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2GearJoint
GetReactionTorque	src/include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^float32 b2MouseJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2MouseJoint
GetReactionTorque	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2PrismaticJoint
GetReactionTorque	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2PulleyJoint
GetReactionTorque	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2RevoluteJoint
GetReactionTorque	src/include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^float32 b2RopeJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2RopeJoint
GetReactionTorque	src/include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^float32 b2WeldJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2WeldJoint
GetReactionTorque	src/include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^float32 b2WheelJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2WheelJoint
GetReferenceAngle	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 GetReferenceAngle() const { return m_referenceAngle; }$/;"	f	class:b2PrismaticJoint
GetReferenceAngle	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 GetReferenceAngle() const { return m_referenceAngle; }$/;"	f	class:b2RevoluteJoint
GetReferenceAngle	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 GetReferenceAngle() const { return m_referenceAngle; }$/;"	f	class:b2WeldJoint
GetRestitution	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline float32 b2Contact::GetRestitution() const$/;"	f	class:b2Contact
GetRestitution	src/include/Box2D/Dynamics/b2Fixture.h	/^inline float32 b2Fixture::GetRestitution() const$/;"	f	class:b2Fixture
GetSearchDirection	src/include/Box2D/Collision/b2Distance.cpp	/^	b2Vec2 GetSearchDirection() const$/;"	f	struct:b2Simplex
GetShape	src/include/Box2D/Dynamics/b2Fixture.h	/^inline b2Shape* b2Fixture::GetShape()$/;"	f	class:b2Fixture
GetShape	src/include/Box2D/Dynamics/b2Fixture.h	/^inline const b2Shape* b2Fixture::GetShape() const$/;"	f	class:b2Fixture
GetSpringDampingRatio	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^inline float32 b2WheelJoint::GetSpringDampingRatio() const$/;"	f	class:b2WheelJoint
GetSpringFrequencyHz	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^inline float32 b2WheelJoint::GetSpringFrequencyHz() const$/;"	f	class:b2WheelJoint
GetSubStepping	src/include/Box2D/Dynamics/b2World.h	/^	bool GetSubStepping() const { return m_subStepping; }$/;"	f	class:b2World
GetSupport	src/include/Box2D/Collision/Shapes/b2CircleShape.h	/^inline int32 b2CircleShape::GetSupport(const b2Vec2 &d) const$/;"	f	class:b2CircleShape
GetSupport	src/include/Box2D/Collision/b2Distance.h	/^inline int32 b2DistanceProxy::GetSupport(const b2Vec2& d) const$/;"	f	class:b2DistanceProxy
GetSupportVertex	src/include/Box2D/Collision/Shapes/b2CircleShape.h	/^inline const b2Vec2& b2CircleShape::GetSupportVertex(const b2Vec2 &d) const$/;"	f	class:b2CircleShape
GetSupportVertex	src/include/Box2D/Collision/b2Distance.h	/^inline const b2Vec2& b2DistanceProxy::GetSupportVertex(const b2Vec2& d) const$/;"	f	class:b2DistanceProxy
GetSymInverse33	src/include/Box2D/Common/b2Math.cpp	/^void b2Mat33::GetSymInverse33(b2Mat33* M) const$/;"	f	class:b2Mat33
GetTarget	src/include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^const b2Vec2& b2MouseJoint::GetTarget() const$/;"	f	class:b2MouseJoint
GetTransform	src/include/Box2D/Common/b2Math.h	/^inline void b2Sweep::GetTransform(b2Transform* xf, float32 beta) const$/;"	f	class:b2Sweep
GetTransform	src/include/Box2D/Dynamics/b2Body.h	/^inline const b2Transform& b2Body::GetTransform() const$/;"	f	class:b2Body
GetTreeBalance	src/include/Box2D/Collision/b2BroadPhase.h	/^inline int32 b2BroadPhase::GetTreeBalance() const$/;"	f	class:b2BroadPhase
GetTreeBalance	src/include/Box2D/Dynamics/b2World.cpp	/^int32 b2World::GetTreeBalance() const$/;"	f	class:b2World
GetTreeHeight	src/include/Box2D/Collision/b2BroadPhase.h	/^inline int32 b2BroadPhase::GetTreeHeight() const$/;"	f	class:b2BroadPhase
GetTreeHeight	src/include/Box2D/Dynamics/b2World.cpp	/^int32 b2World::GetTreeHeight() const$/;"	f	class:b2World
GetTreeQuality	src/include/Box2D/Collision/b2BroadPhase.h	/^inline float32 b2BroadPhase::GetTreeQuality() const$/;"	f	class:b2BroadPhase
GetTreeQuality	src/include/Box2D/Dynamics/b2World.cpp	/^float32 b2World::GetTreeQuality() const$/;"	f	class:b2World
GetType	src/include/Box2D/Collision/Shapes/b2Shape.h	/^inline b2Shape::Type b2Shape::GetType() const$/;"	f	class:b2Shape
GetType	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^inline b2JointType b2Joint::GetType() const$/;"	f	class:b2Joint
GetType	src/include/Box2D/Dynamics/b2Body.h	/^inline b2BodyType b2Body::GetType() const$/;"	f	class:b2Body
GetType	src/include/Box2D/Dynamics/b2Fixture.h	/^inline b2Shape::Type b2Fixture::GetType() const$/;"	f	class:b2Fixture
GetUpperLimit	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetUpperLimit() const$/;"	f	class:b2PrismaticJoint
GetUpperLimit	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetUpperLimit() const$/;"	f	class:b2RevoluteJoint
GetUserData	src/include/Box2D/Collision/b2BroadPhase.h	/^inline void* b2BroadPhase::GetUserData(int32 proxyId) const$/;"	f	class:b2BroadPhase
GetUserData	src/include/Box2D/Collision/b2DynamicTree.h	/^inline void* b2DynamicTree::GetUserData(int32 proxyId) const$/;"	f	class:b2DynamicTree
GetUserData	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^inline void* b2Joint::GetUserData() const$/;"	f	class:b2Joint
GetUserData	src/include/Box2D/Dynamics/b2Body.h	/^inline void* b2Body::GetUserData() const$/;"	f	class:b2Body
GetUserData	src/include/Box2D/Dynamics/b2Fixture.h	/^inline void* b2Fixture::GetUserData() const$/;"	f	class:b2Fixture
GetVertex	src/include/Box2D/Collision/Shapes/b2CircleShape.h	/^inline const b2Vec2& b2CircleShape::GetVertex(int32 index) const$/;"	f	class:b2CircleShape
GetVertex	src/include/Box2D/Collision/Shapes/b2PolygonShape.h	/^inline const b2Vec2& b2PolygonShape::GetVertex(int32 index) const$/;"	f	class:b2PolygonShape
GetVertex	src/include/Box2D/Collision/b2Distance.h	/^inline const b2Vec2& b2DistanceProxy::GetVertex(int32 index) const$/;"	f	class:b2DistanceProxy
GetVertexCount	src/include/Box2D/Collision/Shapes/b2CircleShape.h	/^	int32 GetVertexCount() const { return 1; }$/;"	f	class:b2CircleShape
GetVertexCount	src/include/Box2D/Collision/Shapes/b2PolygonShape.h	/^	int32 GetVertexCount() const { return m_vertexCount; }$/;"	f	class:b2PolygonShape
GetVertexCount	src/include/Box2D/Collision/b2Distance.h	/^inline int32 b2DistanceProxy::GetVertexCount() const$/;"	f	class:b2DistanceProxy
GetVertexCount	src/include/Box2D/Rope/b2Rope.h	/^	int32 GetVertexCount() const$/;"	f	class:b2Rope
GetVertices	src/include/Box2D/Rope/b2Rope.h	/^	const b2Vec2* GetVertices() const$/;"	f	class:b2Rope
GetWarmStarting	src/include/Box2D/Dynamics/b2World.h	/^	bool GetWarmStarting() const { return m_warmStarting; }$/;"	f	class:b2World
GetWitnessPoints	src/include/Box2D/Collision/b2Distance.cpp	/^	void GetWitnessPoints(b2Vec2* pA, b2Vec2* pB) const$/;"	f	struct:b2Simplex
GetWorld	src/include/Box2D/Dynamics/b2Body.h	/^inline b2World* b2Body::GetWorld()$/;"	f	class:b2Body
GetWorld	src/include/Box2D/Dynamics/b2Body.h	/^inline const b2World* b2Body::GetWorld() const$/;"	f	class:b2Body
GetWorldCenter	src/include/Box2D/Dynamics/b2Body.h	/^inline const b2Vec2& b2Body::GetWorldCenter() const$/;"	f	class:b2Body
GetWorldManifold	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::GetWorldManifold(b2WorldManifold* worldManifold) const$/;"	f	class:b2Contact
GetWorldPoint	src/include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetWorldPoint(const b2Vec2& localPoint) const$/;"	f	class:b2Body
GetWorldVector	src/include/Box2D/Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetWorldVector(const b2Vec2& localVector) const$/;"	f	class:b2Body
GetXAxis	src/include/Box2D/Common/b2Math.h	/^	b2Vec2 GetXAxis() const$/;"	f	struct:b2Rot
GetYAxis	src/include/Box2D/Common/b2Math.h	/^	b2Vec2 GetYAxis() const$/;"	f	struct:b2Rot
GlResource	src/include/SFML/Window/GlResource.hpp	/^class SFML_WINDOW_API GlResource$/;"	c	namespace:sf
Glyph	src/include/SFML/Graphics/Glyph.hpp	/^    Glyph() : advance(0) {}$/;"	f	class:sf::Glyph
Glyph	src/include/SFML/Graphics/Glyph.hpp	/^class SFML_GRAPHICS_API Glyph$/;"	c	namespace:sf
GlyphTable	src/include/SFML/Graphics/Font.hpp	/^    typedef std::map<Uint32, Glyph> GlyphTable; \/\/\/< Table mapping a codepoint to its glyph$/;"	t	class:sf::Font
Green	src/include/SFML/Graphics/Color.hpp	/^    static const Color Green;       \/\/\/< Green predefined color$/;"	m	class:sf::Color
H	src/include/SFML/Window/Keyboard.hpp	/^        H,            \/\/\/< The H key$/;"	e	enum:sf::Keyboard::Key
HUD	src/game/defines/renderingLayers.h	/^	HUD = 0,$/;"	e	enum:renderingLayers
H_6B9572DA_A64B_49E6_B234_051480991C89	src/include/backward/backward.hpp	25;"	d
Hash	src/core/Hash.cpp	/^Hash::Hash(std::string &str, unsigned int seed){$/;"	f	class:Hash
Hash	src/core/Hash.h	/^class Hash{$/;"	c
Hash2Str	src/core/Hash.cpp	/^std::string Hash::Hash2Str(const Hash *hash){$/;"	f	class:Hash
HashMap	src/core/Hash.h	/^	typedef std::map<std::string, Hash* > HashMap; $/;"	t	class:Hash
Head	src/include/SFML/Network/Http.hpp	/^            Head  \/\/\/< Request a page's header only$/;"	e	enum:sf::Http::Request::Method
Heal	src/game/ObjProcessors/healthProcessor.h	/^	void Heal(unsigned int heal){$/;"	f	struct:healthData
HelpMessage	src/include/SFML/Network/Ftp.hpp	/^            HelpMessage           = 214, \/\/\/< Help message$/;"	e	enum:sf::Ftp::Response::Status
Home	src/include/SFML/Window/Keyboard.hpp	/^        Home,         \/\/\/< The Home key$/;"	e	enum:sf::Keyboard::Key
Http	src/include/SFML/Network/Http.hpp	/^class SFML_NETWORK_API Http : NonCopyable$/;"	c	namespace:sf
I	src/include/Box2D/Collision/Shapes/b2Shape.h	/^	float32 I;$/;"	m	struct:b2MassData
I	src/include/SFML/Window/Keyboard.hpp	/^        I,            \/\/\/< The I key$/;"	e	enum:sf::Keyboard::Key
Identity	src/include/SFML/Graphics/Transform.hpp	/^    static const Transform Identity; \/\/\/< The identity transform (does nothing)$/;"	m	class:sf::Transform
Image	src/include/SFML/Graphics/Image.hpp	/^class SFML_GRAPHICS_API Image$/;"	c	namespace:sf
Init	src/core/State/State.h	/^	void Init(processMgr &_processManager, Settings &_settings, eventMgr &_eventManager){$/;"	f	class:State
Init	src/core/objectProcessor.h	/^	void Init(objectMap *_objMap){$/;"	f	class:objectProcessor
InitVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^void b2DistanceJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2DistanceJoint
InitVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2FrictionJoint
InitVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^void b2GearJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2GearJoint
InitVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2MouseJoint
InitVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PrismaticJoint
InitVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^void b2PulleyJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PulleyJoint
InitVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RevoluteJoint
InitVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^void b2RopeJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RopeJoint
InitVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^void b2WeldJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WeldJoint
InitVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WheelJoint
Initialize	src/include/Box2D/Collision/b2Collision.cpp	/^void b2WorldManifold::Initialize(const b2Manifold* manifold,$/;"	f	class:b2WorldManifold
Initialize	src/include/Box2D/Collision/b2TimeOfImpact.cpp	/^	float32 Initialize(const b2SimplexCache* cache,$/;"	f	struct:b2SeparationFunction
Initialize	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	void Initialize(b2ContactPositionConstraint* pc, const b2Transform& xfA, const b2Transform& xfB, int32 index)$/;"	f	struct:b2PositionSolverManifold
Initialize	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^void b2DistanceJointDef::Initialize(b2Body* b1, b2Body* b2,$/;"	f	class:b2DistanceJointDef
Initialize	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor)$/;"	f	class:b2FrictionJointDef
Initialize	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor, const b2Vec2& axis)$/;"	f	class:b2PrismaticJointDef
Initialize	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^void b2PulleyJointDef::Initialize(b2Body* bA, b2Body* bB,$/;"	f	class:b2PulleyJointDef
Initialize	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor)$/;"	f	class:b2RevoluteJointDef
Initialize	src/include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^void b2WeldJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor)$/;"	f	class:b2WeldJointDef
Initialize	src/include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor, const b2Vec2& axis)$/;"	f	class:b2WheelJointDef
Initialize	src/include/Box2D/Rope/b2Rope.cpp	/^void b2Rope::Initialize(const b2RopeDef* def)$/;"	f	class:b2Rope
InitializeRegisters	src/include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^void b2Contact::InitializeRegisters()$/;"	f	class:b2Contact
InitializeVelocityConstraints	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^void b2ContactSolver::InitializeVelocityConstraints()$/;"	f	class:b2ContactSolver
InputStream	src/include/SFML/System/InputStream.hpp	/^class InputStream$/;"	c	namespace:sf
Insert	src/include/SFML/Window/Keyboard.hpp	/^        Insert,       \/\/\/< The Insert key$/;"	e	enum:sf::Keyboard::Key
InsertLeaf	src/include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::InsertLeaf(int32 leaf)$/;"	f	class:b2DynamicTree
InsufficientStorageSpace	src/include/SFML/Network/Ftp.hpp	/^            InsufficientStorageSpace  = 452, \/\/\/< Requested action not taken; insufficient storage space in system, file unavailable$/;"	e	enum:sf::Ftp::Response::Status
Int16	src/include/SFML/Config.hpp	/^    typedef signed   short Int16;$/;"	t	namespace:sf
Int32	src/include/SFML/Config.hpp	/^    typedef signed   int Int32;$/;"	t	namespace:sf
Int64	src/include/SFML/Config.hpp	/^        typedef signed   __int64 Int64;$/;"	t	namespace:sf
Int64	src/include/SFML/Config.hpp	/^        typedef signed   long long Int64;$/;"	t	namespace:sf
Int8	src/include/SFML/Config.hpp	/^    typedef signed   char Int8;$/;"	t	namespace:sf
IntRect	src/include/SFML/Graphics/Rect.hpp	/^typedef Rect<int>   IntRect;$/;"	t	namespace:sf
InternalServerError	src/include/SFML/Network/Http.hpp	/^            InternalServerError = 500, \/\/\/< The server encountered an unexpected error$/;"	e	enum:sf::Http::Response::Status
InvalidFile	src/include/SFML/Network/Ftp.hpp	/^            InvalidFile      = 1003  \/\/\/< Invalid file to upload \/ download$/;"	e	enum:sf::Ftp::Response::Status
InvalidPos	src/include/SFML/System/String.hpp	/^    static const std::size_t InvalidPos; \/\/\/< Represents an invalid position in the string$/;"	m	class:sf::String
InvalidResponse	src/include/SFML/Network/Ftp.hpp	/^            InvalidResponse  = 1000, \/\/\/< Response is not a valid FTP one$/;"	e	enum:sf::Ftp::Response::Status
InvalidResponse	src/include/SFML/Network/Http.hpp	/^            InvalidResponse  = 1000, \/\/\/< Response is not a valid HTTP one$/;"	e	enum:sf::Http::Response::Status
IpAddress	src/include/SFML/Network/IpAddress.hpp	/^class SFML_NETWORK_API IpAddress$/;"	c	namespace:sf
IsActive	src/include/Box2D/Dynamics/Joints/b2Joint.cpp	/^bool b2Joint::IsActive() const$/;"	f	class:b2Joint
IsActive	src/include/Box2D/Dynamics/b2Body.h	/^inline bool b2Body::IsActive() const$/;"	f	class:b2Body
IsAwake	src/include/Box2D/Dynamics/b2Body.h	/^inline bool b2Body::IsAwake() const$/;"	f	class:b2Body
IsBullet	src/include/Box2D/Dynamics/b2Body.h	/^inline bool b2Body::IsBullet() const$/;"	f	class:b2Body
IsEnabled	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline bool b2Contact::IsEnabled() const$/;"	f	class:b2Contact
IsFixedRotation	src/include/Box2D/Dynamics/b2Body.h	/^inline bool b2Body::IsFixedRotation() const$/;"	f	class:b2Body
IsLeaf	src/include/Box2D/Collision/b2DynamicTree.h	/^	bool IsLeaf() const$/;"	f	struct:b2TreeNode
IsLimitEnabled	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^bool b2PrismaticJoint::IsLimitEnabled() const$/;"	f	class:b2PrismaticJoint
IsLimitEnabled	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^bool b2RevoluteJoint::IsLimitEnabled() const$/;"	f	class:b2RevoluteJoint
IsLocked	src/include/Box2D/Dynamics/b2World.h	/^inline bool b2World::IsLocked() const$/;"	f	class:b2World
IsMotorEnabled	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^bool b2PrismaticJoint::IsMotorEnabled() const$/;"	f	class:b2PrismaticJoint
IsMotorEnabled	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^bool b2RevoluteJoint::IsMotorEnabled() const$/;"	f	class:b2RevoluteJoint
IsMotorEnabled	src/include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^bool b2WheelJoint::IsMotorEnabled() const$/;"	f	class:b2WheelJoint
IsSensor	src/include/Box2D/Dynamics/b2Fixture.h	/^inline bool b2Fixture::IsSensor() const$/;"	f	class:b2Fixture
IsSleepingAllowed	src/include/Box2D/Dynamics/b2Body.h	/^inline bool b2Body::IsSleepingAllowed() const$/;"	f	class:b2Body
IsTouching	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline bool b2Contact::IsTouching() const$/;"	f	class:b2Contact
IsValid	src/include/Box2D/Collision/b2Collision.h	/^inline bool b2AABB::IsValid() const$/;"	f	class:b2AABB
IsValid	src/include/Box2D/Common/b2Math.h	/^	bool IsValid() const$/;"	f	struct:b2Vec2
Italic	src/include/SFML/Graphics/Text.hpp	/^        Italic     = 1 << 1, \/\/\/< Italic characters$/;"	e	enum:sf::Text::Style
Iterator	src/include/SFML/System/String.hpp	/^    typedef std::basic_string<Uint32>::iterator       Iterator;      \/\/\/< Iterator type$/;"	t	class:sf::String
J	src/include/SFML/Window/Keyboard.hpp	/^        J,            \/\/\/< The J key$/;"	e	enum:sf::Keyboard::Key
Joystick	src/include/SFML/Window/Joystick.hpp	/^class SFML_WINDOW_API Joystick$/;"	c	namespace:sf
JoystickButtonEvent	src/include/SFML/Window/Event.hpp	/^    struct JoystickButtonEvent$/;"	s	class:sf::Event
JoystickButtonPressed	src/include/SFML/Window/Event.hpp	/^        JoystickButtonPressed,  \/\/\/< A joystick button was pressed (data in event.joystickButton)$/;"	e	enum:sf::Event::EventType
JoystickButtonReleased	src/include/SFML/Window/Event.hpp	/^        JoystickButtonReleased, \/\/\/< A joystick button was released (data in event.joystickButton)$/;"	e	enum:sf::Event::EventType
JoystickConnectEvent	src/include/SFML/Window/Event.hpp	/^    struct JoystickConnectEvent$/;"	s	class:sf::Event
JoystickConnected	src/include/SFML/Window/Event.hpp	/^        JoystickConnected,      \/\/\/< A joystick was connected (data in event.joystickConnect)$/;"	e	enum:sf::Event::EventType
JoystickDisconnected	src/include/SFML/Window/Event.hpp	/^        JoystickDisconnected,   \/\/\/< A joystick was disconnected (data in event.joystickConnect)$/;"	e	enum:sf::Event::EventType
JoystickMoveEvent	src/include/SFML/Window/Event.hpp	/^    struct JoystickMoveEvent$/;"	s	class:sf::Event
JoystickMoved	src/include/SFML/Window/Event.hpp	/^        JoystickMoved,          \/\/\/< The joystick moved along an axis (data in event.joystickMove)$/;"	e	enum:sf::Event::EventType
Jump	src/game/ObjProcessors/groundMoveProcessor.cpp	/^void moveData::Jump(){$/;"	f	class:moveData
K	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Mat22 K;$/;"	m	struct:b2ContactVelocityConstraint
K	src/include/SFML/Window/Keyboard.hpp	/^        K,            \/\/\/< The K key$/;"	e	enum:sf::Keyboard::Key
Key	src/include/SFML/Window/Keyboard.hpp	/^    enum Key$/;"	g	class:sf::Keyboard
KeyCount	src/include/SFML/Window/Keyboard.hpp	/^        KeyCount      \/\/\/< Keep last -- the total number of keyboard keys$/;"	e	enum:sf::Keyboard::Key
KeyEvent	src/include/SFML/Window/Event.hpp	/^    struct KeyEvent$/;"	s	class:sf::Event
KeyPressed	src/include/SFML/Window/Event.hpp	/^        KeyPressed,             \/\/\/< A key was pressed (data in event.key)$/;"	e	enum:sf::Event::EventType
KeyReleased	src/include/SFML/Window/Event.hpp	/^        KeyReleased,            \/\/\/< A key was released (data in event.key)$/;"	e	enum:sf::Event::EventType
Keyboard	src/include/SFML/Window/Keyboard.hpp	/^class SFML_WINDOW_API Keyboard$/;"	c	namespace:sf
Kill	src/core/Object.h	/^	void Kill(){$/;"	f	class:Object
Kind	src/include/backward/backward.hpp	/^	enum Kind { VALUE, LIST, MAP };$/;"	g	class:backward::Variable
L	src/include/SFML/Window/Keyboard.hpp	/^        L,            \/\/\/< The L key$/;"	e	enum:sf::Keyboard::Key
LAlt	src/include/SFML/Window/Keyboard.hpp	/^        LAlt,         \/\/\/< The left Alt key$/;"	e	enum:sf::Keyboard::Key
LBracket	src/include/SFML/Window/Keyboard.hpp	/^        LBracket,     \/\/\/< The [ key$/;"	e	enum:sf::Keyboard::Key
LControl	src/include/SFML/Window/Keyboard.hpp	/^        LControl,     \/\/\/< The left Control key$/;"	e	enum:sf::Keyboard::Key
LIST	src/include/backward/backward.hpp	/^	enum Kind { VALUE, LIST, MAP };$/;"	e	enum:backward::Variable::Kind
LOG_GLOBAL_OBJECTS	src/util/logObject.h	123;"	d
LOG_GLOBAL_OBJECTS	tools/beautified.cpp	1236;"	d	file:
LOG_GLOBAL_OBJECTS	tools/input.cpp	1151;"	d	file:
LShift	src/include/SFML/Window/Keyboard.hpp	/^        LShift,       \/\/\/< The left Shift key$/;"	e	enum:sf::Keyboard::Key
LSystem	src/include/SFML/Window/Keyboard.hpp	/^        LSystem,      \/\/\/< The left OS specific key: window (Windows and Linux), apple (MacOS X), ...$/;"	e	enum:sf::Keyboard::Key
Left	src/include/SFML/Window/Keyboard.hpp	/^        Left,         \/\/\/< Left arrow$/;"	e	enum:sf::Keyboard::Key
Left	src/include/SFML/Window/Mouse.hpp	/^        Left,       \/\/\/< The left mouse button$/;"	e	enum:sf::Mouse::Button
Length	src/core/vector.h	/^	inline float Length() const{ return (sqrt(x * x  +  y * y)); };$/;"	f	class:vector2
Length	src/core/vector.h	/^	inline float Length(){ return (sqrt(x * x  +  y * y + z * z)); };$/;"	f	class:vector3
Length	src/include/Box2D/Common/b2Math.h	/^	float32 Length() const$/;"	f	struct:b2Vec2
Length	tools/beautified.cpp	/^	inline float Length () const { return ( sqrt( x * x  +  y * y ) ); }$/;"	f	class:vector2
Length	tools/beautified.cpp	/^	inline float Length (){ return ( sqrt( x * x  +  y * y + z * z ) ); }$/;"	f	class:vector3
Length	tools/input.cpp	/^	inline float Length() const{ return (sqrt(x * x  +  y * y)); };$/;"	f	class:vector2
Length	tools/input.cpp	/^	inline float Length(){ return (sqrt(x * x  +  y * y + z * z)); };$/;"	f	class:vector3
LengthSquared	src/core/vector.h	/^	inline float LengthSquared() const{ return (x * x + y * y + z * z); };$/;"	f	class:vector3
LengthSquared	src/core/vector.h	/^	inline float LengthSquared() const{ return (x * x + y * y); };$/;"	f	class:vector2
LengthSquared	src/include/Box2D/Common/b2Math.h	/^	float32 LengthSquared() const$/;"	f	struct:b2Vec2
LengthSquared	tools/beautified.cpp	/^	inline float LengthSquared () const { return (x * x + y * y + z * z); }$/;"	f	class:vector3
LengthSquared	tools/beautified.cpp	/^	inline float LengthSquared () const { return (x * x + y * y); }$/;"	f	class:vector2
LengthSquared	tools/input.cpp	/^	inline float LengthSquared() const{ return (x * x + y * y + z * z); };$/;"	f	class:vector3
LengthSquared	tools/input.cpp	/^	inline float LengthSquared() const{ return (x * x + y * y); };$/;"	f	class:vector2
Level	src/game/level/Level.h	/^class Level{$/;"	c
Lines	src/include/SFML/Graphics/PrimitiveType.hpp	/^    Lines,          \/\/\/< List of individual lines$/;"	e	enum:sf::PrimitiveType
LinesStrip	src/include/SFML/Graphics/PrimitiveType.hpp	/^    LinesStrip,     \/\/\/< List of connected lines, a point uses the previous point to form a line$/;"	e	enum:sf::PrimitiveType
Listener	src/include/SFML/Audio/Listener.hpp	/^class SFML_AUDIO_API Listener$/;"	c	namespace:sf
ListingResponse	src/include/SFML/Network/Ftp.hpp	/^    class SFML_NETWORK_API ListingResponse : public Response$/;"	c	class:sf::Ftp
Load	src/core/State/dummyStateSaveLoader.h	/^	 void Load(){ this->doneLoading = true; };$/;"	f	class:dummyStateSaveLoader
LocalError	src/include/SFML/Network/Ftp.hpp	/^            LocalError                = 451, \/\/\/< Requested action aborted, local error in processing$/;"	e	enum:sf::Ftp::Response::Status
LocalHost	src/include/SFML/Network/IpAddress.hpp	/^    static const IpAddress LocalHost; \/\/\/< The "localhost" address (for connecting a computer to itself locally)$/;"	m	class:sf::IpAddress
Lock	src/include/SFML/System/Lock.hpp	/^class SFML_SYSTEM_API Lock : NonCopyable$/;"	c	namespace:sf
LoggedIn	src/include/SFML/Network/Ftp.hpp	/^            LoggedIn              = 230, \/\/\/< User logged in, proceed. Logged out if appropriate$/;"	e	enum:sf::Ftp::Response::Status
LostFocus	src/include/SFML/Window/Event.hpp	/^        LostFocus,              \/\/\/< The window lost the focus (no data)$/;"	e	enum:sf::Event::EventType
M	src/include/SFML/Window/Keyboard.hpp	/^        M,            \/\/\/< The M key$/;"	e	enum:sf::Keyboard::Key
MAP	src/include/backward/backward.hpp	/^	enum Kind { VALUE, LIST, MAP };$/;"	e	enum:backward::Variable::Kind
Magenta	src/include/SFML/Graphics/Color.hpp	/^    static const Color Magenta;     \/\/\/< Magenta predefined color$/;"	m	class:sf::Color
MaxDatagramSize	src/include/SFML/Network/UdpSocket.hpp	/^        MaxDatagramSize = 65507 \/\/\/< The maximum number of bytes that can be sent in a single UDP datagram$/;"	e	enum:sf::UdpSocket::__anon1
Menu	src/include/SFML/Window/Keyboard.hpp	/^        Menu,         \/\/\/< The Menu key$/;"	e	enum:sf::Keyboard::Key
Method	src/include/SFML/Network/Http.hpp	/^        enum Method$/;"	g	class:sf::Http::Request
Middle	src/include/SFML/Window/Mouse.hpp	/^        Middle,     \/\/\/< The middle (wheel) mouse button$/;"	e	enum:sf::Mouse::Button
Mouse	src/include/SFML/Window/Mouse.hpp	/^class SFML_WINDOW_API Mouse$/;"	c	namespace:sf
MouseButtonEvent	src/include/SFML/Window/Event.hpp	/^    struct MouseButtonEvent$/;"	s	class:sf::Event
MouseButtonPressed	src/include/SFML/Window/Event.hpp	/^        MouseButtonPressed,     \/\/\/< A mouse button was pressed (data in event.mouseButton)$/;"	e	enum:sf::Event::EventType
MouseButtonReleased	src/include/SFML/Window/Event.hpp	/^        MouseButtonReleased,    \/\/\/< A mouse button was released (data in event.mouseButton)$/;"	e	enum:sf::Event::EventType
MouseEntered	src/include/SFML/Window/Event.hpp	/^        MouseEntered,           \/\/\/< The mouse cursor entered the area of the window (no data)$/;"	e	enum:sf::Event::EventType
MouseLeft	src/include/SFML/Window/Event.hpp	/^        MouseLeft,              \/\/\/< The mouse cursor left the area of the window (no data)$/;"	e	enum:sf::Event::EventType
MouseMoveEvent	src/include/SFML/Window/Event.hpp	/^    struct MouseMoveEvent$/;"	s	class:sf::Event
MouseMoved	src/include/SFML/Window/Event.hpp	/^        MouseMoved,             \/\/\/< The mouse cursor moved (data in event.mouseMove)$/;"	e	enum:sf::Event::EventType
MouseWheelEvent	src/include/SFML/Window/Event.hpp	/^    struct MouseWheelEvent$/;"	s	class:sf::Event
MouseWheelMoved	src/include/SFML/Window/Event.hpp	/^        MouseWheelMoved,        \/\/\/< The mouse wheel was scrolled (data in event.mouseWheel)$/;"	e	enum:sf::Event::EventType
MoveProxy	src/include/Box2D/Collision/b2BroadPhase.cpp	/^void b2BroadPhase::MoveProxy(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)$/;"	f	class:b2BroadPhase
MoveProxy	src/include/Box2D/Collision/b2DynamicTree.cpp	/^bool b2DynamicTree::MoveProxy(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)$/;"	f	class:b2DynamicTree
MovedPermanently	src/include/SFML/Network/Http.hpp	/^            MovedPermanently = 301, \/\/\/< The requested page has permanently moved to a new location$/;"	e	enum:sf::Http::Response::Status
MovedTemporarily	src/include/SFML/Network/Http.hpp	/^            MovedTemporarily = 302, \/\/\/< The requested page has temporarily moved to a new location$/;"	e	enum:sf::Http::Response::Status
MultipleChoices	src/include/SFML/Network/Http.hpp	/^            MultipleChoices  = 300, \/\/\/< The requested page can be accessed from several locations$/;"	e	enum:sf::Http::Response::Status
Multiply	src/include/SFML/Window/Keyboard.hpp	/^        Multiply,     \/\/\/< The * key$/;"	e	enum:sf::Keyboard::Key
Music	src/include/SFML/Audio/Music.hpp	/^class SFML_AUDIO_API Music : public SoundStream$/;"	c	namespace:sf
Mutex	src/include/SFML/System/Mutex.hpp	/^class SFML_SYSTEM_API Mutex : NonCopyable$/;"	c	namespace:sf
N	src/include/SFML/Window/Keyboard.hpp	/^        N,            \/\/\/< The N key$/;"	e	enum:sf::Keyboard::Key
NOMINMAX	src/include/SFML/Config.hpp	44;"	d
NeedAccountToLogIn	src/include/SFML/Network/Ftp.hpp	/^            NeedAccountToLogIn = 332, \/\/\/< Need account for login$/;"	e	enum:sf::Ftp::Response::Status
NeedAccountToStore	src/include/SFML/Network/Ftp.hpp	/^            NeedAccountToStore      = 532, \/\/\/< Need account for storing files$/;"	e	enum:sf::Ftp::Response::Status
NeedInformation	src/include/SFML/Network/Ftp.hpp	/^            NeedInformation    = 350, \/\/\/< Requested file action pending further information$/;"	e	enum:sf::Ftp::Response::Status
NeedPassword	src/include/SFML/Network/Ftp.hpp	/^            NeedPassword       = 331, \/\/\/< User name ok, need password$/;"	e	enum:sf::Ftp::Response::Status
NoContent	src/include/SFML/Network/Http.hpp	/^            NoContent      = 204, \/\/\/< The server didn't send any data in return$/;"	e	enum:sf::Http::Response::Status
NonCopyable	src/include/SFML/System/NonCopyable.hpp	/^    NonCopyable() {}$/;"	f	class:sf::NonCopyable
NonCopyable	src/include/SFML/System/NonCopyable.hpp	/^class SFML_SYSTEM_API NonCopyable$/;"	c	namespace:sf
None	src/include/SFML/Network/IpAddress.hpp	/^    static const IpAddress None;      \/\/\/< Value representing an empty\/invalid address$/;"	m	class:sf::IpAddress
None	src/include/SFML/Window/WindowStyle.hpp	/^        None       = 0,      \/\/\/< No border \/ title bar (this flag and all others are mutually exclusive)$/;"	e	enum:sf::Style::__anon5
Normalize	src/core/vector.h	/^	vector2 Normalize() const{	$/;"	f	class:vector2
Normalize	src/core/vector.h	/^	vector3 Normalize(){	$/;"	f	class:vector3
Normalize	src/include/Box2D/Common/b2Math.h	/^	float32 Normalize()$/;"	f	struct:b2Vec2
Normalize	src/include/Box2D/Common/b2Math.h	/^inline void b2Sweep::Normalize()$/;"	f	class:b2Sweep
Normalize	tools/beautified.cpp	/^	vector2 Normalize () const {$/;"	f	class:vector2
Normalize	tools/beautified.cpp	/^	vector3 Normalize (){$/;"	f	class:vector3
Normalize	tools/input.cpp	/^	vector2 Normalize() const{	$/;"	f	class:vector2
Normalize	tools/input.cpp	/^	vector3 Normalize(){	$/;"	f	class:vector3
Normalized	src/include/SFML/Graphics/Texture.hpp	/^        Normalized, \/\/\/< Texture coordinates in range [0 .. 1]$/;"	e	enum:sf::Texture::CoordinateType
NotEnoughMemory	src/include/SFML/Network/Ftp.hpp	/^            NotEnoughMemory         = 552, \/\/\/< Requested file action aborted, exceeded storage allocation$/;"	e	enum:sf::Ftp::Response::Status
NotFound	src/include/SFML/Network/Http.hpp	/^            NotFound            = 404, \/\/\/< The requested page doesn't exist$/;"	e	enum:sf::Http::Response::Status
NotImplemented	src/include/SFML/Network/Http.hpp	/^            NotImplemented      = 501, \/\/\/< The server doesn't implement a requested feature$/;"	e	enum:sf::Http::Response::Status
NotLoggedIn	src/include/SFML/Network/Ftp.hpp	/^            NotLoggedIn             = 530, \/\/\/< Not logged in$/;"	e	enum:sf::Ftp::Response::Status
NotModified	src/include/SFML/Network/Http.hpp	/^            NotModified      = 304, \/\/\/< For conditionnal requests, means the requested page hasn't changed and doesn't need to be refreshed$/;"	e	enum:sf::Http::Response::Status
NotReady	src/include/SFML/Network/Socket.hpp	/^        NotReady,     \/\/\/< The socket is not ready to send \/ receive data yet$/;"	e	enum:sf::Socket::Status
Num0	src/include/SFML/Window/Keyboard.hpp	/^        Num0,         \/\/\/< The 0 key$/;"	e	enum:sf::Keyboard::Key
Num1	src/include/SFML/Window/Keyboard.hpp	/^        Num1,         \/\/\/< The 1 key$/;"	e	enum:sf::Keyboard::Key
Num2	src/include/SFML/Window/Keyboard.hpp	/^        Num2,         \/\/\/< The 2 key$/;"	e	enum:sf::Keyboard::Key
Num3	src/include/SFML/Window/Keyboard.hpp	/^        Num3,         \/\/\/< The 3 key$/;"	e	enum:sf::Keyboard::Key
Num4	src/include/SFML/Window/Keyboard.hpp	/^        Num4,         \/\/\/< The 4 key$/;"	e	enum:sf::Keyboard::Key
Num5	src/include/SFML/Window/Keyboard.hpp	/^        Num5,         \/\/\/< The 5 key$/;"	e	enum:sf::Keyboard::Key
Num6	src/include/SFML/Window/Keyboard.hpp	/^        Num6,         \/\/\/< The 6 key$/;"	e	enum:sf::Keyboard::Key
Num7	src/include/SFML/Window/Keyboard.hpp	/^        Num7,         \/\/\/< The 7 key$/;"	e	enum:sf::Keyboard::Key
Num8	src/include/SFML/Window/Keyboard.hpp	/^        Num8,         \/\/\/< The 8 key$/;"	e	enum:sf::Keyboard::Key
Num9	src/include/SFML/Window/Keyboard.hpp	/^        Num9,         \/\/\/< The 9 key$/;"	e	enum:sf::Keyboard::Key
Numpad0	src/include/SFML/Window/Keyboard.hpp	/^        Numpad0,      \/\/\/< The numpad 0 key$/;"	e	enum:sf::Keyboard::Key
Numpad1	src/include/SFML/Window/Keyboard.hpp	/^        Numpad1,      \/\/\/< The numpad 1 key$/;"	e	enum:sf::Keyboard::Key
Numpad2	src/include/SFML/Window/Keyboard.hpp	/^        Numpad2,      \/\/\/< The numpad 2 key$/;"	e	enum:sf::Keyboard::Key
Numpad3	src/include/SFML/Window/Keyboard.hpp	/^        Numpad3,      \/\/\/< The numpad 3 key$/;"	e	enum:sf::Keyboard::Key
Numpad4	src/include/SFML/Window/Keyboard.hpp	/^        Numpad4,      \/\/\/< The numpad 4 key$/;"	e	enum:sf::Keyboard::Key
Numpad5	src/include/SFML/Window/Keyboard.hpp	/^        Numpad5,      \/\/\/< The numpad 5 key$/;"	e	enum:sf::Keyboard::Key
Numpad6	src/include/SFML/Window/Keyboard.hpp	/^        Numpad6,      \/\/\/< The numpad 6 key$/;"	e	enum:sf::Keyboard::Key
Numpad7	src/include/SFML/Window/Keyboard.hpp	/^        Numpad7,      \/\/\/< The numpad 7 key$/;"	e	enum:sf::Keyboard::Key
Numpad8	src/include/SFML/Window/Keyboard.hpp	/^        Numpad8,      \/\/\/< The numpad 8 key$/;"	e	enum:sf::Keyboard::Key
Numpad9	src/include/SFML/Window/Keyboard.hpp	/^        Numpad9,      \/\/\/< The numpad 9 key$/;"	e	enum:sf::Keyboard::Key
O	src/include/SFML/Window/Keyboard.hpp	/^        O,            \/\/\/< The O key$/;"	e	enum:sf::Keyboard::Key
OUTPUT	makefile	/^OUTPUT = bin\/a.out$/;"	m
Object	src/core/Object.cpp	/^Object::Object(std::string _name) : dead(false){$/;"	f	class:Object
Object	src/core/Object.h	/^class Object{$/;"	c
Observer	src/core/Messaging/eventMgr.h	/^class Observer{$/;"	c
Ok	src/include/SFML/Network/Ftp.hpp	/^            Ok                    = 200, \/\/\/< Command ok$/;"	e	enum:sf::Ftp::Response::Status
Ok	src/include/SFML/Network/Http.hpp	/^            Ok             = 200, \/\/\/< Most common code returned when operation was successful$/;"	e	enum:sf::Http::Response::Status
OpeningDataConnection	src/include/SFML/Network/Ftp.hpp	/^            OpeningDataConnection       = 150, \/\/\/< File status ok, about to open data connection$/;"	e	enum:sf::Ftp::Response::Status
P	src/include/SFML/Window/Keyboard.hpp	/^        P,            \/\/\/< The P key$/;"	e	enum:sf::Keyboard::Key
PI	src/util/mathUtil.h	/^	const double PI = 3.141592653589793238462;$/;"	m	namespace:util
PIBy2	src/util/mathUtil.h	/^	const float PIBy2 = PI \/ 2.0;$/;"	m	namespace:util
PRINTANGLE	src/util/mathUtil.h	6;"	d
PRINTVECTOR2	src/core/vector.h	6;"	d
PRINTVECTOR2	tools/beautified.cpp	190;"	d	file:
PRINTVECTOR2	tools/input.cpp	188;"	d	file:
Packet	src/include/SFML/Network/Packet.hpp	/^class SFML_NETWORK_API Packet$/;"	c	namespace:sf
Page	src/include/SFML/Graphics/Font.hpp	/^    struct Page$/;"	s	class:sf::Font
PageDown	src/include/SFML/Window/Keyboard.hpp	/^        PageDown,     \/\/\/< The Page down key$/;"	e	enum:sf::Keyboard::Key
PageTable	src/include/SFML/Graphics/Font.hpp	/^    typedef std::map<unsigned int, Page> PageTable; \/\/\/< Table mapping a character size to its page (texture)$/;"	t	class:sf::Font
PageTypeUnknown	src/include/SFML/Network/Ftp.hpp	/^            PageTypeUnknown         = 551, \/\/\/< Requested action aborted, page type unknown$/;"	e	enum:sf::Ftp::Response::Status
PageUp	src/include/SFML/Window/Keyboard.hpp	/^        PageUp,       \/\/\/< The Page up key$/;"	e	enum:sf::Keyboard::Key
ParameterNotImplemented	src/include/SFML/Network/Ftp.hpp	/^            ParameterNotImplemented = 504, \/\/\/< Command not implemented for that parameter$/;"	e	enum:sf::Ftp::Response::Status
ParametersUnknown	src/include/SFML/Network/Ftp.hpp	/^            ParametersUnknown       = 501, \/\/\/< Syntax error in parameters or arguments$/;"	e	enum:sf::Ftp::Response::Status
PartialContent	src/include/SFML/Network/Http.hpp	/^            PartialContent = 206, \/\/\/< The server has sent a part of the resource, as a response to a partial GET request$/;"	e	enum:sf::Http::Response::Status
Pause	src/core/Process/Process.h	/^	virtual void Pause(){};$/;"	f	class:Process
Pause	src/core/Process/worldProcess.h	/^	 void Pause(){$/;"	f	class:worldProcess
Pause	src/include/SFML/Window/Keyboard.hpp	/^        Pause,        \/\/\/< The Pause key$/;"	e	enum:sf::Keyboard::Key
PauseProcess	src/core/Process/processMgr.cpp	/^void processMgr::PauseProcess(const Hash* processName){$/;"	f	class:processMgr
Paused	src/include/SFML/Audio/SoundSource.hpp	/^        Paused,  \/\/\/< Sound is paused$/;"	e	enum:sf::SoundSource::Status
PendingPacket	src/include/SFML/Network/TcpSocket.hpp	/^    struct PendingPacket$/;"	s	class:sf::TcpSocket
Period	src/include/SFML/Window/Keyboard.hpp	/^        Period,       \/\/\/< The . key$/;"	e	enum:sf::Keyboard::Key
Pixels	src/include/SFML/Graphics/Texture.hpp	/^        Pixels      \/\/\/< Texture coordinates in range [0 .. size]$/;"	e	enum:sf::Texture::CoordinateType
Playing	src/include/SFML/Audio/SoundSource.hpp	/^        Playing  \/\/\/< Sound is playing$/;"	e	enum:sf::SoundSource::Status
PointlessCommand	src/include/SFML/Network/Ftp.hpp	/^            PointlessCommand      = 202, \/\/\/< Command not implemented$/;"	e	enum:sf::Ftp::Response::Status
Points	src/include/SFML/Graphics/PrimitiveType.hpp	/^    Points,         \/\/\/< List of individual points$/;"	e	enum:sf::PrimitiveType
Pop	src/include/Box2D/Common/b2GrowableStack.h	/^	T Pop()$/;"	f	class:b2GrowableStack
Post	src/include/SFML/Network/Http.hpp	/^            Post, \/\/\/< Request in post mode, usually to send data to a page$/;"	e	enum:sf::Http::Request::Method
PostSolve	src/include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual void PostSolve(b2Contact* contact, const b2ContactImpulse* impulse)$/;"	f	class:b2ContactListener
PovX	src/include/SFML/Window/Joystick.hpp	/^        PovX, \/\/\/< The X axis of the point-of-view hat$/;"	e	enum:sf::Joystick::Axis
PovY	src/include/SFML/Window/Joystick.hpp	/^        PovY  \/\/\/< The Y axis of the point-of-view hat$/;"	e	enum:sf::Joystick::Axis
PreSolve	src/include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual void PreSolve(b2Contact* contact, const b2Manifold* oldManifold)$/;"	f	class:b2ContactListener
PrimitiveType	src/include/SFML/Graphics/PrimitiveType.hpp	/^enum PrimitiveType$/;"	g	namespace:sf
Printer	src/include/backward/backward.hpp	/^	Printer():$/;"	f	class:backward::Printer
Printer	src/include/backward/backward.hpp	/^class Printer {$/;"	c	namespace:backward
Process	src/core/ObjProcessors/phyProcessor.cpp	/^void phyProcessor::Process(float dt){$/;"	f	class:phyProcessor
Process	src/core/ObjProcessors/renderProcessor.cpp	/^void renderProcessor::Process(float dt){$/;"	f	class:renderProcessor
Process	src/core/Process/Process.h	/^	Process(std::string _name){$/;"	f	class:Process
Process	src/core/Process/Process.h	/^class Process{$/;"	c
Process	src/core/objectMgr.h	/^	void Process(float dt){$/;"	f	class:objectMgr
Process	src/game/ObjProcessors/bulletProcessor.cpp	/^void bulletProcessor::Process(float dt){$/;"	f	class:bulletProcessor
Process	src/game/ObjProcessors/cameraProcessor.cpp	/^void cameraProcessor::Process(float dt){$/;"	f	class:cameraProcessor
Process	src/game/ObjProcessors/groundMoveProcessor.cpp	/^void groundMoveProcessor::Process(float dt){$/;"	f	class:groundMoveProcessor
Process	src/game/ObjProcessors/gunProcessor.cpp	/^void gunProcessor::Process(float dt){$/;"	f	class:gunProcessor
Process	src/game/ObjProcessors/healthProcessor.h	/^	void Process(float dt){};$/;"	f	class:healthProcessor
Process	src/game/ObjProcessors/offsetProcessor.h	/^	void Process(float dt){$/;"	f	class:offsetProcessor
Process	src/game/ObjProcessors/pickupProcessor.cpp	/^void pickupProcessor::Process(float dt){$/;"	f	class:pickupProcessor
Process	src/game/ObjProcessors/terrainProcessor.h	/^	void Process(float dt){};$/;"	f	class:terrainProcessor
Process	tools/beautified.cpp	/^	void Process ( float dt ){$/;"	f	class:objectMgr
Process	tools/input.cpp	/^	void Process(float dt){$/;"	f	class:objectMgr
Prop	src/core/Property.h	/^	Prop(T value) : val(value){$/;"	f	class:Prop
Prop	src/core/Property.h	/^	Prop(const Prop<T> &other){$/;"	f	class:Prop
Prop	src/core/Property.h	/^class Prop : public baseProperty{$/;"	c
Push	src/include/Box2D/Common/b2GrowableStack.h	/^	void Push(const T& element)$/;"	f	class:b2GrowableStack
Q	src/include/SFML/Window/Keyboard.hpp	/^        Q,            \/\/\/< The Q key$/;"	e	enum:sf::Keyboard::Key
Quads	src/include/SFML/Graphics/PrimitiveType.hpp	/^    Quads           \/\/\/< List of individual quads$/;"	e	enum:sf::PrimitiveType
Query	src/include/Box2D/Collision/b2BroadPhase.h	/^inline void b2BroadPhase::Query(T* callback, const b2AABB& aabb) const$/;"	f	class:b2BroadPhase
Query	src/include/Box2D/Collision/b2DynamicTree.h	/^inline void b2DynamicTree::Query(T* callback, const b2AABB& aabb) const$/;"	f	class:b2DynamicTree
QueryAABB	src/include/Box2D/Dynamics/b2World.cpp	/^void b2World::QueryAABB(b2QueryCallback* callback, const b2AABB& aabb) const$/;"	f	class:b2World
QueryCallback	src/include/Box2D/Collision/b2BroadPhase.cpp	/^bool b2BroadPhase::QueryCallback(int32 proxyId)$/;"	f	class:b2BroadPhase
QueryCallback	src/include/Box2D/Dynamics/b2World.cpp	/^	bool QueryCallback(int32 proxyId)$/;"	f	struct:b2WorldQueryWrapper
Quote	src/include/SFML/Window/Keyboard.hpp	/^        Quote,        \/\/\/< The ' key$/;"	e	enum:sf::Keyboard::Key
R	src/include/SFML/Window/Joystick.hpp	/^        R,    \/\/\/< The R axis$/;"	e	enum:sf::Joystick::Axis
R	src/include/SFML/Window/Keyboard.hpp	/^        R,            \/\/\/< The R key$/;"	e	enum:sf::Keyboard::Key
RAD2DEG	src/util/mathUtil.h	/^	const double RAD2DEG = 180.0 \/ util::PI;$/;"	m	namespace:util
RAlt	src/include/SFML/Window/Keyboard.hpp	/^        RAlt,         \/\/\/< The right Alt key$/;"	e	enum:sf::Keyboard::Key
RBracket	src/include/SFML/Window/Keyboard.hpp	/^        RBracket,     \/\/\/< The ] key$/;"	e	enum:sf::Keyboard::Key
RControl	src/include/SFML/Window/Keyboard.hpp	/^        RControl,     \/\/\/< The right Control key$/;"	e	enum:sf::Keyboard::Key
RShift	src/include/SFML/Window/Keyboard.hpp	/^        RShift,       \/\/\/< The right Shift key$/;"	e	enum:sf::Keyboard::Key
RSystem	src/include/SFML/Window/Keyboard.hpp	/^        RSystem,      \/\/\/< The right OS specific key: window (Windows and Linux), apple (MacOS X), ...$/;"	e	enum:sf::Keyboard::Key
Rad	src/util/mathUtil.h	/^		static Angle Rad(float rad){$/;"	f	class:util::Angle
RangeNotSatisfiable	src/include/SFML/Network/Http.hpp	/^            RangeNotSatisfiable = 407, \/\/\/< The server can't satisfy the partial GET request (with a "Range" header field)$/;"	e	enum:sf::Http::Response::Status
RayCast	src/include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^bool b2ChainShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2ChainShape
RayCast	src/include/Box2D/Collision/Shapes/b2CircleShape.cpp	/^bool b2CircleShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2CircleShape
RayCast	src/include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^bool b2EdgeShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2EdgeShape
RayCast	src/include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^bool b2PolygonShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2PolygonShape
RayCast	src/include/Box2D/Collision/b2BroadPhase.h	/^inline void b2BroadPhase::RayCast(T* callback, const b2RayCastInput& input) const$/;"	f	class:b2BroadPhase
RayCast	src/include/Box2D/Collision/b2Collision.cpp	/^bool b2AABB::RayCast(b2RayCastOutput* output, const b2RayCastInput& input) const$/;"	f	class:b2AABB
RayCast	src/include/Box2D/Collision/b2DynamicTree.h	/^inline void b2DynamicTree::RayCast(T* callback, const b2RayCastInput& input) const$/;"	f	class:b2DynamicTree
RayCast	src/include/Box2D/Dynamics/b2Fixture.h	/^inline bool b2Fixture::RayCast(b2RayCastOutput* output, const b2RayCastInput& input, int32 childIndex) const$/;"	f	class:b2Fixture
RayCast	src/include/Box2D/Dynamics/b2World.cpp	/^void b2World::RayCast(b2RayCastCallback* callback, const b2Vec2& point1, const b2Vec2& point2) const$/;"	f	class:b2World
RayCastCallback	src/include/Box2D/Dynamics/b2World.cpp	/^	float32 RayCastCallback(const b2RayCastInput& input, int32 proxyId)$/;"	f	struct:b2WorldRayCastWrapper
ReadCache	src/include/Box2D/Collision/b2Distance.cpp	/^	void ReadCache(	const b2SimplexCache* cache,$/;"	f	struct:b2Simplex
RebuildBottomUp	src/include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::RebuildBottomUp()$/;"	f	class:b2DynamicTree
Rect	src/include/SFML/Graphics/Rect.hpp	/^class Rect$/;"	c	namespace:sf
RectangleShape	src/include/SFML/Graphics/RectangleShape.hpp	/^class SFML_GRAPHICS_API RectangleShape : public Shape$/;"	c	namespace:sf
Red	src/include/SFML/Graphics/Color.hpp	/^    static const Color Red;         \/\/\/< Red predefined color$/;"	m	class:sf::Color
Refilter	src/include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::Refilter()$/;"	f	class:b2Fixture
Register	src/core/Messaging/eventMgr.cpp	/^void eventMgr::Register(const Hash *eventName, Observer *observer){$/;"	f	class:eventMgr
Regular	src/include/SFML/Graphics/Text.hpp	/^        Regular    = 0,      \/\/\/< Regular characters, no style$/;"	e	enum:sf::Text::Style
RemoveLeaf	src/include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::RemoveLeaf(int32 leaf)$/;"	f	class:b2DynamicTree
RenderStates	src/include/SFML/Graphics/RenderStates.hpp	/^class SFML_GRAPHICS_API RenderStates$/;"	c	namespace:sf
RenderTarget	src/include/SFML/Graphics/RenderTarget.hpp	/^class SFML_GRAPHICS_API RenderTarget : NonCopyable$/;"	c	namespace:sf
RenderTexture	src/include/SFML/Graphics/RenderTexture.hpp	/^class SFML_GRAPHICS_API RenderTexture : public RenderTarget$/;"	c	namespace:sf
RenderWindow	src/include/SFML/Graphics/RenderWindow.hpp	/^class SFML_GRAPHICS_API RenderWindow : public Window, public RenderTarget$/;"	c	namespace:sf
Report	src/include/Box2D/Dynamics/b2Island.cpp	/^void b2Island::Report(const b2ContactVelocityConstraint* constraints)$/;"	f	class:b2Island
Request	src/include/SFML/Network/Http.hpp	/^    class SFML_NETWORK_API Request$/;"	c	class:sf::Http
Reset	src/include/Box2D/Common/b2Timer.cpp	/^void b2Timer::Reset()$/;"	f	class:b2Timer
ResetContent	src/include/SFML/Network/Http.hpp	/^            ResetContent   = 205, \/\/\/< The server informs the client that it should clear the view (form) that caused the request to be sent$/;"	e	enum:sf::Http::Response::Status
ResetFriction	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::ResetFriction()$/;"	f	class:b2Contact
ResetMassData	src/include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::ResetMassData()$/;"	f	class:b2Body
ResetRestitution	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::ResetRestitution()$/;"	f	class:b2Contact
Resize	src/include/SFML/Window/WindowStyle.hpp	/^        Resize     = 1 << 1, \/\/\/< Titlebar + resizable border + maximize button$/;"	e	enum:sf::Style::__anon5
Resized	src/include/SFML/Window/Event.hpp	/^        Resized,                \/\/\/< The window was resized (data in event.size)$/;"	e	enum:sf::Event::EventType
ResolvedTrace	src/include/backward/backward.hpp	/^	ResolvedTrace(const Trace& mini_trace):$/;"	f	struct:backward::ResolvedTrace
ResolvedTrace	src/include/backward/backward.hpp	/^	ResolvedTrace(const TraceWithLocals& mini_trace_with_locals):$/;"	f	struct:backward::ResolvedTrace
ResolvedTrace	src/include/backward/backward.hpp	/^struct ResolvedTrace: public TraceWithLocals {$/;"	s	namespace:backward
Response	src/include/SFML/Network/Ftp.hpp	/^    class SFML_NETWORK_API Response$/;"	c	class:sf::Ftp
Response	src/include/SFML/Network/Http.hpp	/^    class SFML_NETWORK_API Response$/;"	c	class:sf::Http
RestartMarkerReply	src/include/SFML/Network/Ftp.hpp	/^            RestartMarkerReply          = 110, \/\/\/< Restart marker reply$/;"	e	enum:sf::Ftp::Response::Status
Resume	src/core/Process/Process.h	/^	virtual void Resume(){};$/;"	f	class:Process
Resume	src/core/Process/worldProcess.h	/^	 void Resume(){$/;"	f	class:worldProcess
ResumePorcess	src/core/Process/processMgr.cpp	/^void processMgr::ResumePorcess(const Hash* processName){$/;"	f	class:processMgr
Return	src/include/SFML/Window/Keyboard.hpp	/^        Return,       \/\/\/< The Return key$/;"	e	enum:sf::Keyboard::Key
Right	src/include/SFML/Window/Keyboard.hpp	/^        Right,        \/\/\/< Right arrow$/;"	e	enum:sf::Keyboard::Key
Right	src/include/SFML/Window/Mouse.hpp	/^        Right,      \/\/\/< The right mouse button$/;"	e	enum:sf::Mouse::Button
Rocket	src/game/generators/gunDataGenerator.h	/^		Rocket = 1,$/;"	e	enum:gunDataGenerator::Archetype
Row	src/include/SFML/Graphics/Font.hpp	/^        Row(unsigned int rowTop, unsigned int rowHeight) : width(0), top(rowTop), height(rowHeight) {}$/;"	f	struct:sf::Font::Row
Row	src/include/SFML/Graphics/Font.hpp	/^    struct Row$/;"	s	class:sf::Font
S	src/include/SFML/Window/Keyboard.hpp	/^        S,            \/\/\/< The S key$/;"	e	enum:sf::Keyboard::Key
SFML_API_EXPORT	src/include/SFML/Config.hpp	104;"	d
SFML_API_EXPORT	src/include/SFML/Config.hpp	110;"	d
SFML_API_EXPORT	src/include/SFML/Config.hpp	120;"	d
SFML_API_EXPORT	src/include/SFML/Config.hpp	88;"	d
SFML_API_IMPORT	src/include/SFML/Config.hpp	105;"	d
SFML_API_IMPORT	src/include/SFML/Config.hpp	111;"	d
SFML_API_IMPORT	src/include/SFML/Config.hpp	121;"	d
SFML_API_IMPORT	src/include/SFML/Config.hpp	89;"	d
SFML_AUDIO_API	src/include/SFML/Audio/Export.hpp	39;"	d
SFML_AUDIO_API	src/include/SFML/Audio/Export.hpp	43;"	d
SFML_AUDIO_EXPORT_HPP	src/include/SFML/Audio/Export.hpp	26;"	d
SFML_AUDIO_HPP	src/include/SFML/Audio.hpp	26;"	d
SFML_BLENDMODE_HPP	src/include/SFML/Graphics/BlendMode.hpp	26;"	d
SFML_CIRCLESHAPE_HPP	src/include/SFML/Graphics/CircleShape.hpp	26;"	d
SFML_CLOCK_HPP	src/include/SFML/System/Clock.hpp	26;"	d
SFML_COLOR_HPP	src/include/SFML/Graphics/Color.hpp	26;"	d
SFML_CONFIG_HPP	src/include/SFML/Config.hpp	26;"	d
SFML_CONTEXTSETTINGS_HPP	src/include/SFML/Window/ContextSettings.hpp	26;"	d
SFML_CONTEXT_HPP	src/include/SFML/Window/Context.hpp	26;"	d
SFML_CONVEXSHAPE_HPP	src/include/SFML/Graphics/ConvexShape.hpp	26;"	d
SFML_DEBUG	src/include/SFML/Config.hpp	75;"	d
SFML_DRAWABLE_HPP	src/include/SFML/Graphics/Drawable.hpp	26;"	d
SFML_ERR_HPP	src/include/SFML/System/Err.hpp	26;"	d
SFML_EVENT_HPP	src/include/SFML/Window/Event.hpp	26;"	d
SFML_FONT_HPP	src/include/SFML/Graphics/Font.hpp	26;"	d
SFML_FTP_HPP	src/include/SFML/Network/Ftp.hpp	26;"	d
SFML_GLRESOURCE_HPP	src/include/SFML/Window/GlResource.hpp	26;"	d
SFML_GLYPH_HPP	src/include/SFML/Graphics/Glyph.hpp	26;"	d
SFML_GRAPHICS_API	src/include/SFML/Graphics/Export.hpp	39;"	d
SFML_GRAPHICS_API	src/include/SFML/Graphics/Export.hpp	43;"	d
SFML_GRAPHICS_EXPORT_HPP	src/include/SFML/Graphics/Export.hpp	26;"	d
SFML_GRAPHICS_HPP	src/include/SFML/Graphics.hpp	26;"	d
SFML_HTTP_HPP	src/include/SFML/Network/Http.hpp	26;"	d
SFML_IMAGE_HPP	src/include/SFML/Graphics/Image.hpp	26;"	d
SFML_INPUTSTREAM_HPP	src/include/SFML/System/InputStream.hpp	26;"	d
SFML_IPADDRESS_HPP	src/include/SFML/Network/IpAddress.hpp	26;"	d
SFML_JOYSTICK_HPP	src/include/SFML/Window/Joystick.hpp	26;"	d
SFML_KEYBOARD_HPP	src/include/SFML/Window/Keyboard.hpp	26;"	d
SFML_LISTENER_HPP	src/include/SFML/Audio/Listener.hpp	26;"	d
SFML_LOCK_HPP	src/include/SFML/System/Lock.hpp	26;"	d
SFML_MOUSE_HPP	src/include/SFML/Window/Mouse.hpp	26;"	d
SFML_MUSIC_HPP	src/include/SFML/Audio/Music.hpp	26;"	d
SFML_MUTEX_HPP	src/include/SFML/System/Mutex.hpp	26;"	d
SFML_NETWORK_API	src/include/SFML/Network/Export.hpp	39;"	d
SFML_NETWORK_API	src/include/SFML/Network/Export.hpp	43;"	d
SFML_NETWORK_EXPORT_HPP	src/include/SFML/Network/Export.hpp	26;"	d
SFML_NETWORK_HPP	src/include/SFML/Network.hpp	26;"	d
SFML_NONCOPYABLE_HPP	src/include/SFML/System/NonCopyable.hpp	26;"	d
SFML_OPENGL_HPP	src/include/SFML/OpenGL.hpp	26;"	d
SFML_PACKET_HPP	src/include/SFML/Network/Packet.hpp	26;"	d
SFML_PRIMITIVETYPE_HPP	src/include/SFML/Graphics/PrimitiveType.hpp	26;"	d
SFML_RECTANGLESHAPE_HPP	src/include/SFML/Graphics/RectangleShape.hpp	26;"	d
SFML_RECT_HPP	src/include/SFML/Graphics/Rect.hpp	26;"	d
SFML_RENDERSTATES_HPP	src/include/SFML/Graphics/RenderStates.hpp	26;"	d
SFML_RENDERTARGET_HPP	src/include/SFML/Graphics/RenderTarget.hpp	26;"	d
SFML_RENDERTEXTURE_HPP	src/include/SFML/Graphics/RenderTexture.hpp	26;"	d
SFML_RENDERWINDOW_HPP	src/include/SFML/Graphics/RenderWindow.hpp	26;"	d
SFML_SFML_WINDOW_HPP	src/include/SFML/Window.hpp	26;"	d
SFML_SHADER_HPP	src/include/SFML/Graphics/Shader.hpp	26;"	d
SFML_SHAPE_HPP	src/include/SFML/Graphics/Shape.hpp	26;"	d
SFML_SLEEP_HPP	src/include/SFML/System/Sleep.hpp	26;"	d
SFML_SOCKETHANDLE_HPP	src/include/SFML/Network/SocketHandle.hpp	26;"	d
SFML_SOCKETSELECTOR_HPP	src/include/SFML/Network/SocketSelector.hpp	26;"	d
SFML_SOCKET_HPP	src/include/SFML/Network/Socket.hpp	26;"	d
SFML_SOUNDBUFFERRECORDER_HPP	src/include/SFML/Audio/SoundBufferRecorder.hpp	26;"	d
SFML_SOUNDBUFFER_HPP	src/include/SFML/Audio/SoundBuffer.hpp	26;"	d
SFML_SOUNDRECORDER_HPP	src/include/SFML/Audio/SoundRecorder.hpp	26;"	d
SFML_SOUNDSOURCE_HPP	src/include/SFML/Audio/SoundSource.hpp	26;"	d
SFML_SOUNDSTREAM_HPP	src/include/SFML/Audio/SoundStream.hpp	26;"	d
SFML_SOUND_HPP	src/include/SFML/Audio/Sound.hpp	26;"	d
SFML_SPRITE_HPP	src/include/SFML/Graphics/Sprite.hpp	26;"	d
SFML_STRING_HPP	src/include/SFML/System/String.hpp	26;"	d
SFML_SYSTEM_API	src/include/SFML/System/Export.hpp	39;"	d
SFML_SYSTEM_API	src/include/SFML/System/Export.hpp	43;"	d
SFML_SYSTEM_EXPORT_HPP	src/include/SFML/System/Export.hpp	26;"	d
SFML_SYSTEM_FREEBSD	src/include/SFML/Config.hpp	60;"	d
SFML_SYSTEM_HPP	src/include/SFML/System.hpp	26;"	d
SFML_SYSTEM_LINUX	src/include/SFML/Config.hpp	50;"	d
SFML_SYSTEM_MACOS	src/include/SFML/Config.hpp	55;"	d
SFML_SYSTEM_WINDOWS	src/include/SFML/Config.hpp	42;"	d
SFML_TCPLISTENER_HPP	src/include/SFML/Network/TcpListener.hpp	26;"	d
SFML_TCPSOCKET_HPP	src/include/SFML/Network/TcpSocket.hpp	26;"	d
SFML_TEXTURE_HPP	src/include/SFML/Graphics/Texture.hpp	26;"	d
SFML_TEXT_HPP	src/include/SFML/Graphics/Text.hpp	26;"	d
SFML_THREADLOCALPTR_HPP	src/include/SFML/System/ThreadLocalPtr.hpp	26;"	d
SFML_THREADLOCAL_HPP	src/include/SFML/System/ThreadLocal.hpp	26;"	d
SFML_THREAD_HPP	src/include/SFML/System/Thread.hpp	26;"	d
SFML_TIME_HPP	src/include/SFML/System/Time.hpp	26;"	d
SFML_TRANSFORMABLE_HPP	src/include/SFML/Graphics/Transformable.hpp	26;"	d
SFML_TRANSFORM_HPP	src/include/SFML/Graphics/Transform.hpp	26;"	d
SFML_UDPSOCKET_HPP	src/include/SFML/Network/UdpSocket.hpp	26;"	d
SFML_UTF_HPP	src/include/SFML/System/Utf.hpp	26;"	d
SFML_VECTOR2_HPP	src/include/SFML/System/Vector2.hpp	26;"	d
SFML_VECTOR3_HPP	src/include/SFML/System/Vector3.hpp	26;"	d
SFML_VERSION_MAJOR	src/include/SFML/Config.hpp	32;"	d
SFML_VERSION_MINOR	src/include/SFML/Config.hpp	33;"	d
SFML_VERTEXARRAY_HPP	src/include/SFML/Graphics/VertexArray.hpp	26;"	d
SFML_VERTEX_HPP	src/include/SFML/Graphics/Vertex.hpp	26;"	d
SFML_VIDEOMODE_HPP	src/include/SFML/Window/VideoMode.hpp	26;"	d
SFML_VIEW_HPP	src/include/SFML/Graphics/View.hpp	26;"	d
SFML_WINDOWHANDLE_HPP	src/include/SFML/Window/WindowHandle.hpp	26;"	d
SFML_WINDOWSTYLE_HPP	src/include/SFML/Window/WindowStyle.hpp	26;"	d
SFML_WINDOW_API	src/include/SFML/Window/Export.hpp	39;"	d
SFML_WINDOW_API	src/include/SFML/Window/Export.hpp	43;"	d
SFML_WINDOW_EXPORT_HPP	src/include/SFML/Window/Export.hpp	26;"	d
SFML_WINDOW_HPP	src/include/SFML/Window/Window.hpp	26;"	d
Save	src/core/State/dummyStateSaveLoader.h	/^	 void Save(){ this->doneSaving = true; };$/;"	f	class:dummyStateSaveLoader
SemiColon	src/include/SFML/Window/Keyboard.hpp	/^        SemiColon,    \/\/\/< The ; key$/;"	e	enum:sf::Keyboard::Key
ServiceNotAvailable	src/include/SFML/Network/Http.hpp	/^            ServiceNotAvailable = 503, \/\/\/< The server is temporarily unavailable (overloaded, in maintenance, ...)$/;"	e	enum:sf::Http::Response::Status
ServiceReady	src/include/SFML/Network/Ftp.hpp	/^            ServiceReady          = 220, \/\/\/< Service ready for new user$/;"	e	enum:sf::Ftp::Response::Status
ServiceReadySoon	src/include/SFML/Network/Ftp.hpp	/^            ServiceReadySoon            = 120, \/\/\/< Service ready in N minutes$/;"	e	enum:sf::Ftp::Response::Status
ServiceUnavailable	src/include/SFML/Network/Ftp.hpp	/^            ServiceUnavailable        = 421, \/\/\/< Service not available, closing control connection$/;"	e	enum:sf::Ftp::Response::Status
Set	src/include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^void b2EdgeShape::Set(const b2Vec2& v1, const b2Vec2& v2)$/;"	f	class:b2EdgeShape
Set	src/include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::Set(const b2Vec2* vertices, int32 count)$/;"	f	class:b2PolygonShape
Set	src/include/Box2D/Collision/b2Distance.cpp	/^void b2DistanceProxy::Set(const b2Shape* shape, int32 index)$/;"	f	class:b2DistanceProxy
Set	src/include/Box2D/Common/b2Draw.h	/^	void Set(float32 ri, float32 gi, float32 bi) { r = ri; g = gi; b = bi; }$/;"	f	struct:b2Color
Set	src/include/Box2D/Common/b2Math.h	/^	void Set(const b2Vec2& c1, const b2Vec2& c2)$/;"	f	struct:b2Mat22
Set	src/include/Box2D/Common/b2Math.h	/^	void Set(const b2Vec2& position, float32 angle)$/;"	f	struct:b2Transform
Set	src/include/Box2D/Common/b2Math.h	/^	void Set(float32 angle)$/;"	f	struct:b2Rot
Set	src/include/Box2D/Common/b2Math.h	/^	void Set(float32 x_, float32 y_) { x = x_; y = y_; }$/;"	f	struct:b2Vec2
Set	src/include/Box2D/Common/b2Math.h	/^	void Set(float32 x_, float32 y_, float32 z_) { x = x_; y = y_; z = z_; }$/;"	f	struct:b2Vec3
SetActive	src/include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::SetActive(bool flag)$/;"	f	class:b2Body
SetAllowSleeping	src/include/Box2D/Dynamics/b2World.cpp	/^void b2World::SetAllowSleeping(bool flag)$/;"	f	class:b2World
SetAngle	src/include/Box2D/Rope/b2Rope.cpp	/^void b2Rope::SetAngle(float32 angle)$/;"	f	class:b2Rope
SetAngularDamping	src/include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetAngularDamping(float32 angularDamping)$/;"	f	class:b2Body
SetAngularVelocity	src/include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetAngularVelocity(float32 w)$/;"	f	class:b2Body
SetAsBox	src/include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::SetAsBox(float32 hx, float32 hy)$/;"	f	class:b2PolygonShape
SetAsBox	src/include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::SetAsBox(float32 hx, float32 hy, const b2Vec2& center, float32 angle)$/;"	f	class:b2PolygonShape
SetAutoClearForces	src/include/Box2D/Dynamics/b2World.h	/^inline void b2World::SetAutoClearForces(bool flag)$/;"	f	class:b2World
SetAwake	src/include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetAwake(bool flag)$/;"	f	class:b2Body
SetBullet	src/include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetBullet(bool flag)$/;"	f	class:b2Body
SetContactFilter	src/include/Box2D/Dynamics/b2World.cpp	/^void b2World::SetContactFilter(b2ContactFilter* filter)$/;"	f	class:b2World
SetContactListener	src/include/Box2D/Dynamics/b2World.cpp	/^void b2World::SetContactListener(b2ContactListener* listener)$/;"	f	class:b2World
SetContinuousPhysics	src/include/Box2D/Dynamics/b2World.h	/^	void SetContinuousPhysics(bool flag) { m_continuousPhysics = flag; }$/;"	f	class:b2World
SetDampingRatio	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^inline void b2DistanceJoint::SetDampingRatio(float32 ratio)$/;"	f	class:b2DistanceJoint
SetDampingRatio	src/include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SetDampingRatio(float32 ratio)$/;"	f	class:b2MouseJoint
SetDampingRatio	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	void SetDampingRatio(float32 ratio) { m_dampingRatio = ratio; }$/;"	f	class:b2WeldJoint
SetDebugDraw	src/include/Box2D/Dynamics/b2World.cpp	/^void b2World::SetDebugDraw(b2Draw* debugDraw)$/;"	f	class:b2World
SetDensity	src/include/Box2D/Dynamics/b2Fixture.h	/^inline void b2Fixture::SetDensity(float32 density)$/;"	f	class:b2Fixture
SetDestructionListener	src/include/Box2D/Dynamics/b2World.cpp	/^void b2World::SetDestructionListener(b2DestructionListener* listener)$/;"	f	class:b2World
SetEnabled	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::SetEnabled(bool flag)$/;"	f	class:b2Contact
SetFilterData	src/include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::SetFilterData(const b2Filter& filter)$/;"	f	class:b2Fixture
SetFixedRotation	src/include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetFixedRotation(bool flag)$/;"	f	class:b2Body
SetFlags	src/include/Box2D/Common/b2Draw.cpp	/^void b2Draw::SetFlags(uint32 flags)$/;"	f	class:b2Draw
SetFrequency	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^inline void b2DistanceJoint::SetFrequency(float32 hz)$/;"	f	class:b2DistanceJoint
SetFrequency	src/include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SetFrequency(float32 hz)$/;"	f	class:b2MouseJoint
SetFrequency	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	void SetFrequency(float32 hz) { m_frequencyHz = hz; }$/;"	f	class:b2WeldJoint
SetFriction	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::SetFriction(float32 friction)$/;"	f	class:b2Contact
SetFriction	src/include/Box2D/Dynamics/b2Fixture.h	/^inline void b2Fixture::SetFriction(float32 friction)$/;"	f	class:b2Fixture
SetGravity	src/include/Box2D/Dynamics/b2World.h	/^inline void b2World::SetGravity(const b2Vec2& gravity)$/;"	f	class:b2World
SetGravityScale	src/include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetGravityScale(float32 scale)$/;"	f	class:b2Body
SetIdentity	src/include/Box2D/Common/b2Math.h	/^	void SetIdentity()$/;"	f	struct:b2Mat22
SetIdentity	src/include/Box2D/Common/b2Math.h	/^	void SetIdentity()$/;"	f	struct:b2Rot
SetIdentity	src/include/Box2D/Common/b2Math.h	/^	void SetIdentity()$/;"	f	struct:b2Transform
SetLength	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^inline void b2DistanceJoint::SetLength(float32 length)$/;"	f	class:b2DistanceJoint
SetLimits	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SetLimits(float32 lower, float32 upper)$/;"	f	class:b2PrismaticJoint
SetLimits	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SetLimits(float32 lower, float32 upper)$/;"	f	class:b2RevoluteJoint
SetLinearDamping	src/include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetLinearDamping(float32 linearDamping)$/;"	f	class:b2Body
SetLinearVelocity	src/include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetLinearVelocity(const b2Vec2& v)$/;"	f	class:b2Body
SetMassData	src/include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::SetMassData(const b2MassData* massData)$/;"	f	class:b2Body
SetMaxForce	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::SetMaxForce(float32 force)$/;"	f	class:b2FrictionJoint
SetMaxForce	src/include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SetMaxForce(float32 force)$/;"	f	class:b2MouseJoint
SetMaxLength	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	void SetMaxLength(float32 length) { m_maxLength = length; }$/;"	f	class:b2RopeJoint
SetMaxMotorForce	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SetMaxMotorForce(float32 force)$/;"	f	class:b2PrismaticJoint
SetMaxMotorTorque	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SetMaxMotorTorque(float32 torque)$/;"	f	class:b2RevoluteJoint
SetMaxMotorTorque	src/include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::SetMaxMotorTorque(float32 torque)$/;"	f	class:b2WheelJoint
SetMaxTorque	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::SetMaxTorque(float32 torque)$/;"	f	class:b2FrictionJoint
SetMotorSpeed	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SetMotorSpeed(float32 speed)$/;"	f	class:b2PrismaticJoint
SetMotorSpeed	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SetMotorSpeed(float32 speed)$/;"	f	class:b2RevoluteJoint
SetMotorSpeed	src/include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::SetMotorSpeed(float32 speed)$/;"	f	class:b2WheelJoint
SetNextVertex	src/include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::SetNextVertex(const b2Vec2& nextVertex)$/;"	f	class:b2ChainShape
SetPrevVertex	src/include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::SetPrevVertex(const b2Vec2& prevVertex)$/;"	f	class:b2ChainShape
SetRatio	src/include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^void b2GearJoint::SetRatio(float32 ratio)$/;"	f	class:b2GearJoint
SetRestitution	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::SetRestitution(float32 restitution)$/;"	f	class:b2Contact
SetRestitution	src/include/Box2D/Dynamics/b2Fixture.h	/^inline void b2Fixture::SetRestitution(float32 restitution)$/;"	f	class:b2Fixture
SetSensor	src/include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::SetSensor(bool sensor)$/;"	f	class:b2Fixture
SetSleepingAllowed	src/include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetSleepingAllowed(bool flag)$/;"	f	class:b2Body
SetSpringDampingRatio	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^inline void b2WheelJoint::SetSpringDampingRatio(float32 ratio)$/;"	f	class:b2WheelJoint
SetSpringFrequencyHz	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^inline void b2WheelJoint::SetSpringFrequencyHz(float32 hz)$/;"	f	class:b2WheelJoint
SetSubStepping	src/include/Box2D/Dynamics/b2World.h	/^	void SetSubStepping(bool flag) { m_subStepping = flag; }$/;"	f	class:b2World
SetTarget	src/include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SetTarget(const b2Vec2& target)$/;"	f	class:b2MouseJoint
SetTransform	src/include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::SetTransform(const b2Vec2& position, float32 angle)$/;"	f	class:b2Body
SetType	src/include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::SetType(b2BodyType type)$/;"	f	class:b2Body
SetUserData	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^inline void b2Joint::SetUserData(void* data)$/;"	f	class:b2Joint
SetUserData	src/include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SetUserData(void* data)$/;"	f	class:b2Body
SetUserData	src/include/Box2D/Dynamics/b2Fixture.h	/^inline void b2Fixture::SetUserData(void* data)$/;"	f	class:b2Fixture
SetWarmStarting	src/include/Box2D/Dynamics/b2World.h	/^	void SetWarmStarting(bool flag) { m_warmStarting = flag; }$/;"	f	class:b2World
SetZero	src/include/Box2D/Common/b2Math.h	/^	void SetZero() { x = 0.0f; y = 0.0f; z = 0.0f; }$/;"	f	struct:b2Vec3
SetZero	src/include/Box2D/Common/b2Math.h	/^	void SetZero() { x = 0.0f; y = 0.0f; }$/;"	f	struct:b2Vec2
SetZero	src/include/Box2D/Common/b2Math.h	/^	void SetZero()$/;"	f	struct:b2Mat22
SetZero	src/include/Box2D/Common/b2Math.h	/^	void SetZero()$/;"	f	struct:b2Mat33
Settings	src/core/Settings.h	/^	Settings(){};$/;"	f	class:Settings
Settings	src/core/Settings.h	/^class Settings{$/;"	c
Shader	src/include/SFML/Graphics/Shader.hpp	/^class SFML_GRAPHICS_API Shader : GlResource, NonCopyable$/;"	c	namespace:sf
Shape	src/include/SFML/Graphics/Shape.hpp	/^class SFML_GRAPHICS_API Shape : public Drawable, public Transformable$/;"	c	namespace:sf
ShouldCollide	src/include/Box2D/Dynamics/b2Body.cpp	/^bool b2Body::ShouldCollide(const b2Body* other) const$/;"	f	class:b2Body
ShouldCollide	src/include/Box2D/Dynamics/b2WorldCallbacks.cpp	/^bool b2ContactFilter::ShouldCollide(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2ContactFilter
Shudown	src/core/Process/windowProcess.h	/^	void Shudown(){$/;"	f	class:windowProcess
Shutdown	src/core/Process/Process.h	/^	virtual void Shutdown(){};$/;"	f	class:Process
Shutdown	src/core/Process/processMgr.cpp	/^void processMgr::Shutdown(){$/;"	f	class:processMgr
Shutdown	src/core/Process/stateProcess.h	/^	 void Shutdown(){$/;"	f	class:stateProcess
Shutdown	src/core/Process/worldProcess.h	/^	 void Shutdown(){$/;"	f	class:worldProcess
SignalHandling	src/include/backward/backward.hpp	/^	SignalHandling(const std::vector<int>& = std::vector<int>()) {}$/;"	f	class:backward::SignalHandling
SignalHandling	src/include/backward/backward.hpp	/^  SignalHandling(const std::vector<int>& signals = make_default_signals()) : _loaded(false) { $/;"	f	class:backward::SignalHandling
SignalHandling	src/include/backward/backward.hpp	/^class SignalHandling {$/;"	c	namespace:backward
Size	src/include/SFML/Network/TcpSocket.hpp	/^        Uint32            Size;         \/\/\/< Data of packet size$/;"	m	struct:sf::TcpSocket::PendingPacket
SizeEvent	src/include/SFML/Window/Event.hpp	/^    struct SizeEvent$/;"	s	class:sf::Event
SizeReceived	src/include/SFML/Network/TcpSocket.hpp	/^        std::size_t       SizeReceived; \/\/\/< Number of size bytes received so far$/;"	m	struct:sf::TcpSocket::PendingPacket
Skew	src/include/Box2D/Common/b2Math.h	/^	b2Vec2 Skew() const$/;"	f	struct:b2Vec2
Slash	src/include/SFML/Window/Keyboard.hpp	/^        Slash,        \/\/\/< The \/ key$/;"	e	enum:sf::Keyboard::Key
SnippetFactory	src/include/backward/backward.hpp	/^class SnippetFactory {$/;"	c	namespace:backward
Socket	src/include/SFML/Network/Socket.hpp	/^class SFML_NETWORK_API Socket : NonCopyable$/;"	c	namespace:sf
SocketHandle	src/include/SFML/Network/SocketHandle.hpp	/^    typedef UINT_PTR SocketHandle;$/;"	t	namespace:sf
SocketSelector	src/include/SFML/Network/SocketSelector.hpp	/^class SFML_NETWORK_API SocketSelector$/;"	c	namespace:sf
Solve	src/include/Box2D/Common/b2Math.h	/^	b2Vec2 Solve(const b2Vec2& b) const$/;"	f	struct:b2Mat22
Solve	src/include/Box2D/Dynamics/b2Island.cpp	/^void b2Island::Solve(b2Profile* profile, const b2TimeStep& step, const b2Vec2& gravity, bool allowSleep)$/;"	f	class:b2Island
Solve	src/include/Box2D/Dynamics/b2World.cpp	/^void b2World::Solve(const b2TimeStep& step)$/;"	f	class:b2World
Solve2	src/include/Box2D/Collision/b2Distance.cpp	/^void b2Simplex::Solve2()$/;"	f	class:b2Simplex
Solve22	src/include/Box2D/Common/b2Math.cpp	/^b2Vec2 b2Mat33::Solve22(const b2Vec2& b) const$/;"	f	class:b2Mat33
Solve3	src/include/Box2D/Collision/b2Distance.cpp	/^void b2Simplex::Solve3()$/;"	f	class:b2Simplex
Solve33	src/include/Box2D/Common/b2Math.cpp	/^b2Vec3 b2Mat33::Solve33(const b2Vec3& b) const$/;"	f	class:b2Mat33
SolveC2	src/include/Box2D/Rope/b2Rope.cpp	/^void b2Rope::SolveC2()$/;"	f	class:b2Rope
SolveC3	src/include/Box2D/Rope/b2Rope.cpp	/^void b2Rope::SolveC3()$/;"	f	class:b2Rope
SolvePositionConstraints	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^bool b2ContactSolver::SolvePositionConstraints()$/;"	f	class:b2ContactSolver
SolvePositionConstraints	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^bool b2DistanceJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2DistanceJoint
SolvePositionConstraints	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^bool b2FrictionJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2FrictionJoint
SolvePositionConstraints	src/include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^bool b2GearJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2GearJoint
SolvePositionConstraints	src/include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^bool b2MouseJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2MouseJoint
SolvePositionConstraints	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^bool b2PrismaticJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2PrismaticJoint
SolvePositionConstraints	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^bool b2PulleyJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2PulleyJoint
SolvePositionConstraints	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^bool b2RevoluteJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2RevoluteJoint
SolvePositionConstraints	src/include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^bool b2RopeJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2RopeJoint
SolvePositionConstraints	src/include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^bool b2WeldJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2WeldJoint
SolvePositionConstraints	src/include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^bool b2WheelJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2WheelJoint
SolveTOI	src/include/Box2D/Dynamics/b2Island.cpp	/^void b2Island::SolveTOI(const b2TimeStep& subStep, int32 toiIndexA, int32 toiIndexB)$/;"	f	class:b2Island
SolveTOI	src/include/Box2D/Dynamics/b2World.cpp	/^void b2World::SolveTOI(const b2TimeStep& step)$/;"	f	class:b2World
SolveTOIPositionConstraints	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^bool b2ContactSolver::SolveTOIPositionConstraints(int32 toiIndexA, int32 toiIndexB)$/;"	f	class:b2ContactSolver
SolveVelocityConstraints	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^void b2ContactSolver::SolveVelocityConstraints()$/;"	f	class:b2ContactSolver
SolveVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^void b2DistanceJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2DistanceJoint
SolveVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2FrictionJoint
SolveVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^void b2GearJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2GearJoint
SolveVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2MouseJoint
SolveVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PrismaticJoint
SolveVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^void b2PulleyJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PulleyJoint
SolveVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RevoluteJoint
SolveVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^void b2RopeJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RopeJoint
SolveVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^void b2WeldJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WeldJoint
SolveVelocityConstraints	src/include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WheelJoint
Sound	src/include/SFML/Audio/Sound.hpp	/^class SFML_AUDIO_API Sound : public SoundSource$/;"	c	namespace:sf
SoundBuffer	src/include/SFML/Audio/SoundBuffer.hpp	/^class SFML_AUDIO_API SoundBuffer$/;"	c	namespace:sf
SoundBufferRecorder	src/include/SFML/Audio/SoundBufferRecorder.hpp	/^class SFML_AUDIO_API SoundBufferRecorder : public SoundRecorder$/;"	c	namespace:sf
SoundList	src/include/SFML/Audio/SoundBuffer.hpp	/^    typedef std::set<Sound*> SoundList; \/\/\/< Set of unique sound instances$/;"	t	class:sf::SoundBuffer
SoundRecorder	src/include/SFML/Audio/SoundRecorder.hpp	/^class SFML_AUDIO_API SoundRecorder$/;"	c	namespace:sf
SoundSource	src/include/SFML/Audio/SoundSource.hpp	/^class SFML_AUDIO_API SoundSource$/;"	c	namespace:sf
SoundStream	src/include/SFML/Audio/SoundStream.hpp	/^class SFML_AUDIO_API SoundStream : public SoundSource$/;"	c	namespace:sf
SourceFile	src/include/backward/backward.hpp	/^	SourceFile() {}$/;"	f	class:backward::SourceFile
SourceFile	src/include/backward/backward.hpp	/^	SourceFile(SourceFile&& from): _file(0) {$/;"	f	class:backward::SourceFile
SourceFile	src/include/backward/backward.hpp	/^	SourceFile(const std::string& path): _file(new std::ifstream(path.c_str())) {}$/;"	f	class:backward::SourceFile
SourceFile	src/include/backward/backward.hpp	/^	explicit SourceFile(const SourceFile& from) {$/;"	f	class:backward::SourceFile
SourceFile	src/include/backward/backward.hpp	/^class SourceFile {$/;"	c	namespace:backward
SourceLoc	src/include/backward/backward.hpp	/^		SourceLoc(): line(0), col(0) {}$/;"	f	struct:backward::ResolvedTrace::SourceLoc
SourceLoc	src/include/backward/backward.hpp	/^	struct SourceLoc {$/;"	s	struct:backward::ResolvedTrace
Space	src/include/SFML/Window/Keyboard.hpp	/^        Space,        \/\/\/< The Space key$/;"	e	enum:sf::Keyboard::Key
Sprite	src/include/SFML/Graphics/Sprite.hpp	/^class SFML_GRAPHICS_API Sprite : public Drawable, public Transformable$/;"	c	namespace:sf
StackTrace	src/include/backward/backward.hpp	/^class StackTrace:$/;"	c	namespace:backward
StackTraceImpl	src/include/backward/backward.hpp	/^class StackTraceImpl {$/;"	c	namespace:backward
StackTraceImpl	src/include/backward/backward.hpp	/^class StackTraceImpl<system_tag::linux_tag>: public StackTraceLinuxImplHolder {$/;"	c	namespace:backward
StackTraceLinuxImplBase	src/include/backward/backward.hpp	/^	StackTraceLinuxImplBase(): _thread_id(0), _skip(0) {}$/;"	f	class:backward::StackTraceLinuxImplBase
StackTraceLinuxImplBase	src/include/backward/backward.hpp	/^class StackTraceLinuxImplBase {$/;"	c	namespace:backward
StackTraceLinuxImplHolder	src/include/backward/backward.hpp	/^class StackTraceLinuxImplHolder: public StackTraceLinuxImplBase {$/;"	c	namespace:backward
StackTraceWithLocals	src/include/backward/backward.hpp	/^class StackTraceWithLocals:$/;"	c	namespace:backward
StackTraceWithLocalsImpl	src/include/backward/backward.hpp	/^class StackTraceWithLocalsImpl:$/;"	c	namespace:backward
StackTraceWithLocalsImpl	src/include/backward/backward.hpp	/^class StackTraceWithLocalsImpl<system_tag::linux_tag>:$/;"	c	namespace:backward
State	src/core/State/State.h	/^	State(std::string name){$/;"	f	class:State
State	src/core/State/State.h	/^class State{$/;"	c
State	src/include/Box2D/Collision/b2TimeOfImpact.h	/^	enum State$/;"	g	struct:b2TOIOutput
StatesCache	src/include/SFML/Graphics/RenderTarget.hpp	/^    struct StatesCache$/;"	s	class:sf::RenderTarget
Status	src/include/SFML/Audio/SoundSource.hpp	/^    enum Status$/;"	g	class:sf::SoundSource
Status	src/include/SFML/Network/Ftp.hpp	/^        enum Status$/;"	g	class:sf::Ftp::Response
Status	src/include/SFML/Network/Http.hpp	/^        enum Status$/;"	g	class:sf::Http::Response
Status	src/include/SFML/Network/Socket.hpp	/^    enum Status$/;"	g	class:sf::Socket
Step	src/include/Box2D/Dynamics/b2World.cpp	/^void b2World::Step(float32 dt, int32 velocityIterations, int32 positionIterations)$/;"	f	class:b2World
Step	src/include/Box2D/Rope/b2Rope.cpp	/^void b2Rope::Step(float32 h, int32 iterations)$/;"	f	class:b2Rope
Stopped	src/include/SFML/Audio/SoundSource.hpp	/^        Stopped, \/\/\/< Sound is not playing$/;"	e	enum:sf::SoundSource::Status
StoreImpulses	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^void b2ContactSolver::StoreImpulses()$/;"	f	class:b2ContactSolver
String	src/include/SFML/System/String.hpp	/^class SFML_SYSTEM_API String$/;"	c	namespace:sf
Style	src/include/SFML/Graphics/Text.hpp	/^    enum Style$/;"	g	class:sf::Text
Style	src/include/SFML/Window/WindowStyle.hpp	/^namespace Style$/;"	n	namespace:sf
Subtract	src/include/SFML/Window/Keyboard.hpp	/^        Subtract,     \/\/\/< The - key$/;"	e	enum:sf::Keyboard::Key
Synchronize	src/include/Box2D/Dynamics/b2Fixture.cpp	/^void b2Fixture::Synchronize(b2BroadPhase* broadPhase, const b2Transform& transform1, const b2Transform& transform2)$/;"	f	class:b2Fixture
SynchronizeFixtures	src/include/Box2D/Dynamics/b2Body.cpp	/^void b2Body::SynchronizeFixtures()$/;"	f	class:b2Body
SynchronizeTransform	src/include/Box2D/Dynamics/b2Body.h	/^inline void b2Body::SynchronizeTransform()$/;"	f	class:b2Body
SystemStatus	src/include/SFML/Network/Ftp.hpp	/^            SystemStatus          = 211, \/\/\/< System status, or system help reply$/;"	e	enum:sf::Ftp::Response::Status
SystemType	src/include/SFML/Network/Ftp.hpp	/^            SystemType            = 215, \/\/\/< NAME system type, where NAME is an official system name from the list in the Assigned Numbers document$/;"	e	enum:sf::Ftp::Response::Status
T	src/include/SFML/Window/Keyboard.hpp	/^        T,            \/\/\/< The T key$/;"	e	enum:sf::Keyboard::Key
Tab	src/include/SFML/Window/Keyboard.hpp	/^        Tab,          \/\/\/< The Tabulation key$/;"	e	enum:sf::Keyboard::Key
Tcp	src/include/SFML/Network/Socket.hpp	/^        Tcp, \/\/\/< TCP protocol$/;"	e	enum:sf::Socket::Type
TcpListener	src/include/SFML/Network/TcpListener.hpp	/^class SFML_NETWORK_API TcpListener : public Socket$/;"	c	namespace:sf
TcpSocket	src/include/SFML/Network/TcpSocket.hpp	/^class SFML_NETWORK_API TcpSocket : public Socket$/;"	c	namespace:sf
TestOverlap	src/include/Box2D/Collision/b2BroadPhase.h	/^inline bool b2BroadPhase::TestOverlap(int32 proxyIdA, int32 proxyIdB) const$/;"	f	class:b2BroadPhase
TestPoint	src/include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^bool b2ChainShape::TestPoint(const b2Transform& xf, const b2Vec2& p) const$/;"	f	class:b2ChainShape
TestPoint	src/include/Box2D/Collision/Shapes/b2CircleShape.cpp	/^bool b2CircleShape::TestPoint(const b2Transform& transform, const b2Vec2& p) const$/;"	f	class:b2CircleShape
TestPoint	src/include/Box2D/Collision/Shapes/b2EdgeShape.cpp	/^bool b2EdgeShape::TestPoint(const b2Transform& xf, const b2Vec2& p) const$/;"	f	class:b2EdgeShape
TestPoint	src/include/Box2D/Collision/Shapes/b2PolygonShape.cpp	/^bool b2PolygonShape::TestPoint(const b2Transform& xf, const b2Vec2& p) const$/;"	f	class:b2PolygonShape
TestPoint	src/include/Box2D/Dynamics/b2Fixture.h	/^inline bool b2Fixture::TestPoint(const b2Vec2& p) const$/;"	f	class:b2Fixture
Text	src/include/SFML/Graphics/Text.hpp	/^class SFML_GRAPHICS_API Text : public Drawable, public Transformable$/;"	c	namespace:sf
TextEntered	src/include/SFML/Window/Event.hpp	/^        TextEntered,            \/\/\/< A character was entered (data in event.text)$/;"	e	enum:sf::Event::EventType
TextEvent	src/include/SFML/Window/Event.hpp	/^    struct TextEvent$/;"	s	class:sf::Event
Texture	src/include/SFML/Graphics/Texture.hpp	/^class SFML_GRAPHICS_API Texture : GlResource$/;"	c	namespace:sf
TextureTable	src/include/SFML/Graphics/Shader.hpp	/^    typedef std::map<int, const Texture*> TextureTable;$/;"	t	class:sf::Shader
Thread	src/include/SFML/System/Thread.hpp	/^class SFML_SYSTEM_API Thread : NonCopyable$/;"	c	namespace:sf
ThreadLocal	src/include/SFML/System/ThreadLocal.hpp	/^class SFML_SYSTEM_API ThreadLocal : NonCopyable$/;"	c	namespace:sf
ThreadLocalPtr	src/include/SFML/System/ThreadLocalPtr.hpp	/^class ThreadLocalPtr : private ThreadLocal$/;"	c	namespace:sf
Tilde	src/include/SFML/Window/Keyboard.hpp	/^        Tilde,        \/\/\/< The ~ key$/;"	e	enum:sf::Keyboard::Key
Time	src/include/SFML/System/Time.hpp	/^class SFML_SYSTEM_API Time$/;"	c	namespace:sf
Titlebar	src/include/SFML/Window/WindowStyle.hpp	/^        Titlebar   = 1 << 0, \/\/\/< Title bar + fixed border$/;"	e	enum:sf::Style::__anon5
TouchProxy	src/include/Box2D/Collision/b2BroadPhase.cpp	/^void b2BroadPhase::TouchProxy(int32 proxyId)$/;"	f	class:b2BroadPhase
Trace	src/include/backward/backward.hpp	/^	Trace():$/;"	f	struct:backward::Trace
Trace	src/include/backward/backward.hpp	/^	explicit Trace(void* addr, size_t idx):$/;"	f	struct:backward::Trace
Trace	src/include/backward/backward.hpp	/^struct Trace {$/;"	s	namespace:backward
TraceResolver	src/include/backward/backward.hpp	/^class TraceResolver:$/;"	c	namespace:backward
TraceResolverImpl	src/include/backward/backward.hpp	/^class TraceResolverImpl<system_tag::linux_tag>:$/;"	c	namespace:backward
TraceResolverImpl	src/include/backward/backward.hpp	/^class TraceResolverImpl<system_tag::unknown_tag> {$/;"	c	namespace:backward
TraceResolverLinuxImpl	src/include/backward/backward.hpp	/^	TraceResolverLinuxImpl(): _bfd_loaded(false) {}$/;"	f	class:backward::TraceResolverLinuxImpl
TraceResolverLinuxImpl	src/include/backward/backward.hpp	/^	TraceResolverLinuxImpl(): _dwfl_handle_initialized(false) {}$/;"	f	class:backward::TraceResolverLinuxImpl
TraceResolverLinuxImpl	src/include/backward/backward.hpp	/^class TraceResolverLinuxImpl<trace_resolver_tag::backtrace_symbol>:$/;"	c	namespace:backward
TraceResolverLinuxImpl	src/include/backward/backward.hpp	/^class TraceResolverLinuxImpl<trace_resolver_tag::libbfd>:$/;"	c	namespace:backward
TraceResolverLinuxImpl	src/include/backward/backward.hpp	/^class TraceResolverLinuxImpl<trace_resolver_tag::libdw>:$/;"	c	namespace:backward
TraceResolverLinuxImplBase	src/include/backward/backward.hpp	/^class TraceResolverLinuxImplBase {$/;"	c	namespace:backward
TraceWithLocals	src/include/backward/backward.hpp	/^	TraceWithLocals(): Trace() {}$/;"	f	struct:backward::TraceWithLocals
TraceWithLocals	src/include/backward/backward.hpp	/^	TraceWithLocals(const Trace& mini_trace):$/;"	f	struct:backward::TraceWithLocals
TraceWithLocals	src/include/backward/backward.hpp	/^struct TraceWithLocals: public Trace {$/;"	s	namespace:backward
TransferAborted	src/include/SFML/Network/Ftp.hpp	/^            TransferAborted           = 426, \/\/\/< Connection closed, transfer aborted$/;"	e	enum:sf::Ftp::Response::Status
TransferMode	src/include/SFML/Network/Ftp.hpp	/^    enum TransferMode$/;"	g	class:sf::Ftp
Transform	src/include/SFML/Graphics/Transform.hpp	/^class SFML_GRAPHICS_API Transform$/;"	c	namespace:sf
Transformable	src/include/SFML/Graphics/Transformable.hpp	/^class SFML_GRAPHICS_API Transformable$/;"	c	namespace:sf
Transparent	src/include/SFML/Graphics/Color.hpp	/^    static const Color Transparent; \/\/\/< Transparent (black) predefined color$/;"	m	class:sf::Color
Triangles	src/include/SFML/Graphics/PrimitiveType.hpp	/^    Triangles,      \/\/\/< List of individual triangles$/;"	e	enum:sf::PrimitiveType
TrianglesFan	src/include/SFML/Graphics/PrimitiveType.hpp	/^    TrianglesFan,   \/\/\/< List of connected triangles, a point uses the common center and the previous point to form a triangle$/;"	e	enum:sf::PrimitiveType
TrianglesStrip	src/include/SFML/Graphics/PrimitiveType.hpp	/^    TrianglesStrip, \/\/\/< List of connected triangles, a point uses the two previous points to form a triangle$/;"	e	enum:sf::PrimitiveType
TwoPI	src/util/mathUtil.h	/^	const double TwoPI = 2.0 * PI;$/;"	m	namespace:util
Type	src/core/ObjProcessors/objContactListener.h	/^	enum Type{$/;"	g	struct:collisionData
Type	src/include/Box2D/Collision/Shapes/b2Shape.h	/^	enum Type$/;"	g	class:b2Shape
Type	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	enum Type$/;"	g	struct:b2EPAxis	file:
Type	src/include/Box2D/Collision/b2Collision.h	/^	enum Type$/;"	g	struct:b2ContactFeature
Type	src/include/Box2D/Collision/b2Collision.h	/^	enum Type$/;"	g	struct:b2Manifold
Type	src/include/Box2D/Collision/b2TimeOfImpact.cpp	/^	enum Type$/;"	g	struct:b2SeparationFunction	file:
Type	src/include/SFML/Graphics/Shader.hpp	/^    enum Type$/;"	g	class:sf::Shader
Type	src/include/SFML/Network/Socket.hpp	/^    enum Type$/;"	g	class:sf::Socket
U	src/include/SFML/Window/Joystick.hpp	/^        U,    \/\/\/< The U axis$/;"	e	enum:sf::Joystick::Axis
U	src/include/SFML/Window/Keyboard.hpp	/^        U,            \/\/\/< The U key$/;"	e	enum:sf::Keyboard::Key
Udp	src/include/SFML/Network/Socket.hpp	/^        Udp  \/\/\/< UDP protocol$/;"	e	enum:sf::Socket::Type
UdpSocket	src/include/SFML/Network/UdpSocket.hpp	/^class SFML_NETWORK_API UdpSocket : public Socket$/;"	c	namespace:sf
Uint16	src/include/SFML/Config.hpp	/^    typedef unsigned short Uint16;$/;"	t	namespace:sf
Uint32	src/include/SFML/Config.hpp	/^    typedef unsigned int Uint32;$/;"	t	namespace:sf
Uint64	src/include/SFML/Config.hpp	/^        typedef unsigned __int64 Uint64;$/;"	t	namespace:sf
Uint64	src/include/SFML/Config.hpp	/^        typedef unsigned long long Uint64;$/;"	t	namespace:sf
Uint8	src/include/SFML/Config.hpp	/^    typedef unsigned char Uint8;$/;"	t	namespace:sf
UnBufferMove	src/include/Box2D/Collision/b2BroadPhase.cpp	/^void b2BroadPhase::UnBufferMove(int32 proxyId)$/;"	f	class:b2BroadPhase
Unauthorized	src/include/SFML/Network/Http.hpp	/^            Unauthorized        = 401, \/\/\/< The requested page needs an authentification to be accessed$/;"	e	enum:sf::Http::Response::Status
Underlined	src/include/SFML/Graphics/Text.hpp	/^        Underlined = 1 << 2  \/\/\/< Underlined characters$/;"	e	enum:sf::Text::Style
Unknown	src/include/SFML/Window/Keyboard.hpp	/^        Unknown = -1, \/\/\/< Unhandled key$/;"	e	enum:sf::Keyboard::Key
Unregister	src/core/Messaging/eventMgr.cpp	/^void eventMgr::Unregister(const Hash *eventName, Observer *observer){$/;"	f	class:eventMgr
Unwinder	src/include/backward/backward.hpp	/^class Unwinder {$/;"	c	namespace:backward::details
Up	src/include/SFML/Window/Keyboard.hpp	/^        Up,           \/\/\/< Up arrow$/;"	e	enum:sf::Keyboard::Key
Update	src/core/Process/Process.h	/^	virtual void Update(float dt){};$/;"	f	class:Process
Update	src/core/Process/objectMgrProcess.h	/^	void Update(float dt){$/;"	f	class:objectMgrProcess
Update	src/core/Process/processMgr.cpp	/^void processMgr::Update(float dt){$/;"	f	class:processMgr
Update	src/core/Process/stateProcess.h	/^	 void Update(float dt){$/;"	f	class:stateProcess
Update	src/core/Process/viewProcess.cpp	/^void viewProcess::Update(float dt){$/;"	f	class:viewProcess
Update	src/core/Process/worldProcess.h	/^	 void Update(float dt){$/;"	f	class:worldProcess
Update	src/game/States/gameSegmentLoader.h	/^	void Update(float dt){};$/;"	f	class:gameSegmentLoader
Update	src/game/States/gameState.h	/^	void Update(float dt){$/;"	f	class:gameState
Update	src/game/States/mainMenuState.h	/^	void Update(float dt){};$/;"	f	class:mainMenuState
Update	src/game/gameStateHelpers/playerController.cpp	/^void playerController::Update(float dt)$/;"	f	class:playerController
Update	src/game/gameStateHelpers/playerEventHandler.cpp	/^void playerEventHandler::Update(){$/;"	f	class:playerEventHandler
Update	src/include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^void b2Contact::Update(b2ContactListener* listener)$/;"	f	class:b2Contact
Update	tools/beautified.cpp	/^	void Update ( float dt ){$/;"	f	class:gameState
Update	tools/input.cpp	/^	void Update(float dt){$/;"	f	class:gameState
UpdatePairs	src/include/Box2D/Collision/b2BroadPhase.h	/^void b2BroadPhase::UpdatePairs(T* callback)$/;"	f	class:b2BroadPhase
Utf	src/include/SFML/System/Utf.hpp	/^class Utf<16>$/;"	c	namespace:sf
Utf	src/include/SFML/System/Utf.hpp	/^class Utf<32>$/;"	c	namespace:sf
Utf	src/include/SFML/System/Utf.hpp	/^class Utf<8>$/;"	c	namespace:sf
Utf16	src/include/SFML/System/Utf.hpp	/^typedef Utf<16> Utf16;$/;"	t	namespace:sf
Utf32	src/include/SFML/System/Utf.hpp	/^typedef Utf<32> Utf32;$/;"	t	namespace:sf
Utf8	src/include/SFML/System/Utf.hpp	/^typedef Utf<8>  Utf8;$/;"	t	namespace:sf
V	src/include/SFML/Window/Joystick.hpp	/^        V,    \/\/\/< The V axis$/;"	e	enum:sf::Joystick::Axis
V	src/include/SFML/Window/Keyboard.hpp	/^        V,            \/\/\/< The V key$/;"	e	enum:sf::Keyboard::Key
VALUE	src/include/backward/backward.hpp	/^	enum Kind { VALUE, LIST, MAP };$/;"	e	enum:backward::Variable::Kind
Validate	src/include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::Validate() const$/;"	f	class:b2DynamicTree
ValidateMetrics	src/include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::ValidateMetrics(int32 index) const$/;"	f	class:b2DynamicTree
ValidateStructure	src/include/Box2D/Collision/b2DynamicTree.cpp	/^void b2DynamicTree::ValidateStructure(int32 index) const$/;"	f	class:b2DynamicTree
Variable	src/include/backward/backward.hpp	/^	Variable(Kind k): kind(k) {$/;"	f	class:backward::Variable
Variable	src/include/backward/backward.hpp	/^class Variable {$/;"	c	namespace:backward
Vector2	src/include/SFML/System/Vector2.hpp	/^class Vector2$/;"	c	namespace:sf
Vector2f	src/include/SFML/System/Vector2.hpp	/^typedef Vector2<float>        Vector2f;$/;"	t	namespace:sf
Vector2i	src/include/SFML/System/Vector2.hpp	/^typedef Vector2<int>          Vector2i;$/;"	t	namespace:sf
Vector2u	src/include/SFML/System/Vector2.hpp	/^typedef Vector2<unsigned int> Vector2u;$/;"	t	namespace:sf
Vector3	src/include/SFML/System/Vector3.hpp	/^class Vector3$/;"	c	namespace:sf
Vector3f	src/include/SFML/System/Vector3.hpp	/^typedef Vector3<float> Vector3f;$/;"	t	namespace:sf
Vector3i	src/include/SFML/System/Vector3.hpp	/^typedef Vector3<int>   Vector3i;$/;"	t	namespace:sf
VersionNotSupported	src/include/SFML/Network/Http.hpp	/^            VersionNotSupported = 505, \/\/\/< The server doesn't support the requested HTTP version$/;"	e	enum:sf::Http::Response::Status
Vertex	src/include/SFML/Graphics/Shader.hpp	/^        Vertex,  \/\/\/< Vertex shader$/;"	e	enum:sf::Shader::Type
Vertex	src/include/SFML/Graphics/Vertex.hpp	/^class SFML_GRAPHICS_API Vertex$/;"	c	namespace:sf
VertexArray	src/include/SFML/Graphics/VertexArray.hpp	/^class SFML_GRAPHICS_API VertexArray : public Drawable$/;"	c	namespace:sf
VertexCacheSize	src/include/SFML/Graphics/RenderTarget.hpp	/^        enum {VertexCacheSize = 4};$/;"	e	enum:sf::RenderTarget::StatesCache::__anon7
VertexType	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	enum VertexType$/;"	g	struct:b2EPCollider	file:
VideoMode	src/include/SFML/Window/VideoMode.hpp	/^class SFML_WINDOW_API VideoMode$/;"	c	namespace:sf
View	src/include/SFML/Graphics/View.hpp	/^class SFML_GRAPHICS_API View$/;"	c	namespace:sf
W	src/include/SFML/Window/Keyboard.hpp	/^        W,            \/\/\/< The W key$/;"	e	enum:sf::Keyboard::Key
WarmStart	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^void b2ContactSolver::WarmStart()$/;"	f	class:b2ContactSolver
White	src/include/SFML/Graphics/Color.hpp	/^    static const Color White;       \/\/\/< White predefined color$/;"	m	class:sf::Color
Window	src/include/SFML/Window/Window.hpp	/^class SFML_WINDOW_API Window : GlResource, NonCopyable$/;"	c	namespace:sf
WindowHandle	src/include/SFML/Window/WindowHandle.hpp	/^    typedef HWND__* WindowHandle;$/;"	t	namespace:sf
WriteCache	src/include/Box2D/Collision/b2Distance.cpp	/^	void WriteCache(b2SimplexCache* cache) const$/;"	f	struct:b2Simplex
X	src/include/SFML/Window/Joystick.hpp	/^        X,    \/\/\/< The X axis$/;"	e	enum:sf::Joystick::Axis
X	src/include/SFML/Window/Keyboard.hpp	/^        X,            \/\/\/< The X key$/;"	e	enum:sf::Keyboard::Key
XButton1	src/include/SFML/Window/Mouse.hpp	/^        XButton1,   \/\/\/< The first extra mouse button$/;"	e	enum:sf::Mouse::Button
XButton2	src/include/SFML/Window/Mouse.hpp	/^        XButton2,   \/\/\/< The second extra mouse button$/;"	e	enum:sf::Mouse::Button
Y	src/include/SFML/Window/Joystick.hpp	/^        Y,    \/\/\/< The Y axis$/;"	e	enum:sf::Joystick::Axis
Y	src/include/SFML/Window/Keyboard.hpp	/^        Y,            \/\/\/< The Y key$/;"	e	enum:sf::Keyboard::Key
Yellow	src/include/SFML/Graphics/Color.hpp	/^    static const Color Yellow;      \/\/\/< Yellow predefined color$/;"	m	class:sf::Color
Z	src/include/SFML/Window/Joystick.hpp	/^        Z,    \/\/\/< The Z axis$/;"	e	enum:sf::Joystick::Axis
Z	src/include/SFML/Window/Keyboard.hpp	/^        Z,            \/\/\/< The Z key$/;"	e	enum:sf::Keyboard::Key
Zero	src/include/SFML/System/Time.hpp	/^    static const Time Zero; \/\/\/< Predefined "zero" time value $/;"	m	class:sf::Time
_Cooldown	src/game/ObjProcessors/gunProcessor.cpp	/^void gunData::_Cooldown(){$/;"	f	class:gunData
_Dispatch	src/core/Messaging/eventMgr.cpp	/^void eventMgr::_Dispatch(Event &newEvent){$/;"	f	class:eventMgr
_GNU_SOURCE	src/include/backward/backward.hpp	182;"	d
_GNU_SOURCE	src/include/backward/backward.hpp	184;"	d
_Init	src/core/State/State.h	/^	virtual void _Init(){};$/;"	f	class:State
_Init	src/core/objectProcessor.h	/^	  virtual void _Init(){};$/;"	f	class:objectProcessor
_Init	src/game/States/gameState.cpp	/^void gameState::_Init(){$/;"	f	class:gameState
_Init	tools/beautified.cpp	/^void gameState::_Init (){$/;"	f	class:gameState
_Init	tools/input.cpp	/^void gameState::_Init(){$/;"	f	class:gameState
_MurmurHash64B	src/core/Hash.cpp	/^uint64_t Hash::_MurmurHash64B ( const void * key, int len, unsigned int seed ){$/;"	f	class:Hash
_Render	src/core/ObjProcessors/renderProcessor.cpp	/^void renderProcessor::_Render(vector2 pos, util::Angle &angle, $/;"	f	class:renderProcessor
_Tick	src/game/ObjProcessors/gunProcessor.cpp	/^void gunData::_Tick(){$/;"	f	class:gunData
_addProcesses	src/main.cc	/^void _addProcesses(processMgr &processManager, Settings &settings, eventMgr &eventManager){$/;"	f
_bfd_loaded	src/include/backward/backward.hpp	/^	bool                _bfd_loaded;$/;"	m	class:backward::TraceResolverLinuxImpl
_bulletCreator	src/game/gameStateHelpers/gunsManager.h	/^	bulletCreator *_bulletCreator;$/;"	m	class:gunsManager
_calcCameraMoveAmt	src/game/ObjProcessors/cameraProcessor.cpp	/^vector2 cameraProcessor::_calcCameraMoveAmt(Object *obj, cameraData *data){$/;"	f	class:cameraProcessor
_calcJumpImpulse	src/game/ObjProcessors/groundMoveProcessor.cpp	/^vector2 groundMoveProcessor::_calcJumpImpulse(moveData *data, vector2 currentVel, float dt){$/;"	f	class:groundMoveProcessor
_createBulletCollider	src/game/generators/bulletDataGenerator.cpp	/^bulletCollider* bulletDataGenerator::_createBulletCollider(unsigned long colliderSeed){$/;"	f	class:bulletDataGenerator
_createDummy	src/game/States/gameState.cpp	/^void gameState::_createDummy(vector2 levelDim){$/;"	f	class:gameState
_createDummy	tools/beautified.cpp	/^void gameState::_createDummy ( vector2 levelDim ){$/;"	f	class:gameState
_createDummy	tools/input.cpp	/^void gameState::_createDummy(vector2 levelDim){$/;"	f	class:gameState
_createEnemies	src/game/States/gameState.cpp	/^void gameState::_createEnemies(vector2 levelDim){$/;"	f	class:gameState
_createEnemies	tools/beautified.cpp	/^void gameState::_createEnemies ( vector2 levelDim ){$/;"	f	class:gameState
_createEnemies	tools/input.cpp	/^void gameState::_createEnemies(vector2 levelDim){$/;"	f	class:gameState
_createGuns	src/game/States/gameState.cpp	/^Object* gameState::_createGuns(Object *player, vector2 levelDim){$/;"	f	class:gameState
_createGuns	tools/beautified.cpp	/^Object * gameState::_createGuns ( Object *player, vector2 levelDim ){$/;"	f	class:gameState
_createGuns	tools/input.cpp	/^Object* gameState::_createGuns(Object *player, vector2 levelDim){$/;"	f	class:gameState
_createGunsManager	src/game/gameStateHelpers/playerController.cpp	/^void playerController::_createGunsManager(Object *player){$/;"	f	class:playerController
_createObjectProcessors	src/main.cc	/^void _createObjectProcessors(objectMgrProcess *objMgrProc, processMgr &processManager,$/;"	f
_createPlayer	src/game/States/gameState.cpp	/^void gameState::_createPlayer(vector2 playerInitPos, vector2 levelDim){$/;"	f	class:gameState
_createPlayer	src/game/gameStateHelpers/playerController.cpp	/^void playerController::_createPlayer(vector2 initPos, playerCreator *creator){$/;"	f	class:playerController
_createPlayer	tools/beautified.cpp	/^void gameState::_createPlayer ( vector2 playerInitPos, vector2 levelDim ){$/;"	f	class:gameState
_createPlayer	tools/input.cpp	/^void gameState::_createPlayer(vector2 playerInitPos, vector2 levelDim){$/;"	f	class:gameState
_createPlayerEventHandler	src/game/gameStateHelpers/playerController.cpp	/^void playerController::_createPlayerEventHandler(playerHandlerData &playerData)$/;"	f	class:playerController
_createStates	src/main.cc	/^void _createStates(stateProcess *stateProc){$/;"	f
_demangle_buffer	src/include/backward/backward.hpp	/^	details::handle<char*> _demangle_buffer;$/;"	m	class:backward::TraceResolverLinuxImplBase
_demangle_buffer_length	src/include/backward/backward.hpp	/^	size_t                 _demangle_buffer_length;$/;"	m	class:backward::TraceResolverLinuxImplBase
_depth	src/include/backward/backward.hpp	/^	size_t  _depth;$/;"	m	class:backward::details::Unwinder
_dwfl_cb	src/include/backward/backward.hpp	/^		           _dwfl_cb;$/;"	m	class:backward::TraceResolverLinuxImpl
_dwfl_handle	src/include/backward/backward.hpp	/^	dwfl_handle_t  _dwfl_handle;$/;"	m	class:backward::TraceResolverLinuxImpl
_dwfl_handle_initialized	src/include/backward/backward.hpp	/^	bool           _dwfl_handle_initialized;$/;"	m	class:backward::TraceResolverLinuxImpl
_empty	src/include/backward/backward.hpp	/^	bool _empty;$/;"	m	class:backward::details::handle
_eventManager	src/game/gameStateHelpers/playerController.h	/^	eventMgr *_eventManager;$/;"	m	class:playerController
_extractPhyData	src/core/ObjProcessors/objContactListener.cpp	/^void objContactListener::_extractPhyData(b2Contact *contact, Object **a, Object **b){$/;"	f	class:objContactListener
_extractPhyData	tools/beautified.cpp	/^void objContactListener::_extractPhyData ( b2Contact *contact, Object **a, Object **b ){$/;"	f	class:objContactListener
_extractPhyData	tools/input.cpp	/^void objContactListener::_extractPhyData(b2Contact *contact, Object **a, Object **b){$/;"	f	class:objContactListener
_f	src/include/backward/backward.hpp	/^	F*      _f;$/;"	m	class:backward::details::Unwinder
_file	src/include/backward/backward.hpp	/^			> _file;$/;"	m	class:backward::SourceFile
_fillCollisionData	src/core/ObjProcessors/objContactListener.cpp	/^collisionData objContactListener::_fillCollisionData(b2Contact *contact,$/;"	f	class:objContactListener
_fillCollisionData	tools/beautified.cpp	/^collisionData objContactListener::_fillCollisionData ( b2Contact *contact,$/;"	f	class:objContactListener
_fillCollisionData	tools/input.cpp	/^collisionData objContactListener::_fillCollisionData(b2Contact *contact,$/;"	f	class:objContactListener
_fireGun	src/game/gameStateHelpers/gunsManager.cpp	/^void gunsManager::_fireGun(){$/;"	f	class:gunsManager
_fireGun	src/game/gameStateHelpers/playerEventHandler.cpp	/^void playerEventHandler::_fireGun(){$/;"	f	class:playerEventHandler
_fireShot	src/game/ObjProcessors/gunProcessor.cpp	/^void gunProcessor::_fireShot(gunData *data, vector2 pos){$/;"	f	class:gunProcessor
_fobj_bfd_map	src/include/backward/backward.hpp	/^	fobj_bfd_map_t      _fobj_bfd_map;$/;"	m	class:backward::TraceResolverLinuxImpl
_genBulletData	src/game/generators/gunDataGenerator.cpp	/^void gunDataGenerator::_genBulletData(gunData &data,$/;"	f	class:gunDataGenerator
_genDamage	src/game/generators/bulletDataGenerator.cpp	/^damageCollider *bulletDataGenerator::_genDamage(damageProperty &prop){$/;"	f	class:bulletDataGenerator
_genFloat	src/game/generators/Generator.h	/^	float _genFloat(float min, float max){$/;"	f	class:Generator
_genGravity	src/game/generators/bulletDataGenerator.cpp	/^float bulletDataGenerator::_genGravity(gravityProperty &prop){$/;"	f	class:bulletDataGenerator
_genInt	src/game/generators/Generator.h	/^	int _genInt(int min, int max){$/;"	f	class:Generator
_genKnockback	src/game/generators/bulletDataGenerator.cpp	/^pushCollider *bulletDataGenerator::_genKnockback(knockbackProperty &prop){$/;"	f	class:bulletDataGenerator
_genMachineGun	src/game/generators/gunDataGenerator.cpp	/^void gunDataGenerator::_genMachineGun(gunData &data){$/;"	f	class:gunDataGenerator
_genRocket	src/game/generators/gunDataGenerator.cpp	/^void gunDataGenerator::_genRocket(gunData &data){$/;"	f	class:gunDataGenerator
_genTerrainData	src/game/factory/terrainCreator.cpp	/^void terrainCreator::_genTerrainData(){};$/;"	f	class:terrainCreator
_genUniqueName	src/core/Object.cpp	/^void Object::_genUniqueName(std::string genericName, std::string &out){$/;"	f	class:Object
_generateBoundary	src/game/States/gameState.cpp	/^void gameState::_generateBoundary(vector2 levelDim){$/;"	f	class:gameState
_generateBoundary	tools/beautified.cpp	/^void gameState::_generateBoundary ( vector2 levelDim ){$/;"	f	class:gameState
_generateBoundary	tools/input.cpp	/^void gameState::_generateBoundary(vector2 levelDim){$/;"	f	class:gameState
_generateTerrain	src/game/States/gameState.cpp	/^void gameState::_generateTerrain(unsigned long long seed, $/;"	f	class:gameState
_generateTerrain	tools/beautified.cpp	/^void gameState::_generateTerrain ( unsigned long long seed, vector2 playerInitPos,$/;"	f	class:gameState
_generateTerrain	tools/input.cpp	/^void gameState::_generateTerrain(unsigned long long seed, $/;"	f	class:gameState
_getProcess	src/core/Process/processMgr.cpp	/^Process *processMgr::_getProcess(const Hash* processName){$/;"	f	class:processMgr
_getProperty	src/core/Object.h	/^	Prop<T> * _getProperty(const Hash* name, bool warnIfNull = true){$/;"	f	class:Object
_gotoNextGun	src/game/gameStateHelpers/gunsManager.cpp	/^void gunsManager::_gotoNextGun(int skip){$/;"	f	class:gunsManager
_gotoPrevGun	src/game/gameStateHelpers/gunsManager.cpp	/^void gunsManager::_gotoPrevGun(int skip){$/;"	f	class:gunsManager
_gunCreator	src/game/gameStateHelpers/gunsManager.h	/^	gunCreator *_gunCreator;$/;"	m	class:gunsManager
_handleCollision	src/core/ObjProcessors/objContactListener.cpp	/^void objContactListener::_handleCollision(collisionData::Type type, b2Contact *contact){$/;"	f	class:objContactListener
_handleCollision	src/game/ObjProcessors/bulletProcessor.cpp	/^void bulletProcessor::_handleCollision(collisionData &collision, bulletData *data, Object *bullet){$/;"	f	class:bulletProcessor
_handleCollision	src/game/ObjProcessors/pickupProcessor.cpp	/^void pickupProcessor::_handleCollision(Object *obj, pickupData *data, collisionData &collision){$/;"	f	class:pickupProcessor
_handleCollision	tools/beautified.cpp	/^void objContactListener::_handleCollision ( collisionData::Type type, b2Contact *contact ){$/;"	f	class:objContactListener
_handleCollision	tools/input.cpp	/^void objContactListener::_handleCollision(collisionData::Type type, b2Contact *contact){$/;"	f	class:objContactListener
_handleEvent	src/core/Process/eventProcess.cpp	/^void eventProcess::_handleEvent(){$/;"	f	class:eventProcess
_handleEvent	tools/beautified.cpp	/^void eventProcess::_handleEvent (){$/;"	f	class:eventProcess
_handleEvent	tools/input.cpp	/^void eventProcess::_handleEvent(){$/;"	f	class:eventProcess
_handleKeyPress	src/game/gameStateHelpers/playerEventHandler.cpp	/^void playerEventHandler::_handleKeyPress(sf::Event::KeyEvent *event){$/;"	f	class:playerEventHandler
_handleKeyRelease	src/game/gameStateHelpers/playerEventHandler.cpp	/^void playerEventHandler::_handleKeyRelease(sf::Event::KeyEvent *event){$/;"	f	class:playerEventHandler
_handleKeyboardPressed	src/core/Process/eventProcess.cpp	/^void eventProcess::_handleKeyboardPressed(){$/;"	f	class:eventProcess
_handleKeyboardPressed	tools/beautified.cpp	/^void eventProcess::_handleKeyboardPressed (){$/;"	f	class:eventProcess
_handleKeyboardPressed	tools/input.cpp	/^void eventProcess::_handleKeyboardPressed(){$/;"	f	class:eventProcess
_handleKeyboardReleased	src/core/Process/eventProcess.cpp	/^void eventProcess::_handleKeyboardReleased(){$/;"	f	class:eventProcess
_handleKeyboardReleased	tools/beautified.cpp	/^void eventProcess::_handleKeyboardReleased (){$/;"	f	class:eventProcess
_handleKeyboardReleased	tools/input.cpp	/^void eventProcess::_handleKeyboardReleased(){$/;"	f	class:eventProcess
_handleMouseButtonPressed	src/core/Process/eventProcess.cpp	/^void eventProcess::_handleMouseButtonPressed(){$/;"	f	class:eventProcess
_handleMouseButtonPressed	tools/beautified.cpp	/^void eventProcess::_handleMouseButtonPressed (){$/;"	f	class:eventProcess
_handleMouseButtonPressed	tools/input.cpp	/^void eventProcess::_handleMouseButtonPressed(){$/;"	f	class:eventProcess
_handleMouseButtonReleased	src/core/Process/eventProcess.cpp	/^void eventProcess::_handleMouseButtonReleased(){$/;"	f	class:eventProcess
_handleMouseButtonReleased	tools/beautified.cpp	/^void eventProcess::_handleMouseButtonReleased (){$/;"	f	class:eventProcess
_handleMouseButtonReleased	tools/input.cpp	/^void eventProcess::_handleMouseButtonReleased(){$/;"	f	class:eventProcess
_handleMouseMove	src/core/Process/eventProcess.cpp	/^void eventProcess::_handleMouseMove(){$/;"	f	class:eventProcess
_handleMouseMove	tools/beautified.cpp	/^void eventProcess::_handleMouseMove (){$/;"	f	class:eventProcess
_handleMouseMove	tools/input.cpp	/^void eventProcess::_handleMouseMove(){$/;"	f	class:eventProcess
_handleMouseWheelDown	src/game/gameStateHelpers/playerEventHandler.cpp	/^void playerEventHandler::_handleMouseWheelDown(int ticks){$/;"	f	class:playerEventHandler
_handleMouseWheelMove	src/core/Process/eventProcess.cpp	/^void eventProcess::_handleMouseWheelMove(){$/;"	f	class:eventProcess
_handleMouseWheelMove	tools/beautified.cpp	/^void eventProcess::_handleMouseWheelMove (){$/;"	f	class:eventProcess
_handleMouseWheelMove	tools/input.cpp	/^void eventProcess::_handleMouseWheelMove(){$/;"	f	class:eventProcess
_handleMouseWheelUp	src/game/gameStateHelpers/playerEventHandler.cpp	/^void playerEventHandler::_handleMouseWheelUp(int ticks){$/;"	f	class:playerEventHandler
_handleWindowCloseEvent	src/core/Process/eventProcess.cpp	/^void eventProcess::_handleWindowCloseEvent(){$/;"	f	class:eventProcess
_handleWindowCloseEvent	tools/beautified.cpp	/^void eventProcess::_handleWindowCloseEvent (){$/;"	f	class:eventProcess
_handleWindowCloseEvent	tools/input.cpp	/^void eventProcess::_handleWindowCloseEvent(){$/;"	f	class:eventProcess
_index	src/include/backward/backward.hpp	/^	ssize_t _index;$/;"	m	class:backward::details::Unwinder
_initFactory	src/game/States/gameState.cpp	/^void gameState::_initFactory(){$/;"	f	class:gameState
_initFactory	tools/beautified.cpp	/^void gameState::_initFactory (){$/;"	f	class:gameState
_initFactory	tools/input.cpp	/^void gameState::_initFactory(){$/;"	f	class:gameState
_istty	src/include/backward/backward.hpp	/^	bool       _istty;$/;"	m	class:backward::Colorize
_limitCameraCoord	src/game/ObjProcessors/cameraProcessor.cpp	/^vector2 cameraProcessor::_limitCameraCoord(vector2 cameraCoord, cameraData *data){$/;"	f	class:cameraProcessor
_limitMoveAmt	src/game/ObjProcessors/cameraProcessor.cpp	/^vector2 cameraProcessor::_limitMoveAmt(vector2 moveAmt, vector2 maxMoveAmt){$/;"	f	class:cameraProcessor
_loadSettings	src/main.cc	/^void _loadSettings(Settings &settings){$/;"	f
_loaded	src/include/backward/backward.hpp	/^	bool                   _loaded;$/;"	m	class:backward::SignalHandling
_nil_trace	src/include/backward/backward.hpp	/^	TraceWithLocals              _nil_trace;$/;"	m	class:backward::StackTraceWithLocalsImpl
_normGenFloat	src/game/generators/Generator.h	/^	float  _normGenFloat(float mean, float deviation ){$/;"	f	class:Generator
_normGenInt	src/game/generators/Generator.h	/^	int  _normGenInt(int mean, int deviation ){$/;"	f	class:Generator
_objectFactory	src/game/gameStateHelpers/playerController.h	/^	objectFactory *_objectFactory;$/;"	m	class:playerController
_objectManager	src/game/gameStateHelpers/playerController.h	/^	objectMgr *_objectManager;$/;"	m	class:playerController
_observersPresent	src/core/Messaging/eventMgr.cpp	/^bool eventMgr::_observersPresent(const Hash *eventName){$/;"	f	class:eventMgr
_os	src/include/backward/backward.hpp	/^	std::FILE* _os;$/;"	m	class:backward::Colorize
_playerController	src/game/States/gameState.h	/^	playerController *_playerController;$/;"	m	class:gameState
_playerController	tools/beautified.cpp	/^	playerController *_playerController;$/;"	m	class:gameState	file:
_playerController	tools/input.cpp	/^	playerController *_playerController;$/;"	m	class:gameState	file:
_reloadGunPtrs	src/game/gameStateHelpers/gunsManager.cpp	/^void gunsManager::_reloadGunPtrs(){$/;"	f	class:gunsManager
_reset	src/include/backward/backward.hpp	/^	bool       _reset;$/;"	m	class:backward::Colorize
_resolver	src/include/backward/backward.hpp	/^	TraceResolver  _resolver;$/;"	m	class:backward::Printer
_sendEvent	src/core/Messaging/eventMgr.cpp	/^void eventMgr::_sendEvent(Event &event){$/;"	f	class:eventMgr
_setStateTransition	src/core/State/State.h	/^	void _setStateTransition(std::string _nextStateName){$/;"	f	class:State
_shouldFire	src/game/ObjProcessors/gunProcessor.h	/^	bool _shouldFire(){$/;"	f	struct:gunData
_simulateCamera	src/game/ObjProcessors/cameraProcessor.cpp	/^void cameraProcessor::_simulateCamera(vector2 cameraMoveAmt, float dt, cameraData *data){$/;"	f	class:cameraProcessor
_skip	src/include/backward/backward.hpp	/^	size_t _skip;$/;"	m	class:backward::StackTraceLinuxImplBase
_snippets	src/include/backward/backward.hpp	/^	SnippetFactory _snippets;$/;"	m	class:backward::Printer
_src_files	src/include/backward/backward.hpp	/^	src_files_t _src_files;$/;"	m	class:backward::SnippetFactory
_stack_content	src/include/backward/backward.hpp	/^	details::handle<char*> _stack_content;$/;"	m	class:backward::SignalHandling
_stacktrace	src/include/backward/backward.hpp	/^	std::vector<TraceWithLocals> _stacktrace;$/;"	m	class:backward::StackTraceWithLocalsImpl
_stacktrace	src/include/backward/backward.hpp	/^	std::vector<void*> _stacktrace;$/;"	m	class:backward::StackTraceLinuxImplHolder
_switchGuns	src/game/gameStateHelpers/gunsManager.cpp	/^void gunsManager::_switchGuns(Object *prevGun, Object *newGun){$/;"	f	class:gunsManager
_symbols	src/include/backward/backward.hpp	/^	details::handle<char**> _symbols;$/;"	m	class:backward::TraceResolverLinuxImpl
_thread_id	src/include/backward/backward.hpp	/^	size_t _thread_id;$/;"	m	class:backward::StackTraceLinuxImplBase
_updateGunAngle	src/game/gameStateHelpers/gunsManager.cpp	/^void gunsManager::_updateGunAngle(util::Angle &facing){$/;"	f	class:gunsManager
_updateGunFacing	src/game/gameStateHelpers/playerEventHandler.cpp	/^void playerEventHandler::_updateGunFacing(vector2 gameMousePos){$/;"	f	class:playerEventHandler
_val	src/include/backward/backward.hpp	/^	T    _val;$/;"	m	class:backward::details::handle
a	src/include/Box2D/Collision/b2Distance.cpp	/^	float32 a;		\/\/ barycentric coordinate for closest point$/;"	m	struct:b2SimplexVertex	file:
a	src/include/Box2D/Common/b2Math.h	/^	float32 a0, a;		\/\/\/< world angles$/;"	m	struct:b2Sweep
a	src/include/Box2D/Dynamics/b2TimeStep.h	/^	float32 a;$/;"	m	struct:b2Position
a	src/include/SFML/Graphics/Color.hpp	/^    Uint8 a; \/\/\/< Alpha (opacity) component$/;"	m	class:sf::Color
a0	src/include/Box2D/Common/b2Math.h	/^	float32 a0, a;		\/\/\/< world angles$/;"	m	struct:b2Sweep
aabb	src/include/Box2D/Collision/b2DynamicTree.h	/^	b2AABB aabb;$/;"	m	struct:b2TreeNode
aabb	src/include/Box2D/Dynamics/b2Fixture.h	/^	b2AABB aabb;$/;"	m	struct:b2FixtureProxy
abilitySkill	src/game/generators/bulletDataGenerator.h	/^		int abilitySkill;$/;"	m	struct:bulletDataGenerator::genData
aboveAction	src/game/defines/renderingLayers.h	/^	aboveAction = -9,$/;"	e	enum:renderingLayers
accumilator	src/game/ObjProcessors/cameraProcessor.h	/^	float accumilator;$/;"	m	struct:cameraData
action	src/game/defines/renderingLayers.h	/^	action = -10,$/;"	e	enum:renderingLayers
active	src/include/Box2D/Dynamics/b2Body.h	/^	bool active;$/;"	m	struct:b2BodyDef
addBulletCollder	src/game/ObjProcessors/bulletProcessor.h	/^	void addBulletCollder(bulletCollider *collider){$/;"	f	struct:bulletData
addCollision	src/core/ObjProcessors/phyProcessor.cpp	/^void phyData::addCollision(collisionData &collision){$/;"	f	class:phyData
addCollisionType	src/game/ObjProcessors/pickupProcessor.h	/^	void addCollisionType(const Hash *collisionType){$/;"	f	struct:pickupData
addEnemyCollision	src/game/ObjProcessors/bulletProcessor.h	/^	void addEnemyCollision(const Hash *collision){$/;"	f	struct:bulletData
addGun	src/game/gameStateHelpers/gunsManager.cpp	/^void gunsManager::addGun(Object *gun, bool isCurrentGun){$/;"	f	class:gunsManager
addGun	src/game/gameStateHelpers/playerController.cpp	/^void playerController::addGun(Object *gun, bool currentGun){$/;"	f	class:playerController
addIgnoreCollision	src/game/ObjProcessors/bulletProcessor.h	/^	void addIgnoreCollision(const Hash *collision){$/;"	f	struct:bulletData
addObject	src/core/objectMgr.h	/^	void addObject(Object *obj){$/;"	f	class:objectMgr
addObject	tools/beautified.cpp	/^	void addObject ( Object *obj ){$/;"	f	class:objectMgr
addObject	tools/input.cpp	/^	void addObject(Object *obj){$/;"	f	class:objectMgr
addObjectProcessor	src/core/Process/objectMgrProcess.h	/^	void addObjectProcessor(objectProcessor *processor){$/;"	f	class:objectMgrProcess
addObjectProcessor	src/core/objectMgr.h	/^	void addObjectProcessor(objectProcessor *processor){$/;"	f	class:objectMgr
addObjectProcessor	tools/beautified.cpp	/^	void addObjectProcessor ( objectProcessor *processor ){$/;"	f	class:objectMgr
addObjectProcessor	tools/input.cpp	/^	void addObjectProcessor(objectProcessor *processor){$/;"	f	class:objectMgr
addProcess	src/core/Process/processMgr.cpp	/^void processMgr::addProcess(Process *p){$/;"	f	class:processMgr
addProp	src/core/Object.cpp	/^void Object::addProp(const Hash *name, baseProperty *value){$/;"	f	class:Object
addProp	src/core/Settings.h	/^	void addProp(const Hash *propertyName, baseProperty* property){$/;"	f	class:Settings
addRenderNode	src/core/Process/renderProcess.cpp	/^void renderProcess::addRenderNode(renderProcess::baseRenderNode *node){$/;"	f	class:renderProcess
addRenderer	src/core/ObjProcessors/renderProcessor.h	/^	void addRenderer(renderProcess::baseRenderNode *renderer){$/;"	f	class:renderData
addState	src/core/Process/stateProcess.h	/^ 	 void addState(State *state, bool currentState){$/;"	f	class:stateProcess
addr	src/include/backward/backward.hpp	/^		void* addr;$/;"	m	struct:backward::TraceResolverLinuxImpl::find_sym_context
addr	src/include/backward/backward.hpp	/^	void*  addr;$/;"	m	struct:backward::Trace
address	src/include/backward/backward.hpp	/^	bool address;$/;"	m	class:backward::Printer
advance	src/include/SFML/Graphics/Glyph.hpp	/^    int     advance;     \/\/\/< Offset to move horizontically to the next character$/;"	m	class:sf::Glyph
allocator	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2StackAllocator* allocator;$/;"	m	struct:b2ContactSolverDef
allowSleep	src/include/Box2D/Dynamics/b2Body.h	/^	bool allowSleep;$/;"	m	struct:b2BodyDef
alpha0	src/include/Box2D/Common/b2Math.h	/^	float32 alpha0;$/;"	m	struct:b2Sweep
alt	src/include/SFML/Window/Event.hpp	/^        bool          alt;     \/\/\/< Is the Alt key pressed?$/;"	m	struct:sf::Event::KeyEvent
angle	src/game/ObjProcessors/bulletProcessor.h	/^	util::Angle angle;$/;"	m	struct:bulletData
angle	src/include/Box2D/Dynamics/b2Body.h	/^	float32 angle;$/;"	m	struct:b2BodyDef
angleInRad	src/util/mathUtil.h	/^		float angleInRad;$/;"	m	class:util::Angle
angleOffset	src/game/ObjProcessors/offsetProcessor.h	/^	util::Angle angleOffset;$/;"	m	struct:offsetData
angularA	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	float32 angularA;$/;"	m	struct:b2Jacobian
angularB	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	float32 angularB;$/;"	m	struct:b2Jacobian
angularDamping	src/include/Box2D/Dynamics/b2Body.h	/^	float32 angularDamping;$/;"	m	struct:b2BodyDef
angularVelocity	src/include/Box2D/Dynamics/b2Body.h	/^	float32 angularVelocity;$/;"	m	struct:b2BodyDef
antialiasingLevel	src/include/SFML/Window/ContextSettings.hpp	/^    unsigned int antialiasingLevel; \/\/\/< Level of antialiasing$/;"	m	struct:sf::ContextSettings
archetype	src/game/generators/gunDataGenerator.h	/^	Archetype archetype;$/;"	m	class:gunDataGenerator
attachObjectCreator	src/game/factory/objectFactory.cpp	/^void objectFactory::attachObjectCreator(const Hash *objName, objectCreator *creator){$/;"	f	class:objectFactory
awake	src/include/Box2D/Dynamics/b2Body.h	/^	bool awake;$/;"	m	struct:b2BodyDef
axis	src/include/SFML/Window/Event.hpp	/^        Joystick::Axis axis;       \/\/\/< Axis on which the joystick moved$/;"	m	struct:sf::Event::JoystickMoveEvent
b	src/include/Box2D/Common/b2Draw.h	/^	float32 r, g, b;$/;"	m	struct:b2Color
b	src/include/SFML/Graphics/Color.hpp	/^    Uint8 b; \/\/\/< Blue component$/;"	m	class:sf::Color
b2AABB	src/include/Box2D/Collision/b2Collision.h	/^struct b2AABB$/;"	s
b2Abs	src/include/Box2D/Common/b2Math.h	/^inline T b2Abs(T a)$/;"	f
b2Abs	src/include/Box2D/Common/b2Math.h	/^inline b2Mat22 b2Abs(const b2Mat22& A)$/;"	f
b2Abs	src/include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Abs(const b2Vec2& a)$/;"	f
b2Alloc	src/include/Box2D/Common/b2Settings.cpp	/^void* b2Alloc(int32 size)$/;"	f
b2Assert	src/include/Box2D/Common/b2Settings.h	26;"	d
b2Atan2	src/include/Box2D/Common/b2Math.h	61;"	d
b2Block	src/include/Box2D/Common/b2BlockAllocator.cpp	/^struct b2Block$/;"	s	file:
b2BlockAllocator	src/include/Box2D/Common/b2BlockAllocator.cpp	/^b2BlockAllocator::b2BlockAllocator()$/;"	f	class:b2BlockAllocator
b2BlockAllocator	src/include/Box2D/Common/b2BlockAllocator.h	/^class b2BlockAllocator$/;"	c
b2Body	src/include/Box2D/Dynamics/b2Body.cpp	/^b2Body::b2Body(const b2BodyDef* bd, b2World* world)$/;"	f	class:b2Body
b2Body	src/include/Box2D/Dynamics/b2Body.h	/^class b2Body$/;"	c
b2BodyDef	src/include/Box2D/Dynamics/b2Body.h	/^	b2BodyDef()$/;"	f	struct:b2BodyDef
b2BodyDef	src/include/Box2D/Dynamics/b2Body.h	/^struct b2BodyDef$/;"	s
b2BodyType	src/include/Box2D/Dynamics/b2Body.h	/^enum b2BodyType$/;"	g
b2BroadPhase	src/include/Box2D/Collision/b2BroadPhase.cpp	/^b2BroadPhase::b2BroadPhase()$/;"	f	class:b2BroadPhase
b2BroadPhase	src/include/Box2D/Collision/b2BroadPhase.h	/^class b2BroadPhase$/;"	c
b2ChainAndCircleContact	src/include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.cpp	/^b2ChainAndCircleContact::b2ChainAndCircleContact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)$/;"	f	class:b2ChainAndCircleContact
b2ChainAndCircleContact	src/include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.h	/^class b2ChainAndCircleContact : public b2Contact$/;"	c
b2ChainAndPolygonContact	src/include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.cpp	/^b2ChainAndPolygonContact::b2ChainAndPolygonContact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)$/;"	f	class:b2ChainAndPolygonContact
b2ChainAndPolygonContact	src/include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.h	/^class b2ChainAndPolygonContact : public b2Contact$/;"	c
b2ChainShape	src/include/Box2D/Collision/Shapes/b2ChainShape.h	/^class b2ChainShape : public b2Shape$/;"	c
b2ChainShape	src/include/Box2D/Collision/Shapes/b2ChainShape.h	/^inline b2ChainShape::b2ChainShape()$/;"	f	class:b2ChainShape
b2Chunk	src/include/Box2D/Common/b2BlockAllocator.cpp	/^struct b2Chunk$/;"	s	file:
b2CircleContact	src/include/Box2D/Dynamics/Contacts/b2CircleContact.cpp	/^b2CircleContact::b2CircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2CircleContact
b2CircleContact	src/include/Box2D/Dynamics/Contacts/b2CircleContact.h	/^class b2CircleContact : public b2Contact$/;"	c
b2CircleShape	src/include/Box2D/Collision/Shapes/b2CircleShape.h	/^class b2CircleShape : public b2Shape$/;"	c
b2CircleShape	src/include/Box2D/Collision/Shapes/b2CircleShape.h	/^inline b2CircleShape::b2CircleShape()$/;"	f	class:b2CircleShape
b2Clamp	src/include/Box2D/Common/b2Math.h	/^inline T b2Clamp(T a, T low, T high)$/;"	f
b2Clamp	src/include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Clamp(const b2Vec2& a, const b2Vec2& low, const b2Vec2& high)$/;"	f
b2ClipSegmentToLine	src/include/Box2D/Collision/b2Collision.cpp	/^int32 b2ClipSegmentToLine(b2ClipVertex vOut[2], const b2ClipVertex vIn[2],$/;"	f
b2ClipVertex	src/include/Box2D/Collision/b2Collision.h	/^struct b2ClipVertex$/;"	s
b2CollideCircles	src/include/Box2D/Collision/b2CollideCircle.cpp	/^void b2CollideCircles($/;"	f
b2CollideEdgeAndCircle	src/include/Box2D/Collision/b2CollideEdge.cpp	/^void b2CollideEdgeAndCircle(b2Manifold* manifold,$/;"	f
b2CollideEdgeAndPolygon	src/include/Box2D/Collision/b2CollideEdge.cpp	/^void b2CollideEdgeAndPolygon(	b2Manifold* manifold,$/;"	f
b2CollidePolygonAndCircle	src/include/Box2D/Collision/b2CollideCircle.cpp	/^void b2CollidePolygonAndCircle($/;"	f
b2CollidePolygons	src/include/Box2D/Collision/b2CollidePolygon.cpp	/^void b2CollidePolygons(b2Manifold* manifold,$/;"	f
b2Color	src/include/Box2D/Common/b2Draw.h	/^	b2Color() {}$/;"	f	struct:b2Color
b2Color	src/include/Box2D/Common/b2Draw.h	/^	b2Color(float32 r, float32 g, float32 b) : r(r), g(g), b(b) {}$/;"	f	struct:b2Color
b2Color	src/include/Box2D/Common/b2Draw.h	/^struct b2Color$/;"	s
b2Contact	src/include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^b2Contact::b2Contact(b2Fixture* fA, int32 indexA, b2Fixture* fB, int32 indexB)$/;"	f	class:b2Contact
b2Contact	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Contact() : m_fixtureA(NULL), m_fixtureB(NULL) {}$/;"	f	class:b2Contact
b2Contact	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^class b2Contact$/;"	c
b2ContactCreateFcn	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^typedef b2Contact* b2ContactCreateFcn(	b2Fixture* fixtureA, int32 indexA,$/;"	t
b2ContactDestroyFcn	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^typedef void b2ContactDestroyFcn(b2Contact* contact, b2BlockAllocator* allocator);$/;"	t
b2ContactEdge	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^struct b2ContactEdge$/;"	s
b2ContactFeature	src/include/Box2D/Collision/b2Collision.h	/^struct b2ContactFeature$/;"	s
b2ContactFilter	src/include/Box2D/Dynamics/b2WorldCallbacks.h	/^class b2ContactFilter$/;"	c
b2ContactID	src/include/Box2D/Collision/b2Collision.h	/^union b2ContactID$/;"	u
b2ContactImpulse	src/include/Box2D/Dynamics/b2WorldCallbacks.h	/^struct b2ContactImpulse$/;"	s
b2ContactListener	src/include/Box2D/Dynamics/b2WorldCallbacks.h	/^class b2ContactListener$/;"	c
b2ContactManager	src/include/Box2D/Dynamics/b2ContactManager.cpp	/^b2ContactManager::b2ContactManager()$/;"	f	class:b2ContactManager
b2ContactManager	src/include/Box2D/Dynamics/b2ContactManager.h	/^class b2ContactManager$/;"	c
b2ContactPositionConstraint	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^struct b2ContactPositionConstraint$/;"	s	file:
b2ContactRegister	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^struct b2ContactRegister$/;"	s
b2ContactSolver	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^b2ContactSolver::b2ContactSolver(b2ContactSolverDef* def)$/;"	f	class:b2ContactSolver
b2ContactSolver	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^class b2ContactSolver$/;"	c
b2ContactSolverDef	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^struct b2ContactSolverDef$/;"	s
b2ContactVelocityConstraint	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^struct b2ContactVelocityConstraint$/;"	s
b2Cross	src/include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Cross(const b2Vec2& a, float32 s)$/;"	f
b2Cross	src/include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Cross(float32 s, const b2Vec2& a)$/;"	f
b2Cross	src/include/Box2D/Common/b2Math.h	/^inline b2Vec3 b2Cross(const b2Vec3& a, const b2Vec3& b)$/;"	f
b2Cross	src/include/Box2D/Common/b2Math.h	/^inline float32 b2Cross(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2DestructionListener	src/include/Box2D/Dynamics/b2WorldCallbacks.h	/^class b2DestructionListener$/;"	c
b2Distance	src/include/Box2D/Collision/b2Distance.cpp	/^void b2Distance(b2DistanceOutput* output,$/;"	f
b2Distance	src/include/Box2D/Common/b2Math.h	/^inline float32 b2Distance(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2DistanceInput	src/include/Box2D/Collision/b2Distance.h	/^struct b2DistanceInput$/;"	s
b2DistanceJoint	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.cpp	/^b2DistanceJoint::b2DistanceJoint(const b2DistanceJointDef* def)$/;"	f	class:b2DistanceJoint
b2DistanceJoint	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^class b2DistanceJoint : public b2Joint$/;"	c
b2DistanceJointDef	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2DistanceJointDef()$/;"	f	struct:b2DistanceJointDef
b2DistanceJointDef	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^struct b2DistanceJointDef : public b2JointDef$/;"	s
b2DistanceOutput	src/include/Box2D/Collision/b2Distance.h	/^struct b2DistanceOutput$/;"	s
b2DistanceProxy	src/include/Box2D/Collision/b2Distance.h	/^	b2DistanceProxy() : m_vertices(NULL), m_count(0), m_radius(0.0f) {}$/;"	f	struct:b2DistanceProxy
b2DistanceProxy	src/include/Box2D/Collision/b2Distance.h	/^struct b2DistanceProxy$/;"	s
b2DistanceSquared	src/include/Box2D/Common/b2Math.h	/^inline float32 b2DistanceSquared(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2Dot	src/include/Box2D/Common/b2Math.h	/^inline float32 b2Dot(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2Dot	src/include/Box2D/Common/b2Math.h	/^inline float32 b2Dot(const b2Vec3& a, const b2Vec3& b)$/;"	f
b2Draw	src/include/Box2D/Common/b2Draw.cpp	/^b2Draw::b2Draw()$/;"	f	class:b2Draw
b2Draw	src/include/Box2D/Common/b2Draw.h	/^class b2Draw$/;"	c
b2DynamicTree	src/include/Box2D/Collision/b2DynamicTree.cpp	/^b2DynamicTree::b2DynamicTree()$/;"	f	class:b2DynamicTree
b2DynamicTree	src/include/Box2D/Collision/b2DynamicTree.h	/^class b2DynamicTree$/;"	c
b2EPAxis	src/include/Box2D/Collision/b2CollideEdge.cpp	/^struct b2EPAxis$/;"	s	file:
b2EPCollider	src/include/Box2D/Collision/b2CollideEdge.cpp	/^struct b2EPCollider$/;"	s	file:
b2EdgeAndCircleContact	src/include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.cpp	/^b2EdgeAndCircleContact::b2EdgeAndCircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2EdgeAndCircleContact
b2EdgeAndCircleContact	src/include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.h	/^class b2EdgeAndCircleContact : public b2Contact$/;"	c
b2EdgeAndPolygonContact	src/include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.cpp	/^b2EdgeAndPolygonContact::b2EdgeAndPolygonContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2EdgeAndPolygonContact
b2EdgeAndPolygonContact	src/include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.h	/^class b2EdgeAndPolygonContact : public b2Contact$/;"	c
b2EdgeSeparation	src/include/Box2D/Collision/b2CollidePolygon.cpp	/^static float32 b2EdgeSeparation(const b2PolygonShape* poly1, const b2Transform& xf1, int32 edge1,$/;"	f	file:
b2EdgeShape	src/include/Box2D/Collision/Shapes/b2EdgeShape.h	/^class b2EdgeShape : public b2Shape$/;"	c
b2EdgeShape	src/include/Box2D/Collision/Shapes/b2EdgeShape.h	/^inline b2EdgeShape::b2EdgeShape()$/;"	f	class:b2EdgeShape
b2Filter	src/include/Box2D/Dynamics/b2Fixture.h	/^	b2Filter()$/;"	f	struct:b2Filter
b2Filter	src/include/Box2D/Dynamics/b2Fixture.h	/^struct b2Filter$/;"	s
b2FindIncidentEdge	src/include/Box2D/Collision/b2CollidePolygon.cpp	/^static void b2FindIncidentEdge(b2ClipVertex c[2],$/;"	f	file:
b2FindMaxSeparation	src/include/Box2D/Collision/b2CollidePolygon.cpp	/^static float32 b2FindMaxSeparation(int32* edgeIndex,$/;"	f	file:
b2Fixture	src/include/Box2D/Dynamics/b2Fixture.cpp	/^b2Fixture::b2Fixture()$/;"	f	class:b2Fixture
b2Fixture	src/include/Box2D/Dynamics/b2Fixture.h	/^class b2Fixture$/;"	c
b2FixtureDef	src/include/Box2D/Dynamics/b2Fixture.h	/^	b2FixtureDef()$/;"	f	struct:b2FixtureDef
b2FixtureDef	src/include/Box2D/Dynamics/b2Fixture.h	/^struct b2FixtureDef$/;"	s
b2FixtureProxy	src/include/Box2D/Dynamics/b2Fixture.h	/^struct b2FixtureProxy$/;"	s
b2Free	src/include/Box2D/Common/b2Settings.cpp	/^void b2Free(void* mem)$/;"	f
b2FrictionJoint	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.cpp	/^b2FrictionJoint::b2FrictionJoint(const b2FrictionJointDef* def)$/;"	f	class:b2FrictionJoint
b2FrictionJoint	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^class b2FrictionJoint : public b2Joint$/;"	c
b2FrictionJointDef	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2FrictionJointDef()$/;"	f	struct:b2FrictionJointDef
b2FrictionJointDef	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^struct b2FrictionJointDef : public b2JointDef$/;"	s
b2GearJoint	src/include/Box2D/Dynamics/Joints/b2GearJoint.cpp	/^b2GearJoint::b2GearJoint(const b2GearJointDef* def)$/;"	f	class:b2GearJoint
b2GearJoint	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^class b2GearJoint : public b2Joint$/;"	c
b2GearJointDef	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2GearJointDef()$/;"	f	struct:b2GearJointDef
b2GearJointDef	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^struct b2GearJointDef : public b2JointDef$/;"	s
b2GetPointStates	src/include/Box2D/Collision/b2Collision.cpp	/^void b2GetPointStates(b2PointState state1[b2_maxManifoldPoints], b2PointState state2[b2_maxManifoldPoints],$/;"	f
b2GrowableStack	src/include/Box2D/Common/b2GrowableStack.h	/^	b2GrowableStack()$/;"	f	class:b2GrowableStack
b2GrowableStack	src/include/Box2D/Common/b2GrowableStack.h	/^class b2GrowableStack$/;"	c
b2InvSqrt	src/include/Box2D/Common/b2Math.h	/^inline float32 b2InvSqrt(float32 x)$/;"	f
b2IsPowerOfTwo	src/include/Box2D/Common/b2Math.h	/^inline bool b2IsPowerOfTwo(uint32 x)$/;"	f
b2IsValid	src/include/Box2D/Common/b2Math.h	/^inline bool b2IsValid(float32 x)$/;"	f
b2Island	src/include/Box2D/Dynamics/b2Island.cpp	/^b2Island::b2Island($/;"	f	class:b2Island
b2Island	src/include/Box2D/Dynamics/b2Island.h	/^class b2Island$/;"	c
b2Jacobian	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^struct b2Jacobian$/;"	s
b2Joint	src/include/Box2D/Dynamics/Joints/b2Joint.cpp	/^b2Joint::b2Joint(const b2JointDef* def)$/;"	f	class:b2Joint
b2Joint	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^class b2Joint$/;"	c
b2JointDef	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointDef()$/;"	f	struct:b2JointDef
b2JointDef	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^struct b2JointDef$/;"	s
b2JointEdge	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^struct b2JointEdge$/;"	s
b2JointType	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^enum b2JointType$/;"	g
b2LimitState	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^enum b2LimitState$/;"	g
b2Log	src/include/Box2D/Common/b2Settings.cpp	/^void b2Log(const char* string, ...)$/;"	f
b2Manifold	src/include/Box2D/Collision/b2Collision.h	/^struct b2Manifold$/;"	s
b2ManifoldPoint	src/include/Box2D/Collision/b2Collision.h	/^struct b2ManifoldPoint$/;"	s
b2MassData	src/include/Box2D/Collision/Shapes/b2Shape.h	/^struct b2MassData$/;"	s
b2Mat22	src/include/Box2D/Common/b2Math.h	/^	b2Mat22() {}$/;"	f	struct:b2Mat22
b2Mat22	src/include/Box2D/Common/b2Math.h	/^	b2Mat22(const b2Vec2& c1, const b2Vec2& c2)$/;"	f	struct:b2Mat22
b2Mat22	src/include/Box2D/Common/b2Math.h	/^	b2Mat22(float32 a11, float32 a12, float32 a21, float32 a22)$/;"	f	struct:b2Mat22
b2Mat22	src/include/Box2D/Common/b2Math.h	/^struct b2Mat22$/;"	s
b2Mat33	src/include/Box2D/Common/b2Math.h	/^	b2Mat33() {}$/;"	f	struct:b2Mat33
b2Mat33	src/include/Box2D/Common/b2Math.h	/^	b2Mat33(const b2Vec3& c1, const b2Vec3& c2, const b2Vec3& c3)$/;"	f	struct:b2Mat33
b2Mat33	src/include/Box2D/Common/b2Math.h	/^struct b2Mat33$/;"	s
b2Max	src/include/Box2D/Common/b2Math.h	/^inline T b2Max(T a, T b)$/;"	f
b2Max	src/include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Max(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2Min	src/include/Box2D/Common/b2Math.h	/^inline T b2Min(T a, T b)$/;"	f
b2Min	src/include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Min(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2MixFriction	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline float32 b2MixFriction(float32 friction1, float32 friction2)$/;"	f
b2MixRestitution	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^inline float32 b2MixRestitution(float32 restitution1, float32 restitution2)$/;"	f
b2MouseJoint	src/include/Box2D/Dynamics/Joints/b2MouseJoint.cpp	/^b2MouseJoint::b2MouseJoint(const b2MouseJointDef* def)$/;"	f	class:b2MouseJoint
b2MouseJoint	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^class b2MouseJoint : public b2Joint$/;"	c
b2MouseJointDef	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2MouseJointDef()$/;"	f	struct:b2MouseJointDef
b2MouseJointDef	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^struct b2MouseJointDef : public b2JointDef$/;"	s
b2Mul	src/include/Box2D/Common/b2Math.h	/^inline b2Mat22 b2Mul(const b2Mat22& A, const b2Mat22& B)$/;"	f
b2Mul	src/include/Box2D/Common/b2Math.h	/^inline b2Rot b2Mul(const b2Rot& q, const b2Rot& r)$/;"	f
b2Mul	src/include/Box2D/Common/b2Math.h	/^inline b2Transform b2Mul(const b2Transform& A, const b2Transform& B)$/;"	f
b2Mul	src/include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Mul(const b2Mat22& A, const b2Vec2& v)$/;"	f
b2Mul	src/include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Mul(const b2Rot& q, const b2Vec2& v)$/;"	f
b2Mul	src/include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Mul(const b2Transform& T, const b2Vec2& v)$/;"	f
b2Mul	src/include/Box2D/Common/b2Math.h	/^inline b2Vec3 b2Mul(const b2Mat33& A, const b2Vec3& v)$/;"	f
b2Mul22	src/include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2Mul22(const b2Mat33& A, const b2Vec2& v)$/;"	f
b2MulT	src/include/Box2D/Common/b2Math.h	/^inline b2Mat22 b2MulT(const b2Mat22& A, const b2Mat22& B)$/;"	f
b2MulT	src/include/Box2D/Common/b2Math.h	/^inline b2Rot b2MulT(const b2Rot& q, const b2Rot& r)$/;"	f
b2MulT	src/include/Box2D/Common/b2Math.h	/^inline b2Transform b2MulT(const b2Transform& A, const b2Transform& B)$/;"	f
b2MulT	src/include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2MulT(const b2Mat22& A, const b2Vec2& v)$/;"	f
b2MulT	src/include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2MulT(const b2Rot& q, const b2Vec2& v)$/;"	f
b2MulT	src/include/Box2D/Common/b2Math.h	/^inline b2Vec2 b2MulT(const b2Transform& T, const b2Vec2& v)$/;"	f
b2NextPowerOfTwo	src/include/Box2D/Common/b2Math.h	/^inline uint32 b2NextPowerOfTwo(uint32 x)$/;"	f
b2Pair	src/include/Box2D/Collision/b2BroadPhase.h	/^struct b2Pair$/;"	s
b2PairLessThan	src/include/Box2D/Collision/b2BroadPhase.h	/^inline bool b2PairLessThan(const b2Pair& pair1, const b2Pair& pair2)$/;"	f
b2PointState	src/include/Box2D/Collision/b2Collision.h	/^enum b2PointState$/;"	g
b2PolygonAndCircleContact	src/include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.cpp	/^b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2PolygonAndCircleContact
b2PolygonAndCircleContact	src/include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.h	/^class b2PolygonAndCircleContact : public b2Contact$/;"	c
b2PolygonContact	src/include/Box2D/Dynamics/Contacts/b2PolygonContact.cpp	/^b2PolygonContact::b2PolygonContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2PolygonContact
b2PolygonContact	src/include/Box2D/Dynamics/Contacts/b2PolygonContact.h	/^class b2PolygonContact : public b2Contact$/;"	c
b2PolygonShape	src/include/Box2D/Collision/Shapes/b2PolygonShape.h	/^class b2PolygonShape : public b2Shape$/;"	c
b2PolygonShape	src/include/Box2D/Collision/Shapes/b2PolygonShape.h	/^inline b2PolygonShape::b2PolygonShape()$/;"	f	class:b2PolygonShape
b2Position	src/include/Box2D/Dynamics/b2TimeStep.h	/^struct b2Position$/;"	s
b2PositionSolverManifold	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^struct b2PositionSolverManifold$/;"	s	file:
b2PrismaticJoint	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.cpp	/^b2PrismaticJoint::b2PrismaticJoint(const b2PrismaticJointDef* def)$/;"	f	class:b2PrismaticJoint
b2PrismaticJoint	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^class b2PrismaticJoint : public b2Joint$/;"	c
b2PrismaticJointDef	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2PrismaticJointDef()$/;"	f	struct:b2PrismaticJointDef
b2PrismaticJointDef	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^struct b2PrismaticJointDef : public b2JointDef$/;"	s
b2Profile	src/include/Box2D/Dynamics/b2TimeStep.h	/^struct b2Profile$/;"	s
b2PulleyJoint	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.cpp	/^b2PulleyJoint::b2PulleyJoint(const b2PulleyJointDef* def)$/;"	f	class:b2PulleyJoint
b2PulleyJoint	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^class b2PulleyJoint : public b2Joint$/;"	c
b2PulleyJointDef	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2PulleyJointDef()$/;"	f	struct:b2PulleyJointDef
b2PulleyJointDef	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^struct b2PulleyJointDef : public b2JointDef$/;"	s
b2QueryCallback	src/include/Box2D/Dynamics/b2WorldCallbacks.h	/^class b2QueryCallback$/;"	c
b2RayCastCallback	src/include/Box2D/Dynamics/b2WorldCallbacks.h	/^class b2RayCastCallback$/;"	c
b2RayCastInput	src/include/Box2D/Collision/b2Collision.h	/^struct b2RayCastInput$/;"	s
b2RayCastOutput	src/include/Box2D/Collision/b2Collision.h	/^struct b2RayCastOutput$/;"	s
b2ReferenceFace	src/include/Box2D/Collision/b2CollideEdge.cpp	/^struct b2ReferenceFace$/;"	s	file:
b2RevoluteJoint	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.cpp	/^b2RevoluteJoint::b2RevoluteJoint(const b2RevoluteJointDef* def)$/;"	f	class:b2RevoluteJoint
b2RevoluteJoint	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^class b2RevoluteJoint : public b2Joint$/;"	c
b2RevoluteJointDef	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2RevoluteJointDef()$/;"	f	struct:b2RevoluteJointDef
b2RevoluteJointDef	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^struct b2RevoluteJointDef : public b2JointDef$/;"	s
b2Rope	src/include/Box2D/Rope/b2Rope.cpp	/^b2Rope::b2Rope()$/;"	f	class:b2Rope
b2Rope	src/include/Box2D/Rope/b2Rope.h	/^class b2Rope$/;"	c
b2RopeDef	src/include/Box2D/Rope/b2Rope.h	/^	b2RopeDef()$/;"	f	struct:b2RopeDef
b2RopeDef	src/include/Box2D/Rope/b2Rope.h	/^struct b2RopeDef$/;"	s
b2RopeJoint	src/include/Box2D/Dynamics/Joints/b2RopeJoint.cpp	/^b2RopeJoint::b2RopeJoint(const b2RopeJointDef* def)$/;"	f	class:b2RopeJoint
b2RopeJoint	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^class b2RopeJoint : public b2Joint$/;"	c
b2RopeJointDef	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2RopeJointDef()$/;"	f	struct:b2RopeJointDef
b2RopeJointDef	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^struct b2RopeJointDef : public b2JointDef$/;"	s
b2Rot	src/include/Box2D/Common/b2Math.h	/^	b2Rot() {}$/;"	f	struct:b2Rot
b2Rot	src/include/Box2D/Common/b2Math.h	/^	explicit b2Rot(float32 angle)$/;"	f	struct:b2Rot
b2Rot	src/include/Box2D/Common/b2Math.h	/^struct b2Rot$/;"	s
b2SeparationFunction	src/include/Box2D/Collision/b2TimeOfImpact.cpp	/^struct b2SeparationFunction$/;"	s	file:
b2Shape	src/include/Box2D/Collision/Shapes/b2Shape.h	/^class b2Shape$/;"	c
b2Simplex	src/include/Box2D/Collision/b2Distance.cpp	/^struct b2Simplex$/;"	s	file:
b2SimplexCache	src/include/Box2D/Collision/b2Distance.h	/^struct b2SimplexCache$/;"	s
b2SimplexVertex	src/include/Box2D/Collision/b2Distance.cpp	/^struct b2SimplexVertex$/;"	s	file:
b2SolverData	src/include/Box2D/Dynamics/b2TimeStep.h	/^struct b2SolverData$/;"	s
b2Sqrt	src/include/Box2D/Common/b2Math.h	60;"	d
b2StackAllocator	src/include/Box2D/Common/b2StackAllocator.cpp	/^b2StackAllocator::b2StackAllocator()$/;"	f	class:b2StackAllocator
b2StackAllocator	src/include/Box2D/Common/b2StackAllocator.h	/^class b2StackAllocator$/;"	c
b2StackEntry	src/include/Box2D/Common/b2StackAllocator.h	/^struct b2StackEntry$/;"	s
b2Swap	src/include/Box2D/Common/b2Math.h	/^template<typename T> inline void b2Swap(T& a, T& b)$/;"	f
b2Sweep	src/include/Box2D/Common/b2Math.h	/^struct b2Sweep$/;"	s
b2TOIInput	src/include/Box2D/Collision/b2TimeOfImpact.h	/^struct b2TOIInput$/;"	s
b2TOIOutput	src/include/Box2D/Collision/b2TimeOfImpact.h	/^struct b2TOIOutput$/;"	s
b2TempPolygon	src/include/Box2D/Collision/b2CollideEdge.cpp	/^struct b2TempPolygon$/;"	s	file:
b2TestOverlap	src/include/Box2D/Collision/b2Collision.cpp	/^bool b2TestOverlap(	const b2Shape* shapeA, int32 indexA,$/;"	f
b2TestOverlap	src/include/Box2D/Collision/b2Collision.h	/^inline bool b2TestOverlap(const b2AABB& a, const b2AABB& b)$/;"	f
b2TimeOfImpact	src/include/Box2D/Collision/b2TimeOfImpact.cpp	/^void b2TimeOfImpact(b2TOIOutput* output, const b2TOIInput* input)$/;"	f
b2TimeStep	src/include/Box2D/Dynamics/b2TimeStep.h	/^struct b2TimeStep$/;"	s
b2Timer	src/include/Box2D/Common/b2Timer.cpp	/^b2Timer::b2Timer()$/;"	f	class:b2Timer
b2Timer	src/include/Box2D/Common/b2Timer.h	/^class b2Timer$/;"	c
b2Transform	src/include/Box2D/Common/b2Math.h	/^	b2Transform() {}$/;"	f	struct:b2Transform
b2Transform	src/include/Box2D/Common/b2Math.h	/^	b2Transform(const b2Vec2& position, const b2Rot& rotation) : p(position), q(rotation) {}$/;"	f	struct:b2Transform
b2Transform	src/include/Box2D/Common/b2Math.h	/^struct b2Transform$/;"	s
b2TreeNode	src/include/Box2D/Collision/b2DynamicTree.h	/^struct b2TreeNode$/;"	s
b2Vec2	src/include/Box2D/Common/b2Math.h	/^	b2Vec2() {}$/;"	f	struct:b2Vec2
b2Vec2	src/include/Box2D/Common/b2Math.h	/^	b2Vec2(float32 x, float32 y) : x(x), y(y) {}$/;"	f	struct:b2Vec2
b2Vec2	src/include/Box2D/Common/b2Math.h	/^struct b2Vec2$/;"	s
b2Vec3	src/include/Box2D/Common/b2Math.h	/^	b2Vec3() {}$/;"	f	struct:b2Vec3
b2Vec3	src/include/Box2D/Common/b2Math.h	/^	b2Vec3(float32 x, float32 y, float32 z) : x(x), y(y), z(z) {}$/;"	f	struct:b2Vec3
b2Vec3	src/include/Box2D/Common/b2Math.h	/^struct b2Vec3$/;"	s
b2Velocity	src/include/Box2D/Dynamics/b2TimeStep.h	/^struct b2Velocity$/;"	s
b2VelocityConstraintPoint	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^struct b2VelocityConstraintPoint$/;"	s
b2Version	src/include/Box2D/Common/b2Settings.h	/^struct b2Version$/;"	s
b2WeldJoint	src/include/Box2D/Dynamics/Joints/b2WeldJoint.cpp	/^b2WeldJoint::b2WeldJoint(const b2WeldJointDef* def)$/;"	f	class:b2WeldJoint
b2WeldJoint	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^class b2WeldJoint : public b2Joint$/;"	c
b2WeldJointDef	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2WeldJointDef()$/;"	f	struct:b2WeldJointDef
b2WeldJointDef	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^struct b2WeldJointDef : public b2JointDef$/;"	s
b2WheelJoint	src/include/Box2D/Dynamics/Joints/b2WheelJoint.cpp	/^b2WheelJoint::b2WheelJoint(const b2WheelJointDef* def)$/;"	f	class:b2WheelJoint
b2WheelJoint	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^class b2WheelJoint : public b2Joint$/;"	c
b2WheelJointDef	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2WheelJointDef()$/;"	f	struct:b2WheelJointDef
b2WheelJointDef	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^struct b2WheelJointDef : public b2JointDef$/;"	s
b2World	src/include/Box2D/Dynamics/b2World.cpp	/^b2World::b2World(const b2Vec2& gravity)$/;"	f	class:b2World
b2World	src/include/Box2D/Dynamics/b2World.h	/^class b2World$/;"	c
b2WorldManifold	src/include/Box2D/Collision/b2Collision.h	/^struct b2WorldManifold$/;"	s
b2WorldQueryWrapper	src/include/Box2D/Dynamics/b2World.cpp	/^struct b2WorldQueryWrapper$/;"	s	file:
b2WorldRayCastWrapper	src/include/Box2D/Dynamics/b2World.cpp	/^struct b2WorldRayCastWrapper$/;"	s	file:
b2_aabbExtension	src/include/Box2D/Common/b2Settings.h	58;"	d
b2_aabbMultiplier	src/include/Box2D/Common/b2Settings.h	63;"	d
b2_addState	src/include/Box2D/Collision/b2Collision.h	/^	b2_addState,		\/\/\/< point was added in the update$/;"	e	enum:b2PointState
b2_angularSleepTolerance	src/include/Box2D/Common/b2Settings.h	125;"	d
b2_angularSlop	src/include/Box2D/Common/b2Settings.h	71;"	d
b2_baumgarte	src/include/Box2D/Common/b2Settings.h	112;"	d
b2_blockSizes	src/include/Box2D/Common/b2BlockAllocator.h	/^const int32 b2_blockSizes = 14;$/;"	v
b2_chunkArrayIncrement	src/include/Box2D/Common/b2BlockAllocator.h	/^const int32 b2_chunkArrayIncrement = 128;$/;"	v
b2_chunkSize	src/include/Box2D/Common/b2BlockAllocator.h	/^const int32 b2_chunkSize = 16 * 1024;$/;"	v
b2_defaultFilter	src/include/Box2D/Dynamics/b2ContactManager.cpp	/^b2ContactFilter b2_defaultFilter;$/;"	v
b2_defaultListener	src/include/Box2D/Dynamics/b2ContactManager.cpp	/^b2ContactListener b2_defaultListener;$/;"	v
b2_dynamicBody	src/include/Box2D/Dynamics/b2Body.h	/^	b2_dynamicBody$/;"	e	enum:b2BodyType
b2_epsilon	src/include/Box2D/Common/b2Settings.h	38;"	d
b2_gjkCalls	src/include/Box2D/Collision/b2Distance.cpp	/^int32 b2_gjkCalls, b2_gjkIters, b2_gjkMaxIters;$/;"	v
b2_gjkIters	src/include/Box2D/Collision/b2Distance.cpp	/^int32 b2_gjkCalls, b2_gjkIters, b2_gjkMaxIters;$/;"	v
b2_gjkMaxIters	src/include/Box2D/Collision/b2Distance.cpp	/^int32 b2_gjkCalls, b2_gjkIters, b2_gjkMaxIters;$/;"	v
b2_kinematicBody	src/include/Box2D/Dynamics/b2Body.h	/^	b2_kinematicBody,$/;"	e	enum:b2BodyType
b2_linearSleepTolerance	src/include/Box2D/Common/b2Settings.h	122;"	d
b2_linearSlop	src/include/Box2D/Common/b2Settings.h	67;"	d
b2_maxAngularCorrection	src/include/Box2D/Common/b2Settings.h	97;"	d
b2_maxBlockSize	src/include/Box2D/Common/b2BlockAllocator.h	/^const int32 b2_maxBlockSize = 640;$/;"	v
b2_maxFloat	src/include/Box2D/Common/b2Settings.h	37;"	d
b2_maxLinearCorrection	src/include/Box2D/Common/b2Settings.h	93;"	d
b2_maxManifoldPoints	src/include/Box2D/Common/b2Settings.h	49;"	d
b2_maxPolygonVertices	src/include/Box2D/Common/b2Settings.h	53;"	d
b2_maxRotation	src/include/Box2D/Common/b2Settings.h	106;"	d
b2_maxRotationSquared	src/include/Box2D/Common/b2Settings.h	107;"	d
b2_maxStackEntries	src/include/Box2D/Common/b2StackAllocator.h	/^const int32 b2_maxStackEntries = 32;$/;"	v
b2_maxSubSteps	src/include/Box2D/Common/b2Settings.h	79;"	d
b2_maxTOIContacts	src/include/Box2D/Common/b2Settings.h	85;"	d
b2_maxTranslation	src/include/Box2D/Common/b2Settings.h	101;"	d
b2_maxTranslationSquared	src/include/Box2D/Common/b2Settings.h	102;"	d
b2_minPulleyLength	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^const float32 b2_minPulleyLength = 2.0f;$/;"	v
b2_nullFeature	src/include/Box2D/Collision/b2Collision.h	/^const uint8 b2_nullFeature = UCHAR_MAX;$/;"	v
b2_nullNode	src/include/Box2D/Collision/b2DynamicTree.h	25;"	d
b2_nullState	src/include/Box2D/Collision/b2Collision.h	/^	b2_nullState,		\/\/\/< point does not exist$/;"	e	enum:b2PointState
b2_persistState	src/include/Box2D/Collision/b2Collision.h	/^	b2_persistState,	\/\/\/< point persisted across the update$/;"	e	enum:b2PointState
b2_pi	src/include/Box2D/Common/b2Settings.h	39;"	d
b2_polygonRadius	src/include/Box2D/Common/b2Settings.h	76;"	d
b2_removeState	src/include/Box2D/Collision/b2Collision.h	/^	b2_removeState		\/\/\/< point was removed in the update$/;"	e	enum:b2PointState
b2_stackSize	src/include/Box2D/Common/b2StackAllocator.h	/^const int32 b2_stackSize = 100 * 1024;	\/\/ 100k$/;"	v
b2_staticBody	src/include/Box2D/Dynamics/b2Body.h	/^	b2_staticBody = 0,$/;"	e	enum:b2BodyType
b2_timeToSleep	src/include/Box2D/Common/b2Settings.h	119;"	d
b2_toiBaugarte	src/include/Box2D/Common/b2Settings.h	113;"	d
b2_toiMaxRootIters	src/include/Box2D/Collision/b2TimeOfImpact.cpp	/^int32 b2_toiRootIters, b2_toiMaxRootIters;$/;"	v
b2_toiRootIters	src/include/Box2D/Collision/b2TimeOfImpact.cpp	/^int32 b2_toiRootIters, b2_toiMaxRootIters;$/;"	v
b2_velocityThreshold	src/include/Box2D/Common/b2Settings.h	89;"	d
b2_version	src/include/Box2D/Common/b2Settings.cpp	/^b2Version b2_version = {2, 2, 1};$/;"	v
backtrace	src/include/backward/backward.hpp	/^	_Unwind_Reason_Code backtrace(_Unwind_Context* ctx) {$/;"	f	class:backward::details::Unwinder
backtrace_inliners	src/include/backward/backward.hpp	/^	ResolvedTrace::source_locs_t backtrace_inliners(bfd_fileobject& fobj,$/;"	f	class:backward::TraceResolverLinuxImpl
backtrace_trampoline	src/include/backward/backward.hpp	/^	static _Unwind_Reason_Code backtrace_trampoline($/;"	f	class:backward::details::Unwinder
backward	src/include/backward/backward.cpp	/^namespace backward {$/;"	n	file:
backward	src/include/backward/backward.hpp	/^	namespace backward {$/;"	n
backward	src/include/backward/backward.hpp	/^namespace backward {$/;"	n
bar	tools/beautified.cpp	/^struct foo_t bar = {$/;"	v	typeref:struct:foo_t
bar	tools/input.cpp	/^struct foo_t bar =$/;"	v	typeref:struct:foo_t
bars	tools/beautified.cpp	/^struct foo_t bars[] = {$/;"	v	typeref:struct:foo_t
bars	tools/input.cpp	/^struct foo_t bars[] =$/;"	v	typeref:struct:foo_t
baseLog	src/util/logObject.cpp	/^util::baseLog::baseLog(){};$/;"	f	class:util::baseLog
baseLog	src/util/logObject.h	/^	class baseLog{$/;"	c	namespace:util
baseLog	tools/beautified.cpp	/^class baseLog$/;"	c	namespace:util	file:
baseLog	tools/input.cpp	/^	class baseLog{$/;"	c	namespace:util	file:
baseProperty	src/core/Property.h	/^	baseProperty(){};$/;"	f	class:baseProperty
baseProperty	src/core/Property.h	/^class baseProperty{$/;"	c
baseRenderNode	src/core/Process/renderProcess.h	/^		baseRenderNode(){$/;"	f	class:renderProcess::baseRenderNode
baseRenderNode	src/core/Process/renderProcess.h	/^	class baseRenderNode{$/;"	c	class:renderProcess
base_addr	src/include/backward/backward.hpp	/^		bfd_vma      base_addr;$/;"	m	struct:backward::TraceResolverLinuxImpl::bfd_fileobject
base_addr	src/include/backward/backward.hpp	/^		void* base_addr;$/;"	m	struct:backward::TraceResolverLinuxImpl::find_sym_context
begin	src/include/backward/backward.hpp	/^	void** begin() {$/;"	f	class:backward::StackTraceLinuxImplHolder
beginVel	src/game/ObjProcessors/bulletProcessor.h	/^	vector2 beginVel;$/;"	m	struct:bulletData
belowAction	src/game/defines/renderingLayers.h	/^	belowAction = -11,$/;"	e	enum:renderingLayers
bfd_fileobject	src/include/backward/backward.hpp	/^	struct bfd_fileobject {$/;"	s	class:backward::TraceResolverLinuxImpl
bfd_handle_t	src/include/backward/backward.hpp	/^				> bfd_handle_t;$/;"	t	class:backward::TraceResolverLinuxImpl
bfd_symtab_t	src/include/backward/backward.hpp	/^	typedef details::handle<asymbol**> bfd_symtab_t;$/;"	t	class:backward::TraceResolverLinuxImpl
bitsPerPixel	src/include/SFML/Window/VideoMode.hpp	/^    unsigned int bitsPerPixel; \/\/\/< Video mode pixel depth, in bits per pixels$/;"	m	class:sf::VideoMode
blade	src/game/factory/bladeCreator.h	/^	bladeData blade;$/;"	m	class:bladeCreator
bladeCreator	src/game/factory/bladeCreator.h	/^	bladeCreator(viewProcess *_viewProc) : viewProc(_viewProc), parent(NULL), radius(0){}$/;"	f	class:bladeCreator
bladeCreator	src/game/factory/bladeCreator.h	/^class bladeCreator : public objectCreator{$/;"	c
bladeData	src/game/ObjProcessors/bladeProcessor.h	/^struct bladeData{};$/;"	s
bladeProcessor	src/game/ObjProcessors/bladeProcessor.h	/^class bladeProcessor: public objectProcessor{$/;"	c
blendMode	src/include/SFML/Graphics/RenderStates.hpp	/^    BlendMode      blendMode; \/\/\/< Blending mode$/;"	m	class:sf::RenderStates
blockSize	src/include/Box2D/Common/b2BlockAllocator.cpp	/^	int32 blockSize;$/;"	m	struct:b2Chunk	file:
blocks	src/include/Box2D/Common/b2BlockAllocator.cpp	/^	b2Block* blocks;$/;"	m	struct:b2Chunk	file:
body	src/core/ObjProcessors/phyProcessor.h	/^	b2Body *body;$/;"	m	struct:phyData
bodyA	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Body* bodyA;$/;"	m	struct:b2JointDef
bodyB	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Body* bodyB;$/;"	m	struct:b2JointDef
bodyDef	src/core/ObjProcessors/phyProcessor.h	/^	b2BodyDef bodyDef;$/;"	m	struct:phyData
bottomLeft	src/game/factory/terrainCreator.h	/^	vector2 bottomLeft, topRight, numChunks;$/;"	m	class:terrainCreator
bounceCollider	src/game/bulletColliders/bounceCollider.h	/^	bounceCollider(unsigned int numBounces){$/;"	f	class:bounceCollider
bounceCollider	src/game/bulletColliders/bounceCollider.h	/^class bounceCollider : public bulletCollider{$/;"	c
boundaryCreator	src/game/factory/boundaryCreator.h	/^	boundaryCreator(viewProcess *_viewProc) : viewProc(_viewProc){}$/;"	f	class:boundaryCreator
boundaryCreator	src/game/factory/boundaryCreator.h	/^class boundaryCreator : public objectCreator{$/;"	c
bounds	src/include/SFML/Graphics/Glyph.hpp	/^    IntRect bounds;      \/\/\/< Bounding rectangle of the glyph, in coordinates relative to the baseline$/;"	m	class:sf::Glyph
boxHalfH	src/game/ObjProcessors/cameraProcessor.h	/^	float boxHalfH;$/;"	m	struct:cameraData
boxHalfW	src/game/ObjProcessors/cameraProcessor.h	/^	float boxHalfW;$/;"	m	struct:cameraData
broadPhase	src/include/Box2D/Dynamics/b2World.cpp	/^	const b2BroadPhase* broadPhase;$/;"	m	struct:b2WorldQueryWrapper	file:
broadPhase	src/include/Box2D/Dynamics/b2World.cpp	/^	const b2BroadPhase* broadPhase;$/;"	m	struct:b2WorldRayCastWrapper	file:
broadphase	src/include/Box2D/Dynamics/b2TimeStep.h	/^	float32 broadphase;$/;"	m	struct:b2Profile
buletVel	src/game/ObjProcessors/gunProcessor.h	/^	float buletVel;$/;"	m	struct:gunData
bullet	src/game/ObjProcessors/gunProcessor.h	/^	bulletData bullet;$/;"	m	struct:gunData
bullet	src/game/factory/bulletCreator.h	/^	bulletData bullet;$/;"	m	class:bulletCreator
bullet	src/include/Box2D/Dynamics/b2Body.h	/^	bool bullet;$/;"	m	struct:b2BodyDef
bulletCollider	src/game/ObjProcessors/bulletProcessor.h	/^	bulletCollider(){};$/;"	f	class:bulletCollider
bulletCollider	src/game/ObjProcessors/bulletProcessor.h	/^class bulletCollider{$/;"	c
bulletCreator	src/game/factory/bulletCreator.h	/^	bulletCreator(viewProcess *_viewProc) : viewProc(_viewProc), radius(0){}$/;"	f	class:bulletCreator
bulletCreator	src/game/factory/bulletCreator.h	/^class bulletCreator : public objectCreator{$/;"	c
bulletData	src/game/ObjProcessors/bulletProcessor.h	/^	bulletData(){$/;"	f	struct:bulletData
bulletData	src/game/ObjProcessors/bulletProcessor.h	/^struct bulletData{$/;"	s
bulletDataGenerator	src/game/generators/bulletDataGenerator.cpp	/^bulletDataGenerator::bulletDataGenerator(genData data,$/;"	f	class:bulletDataGenerator
bulletDataGenerator	src/game/generators/bulletDataGenerator.h	/^class bulletDataGenerator : public Generator{$/;"	c
bulletPos	src/game/ObjProcessors/gunProcessor.h	/^	vector2 bulletPos;$/;"	m	struct:gunData
bulletProcessor	src/game/ObjProcessors/bulletProcessor.h	/^	bulletProcessor(processMgr &processManager, Settings &settings, eventMgr &_eventManager){$/;"	f	class:bulletProcessor
bulletProcessor	src/game/ObjProcessors/bulletProcessor.h	/^class bulletProcessor : public objectProcessor{$/;"	c
bulletRadius	src/game/ObjProcessors/gunProcessor.h	/^	float bulletRadius;$/;"	m	struct:gunData
button	src/include/SFML/Window/Event.hpp	/^        Mouse::Button button; \/\/\/< Code of the button that has been pressed$/;"	m	struct:sf::Event::MouseButtonEvent
button	src/include/SFML/Window/Event.hpp	/^        unsigned int button;     \/\/\/< Index of the button that has been pressed (in range [0 .. Joystick::ButtonCount - 1])$/;"	m	struct:sf::Event::JoystickButtonEvent
c	src/include/Box2D/Common/b2Math.h	/^	b2Vec2 c0, c;		\/\/\/< center world positions$/;"	m	struct:b2Sweep
c	src/include/Box2D/Common/b2Math.h	/^	float32 s, c;$/;"	m	struct:b2Rot
c	src/include/Box2D/Dynamics/b2TimeStep.h	/^	b2Vec2 c;$/;"	m	struct:b2Position
c0	src/include/Box2D/Common/b2Math.h	/^	b2Vec2 c0, c;		\/\/\/< center world positions$/;"	m	struct:b2Sweep
cObjMapIt	src/core/objectProcessor.h	/^typedef objectMap::const_iterator cObjMapIt;$/;"	t
callback	src/include/Box2D/Dynamics/b2World.cpp	/^	b2QueryCallback* callback;$/;"	m	struct:b2WorldQueryWrapper	file:
callback	src/include/Box2D/Dynamics/b2World.cpp	/^	b2RayCastCallback* callback;$/;"	m	struct:b2WorldRayCastWrapper	file:
callback	src/include/backward/backward.hpp	/^		callback(StackTraceImpl& self): self(self) {}$/;"	f	struct:backward::StackTraceImpl::callback
callback	src/include/backward/backward.hpp	/^		callback(StackTraceWithLocalsImpl& self): self(self) {}$/;"	f	struct:backward::StackTraceWithLocalsImpl::callback
callback	src/include/backward/backward.hpp	/^	struct callback {$/;"	s	class:backward::StackTraceImpl
callback	src/include/backward/backward.hpp	/^	struct callback {$/;"	s	class:backward::StackTraceWithLocalsImpl
camData	src/game/factory/playerCreator.h	/^	cameraData camData;$/;"	m	class:playerCreator
cameraCenter	src/game/ObjProcessors/cameraProcessor.h	/^	vector2 cameraCenter;$/;"	m	struct:cameraData
cameraData	src/game/ObjProcessors/cameraProcessor.h	/^	cameraData(){};$/;"	f	struct:cameraData
cameraData	src/game/ObjProcessors/cameraProcessor.h	/^struct cameraData{$/;"	s
cameraProcessor	src/game/ObjProcessors/cameraProcessor.h	/^	cameraProcessor(processMgr &processManager, Settings &settings, eventMgr &_eventManager) {$/;"	f	class:cameraProcessor
cameraProcessor	src/game/ObjProcessors/cameraProcessor.h	/^class cameraProcessor : public objectProcessor{$/;"	c
cast	src/core/vector.h	/^	T cast() const{$/;"	f	class:vector2
cast	src/core/vector.h	/^	static vector2 cast(const T &otherVec){$/;"	f	class:vector2
cast	tools/beautified.cpp	/^	T cast () const {$/;"	f	class:vector2
cast	tools/beautified.cpp	/^	static vector2 cast ( const T &otherVec ){$/;"	f	class:vector2
cast	tools/input.cpp	/^	T cast() const{$/;"	f	class:vector2
cast	tools/input.cpp	/^	static vector2 cast(const T &otherVec){$/;"	f	class:vector2
categoryBits	src/include/Box2D/Dynamics/b2Fixture.h	/^	uint16 categoryBits;$/;"	m	struct:b2Filter
center	src/include/Box2D/Collision/Shapes/b2Shape.h	/^	b2Vec2 center;$/;"	m	struct:b2MassData
centered	src/core/ObjProcessors/renderProcessor.h	/^	bool centered;$/;"	m	class:renderData
cf	src/include/Box2D/Collision/b2Collision.h	/^	b2ContactFeature cf;$/;"	m	union:b2ContactID
changingState	src/core/State/State.h	/^	 bool changingState;$/;"	m	class:State
child1	src/include/Box2D/Collision/b2DynamicTree.h	/^	int32 child1;$/;"	m	struct:b2TreeNode
child2	src/include/Box2D/Collision/b2DynamicTree.h	/^	int32 child2;$/;"	m	struct:b2TreeNode
childIndex	src/include/Box2D/Dynamics/b2Fixture.h	/^	int32 childIndex;$/;"	m	struct:b2FixtureProxy
chunkType	src/game/terrainGen/terrainGenerator.h	/^	enum chunkType{$/;"	g	class:terrainGenerator
chunks	src/game/terrainGen/terrainGenerator.h	/^	std::vector<Chunk> chunks;$/;"	m	class:terrainGenerator
clamp	src/core/vector.h	/^	vector2 clamp(vector2 minVec, vector2 maxVec){$/;"	f	class:vector2
clamp	tools/beautified.cpp	/^	vector2 clamp ( vector2 minVec, vector2 maxVec ){$/;"	f	class:vector2
clamp	tools/input.cpp	/^	vector2 clamp(vector2 minVec, vector2 maxVec){$/;"	f	class:vector2
clearColor	src/core/Process/windowProcess.h	/^	sf::Color clearColor;$/;"	m	class:windowProcess
clipOnCooldown	src/game/ObjProcessors/gunProcessor.h	/^	bool clipOnCooldown;$/;"	m	struct:gunData
code	src/include/SFML/Window/Event.hpp	/^        Keyboard::Key code;    \/\/\/< Code of the key that has been pressed$/;"	m	struct:sf::Event::KeyEvent
col	src/include/backward/backward.hpp	/^		unsigned    col;$/;"	m	struct:backward::ResolvedTrace::SourceLoc
collide	src/include/Box2D/Dynamics/b2TimeStep.h	/^	float32 collide;$/;"	m	struct:b2Profile
collideConnected	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	bool collideConnected;$/;"	m	struct:b2JointDef
colliders	src/game/ObjProcessors/bulletProcessor.h	/^	std::vector<bulletCollider *> colliders;$/;"	m	struct:bulletData
collisionData	src/core/ObjProcessors/objContactListener.h	/^struct collisionData{$/;"	s
collisionIterations	src/core/Process/worldProcess.h	/^	float velIterations, collisionIterations;$/;"	m	class:worldProcess
collisionType	src/core/ObjProcessors/phyProcessor.h	/^	const Hash* collisionType;$/;"	m	struct:phyData
collisions	src/core/ObjProcessors/phyProcessor.h	/^	 std::vector<collisionData> collisions;$/;"	m	struct:phyData
color	src/include/SFML/Graphics/Vertex.hpp	/^    Color     color;     \/\/\/< Color of the vertex$/;"	m	class:sf::Vertex
color	src/include/backward/backward.hpp	/^	bool color;$/;"	m	class:backward::Printer
colors	tools/beautified.cpp	/^color_t colors[] =$/;"	v
colors	tools/input.cpp	/^color_t colors[] =$/;"	v
command	runner.py	/^command = xTermCmd + doubleQuote + sys.argv[1] + ";" + echoCmd + ";" + waitCmd + doubleQuote$/;"	v
commit	git.py	/^def commit():$/;"	f
contact	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Contact* contact;		\/\/\/< the contact$/;"	m	struct:b2ContactEdge
contactIndex	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	int32 contactIndex;$/;"	m	struct:b2ContactVelocityConstraint
contactListener	src/core/ObjProcessors/phyProcessor.h	/^	objContactListener contactListener;$/;"	m	class:phyProcessor
contacts	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Contact** contacts;$/;"	m	struct:b2ContactSolverDef
control	src/include/SFML/Window/Event.hpp	/^        bool          control; \/\/\/< Is the Control key pressed?$/;"	m	struct:sf::Event::KeyEvent
cos	src/util/mathUtil.h	/^		float cos(){$/;"	f	class:util::Angle
count	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	int32 count;$/;"	m	struct:b2TempPolygon	file:
count	src/include/Box2D/Collision/b2Distance.h	/^	uint16 count;$/;"	m	struct:b2SimplexCache
count	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	int32 count;$/;"	m	struct:b2ContactSolverDef
count	src/include/Box2D/Dynamics/b2WorldCallbacks.h	/^	int32 count;$/;"	m	struct:b2ContactImpulse
count	src/include/Box2D/Rope/b2Rope.h	/^	int32 count;$/;"	m	struct:b2RopeDef
createCircleShape	src/core/renderUtil.cpp	/^sf::Shape *renderUtil::createCircleShape(b2CircleShape *b2Shape, viewProcess *view){$/;"	f	class:renderUtil
createFcn	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2ContactCreateFcn* createFcn;$/;"	m	struct:b2ContactRegister
createObject	src/game/factory/bladeCreator.h	/^	Object *createObject(vector2 _pos) const{$/;"	f	class:bladeCreator
createObject	src/game/factory/boundaryCreator.h	/^	Object *createObject(vector2 playerInitPos) const{$/;"	f	class:boundaryCreator
createObject	src/game/factory/bulletCreator.h	/^	Object *createObject(vector2 _pos) const{$/;"	f	class:bulletCreator
createObject	src/game/factory/dummyCreator.h	/^	Object *createObject(vector2 dummyPos) const{$/;"	f	class:dummyCreator
createObject	src/game/factory/gunCreator.h	/^	Object *createObject(vector2 gunPos) const{$/;"	f	class:gunCreator
createObject	src/game/factory/pickupCreator.h	/^	Object *createObject(vector2 _pos) const{$/;"	f	class:pickupCreator
createObject	src/game/factory/playerCreator.h	/^	Object *createObject(vector2 playerInitPos) const{$/;"	f	class:playerCreator
createObject	src/game/factory/terrainCreator.cpp	/^Object *terrainCreator::createObject(){$/;"	f	class:terrainCreator
createPlayer	src/game/gameStateHelpers/playerController.cpp	/^void playerController::createPlayer(vector2 levelDim, vector2 initPos, playerCreator *creator,$/;"	f	class:playerController
createPolyShape	src/core/renderUtil.cpp	/^sf::Shape *renderUtil::createPolyShape(b2PolygonShape *b2Shape, viewProcess *view){$/;"	f	class:renderUtil
createRectangleShape	src/core/renderUtil.cpp	/^sf::Shape *renderUtil::createRectangleShape(vector2 dim){$/;"	f	class:renderUtil
createSaveLoader	src/game/States/gameSegmentLoader.h	/^	stateSaveLoader *createSaveLoader(){$/;"	f	class:gameSegmentLoader
createSaveLoader	src/game/States/gameState.h	/^	stateSaveLoader *createSaveLoader(){$/;"	f	class:gameState
createSaveLoader	src/game/States/mainMenuState.h	/^	stateSaveLoader *createSaveLoader(){$/;"	f	class:mainMenuState
createSaveLoader	tools/beautified.cpp	/^	stateSaveLoader *createSaveLoader (){$/;"	f	class:gameState
createSaveLoader	tools/input.cpp	/^	stateSaveLoader *createSaveLoader(){$/;"	f	class:gameState
createShape	src/core/renderUtil.cpp	/^sf::Shape *renderUtil::createShape(b2Shape *shape, viewProcess *view){$/;"	f	class:renderUtil
creator	src/game/ObjProcessors/gunProcessor.h	/^	bulletCreator *creator;$/;"	m	struct:gunData
creators	src/game/factory/objectFactory.h	/^	std::map<const Hash *, objectCreator* >creators; 	$/;"	m	class:objectFactory
cstrings_eq	src/include/backward/backward.hpp	/^	bool cstrings_eq(const char* a, const char* b) {$/;"	f	class:backward::TraceResolverLinuxImpl
current	src/include/backward/backward.hpp	/^	typedef backtrace current;$/;"	t	namespace:backward::stacktrace_tag
current	src/include/backward/backward.hpp	/^	typedef backtrace_symbol current;$/;"	t	namespace:backward::trace_resolver_tag
current	src/include/backward/backward.hpp	/^	typedef libbfd current;$/;"	t	namespace:backward::trace_resolver_tag
current	src/include/backward/backward.hpp	/^	typedef libdw current;$/;"	t	namespace:backward::trace_resolver_tag
current	src/include/backward/backward.hpp	/^	typedef unwind current;$/;"	t	namespace:backward::stacktrace_tag
currentClipCooldown	src/game/ObjProcessors/gunProcessor.h	/^	int currentClipCooldown;$/;"	m	struct:gunData
currentClipSize	src/game/ObjProcessors/gunProcessor.h	/^	int currentClipSize;$/;"	m	struct:gunData
currentGun	src/game/gameStateHelpers/gunsManager.h	/^	Object *currentGun;$/;"	m	class:gunsManager
currentGunData	src/game/gameStateHelpers/gunsManager.h	/^	gunData *currentGunData;$/;"	m	class:gunsManager
currentGunIndex	src/game/gameStateHelpers/gunsManager.h	/^	int currentGunIndex;$/;"	m	class:gunsManager
currentHP	src/game/ObjProcessors/healthProcessor.h	/^	int currentHP;$/;"	m	struct:healthData
currentState	src/core/Process/stateProcess.h	/^	State *currentState;$/;"	m	class:stateProcess
current_tag	src/include/backward/backward.hpp	/^	typedef linux_tag current_tag;$/;"	t	namespace:backward::system_tag
current_tag	src/include/backward/backward.hpp	/^	typedef unknown_tag current_tag;$/;"	t	namespace:backward::system_tag
currrentShotCooldown	src/game/ObjProcessors/gunProcessor.h	/^	int currrentShotCooldown;$/;"	m	struct:gunData
damage	src/game/bulletColliders/damageCollider.h	/^	float damage;$/;"	m	class:damageCollider
damage	src/game/generators/bulletDataGenerator.h	/^		damageProperty	damage;$/;"	m	struct:bulletDataGenerator::genData
damageCollider	src/game/bulletColliders/damageCollider.h	/^	damageCollider(float damage){$/;"	f	class:damageCollider
damageCollider	src/game/bulletColliders/damageCollider.h	/^class damageCollider : public bulletCollider{$/;"	c
damageProperty	src/game/generators/bulletDataGenerator.h	/^	enum damageProperty{$/;"	g	class:bulletDataGenerator
damping	src/include/Box2D/Rope/b2Rope.h	/^	float32 damping;$/;"	m	struct:b2RopeDef
dampingRatio	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2DistanceJointDef
dampingRatio	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2MouseJointDef
dampingRatio	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2WeldJointDef
dampingRatio	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2WheelJointDef
data	src/core/Messaging/eventMgr.h	/^		baseProperty *data; $/;"	m	struct:eventMgr::Event
data	src/game/generators/bulletDataGenerator.h	/^	genData data;$/;"	m	class:bulletDataGenerator
data	src/include/Box2D/Common/b2StackAllocator.h	/^	char* data;$/;"	m	struct:b2StackEntry
dead	src/core/Object.h	/^	bool dead;$/;"	m	class:Object
debugStr	src/util/mathUtil.h	/^		std::string debugStr(){$/;"	f	class:util::Angle
deep_first_search_by_pc	src/include/backward/backward.hpp	/^		static bool deep_first_search_by_pc(Dwarf_Die* parent_die,$/;"	f	class:backward::TraceResolverLinuxImpl
defaultGravity	src/game/generators/bulletDataGenerator.h	/^		defaultGravity,$/;"	e	enum:bulletDataGenerator::gravityProperty
defaultView	src/core/Process/viewProcess.h	/^	sf::View defaultView;$/;"	m	class:viewProcess
default_delete	src/include/backward/backward.hpp	/^struct default_delete {$/;"	s	namespace:backward::details
deleter	src/include/backward/backward.hpp	/^struct deleter {$/;"	s	namespace:backward::details
delta	src/include/SFML/Window/Event.hpp	/^        int delta; \/\/\/< Number of ticks the wheel has moved (positive is up, negative is down)$/;"	m	struct:sf::Event::MouseWheelEvent
demangle	src/include/backward/backward.hpp	/^	std::string demangle(const char* funcname) {$/;"	f	class:backward::TraceResolverLinuxImplBase
density	src/include/Box2D/Dynamics/b2Fixture.h	/^	float32 density;$/;"	m	struct:b2FixtureDef
depthBits	src/include/SFML/Window/ContextSettings.hpp	/^    unsigned int depthBits;         \/\/\/< Bits of the depth buffer$/;"	m	struct:sf::ContextSettings
destroyFcn	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2ContactDestroyFcn* destroyFcn;$/;"	m	struct:b2ContactRegister
details	src/include/backward/backward.hpp	/^	namespace details {$/;"	n	namespace:backward
details	src/include/backward/backward.hpp	/^namespace details {$/;"	n	namespace:backward
die_call_file	src/include/backward/backward.hpp	/^	static const char* die_call_file(Dwarf_Die *die) {$/;"	f	class:backward::TraceResolverLinuxImpl
die_has_pc	src/include/backward/backward.hpp	/^	static bool die_has_pc(Dwarf_Die* die, Dwarf_Addr pc) {$/;"	f	class:backward::TraceResolverLinuxImpl
distance	src/include/Box2D/Collision/b2Distance.h	/^	float32 distance;$/;"	m	struct:b2DistanceOutput
doneLoading	src/core/State/stateSaveLoader.h	/^	bool doneLoading;$/;"	m	class:stateSaveLoader
doneLoading	src/game/States/gameSegmentLoader.h	/^	bool doneLoading;$/;"	m	class:gameSegmentLoader
doneSaving	src/core/State/stateSaveLoader.h	/^	bool doneSaving;$/;"	m	class:stateSaveLoader
dotProduct	src/core/vector.h	/^	float dotProduct(vector2 other){$/;"	f	class:vector2
dotProduct	tools/beautified.cpp	/^	float dotProduct ( vector2 other ){$/;"	f	class:vector2
dotProduct	tools/input.cpp	/^	float dotProduct(vector2 other){$/;"	f	class:vector2
doubleQuote	runner.py	/^doubleQuote = ' " '$/;"	v
down	src/game/gameStateHelpers/playerEventHandler.h	/^	sf::Keyboard::Key down;$/;"	m	struct:playerHandlerData
drawDisabled	src/core/Process/renderProcess.h	/^		bool drawDisabled;$/;"	m	class:renderProcess::baseRenderNode
drawable	src/core/Process/renderProcess.h	/^		T *drawable;$/;"	m	class:renderProcess::renderNode
dt	src/include/Box2D/Dynamics/b2TimeStep.h	/^	float32 dt;			\/\/ time step$/;"	m	struct:b2TimeStep
dtAccumilator	src/core/Process/worldProcess.h	/^	float dtAccumilator;$/;"	m	class:worldProcess
dtRatio	src/include/Box2D/Dynamics/b2TimeStep.h	/^	float32 dtRatio;	\/\/ dt * inv_dt0$/;"	m	struct:b2TimeStep
dummyCreator	src/game/factory/dummyCreator.h	/^	dummyCreator(viewProcess *_viewProc) : viewProc(_viewProc), radius(0){}$/;"	f	class:dummyCreator
dummyCreator	src/game/factory/dummyCreator.h	/^class dummyCreator : public objectCreator{$/;"	c
dummyProp	src/core/Property.h	/^	dummyProp(){};$/;"	f	class:dummyProp
dummyProp	src/core/Property.h	/^class dummyProp : public baseProperty{$/;"	c
dummyStateSaveLoader	src/core/State/dummyStateSaveLoader.h	/^	dummyStateSaveLoader() : stateSaveLoader(NULL){};$/;"	f	class:dummyStateSaveLoader
dummyStateSaveLoader	src/core/State/dummyStateSaveLoader.h	/^class dummyStateSaveLoader : public stateSaveLoader{$/;"	c
dwfl_handle_t	src/include/backward/backward.hpp	/^		dwfl_handle_t;$/;"	t	class:backward::TraceResolverLinuxImpl
dynamic_symtab	src/include/backward/backward.hpp	/^		bfd_symtab_t dynamic_symtab;$/;"	m	struct:backward::TraceResolverLinuxImpl::bfd_fileobject
e_aabbBit	src/include/Box2D/Common/b2Draw.h	/^		e_aabbBit				= 0x0004,	\/\/\/< draw axis aligned bounding boxes$/;"	e	enum:b2Draw::__anon13
e_activeFlag	src/include/Box2D/Dynamics/b2Body.h	/^		e_activeFlag		= 0x0020,$/;"	e	enum:b2Body::__anon9
e_atLowerLimit	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_atLowerLimit,$/;"	e	enum:b2LimitState
e_atUpperLimit	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_atUpperLimit,$/;"	e	enum:b2LimitState
e_autoSleepFlag	src/include/Box2D/Dynamics/b2Body.h	/^		e_autoSleepFlag		= 0x0004,$/;"	e	enum:b2Body::__anon9
e_awakeFlag	src/include/Box2D/Dynamics/b2Body.h	/^		e_awakeFlag			= 0x0002,$/;"	e	enum:b2Body::__anon9
e_bulletFlag	src/include/Box2D/Dynamics/b2Body.h	/^		e_bulletFlag		= 0x0008,$/;"	e	enum:b2Body::__anon9
e_bulletHitFlag	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^		e_bulletHitFlag		= 0x0010,$/;"	e	enum:b2Contact::__anon10
e_centerOfMassBit	src/include/Box2D/Common/b2Draw.h	/^		e_centerOfMassBit		= 0x0010	\/\/\/< draw center of mass frame$/;"	e	enum:b2Draw::__anon13
e_chain	src/include/Box2D/Collision/Shapes/b2Shape.h	/^		e_chain = 3,$/;"	e	enum:b2Shape::Type
e_circle	src/include/Box2D/Collision/Shapes/b2Shape.h	/^		e_circle = 0,$/;"	e	enum:b2Shape::Type
e_circles	src/include/Box2D/Collision/b2Collision.h	/^		e_circles,$/;"	e	enum:b2Manifold::Type
e_clearForces	src/include/Box2D/Dynamics/b2World.h	/^		e_clearForces	= 0x0004$/;"	e	enum:b2World::__anon8
e_concave	src/include/Box2D/Collision/b2CollideEdge.cpp	/^		e_concave,$/;"	e	enum:b2EPCollider::VertexType	file:
e_convex	src/include/Box2D/Collision/b2CollideEdge.cpp	/^		e_convex$/;"	e	enum:b2EPCollider::VertexType	file:
e_distanceJoint	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_distanceJoint,$/;"	e	enum:b2JointType
e_edge	src/include/Box2D/Collision/Shapes/b2Shape.h	/^		e_edge = 1,$/;"	e	enum:b2Shape::Type
e_edgeA	src/include/Box2D/Collision/b2CollideEdge.cpp	/^		e_edgeA,$/;"	e	enum:b2EPAxis::Type	file:
e_edgeB	src/include/Box2D/Collision/b2CollideEdge.cpp	/^		e_edgeB$/;"	e	enum:b2EPAxis::Type	file:
e_enabledFlag	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^		e_enabledFlag		= 0x0004,$/;"	e	enum:b2Contact::__anon10
e_equalLimits	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_equalLimits$/;"	e	enum:b2LimitState
e_face	src/include/Box2D/Collision/b2Collision.h	/^		e_face = 1$/;"	e	enum:b2ContactFeature::Type
e_faceA	src/include/Box2D/Collision/b2Collision.h	/^		e_faceA,$/;"	e	enum:b2Manifold::Type
e_faceA	src/include/Box2D/Collision/b2TimeOfImpact.cpp	/^		e_faceA,$/;"	e	enum:b2SeparationFunction::Type	file:
e_faceB	src/include/Box2D/Collision/b2Collision.h	/^		e_faceB$/;"	e	enum:b2Manifold::Type
e_faceB	src/include/Box2D/Collision/b2TimeOfImpact.cpp	/^		e_faceB$/;"	e	enum:b2SeparationFunction::Type	file:
e_failed	src/include/Box2D/Collision/b2TimeOfImpact.h	/^		e_failed,$/;"	e	enum:b2TOIOutput::State
e_filterFlag	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^		e_filterFlag		= 0x0008,$/;"	e	enum:b2Contact::__anon10
e_fixedRotationFlag	src/include/Box2D/Dynamics/b2Body.h	/^		e_fixedRotationFlag	= 0x0010,$/;"	e	enum:b2Body::__anon9
e_frictionJoint	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_frictionJoint,$/;"	e	enum:b2JointType
e_gearJoint	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_gearJoint,$/;"	e	enum:b2JointType
e_inactiveLimit	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_inactiveLimit,$/;"	e	enum:b2LimitState
e_islandFlag	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^		e_islandFlag		= 0x0001,$/;"	e	enum:b2Contact::__anon10
e_islandFlag	src/include/Box2D/Dynamics/b2Body.h	/^		e_islandFlag		= 0x0001,$/;"	e	enum:b2Body::__anon9
e_isolated	src/include/Box2D/Collision/b2CollideEdge.cpp	/^		e_isolated,$/;"	e	enum:b2EPCollider::VertexType	file:
e_jointBit	src/include/Box2D/Common/b2Draw.h	/^		e_jointBit				= 0x0002,	\/\/\/< draw joint connections$/;"	e	enum:b2Draw::__anon13
e_locked	src/include/Box2D/Dynamics/b2World.h	/^		e_locked		= 0x0002,$/;"	e	enum:b2World::__anon8
e_mouseJoint	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_mouseJoint,$/;"	e	enum:b2JointType
e_newFixture	src/include/Box2D/Dynamics/b2World.h	/^		e_newFixture	= 0x0001,$/;"	e	enum:b2World::__anon8
e_nullProxy	src/include/Box2D/Collision/b2BroadPhase.h	/^		e_nullProxy = -1$/;"	e	enum:b2BroadPhase::__anon12
e_overlapped	src/include/Box2D/Collision/b2TimeOfImpact.h	/^		e_overlapped,$/;"	e	enum:b2TOIOutput::State
e_pairBit	src/include/Box2D/Common/b2Draw.h	/^		e_pairBit				= 0x0008,	\/\/\/< draw broad-phase pairs$/;"	e	enum:b2Draw::__anon13
e_points	src/include/Box2D/Collision/b2TimeOfImpact.cpp	/^		e_points,$/;"	e	enum:b2SeparationFunction::Type	file:
e_polygon	src/include/Box2D/Collision/Shapes/b2Shape.h	/^		e_polygon = 2,$/;"	e	enum:b2Shape::Type
e_prismaticJoint	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_prismaticJoint,$/;"	e	enum:b2JointType
e_pulleyJoint	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_pulleyJoint,$/;"	e	enum:b2JointType
e_revoluteJoint	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_revoluteJoint,$/;"	e	enum:b2JointType
e_ropeJoint	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_ropeJoint$/;"	e	enum:b2JointType
e_separated	src/include/Box2D/Collision/b2TimeOfImpact.h	/^		e_separated$/;"	e	enum:b2TOIOutput::State
e_shapeBit	src/include/Box2D/Common/b2Draw.h	/^		e_shapeBit				= 0x0001,	\/\/\/< draw shapes$/;"	e	enum:b2Draw::__anon13
e_toiFlag	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^		e_toiFlag			= 0x0020$/;"	e	enum:b2Contact::__anon10
e_toiFlag	src/include/Box2D/Dynamics/b2Body.h	/^		e_toiFlag			= 0x0040$/;"	e	enum:b2Body::__anon9
e_touching	src/include/Box2D/Collision/b2TimeOfImpact.h	/^		e_touching,$/;"	e	enum:b2TOIOutput::State
e_touchingFlag	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^		e_touchingFlag		= 0x0002,$/;"	e	enum:b2Contact::__anon10
e_typeCount	src/include/Box2D/Collision/Shapes/b2Shape.h	/^		e_typeCount = 4$/;"	e	enum:b2Shape::Type
e_unknown	src/include/Box2D/Collision/b2CollideEdge.cpp	/^		e_unknown,$/;"	e	enum:b2EPAxis::Type	file:
e_unknown	src/include/Box2D/Collision/b2TimeOfImpact.h	/^		e_unknown,$/;"	e	enum:b2TOIOutput::State
e_unknownJoint	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_unknownJoint,$/;"	e	enum:b2JointType
e_vertex	src/include/Box2D/Collision/b2Collision.h	/^		e_vertex = 0,$/;"	e	enum:b2ContactFeature::Type
e_weldJoint	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^    e_weldJoint,$/;"	e	enum:b2JointType
e_wheelJoint	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	e_wheelJoint,$/;"	e	enum:b2JointType
echoCmd	runner.py	/^echoCmd = "echo " + singleQuote + echoMsg + singleQuote$/;"	v
echoMsg	runner.py	/^echoMsg = 'press any key to continue..'$/;"	v
empty	src/game/terrainGen/terrainGenerator.h	/^		empty = 0,$/;"	e	enum:terrainGenerator::chunkType
enableLimit	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	bool enableLimit;$/;"	m	struct:b2PrismaticJointDef
enableLimit	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	bool enableLimit;$/;"	m	struct:b2RevoluteJointDef
enableMotor	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	bool enableMotor;$/;"	m	struct:b2PrismaticJointDef
enableMotor	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	bool enableMotor;$/;"	m	struct:b2RevoluteJointDef
enableMotor	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	bool enableMotor;$/;"	m	struct:b2WheelJointDef
enabled	src/game/ObjProcessors/cameraProcessor.h	/^	bool enabled;$/;"	m	struct:cameraData
enabled	src/util/logObject.h	/^		bool enabled;$/;"	m	class:util::scopedLog
enabled	tools/beautified.cpp	/^	bool enabled;$/;"	m	class:util::scopedLog	file:
enabled	tools/input.cpp	/^		bool enabled;$/;"	m	class:util::scopedLog	file:
enemyCollision	src/game/factory/bladeCreator.h	/^	const Hash *enemyCollision;$/;"	m	class:bladeCreator
enemyCollision	src/game/factory/bulletCreator.h	/^	const Hash *enemyCollision;$/;"	m	class:bulletCreator
enemyCollision	src/game/factory/gunCreator.h	/^	const Hash *enemyCollision;$/;"	m	class:gunCreator
enemyCollisions	src/game/ObjProcessors/bulletProcessor.h	/^	std::unordered_set<const Hash*> enemyCollisions;$/;"	m	struct:bulletData
errorLog	src/util/logObject.h	/^	static util::msgLog<logLevelError> errorLog;$/;"	m	namespace:util
errorLog	tools/beautified.cpp	/^	static util::msgLog< logLevelError > errorLog;$/;"	m	namespace:util	file:
errorLog	tools/input.cpp	/^	static util::msgLog<logLevelError> errorLog;$/;"	m	namespace:util	file:
event	src/core/Process/eventProcess.h	/^ 	sf::Event event;$/;"	m	class:eventProcess
eventData	src/game/ObjProcessors/pickupProcessor.h	/^	baseProperty *eventData;$/;"	m	struct:pickupData
eventManager	src/core/Process/eventProcess.h	/^ 	eventMgr &eventManager;$/;"	m	class:eventProcess
eventManager	src/core/Process/stateProcess.h	/^	eventMgr &eventManager;$/;"	m	class:stateProcess
eventManager	src/core/Process/viewProcess.h	/^	eventMgr &eventManager;$/;"	m	class:viewProcess
eventManager	src/core/State/State.h	/^	eventMgr *eventManager;$/;"	m	class:State
eventManager	src/game/ObjProcessors/pickupProcessor.h	/^	eventMgr &eventManager;$/;"	m	class:pickupProcessor
eventManager	src/game/gameStateHelpers/playerEventHandler.h	/^	eventMgr *eventManager;$/;"	m	class:playerEventHandler
eventMgr	src/core/Messaging/eventMgr.cpp	/^eventMgr::eventMgr(){$/;"	f	class:eventMgr
eventMgr	src/core/Messaging/eventMgr.h	/^class eventMgr{$/;"	c
eventProcess	src/core/Process/eventProcess.h	/^ 	eventProcess(processMgr &processManager, Settings &settings, eventMgr &_eventManager) :$/;"	f	class:eventProcess
eventProcess	src/core/Process/eventProcess.h	/^ class eventProcess : public Process{$/;"	c
events	src/core/Messaging/eventMgr.h	/^	std::queue <Event>events;$/;"	m	class:eventMgr
ex	src/include/Box2D/Common/b2Math.h	/^	b2Vec2 ex, ey;$/;"	m	struct:b2Mat22
ex	src/include/Box2D/Common/b2Math.h	/^	b2Vec3 ex, ey, ez;$/;"	m	struct:b2Mat33
ey	src/include/Box2D/Common/b2Math.h	/^	b2Vec2 ex, ey;$/;"	m	struct:b2Mat22
ey	src/include/Box2D/Common/b2Math.h	/^	b2Vec3 ex, ey, ez;$/;"	m	struct:b2Mat33
ez	src/include/Box2D/Common/b2Math.h	/^	b2Vec3 ex, ey, ez;$/;"	m	struct:b2Mat33
fProp	src/core/Property.h	/^typedef Prop<float> fProp;$/;"	t
facing	src/game/ObjProcessors/gunProcessor.h	/^	util::Angle facing;$/;"	m	struct:gunData
filename	src/include/backward/backward.hpp	/^		const char* filename;$/;"	m	struct:backward::TraceResolverLinuxImpl::find_sym_result
filename	src/include/backward/backward.hpp	/^		std::string filename;$/;"	m	struct:backward::ResolvedTrace::SourceLoc
filled	src/game/terrainGen/terrainGenerator.h	/^		filled = 1,$/;"	e	enum:terrainGenerator::chunkType
filter	src/include/Box2D/Dynamics/b2Fixture.h	/^	b2Filter filter;$/;"	m	struct:b2FixtureDef
find_fundie_by_pc	src/include/backward/backward.hpp	/^	static Dwarf_Die* find_fundie_by_pc(Dwarf_Die* parent_die, Dwarf_Addr pc,$/;"	f	class:backward::TraceResolverLinuxImpl
find_in_section	src/include/backward/backward.hpp	/^	void find_in_section(bfd_vma addr, bfd_vma base_addr,$/;"	f	class:backward::TraceResolverLinuxImpl
find_in_section_trampoline	src/include/backward/backward.hpp	/^	static void find_in_section_trampoline(bfd*, asection* section,$/;"	f	class:backward::TraceResolverLinuxImpl
find_sym_context	src/include/backward/backward.hpp	/^	struct find_sym_context {$/;"	s	class:backward::TraceResolverLinuxImpl
find_sym_result	src/include/backward/backward.hpp	/^	struct find_sym_result {$/;"	s	class:backward::TraceResolverLinuxImpl
find_symbol_details	src/include/backward/backward.hpp	/^	find_sym_result find_symbol_details(bfd_fileobject& fobj, void* addr,$/;"	f	class:backward::TraceResolverLinuxImpl
fireGun	src/game/gameStateHelpers/playerEventHandler.h	/^	sf::Keyboard::Key fireGun;$/;"	m	struct:playerHandlerData
firing	src/game/ObjProcessors/gunProcessor.h	/^	bool firing;$/;"	m	struct:gunData
firing	src/game/gameStateHelpers/playerEventHandler.h	/^	bool firing;$/;"	m	class:playerEventHandler
fixedRotation	src/include/Box2D/Dynamics/b2Body.h	/^	bool fixedRotation;$/;"	m	struct:b2BodyDef
fixture	src/include/Box2D/Dynamics/b2Fixture.h	/^	b2Fixture* fixture;$/;"	m	struct:b2FixtureProxy
fixtureDef	src/core/ObjProcessors/phyProcessor.h	/^	std::vector<b2FixtureDef> fixtureDef;$/;"	m	struct:phyData
fixtures	src/core/ObjProcessors/phyProcessor.h	/^	std::vector<b2Fixture*>fixtures;$/;"	m	struct:phyData
float32	src/include/Box2D/Common/b2Settings.h	/^typedef float float32;$/;"	t
float64	src/include/Box2D/Common/b2Settings.h	/^typedef double float64;$/;"	t
fobj	src/include/backward/backward.hpp	/^		bfd_fileobject* fobj;$/;"	m	struct:backward::TraceResolverLinuxImpl::find_sym_context
fobj_bfd_map_t	src/include/backward/backward.hpp	/^		fobj_bfd_map_t;$/;"	t	class:backward::TraceResolverLinuxImpl
foo	tools/beautified.cpp	/^int foo ( int bar ){$/;"	f
foo	tools/beautified.cpp	/^void foo ( void ){$/;"	f
foo	tools/input.cpp	/^int foo(int bar)$/;"	f
foo	tools/input.cpp	/^void foo(void)$/;"	f
foobar	tools/beautified.cpp	623;"	d	file:
foobar	tools/input.cpp	509;"	d	file:
found	src/include/backward/backward.hpp	/^		bool found;$/;"	m	struct:backward::TraceResolverLinuxImpl::find_sym_result
fraction	src/include/Box2D/Collision/b2Collision.h	/^	float32 fraction;$/;"	m	struct:b2RayCastOutput
frequencyHz	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2DistanceJointDef
frequencyHz	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2MouseJointDef
frequencyHz	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2WeldJointDef
frequencyHz	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2WheelJointDef
friction	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 friction;$/;"	m	struct:b2ContactVelocityConstraint
friction	src/include/Box2D/Dynamics/b2Fixture.h	/^	float32 friction;$/;"	m	struct:b2FixtureDef
funcname	src/include/backward/backward.hpp	/^		const char* funcname;$/;"	m	struct:backward::TraceResolverLinuxImpl::find_sym_result
function	src/include/backward/backward.hpp	/^		std::string function;$/;"	m	struct:backward::ResolvedTrace::SourceLoc
g	src/include/Box2D/Common/b2Draw.h	/^	float32 r, g, b;$/;"	m	struct:b2Color
g	src/include/SFML/Graphics/Color.hpp	/^    Uint8 g; \/\/\/< Green component$/;"	m	class:sf::Color
ga	git.py	/^def ga(files):$/;"	f
game2RenderScale	src/core/Process/viewProcess.h	/^	float game2RenderScale;$/;"	m	class:viewProcess
game2ViewCoord	src/core/Process/viewProcess.cpp	/^vector2 viewProcess::game2ViewCoord(vector2 gameCoord){$/;"	f	class:viewProcess
gameSegment	src/game/level/gameSegment.h	/^class gameSegment{$/;"	c
gameSegmentLoader	src/game/States/gameSegmentLoader.h	/^	gameSegmentLoader() : State("gameSegmentLoader"){}$/;"	f	class:gameSegmentLoader
gameSegmentLoader	src/game/States/gameSegmentLoader.h	/^class gameSegmentLoader : public State{$/;"	c
gameState	src/game/States/gameState.h	/^	gameState() : State("gameState"){};$/;"	f	class:gameState
gameState	src/game/States/gameState.h	/^class gameState : public State{$/;"	c
gameState	tools/beautified.cpp	/^	gameState () : State( "gameState" ){}$/;"	f	class:gameState
gameState	tools/beautified.cpp	/^class gameState : public State$/;"	c	file:
gameState	tools/input.cpp	/^	gameState() : State("gameState"){};$/;"	f	class:gameState
gameState	tools/input.cpp	/^class gameState : public State{$/;"	c	file:
genData	src/game/generators/bulletDataGenerator.h	/^		genData(){$/;"	f	struct:bulletDataGenerator::genData
genData	src/game/generators/bulletDataGenerator.h	/^	struct genData{$/;"	s	class:bulletDataGenerator
generator	src/game/generators/Generator.h	/^	std::mt19937 generator;$/;"	m	class:Generator
get	src/include/backward/backward.hpp	/^	T get() {$/;"	f	class:backward::details::handle
getBaseProp	src/core/Object.cpp	/^baseProperty *Object::getBaseProp(const Hash *name){$/;"	f	class:Object
getCenter	src/core/Process/viewProcess.cpp	/^vector2 viewProcess::getCenter(){$/;"	f	class:viewProcess
getCollidedObjectCollision	src/core/ObjProcessors/phyProcessor.cpp	/^const Hash *collisionData::getCollidedObjectCollision(){$/;"	f	class:collisionData
getCreator	src/game/factory/objectFactory.h	/^	T *getCreator(const Hash* objName){$/;"	f	class:objectFactory
getGame2RenderScale	src/core/Process/viewProcess.cpp	/^float viewProcess::getGame2RenderScale(){$/;"	f	class:viewProcess
getHP	src/game/ObjProcessors/healthProcessor.h	/^	int getHP(){$/;"	f	struct:healthData
getHash	src/core/Hash.cpp	/^const Hash* Hash::getHash(const char* str){$/;"	f	class:Hash
getHash	src/core/Hash.cpp	/^const Hash* Hash::getHash(std::string &str){$/;"	f	class:Hash
getHashedName	src/core/State/State.h	/^	const Hash* getHashedName(){$/;"	f	class:State
getMaxAccumilation	src/core/Process/worldProcess.h	/^	float getMaxAccumilation(){$/;"	f	class:worldProcess
getName	src/core/Object.cpp	/^std::string Object::getName(){$/;"	f	class:Object
getNameHash	src/core/Process/Process.h	/^	const Hash *getNameHash(){$/;"	f	class:Process
getNextStateName	src/core/State/State.h	/^	std::string getNextStateName(){$/;"	f	class:State
getObjByName	src/core/objectMgr.h	/^	Object *getObjByName(std::string name){$/;"	f	class:objectMgr
getObjByName	tools/beautified.cpp	/^	Object *getObjByName ( std::string name ){$/;"	f	class:objectMgr
getObjByName	tools/input.cpp	/^	Object *getObjByName(std::string name){$/;"	f	class:objectMgr
getObjectMgr	src/core/Process/objectMgrProcess.h	/^	objectMgr *getObjectMgr(){$/;"	f	class:objectMgrProcess
getPlayer	src/game/gameStateHelpers/playerController.cpp	/^Object *playerController::getPlayer(){$/;"	f	class:playerController
getPrimitive	src/core/Object.h	/^	Type* getPrimitive(const Hash *name){$/;"	f	class:Object
getPrimitive	src/core/Object.h	/^	Type* getPrimitive(const char *name){$/;"	f	class:Object
getPrimitive	src/core/Settings.h	/^	T* getPrimitive(const Hash *propertyName){$/;"	f	class:Settings
getProcess	src/core/Process/processMgr.h	/^	processType *getProcess(const Hash* processName){$/;"	f	class:processMgr
getProp	src/core/Object.h	/^	T* getProp(const char *name){$/;"	f	class:Object
getPropPtr	src/core/Object.h	/^	Prop<Type> *getPropPtr(const Hash *name){$/;"	f	class:Object
getRender2GameScale	src/core/Process/viewProcess.cpp	/^float viewProcess::getRender2GameScale(){$/;"	f	class:viewProcess
getStepSize	src/core/Process/worldProcess.h	/^	float getStepSize(){$/;"	f	class:worldProcess
getType	src/game/terrainGen/terrainGenerator.h	/^		const chunkType getType(){$/;"	f	struct:terrainGenerator::Chunk
getVal	src/core/Hash.cpp	/^uint64_t Hash::getVal() const{$/;"	f	class:Hash
getVal	src/core/Property.h	/^	T *getVal(){$/;"	f	class:Prop
getVal	src/core/Property.h	/^	T* getVal() const{$/;"	f	class:managedProp
getVal	src/core/Property.h	/^	T* getVal() const{$/;"	f	class:ptrProp
getWindow	src/core/Process/windowProcess.h	/^	sf::RenderWindow *getWindow(){$/;"	f	class:windowProcess
getWorld	src/core/Process/worldProcess.h	/^	 b2World *getWorld(){$/;"	f	class:worldProcess
get_coalesced_snippet	src/include/backward/backward.hpp	/^	lines_t get_coalesced_snippet(const std::string& filename,$/;"	f	class:backward::SnippetFactory
get_combined_snippet	src/include/backward/backward.hpp	/^	lines_t get_combined_snippet($/;"	f	class:backward::SnippetFactory
get_lines	src/include/backward/backward.hpp	/^	lines_t get_lines(unsigned line_start, unsigned line_count) {$/;"	f	class:backward::SourceFile
get_lines	src/include/backward/backward.hpp	/^	lines_t& get_lines(unsigned line_start, unsigned line_count, lines_t& lines) {$/;"	f	class:backward::SourceFile
get_snippet	src/include/backward/backward.hpp	/^	lines_t get_snippet(const std::string& filename,$/;"	f	class:backward::SnippetFactory
get_src_file	src/include/backward/backward.hpp	/^	SourceFile& get_src_file(const std::string& filename) {$/;"	f	class:backward::SnippetFactory
glStatesSet	src/include/SFML/Graphics/RenderTarget.hpp	/^        bool      glStatesSet;    \/\/\/< Are our internal GL states set yet?$/;"	m	struct:sf::RenderTarget::StatesCache
glyphs	src/include/SFML/Graphics/Font.hpp	/^        GlyphTable       glyphs;  \/\/\/< Table mapping code points to their corresponding glyph$/;"	m	struct:sf::Font::Page
gravity	src/game/generators/bulletDataGenerator.h	/^		gravityProperty gravity;$/;"	m	struct:bulletDataGenerator::genData
gravity	src/include/Box2D/Rope/b2Rope.h	/^	b2Vec2 gravity;$/;"	m	struct:b2RopeDef
gravityProperty	src/game/generators/bulletDataGenerator.h	/^	enum gravityProperty{$/;"	g	class:bulletDataGenerator
gravityScale	src/game/ObjProcessors/bulletProcessor.h	/^	float gravityScale;$/;"	m	struct:bulletData
gravityScale	src/include/Box2D/Dynamics/b2Body.h	/^	float32 gravityScale;$/;"	m	struct:b2BodyDef
groundAnchorA	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 groundAnchorA;$/;"	m	struct:b2PulleyJointDef
groundAnchorB	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 groundAnchorB;$/;"	m	struct:b2PulleyJointDef
groundMoveProcessor	src/game/ObjProcessors/groundMoveProcessor.h	/^	groundMoveProcessor(processMgr &processManager, Settings &settings, eventMgr &_eventManager){$/;"	f	class:groundMoveProcessor
groundMoveProcessor	src/game/ObjProcessors/groundMoveProcessor.h	/^class groundMoveProcessor : public objectProcessor{$/;"	c
groupIndex	src/include/Box2D/Dynamics/b2Fixture.h	/^	int16 groupIndex;$/;"	m	struct:b2Filter
gun	src/game/factory/gunCreator.h	/^	gunData gun;$/;"	m	class:gunCreator
gunCreator	src/game/factory/gunCreator.h	/^	gunCreator(viewProcess *_viewProc) : viewProc(_viewProc), parent(NULL), radius(0){}$/;"	f	class:gunCreator
gunCreator	src/game/factory/gunCreator.h	/^class gunCreator : public objectCreator{$/;"	c
gunData	src/game/ObjProcessors/gunProcessor.h	/^	gunData(){$/;"	f	struct:gunData
gunData	src/game/ObjProcessors/gunProcessor.h	/^struct gunData{$/;"	s
gunDataGenerator	src/game/generators/gunDataGenerator.cpp	/^gunDataGenerator::gunDataGenerator(gunDataGenerator::Archetype archetype, $/;"	f	class:gunDataGenerator
gunDataGenerator	src/game/generators/gunDataGenerator.h	/^class gunDataGenerator : public Generator{$/;"	c
gunProcessor	src/game/ObjProcessors/gunProcessor.cpp	/^gunProcessor::gunProcessor(processMgr &processManager, Settings &settings, eventMgr &_eventManager){$/;"	f	class:gunProcessor
gunProcessor	src/game/ObjProcessors/gunProcessor.h	/^class gunProcessor : public objectProcessor{$/;"	c
guns	src/game/gameStateHelpers/gunsManager.h	/^	std::vector<Object *>guns;$/;"	m	class:gunsManager
gunsManager	src/game/gameStateHelpers/gunsManager.cpp	/^gunsManager::gunsManager(eventMgr &eventManager, objectFactory &_factory, $/;"	f	class:gunsManager
gunsManager	src/game/gameStateHelpers/gunsManager.h	/^class gunsManager : public Observer{$/;"	c
gunsMgr	src/game/gameStateHelpers/playerController.h	/^	gunsManager *gunsMgr;$/;"	m	class:playerController
handle	src/include/backward/backward.hpp	/^		bfd_handle_t handle;$/;"	m	struct:backward::TraceResolverLinuxImpl::bfd_fileobject
handle	src/include/backward/backward.hpp	/^	explicit handle(): _val(), _empty(true) {}$/;"	f	class:backward::details::handle
handle	src/include/backward/backward.hpp	/^	explicit handle(T val): _val(val), _empty(false) {}$/;"	f	class:backward::details::handle
handle	src/include/backward/backward.hpp	/^	explicit handle(const handle& from): _empty(true) {$/;"	f	class:backward::details::handle
handle	src/include/backward/backward.hpp	/^	handle(handle&& from): _empty(true) {$/;"	f	class:backward::details::handle
handle	src/include/backward/backward.hpp	/^class handle {$/;"	c	namespace:backward::details
hasCollisionType	src/game/ObjProcessors/pickupProcessor.h	/^	bool hasCollisionType(const Hash *collisionType){$/;"	f	struct:pickupData
hasProperty	src/core/Object.h	/^	bool hasProperty(const Hash *name){$/;"	f	class:Object
hashMap	src/core/Hash.cpp	/^std::map<std::string, Hash* > Hash::hashMap;$/;"	m	class:Hash	file:
hashMap	src/core/Hash.h	/^	static HashMap hashMap;$/;"	m	class:Hash
hashMapIt	src/core/Hash.h	/^	typedef HashMap::iterator hashMapIt;$/;"	t	class:Hash
hashedName	src/core/State/State.h	/^	 const Hash* hashedName;$/;"	m	class:State
hashedVal	src/core/Hash.h	/^	uint64_t hashedVal;$/;"	m	class:Hash
hashtable	src/include/backward/backward.hpp	/^		struct hashtable {$/;"	s	namespace:backward::details
healthData	src/game/ObjProcessors/healthProcessor.h	/^	healthData(){$/;"	f	struct:healthData
healthData	src/game/ObjProcessors/healthProcessor.h	/^struct healthData {$/;"	s
healthProcessor	src/game/ObjProcessors/healthProcessor.h	/^	healthProcessor(processMgr &processManager, Settings &settings, eventMgr &_eventManager){};$/;"	f	class:healthProcessor
healthProcessor	src/game/ObjProcessors/healthProcessor.h	/^class healthProcessor : public objectProcessor {$/;"	c
height	src/include/Box2D/Collision/b2DynamicTree.h	/^	int32 height;$/;"	m	struct:b2TreeNode
height	src/include/SFML/Graphics/Font.hpp	/^        unsigned int height; \/\/\/< Height of the row$/;"	m	struct:sf::Font::Row
height	src/include/SFML/Graphics/Rect.hpp	/^    T height; \/\/\/< Height of the rectangle$/;"	m	class:sf::Rect
height	src/include/SFML/Window/Event.hpp	/^        unsigned int height; \/\/\/< New height, in pixels$/;"	m	struct:sf::Event::SizeEvent
height	src/include/SFML/Window/VideoMode.hpp	/^    unsigned int height;       \/\/\/< Video mode height, in pixels$/;"	m	class:sf::VideoMode
highDamage	src/game/generators/bulletDataGenerator.h	/^		highDamage,$/;"	e	enum:bulletDataGenerator::damageProperty
highGravity	src/game/generators/bulletDataGenerator.h	/^		highGravity,$/;"	e	enum:bulletDataGenerator::gravityProperty
highKnockback	src/game/generators/bulletDataGenerator.h	/^		highKnockback$/;"	e	enum:bulletDataGenerator::knockbackProperty
i1	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	int32 i1, i2;$/;"	m	struct:b2ReferenceFace	file:
i2	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	int32 i1, i2;$/;"	m	struct:b2ReferenceFace	file:
iProp	src/core/Property.h	/^typedef Prop<int> iProp;$/;"	t
id	src/include/Box2D/Collision/b2Collision.h	/^	b2ContactID id;			\/\/\/< uniquely identifies a contact point between two shapes$/;"	m	struct:b2ManifoldPoint
id	src/include/Box2D/Collision/b2Collision.h	/^	b2ContactID id;$/;"	m	struct:b2ClipVertex
idx	src/include/backward/backward.hpp	/^	size_t idx;$/;"	m	struct:backward::Trace
ignoreCollisions	src/game/ObjProcessors/bulletProcessor.h	/^	std::unordered_set<const Hash*> ignoreCollisions;$/;"	m	struct:bulletData
impulseMagnitude	src/game/bulletColliders/pushCollider.h	/^	float impulseMagnitude;$/;"	m	class:pushCollider
index	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	int32 index;$/;"	m	struct:b2EPAxis	file:
indexA	src/include/Box2D/Collision/b2Collision.h	/^	uint8 indexA;		\/\/\/< Feature index on shapeA$/;"	m	struct:b2ContactFeature
indexA	src/include/Box2D/Collision/b2Distance.cpp	/^	int32 indexA;	\/\/ wA index$/;"	m	struct:b2SimplexVertex	file:
indexA	src/include/Box2D/Collision/b2Distance.h	/^	uint8 indexA[3];	\/\/\/< vertices on shape A$/;"	m	struct:b2SimplexCache
indexA	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	int32 indexA;$/;"	m	struct:b2ContactPositionConstraint	file:
indexA	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	int32 indexA;$/;"	m	struct:b2ContactVelocityConstraint
indexB	src/include/Box2D/Collision/b2Collision.h	/^	uint8 indexB;		\/\/\/< Feature index on shapeB$/;"	m	struct:b2ContactFeature
indexB	src/include/Box2D/Collision/b2Distance.cpp	/^	int32 indexB;	\/\/ wB index$/;"	m	struct:b2SimplexVertex	file:
indexB	src/include/Box2D/Collision/b2Distance.h	/^	uint8 indexB[3];	\/\/\/< vertices on shape B$/;"	m	struct:b2SimplexCache
indexB	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	int32 indexB;$/;"	m	struct:b2ContactPositionConstraint	file:
indexB	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	int32 indexB;$/;"	m	struct:b2ContactVelocityConstraint
infoLog	src/util/logObject.h	/^	static util::msgLog<logLevelInfo> infoLog;$/;"	m	namespace:util
infoLog	tools/beautified.cpp	/^	static util::msgLog< logLevelInfo > infoLog;$/;"	m	namespace:util	file:
infoLog	tools/input.cpp	/^	static util::msgLog<logLevelInfo> infoLog;$/;"	m	namespace:util	file:
init	src/include/backward/backward.hpp	/^	bool init() { return false; }$/;"	f	class:backward::SignalHandling
init	src/include/backward/backward.hpp	/^	void init() {$/;"	f	class:backward::Colorize
init	src/include/backward/backward.hpp	/^	void init() {}$/;"	f	class:backward::Colorize
inliners	src/include/backward/backward.hpp	/^	source_locs_t                  inliners;$/;"	m	struct:backward::ResolvedTrace
inliners_search_cb	src/include/backward/backward.hpp	/^		inliners_search_cb(ResolvedTrace& t): trace(t) {}$/;"	f	struct:backward::TraceResolverLinuxImpl::inliners_search_cb
inliners_search_cb	src/include/backward/backward.hpp	/^	struct inliners_search_cb {$/;"	s	class:backward::TraceResolverLinuxImpl
int16	src/include/Box2D/Common/b2Settings.h	/^typedef signed short int16;$/;"	t
int32	src/include/Box2D/Common/b2Settings.h	/^typedef signed int int32;$/;"	t
int8	src/include/Box2D/Common/b2Settings.h	/^typedef signed char	int8;$/;"	t
invIA	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactPositionConstraint	file:
invIA	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactVelocityConstraint
invIB	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactPositionConstraint	file:
invIB	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactVelocityConstraint
invMassA	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactPositionConstraint	file:
invMassA	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactVelocityConstraint
invMassB	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactPositionConstraint	file:
invMassB	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactVelocityConstraint
inv_dt	src/include/Box2D/Dynamics/b2TimeStep.h	/^	float32 inv_dt;		\/\/ inverse time step (0 if dt == 0).$/;"	m	struct:b2TimeStep
invul	src/game/ObjProcessors/healthProcessor.h	/^	bool invul;$/;"	m	struct:healthData
isDead	src/core/Object.h	/^	bool isDead(){$/;"	f	class:Object
isDoneLoading	src/core/State/stateSaveLoader.h	/^	bool isDoneLoading(){$/;"	f	class:stateSaveLoader
isDoneSaving	src/core/State/stateSaveLoader.h	/^	bool isDoneSaving(){$/;"	f	class:stateSaveLoader
isFilled	src/game/terrainGen/terrainGenerator.h	/^		const bool isFilled(){$/;"	f	struct:terrainGenerator::Chunk
isJumpEnabled	src/game/ObjProcessors/groundMoveProcessor.cpp	/^bool moveData::isJumpEnabled(){$/;"	f	class:moveData
isMidJump	src/game/ObjProcessors/groundMoveProcessor.cpp	/^bool moveData::isMidJump(){$/;"	f	class:moveData
isMovingLeft	src/game/ObjProcessors/groundMoveProcessor.cpp	/^bool moveData::isMovingLeft(){$/;"	f	class:moveData
isMovingRight	src/game/ObjProcessors/groundMoveProcessor.cpp	/^bool moveData::isMovingRight(){$/;"	f	class:moveData
isSensor	src/include/Box2D/Dynamics/b2Fixture.h	/^	bool isSensor;$/;"	m	struct:b2FixtureDef
isWindowClosed	src/mainLoopListener.h	/^	bool isWindowClosed(){$/;"	f	class:mainLoopListener
is_open	src/include/backward/backward.hpp	/^	bool is_open() const { return _file->is_open(); }$/;"	f	class:backward::SourceFile
iterations	src/include/Box2D/Collision/b2Distance.h	/^	int32 iterations;	\/\/\/< number of GJK iterations used$/;"	m	struct:b2DistanceOutput
joint	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Joint* joint;			\/\/\/< the joint$/;"	m	struct:b2JointEdge
joint1	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Joint* joint1;$/;"	m	struct:b2GearJointDef
joint2	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Joint* joint2;$/;"	m	struct:b2GearJointDef
joystickButton	src/include/SFML/Window/Event.hpp	/^        JoystickButtonEvent  joystickButton;  \/\/\/< Joystick button event parameters (Event::JoystickButtonPressed, Event::JoystickButtonReleased)$/;"	m	union:sf::Event::__anon4
joystickConnect	src/include/SFML/Window/Event.hpp	/^        JoystickConnectEvent joystickConnect; \/\/\/< Joystick (dis)connect event parameters (Event::JoystickConnected, Event::JoystickDisconnected)$/;"	m	union:sf::Event::__anon4
joystickId	src/include/SFML/Window/Event.hpp	/^        unsigned int   joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count - 1])$/;"	m	struct:sf::Event::JoystickMoveEvent
joystickId	src/include/SFML/Window/Event.hpp	/^        unsigned int joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count - 1])$/;"	m	struct:sf::Event::JoystickButtonEvent
joystickId	src/include/SFML/Window/Event.hpp	/^        unsigned int joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count - 1])$/;"	m	struct:sf::Event::JoystickConnectEvent
joystickMove	src/include/SFML/Window/Event.hpp	/^        JoystickMoveEvent    joystickMove;    \/\/\/< Joystick move event parameters (Event::JoystickMoved)$/;"	m	union:sf::Event::__anon4
jumpDir	src/game/ObjProcessors/groundMoveProcessor.h	/^	vector2 jumpDir;$/;"	m	struct:moveData
jumpHeight	src/game/ObjProcessors/groundMoveProcessor.h	/^	float jumpHeight;$/;"	m	struct:moveData
jumpImpulse	src/game/ObjProcessors/groundMoveProcessor.h	/^	vector2 jumpImpulse;$/;"	m	struct:moveData
jumpRange	src/game/ObjProcessors/groundMoveProcessor.h	/^	float jumpRange;$/;"	m	struct:moveData
jumping	src/game/ObjProcessors/groundMoveProcessor.h	/^	bool jumping;$/;"	m	struct:moveData
k2	src/include/Box2D/Rope/b2Rope.h	/^	float32 k2;$/;"	m	struct:b2RopeDef
k3	src/include/Box2D/Rope/b2Rope.h	/^	float32 k3;$/;"	m	struct:b2RopeDef
key	src/include/Box2D/Collision/b2Collision.h	/^	uint32 key;					\/\/\/< Used to quickly compare contact ids.$/;"	m	union:b2ContactID
key	src/include/SFML/Window/Event.hpp	/^        KeyEvent             key;             \/\/\/< Key event parameters (Event::KeyPressed, Event::KeyReleased)$/;"	m	union:sf::Event::__anon4
kind	src/include/backward/backward.hpp	/^	Kind kind;$/;"	m	class:backward::Variable
knockback	src/game/generators/bulletDataGenerator.h	/^		knockbackProperty knockback;$/;"	m	struct:bulletDataGenerator::genData
knockbackProperty	src/game/generators/bulletDataGenerator.h	/^	enum knockbackProperty{$/;"	g	class:bulletDataGenerator
lastBlendMode	src/include/SFML/Graphics/RenderTarget.hpp	/^        BlendMode lastBlendMode;  \/\/\/< Cached blending mode$/;"	m	struct:sf::RenderTarget::StatesCache
lastMousePos	src/game/gameStateHelpers/playerEventHandler.h	/^	vector2 lastMousePos;$/;"	m	class:playerEventHandler
lastTextureId	src/include/SFML/Graphics/RenderTarget.hpp	/^        Uint64    lastTextureId;  \/\/\/< Cached texture$/;"	m	struct:sf::RenderTarget::StatesCache
left	src/game/gameStateHelpers/playerEventHandler.h	/^	sf::Keyboard::Key left;$/;"	m	struct:playerHandlerData
left	src/include/SFML/Graphics/Rect.hpp	/^    T left;   \/\/\/< Left coordinate of the rectangle$/;"	m	class:sf::Rect
length	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 length;$/;"	m	struct:b2DistanceJointDef
lengthA	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 lengthA;$/;"	m	struct:b2PulleyJointDef
lengthB	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 lengthB;$/;"	m	struct:b2PulleyJointDef
levelDim	src/game/factory/boundaryCreator.h	/^	vector2 levelDim;$/;"	m	class:boundaryCreator
levelDim	src/game/gameStateHelpers/playerController.h	/^	vector2 levelDim;$/;"	m	class:playerController
levelDim	src/game/terrainGen/terrainGenerator.h	/^	vector2 levelDim;$/;"	m	class:terrainGenerator
line	src/include/backward/backward.hpp	/^		unsigned    line;$/;"	m	struct:backward::ResolvedTrace::SourceLoc
line	src/include/backward/backward.hpp	/^		unsigned int line;$/;"	m	struct:backward::TraceResolverLinuxImpl::find_sym_result
linear	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Vec2 linear;$/;"	m	struct:b2Jacobian
linearDamping	src/include/Box2D/Dynamics/b2Body.h	/^	float32 linearDamping;$/;"	m	struct:b2BodyDef
linearVelocity	src/include/Box2D/Dynamics/b2Body.h	/^	b2Vec2 linearVelocity;$/;"	m	struct:b2BodyDef
lines_t	src/include/backward/backward.hpp	/^	typedef SourceFile::lines_t lines_t;$/;"	t	class:backward::SnippetFactory
lines_t	src/include/backward/backward.hpp	/^	typedef std::vector<std::pair<unsigned, std::string> > lines_t;$/;"	t	class:backward::SourceFile
list	src/include/backward/backward.hpp	/^	const list_t& list() const {$/;"	f	class:backward::Variable
list	src/include/backward/backward.hpp	/^	list_t& list() {$/;"	f	class:backward::Variable
list_t	src/include/backward/backward.hpp	/^	typedef std::vector<std::string> list_t;$/;"	t	class:backward::Variable
loadSettingsFromFile	src/core/Settings.h	/^	void loadSettingsFromFile(std::string filePath){};$/;"	f	class:Settings
load_from	src/include/backward/backward.hpp	/^	size_t load_from(void* addr, size_t depth=32) {$/;"	f	class:backward::StackTraceImpl
load_from	src/include/backward/backward.hpp	/^	size_t load_from(void* addr, size_t depth=32) {$/;"	f	class:backward::StackTraceWithLocalsImpl
load_from	src/include/backward/backward.hpp	/^	size_t load_from(void*, size_t=0) { return 0; }$/;"	f	class:backward::StackTraceImpl
load_here	src/include/backward/backward.hpp	/^	size_t load_here(size_t depth=32) {$/;"	f	class:backward::StackTraceImpl
load_here	src/include/backward/backward.hpp	/^	size_t load_here(size_t depth=32) {$/;"	f	class:backward::StackTraceWithLocalsImpl
load_here	src/include/backward/backward.hpp	/^	size_t load_here(size_t=0) { return 0; }$/;"	f	class:backward::StackTraceImpl
load_object_with_bfd	src/include/backward/backward.hpp	/^	bfd_fileobject& load_object_with_bfd(const std::string& filename_object) {$/;"	f	class:backward::TraceResolverLinuxImpl
load_stacktrace	src/include/backward/backward.hpp	/^		void load_stacktrace(ST& st) {$/;"	f	class:backward::TraceResolverLinuxImpl
load_stacktrace	src/include/backward/backward.hpp	/^		void load_stacktrace(ST&) {}$/;"	f	class:backward::TraceResolverImpl
load_stacktrace	src/include/backward/backward.hpp	/^		void load_stacktrace(ST&) {}$/;"	f	class:backward::TraceResolverLinuxImpl
load_thread_info	src/include/backward/backward.hpp	/^	void load_thread_info() {$/;"	f	class:backward::StackTraceLinuxImplBase
loaded	src/include/backward/backward.hpp	/^	bool loaded() const { return _loaded; }$/;"	f	class:backward::SignalHandling
localAnchorA	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2DistanceJointDef
localAnchorA	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2FrictionJointDef
localAnchorA	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2PrismaticJointDef
localAnchorA	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2PulleyJointDef
localAnchorA	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2RevoluteJointDef
localAnchorA	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2RopeJointDef
localAnchorA	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2WeldJointDef
localAnchorA	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2WheelJointDef
localAnchorB	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2DistanceJointDef
localAnchorB	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2FrictionJointDef
localAnchorB	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2PrismaticJointDef
localAnchorB	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2PulleyJointDef
localAnchorB	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2RevoluteJointDef
localAnchorB	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2RopeJointDef
localAnchorB	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2WeldJointDef
localAnchorB	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2WheelJointDef
localAxisA	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 localAxisA;$/;"	m	struct:b2PrismaticJointDef
localAxisA	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 localAxisA;$/;"	m	struct:b2WheelJointDef
localCenter	src/include/Box2D/Common/b2Math.h	/^	b2Vec2 localCenter;	\/\/\/< local center of mass position$/;"	m	struct:b2Sweep
localCenterA	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 localCenterA, localCenterB;$/;"	m	struct:b2ContactPositionConstraint	file:
localCenterB	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 localCenterA, localCenterB;$/;"	m	struct:b2ContactPositionConstraint	file:
localNormal	src/include/Box2D/Collision/b2Collision.h	/^	b2Vec2 localNormal;								\/\/\/< not use for Type::e_points$/;"	m	struct:b2Manifold
localNormal	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 localNormal;$/;"	m	struct:b2ContactPositionConstraint	file:
localPoint	src/include/Box2D/Collision/b2Collision.h	/^	b2Vec2 localPoint;								\/\/\/< usage depends on manifold type$/;"	m	struct:b2Manifold
localPoint	src/include/Box2D/Collision/b2Collision.h	/^	b2Vec2 localPoint;		\/\/\/< usage depends on manifold type$/;"	m	struct:b2ManifoldPoint
localPoint	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 localPoint;$/;"	m	struct:b2ContactPositionConstraint	file:
localPoints	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 localPoints[b2_maxManifoldPoints];$/;"	m	struct:b2ContactPositionConstraint	file:
locals	src/include/backward/backward.hpp	/^	std::vector<Variable> locals;$/;"	m	struct:backward::TraceWithLocals
logLevel	src/util/logObject.h	/^	enum logLevel{$/;"	g	namespace:util
logLevel	tools/beautified.cpp	/^enum logLevel$/;"	g	namespace:util	file:
logLevel	tools/input.cpp	/^	enum logLevel{$/;"	g	namespace:util	file:
logLevelError	src/util/logObject.h	/^		logLevelError, $/;"	e	enum:util::logLevel
logLevelError	tools/beautified.cpp	/^	logLevelError,$/;"	e	enum:util::logLevel	file:
logLevelError	tools/input.cpp	/^		logLevelError, $/;"	e	enum:util::logLevel	file:
logLevelInfo	src/util/logObject.h	/^		logLevelInfo = 0, $/;"	e	enum:util::logLevel
logLevelInfo	tools/beautified.cpp	/^	logLevelInfo = 0,$/;"	e	enum:util::logLevel	file:
logLevelInfo	tools/input.cpp	/^		logLevelInfo = 0, $/;"	e	enum:util::logLevel	file:
logLevelNoEmit	src/util/logObject.h	/^		logLevelNoEmit, $/;"	e	enum:util::logLevel
logLevelNoEmit	tools/beautified.cpp	/^	logLevelNoEmit,$/;"	e	enum:util::logLevel	file:
logLevelNoEmit	tools/input.cpp	/^		logLevelNoEmit, $/;"	e	enum:util::logLevel	file:
logLevelWarning	src/util/logObject.h	/^		logLevelWarning, $/;"	e	enum:util::logLevel
logLevelWarning	tools/beautified.cpp	/^	logLevelWarning,$/;"	e	enum:util::logLevel	file:
logLevelWarning	tools/input.cpp	/^		logLevelWarning, $/;"	e	enum:util::logLevel	file:
lowDamage	src/game/generators/bulletDataGenerator.h	/^		lowDamage = 0,$/;"	e	enum:bulletDataGenerator::damageProperty
lowGravity	src/game/generators/bulletDataGenerator.h	/^		lowGravity,$/;"	e	enum:bulletDataGenerator::gravityProperty
lowKnockback	src/game/generators/bulletDataGenerator.h	/^		lowKnockback,$/;"	e	enum:bulletDataGenerator::knockbackProperty
lowerAngle	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 lowerAngle;$/;"	m	struct:b2RevoluteJointDef
lowerBound	src/include/Box2D/Collision/b2Collision.h	/^	b2Vec2 lowerBound;	\/\/\/< the lower vertex$/;"	m	struct:b2AABB
lowerTranslation	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 lowerTranslation;$/;"	m	struct:b2PrismaticJointDef
m_C	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 m_C;$/;"	m	class:b2MouseJoint
m_I	src/include/Box2D/Dynamics/b2Body.h	/^	float32 m_I, m_invI;$/;"	m	class:b2Body
m_JvAC	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_JvAC, m_JvBD;$/;"	m	class:b2GearJoint
m_JvBD	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_JvAC, m_JvBD;$/;"	m	class:b2GearJoint
m_JwA	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint
m_JwB	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint
m_JwC	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint
m_JwD	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint
m_K	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Mat33 m_K;$/;"	m	class:b2PrismaticJoint
m_Ls	src/include/Box2D/Rope/b2Rope.h	/^	float32* m_Ls;$/;"	m	class:b2Rope
m_a1	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_a1, m_a2;$/;"	m	class:b2PrismaticJoint
m_a2	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_a1, m_a2;$/;"	m	class:b2PrismaticJoint
m_actualSize	src/include/SFML/Graphics/Texture.hpp	/^    Vector2u     m_actualSize;    \/\/\/< Actual texture size (can be greater than public size because of padding)$/;"	m	class:sf::Texture
m_address	src/include/SFML/Network/IpAddress.hpp	/^    Uint32 m_address; \/\/\/< Address stored as an unsigned 32 bits integer$/;"	m	class:sf::IpAddress
m_allocation	src/include/Box2D/Common/b2StackAllocator.h	/^	int32 m_allocation;$/;"	m	class:b2StackAllocator
m_allocator	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2StackAllocator* m_allocator;$/;"	m	class:b2ContactSolver
m_allocator	src/include/Box2D/Dynamics/b2ContactManager.h	/^	b2BlockAllocator* m_allocator;$/;"	m	class:b2ContactManager
m_allocator	src/include/Box2D/Dynamics/b2Island.h	/^	b2StackAllocator* m_allocator;$/;"	m	class:b2Island
m_allowSleep	src/include/Box2D/Dynamics/b2World.h	/^	bool m_allowSleep;$/;"	m	class:b2World
m_angularDamping	src/include/Box2D/Dynamics/b2Body.h	/^	float32 m_angularDamping;$/;"	m	class:b2Body
m_angularImpulse	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_angularImpulse;$/;"	m	class:b2FrictionJoint
m_angularMass	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_angularMass;$/;"	m	class:b2FrictionJoint
m_angularVelocity	src/include/Box2D/Dynamics/b2Body.h	/^	float32 m_angularVelocity;$/;"	m	class:b2Body
m_array	src/include/Box2D/Common/b2GrowableStack.h	/^	T m_array[N];$/;"	m	class:b2GrowableStack
m_as	src/include/Box2D/Rope/b2Rope.h	/^	float32* m_as;$/;"	m	class:b2Rope
m_ax	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_ax, m_ay;$/;"	m	class:b2WheelJoint
m_axis	src/include/Box2D/Collision/b2TimeOfImpact.cpp	/^	b2Vec2 m_axis;$/;"	m	struct:b2SeparationFunction	file:
m_axis	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_axis, m_perp;$/;"	m	class:b2PrismaticJoint
m_ay	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_ax, m_ay;$/;"	m	class:b2WheelJoint
m_beta	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_beta;$/;"	m	class:b2MouseJoint
m_bias	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_bias;$/;"	m	class:b2DistanceJoint
m_bias	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_bias;$/;"	m	class:b2WeldJoint
m_bias	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_bias;$/;"	m	class:b2WheelJoint
m_blockAllocator	src/include/Box2D/Dynamics/b2World.h	/^	b2BlockAllocator m_blockAllocator;$/;"	m	class:b2World
m_bodies	src/include/Box2D/Dynamics/b2Island.h	/^	b2Body** m_bodies;$/;"	m	class:b2Island
m_body	src/include/Box2D/Dynamics/b2Fixture.h	/^	b2Body* m_body;$/;"	m	class:b2Fixture
m_body	src/include/SFML/Network/Http.hpp	/^        std::string  m_body;         \/\/\/< Body of the request$/;"	m	class:sf::Http::Request
m_body	src/include/SFML/Network/Http.hpp	/^        std::string  m_body;         \/\/\/< Body of the response$/;"	m	class:sf::Http::Response
m_bodyA	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Body* m_bodyA;$/;"	m	class:b2Joint
m_bodyB	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Body* m_bodyB;$/;"	m	class:b2Joint
m_bodyC	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Body* m_bodyC;$/;"	m	class:b2GearJoint
m_bodyCapacity	src/include/Box2D/Dynamics/b2Island.h	/^	int32 m_bodyCapacity;$/;"	m	class:b2Island
m_bodyCount	src/include/Box2D/Dynamics/b2Island.h	/^	int32 m_bodyCount;$/;"	m	class:b2Island
m_bodyCount	src/include/Box2D/Dynamics/b2World.h	/^	int32 m_bodyCount;$/;"	m	class:b2World
m_bodyD	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Body* m_bodyD;$/;"	m	class:b2GearJoint
m_bodyList	src/include/Box2D/Dynamics/b2World.h	/^	b2Body* m_bodyList;$/;"	m	class:b2World
m_bounds	src/include/SFML/Graphics/Shape.hpp	/^    FloatRect      m_bounds;           \/\/\/< Bounding rectangle of the whole shape (outline + fill)$/;"	m	class:sf::Shape
m_bounds	src/include/SFML/Graphics/Text.hpp	/^    FloatRect     m_bounds;        \/\/\/< Bounding rectangle of the text (in local coordinates)$/;"	m	class:sf::Text
m_broadPhase	src/include/Box2D/Dynamics/b2ContactManager.h	/^	b2BroadPhase m_broadPhase;$/;"	m	class:b2ContactManager
m_buffer	src/include/Box2D/Collision/b2Distance.h	/^	b2Vec2 m_buffer[2];$/;"	m	struct:b2DistanceProxy
m_buffer	src/include/SFML/Audio/Sound.hpp	/^    const SoundBuffer* m_buffer; \/\/\/< Sound buffer bound to the source$/;"	m	class:sf::Sound
m_buffer	src/include/SFML/Audio/SoundBuffer.hpp	/^    unsigned int       m_buffer;   \/\/\/< OpenAL buffer identifier$/;"	m	class:sf::SoundBuffer
m_buffer	src/include/SFML/Audio/SoundBufferRecorder.hpp	/^    SoundBuffer        m_buffer;  \/\/\/< Sound buffer that will contain the recorded data$/;"	m	class:sf::SoundBufferRecorder
m_buffer	src/include/SFML/Network/UdpSocket.hpp	/^    std::vector<char> m_buffer; \/\/\/< Temporary buffer holding the received data in Receive(Packet)$/;"	m	class:sf::UdpSocket
m_buffers	src/include/SFML/Audio/SoundStream.hpp	/^    unsigned int  m_buffers[BufferCount];    \/\/\/< Sound buffers used to store temporary audio data$/;"	m	class:sf::SoundStream
m_cache	src/include/SFML/Graphics/RenderTarget.hpp	/^    StatesCache m_cache;       \/\/\/< Render states cache$/;"	m	class:sf::RenderTarget
m_cacheId	src/include/SFML/Graphics/Texture.hpp	/^    Uint64       m_cacheId;       \/\/\/< Unique number that identifies the texture to the render target's cache$/;"	m	class:sf::Texture
m_capacity	src/include/Box2D/Common/b2GrowableStack.h	/^	int32 m_capacity;$/;"	m	class:b2GrowableStack
m_center	src/include/SFML/Graphics/View.hpp	/^    Vector2f          m_center;              \/\/\/< Center of the view, in scene coordinates$/;"	m	class:sf::View
m_centroid	src/include/Box2D/Collision/Shapes/b2PolygonShape.h	/^	b2Vec2 m_centroid;$/;"	m	class:b2PolygonShape
m_centroidB	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_centroidB;$/;"	m	struct:b2EPCollider	file:
m_channelCount	src/include/SFML/Audio/SoundStream.hpp	/^    unsigned int  m_channelCount;            \/\/\/< Number of channels (1 = mono, 2 = stereo, ...)$/;"	m	class:sf::SoundStream
m_characterSize	src/include/SFML/Graphics/Text.hpp	/^    unsigned int  m_characterSize; \/\/\/< Base size of characters, in pixels$/;"	m	class:sf::Text
m_chunkCount	src/include/Box2D/Common/b2BlockAllocator.h	/^	int32 m_chunkCount;$/;"	m	class:b2BlockAllocator
m_chunkSpace	src/include/Box2D/Common/b2BlockAllocator.h	/^	int32 m_chunkSpace;$/;"	m	class:b2BlockAllocator
m_chunks	src/include/Box2D/Common/b2BlockAllocator.h	/^	b2Chunk* m_chunks;$/;"	m	class:b2BlockAllocator
m_clock	src/include/SFML/Window/Window.hpp	/^    Clock             m_clock;          \/\/\/< Clock for measuring the elapsed time between frames$/;"	m	class:sf::Window
m_collideConnected	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	bool m_collideConnected;$/;"	m	class:b2Joint
m_color	src/include/SFML/Graphics/Text.hpp	/^    Color         m_color;         \/\/\/< Text color$/;"	m	class:sf::Text
m_commandSocket	src/include/SFML/Network/Ftp.hpp	/^    TcpSocket m_commandSocket; \/\/\/< Socket holding the control connection with the server$/;"	m	class:sf::Ftp
m_connection	src/include/SFML/Network/Http.hpp	/^    TcpSocket      m_connection; \/\/\/< Connection to the host$/;"	m	class:sf::Http
m_constant	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_constant;$/;"	m	class:b2GearJoint
m_constant	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_constant;$/;"	m	class:b2PulleyJoint
m_contactCapacity	src/include/Box2D/Dynamics/b2Island.h	/^	int32 m_contactCapacity;$/;"	m	class:b2Island
m_contactCount	src/include/Box2D/Dynamics/b2ContactManager.h	/^	int32 m_contactCount;$/;"	m	class:b2ContactManager
m_contactCount	src/include/Box2D/Dynamics/b2Island.h	/^	int32 m_contactCount;$/;"	m	class:b2Island
m_contactFilter	src/include/Box2D/Dynamics/b2ContactManager.h	/^	b2ContactFilter* m_contactFilter;$/;"	m	class:b2ContactManager
m_contactList	src/include/Box2D/Dynamics/b2Body.h	/^	b2ContactEdge* m_contactList;$/;"	m	class:b2Body
m_contactList	src/include/Box2D/Dynamics/b2ContactManager.h	/^	b2Contact* m_contactList;$/;"	m	class:b2ContactManager
m_contactListener	src/include/Box2D/Dynamics/b2ContactManager.h	/^	b2ContactListener* m_contactListener;$/;"	m	class:b2ContactManager
m_contactManager	src/include/Box2D/Dynamics/b2World.h	/^	b2ContactManager m_contactManager;$/;"	m	class:b2World
m_contacts	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Contact** m_contacts;$/;"	m	class:b2ContactSolver
m_contacts	src/include/Box2D/Dynamics/b2Island.h	/^	b2Contact** m_contacts;$/;"	m	class:b2Island
m_context	src/include/SFML/Window/Context.hpp	/^    priv::GlContext* m_context; \/\/\/< Internal OpenGL context$/;"	m	class:sf::Context
m_context	src/include/SFML/Window/Window.hpp	/^    priv::GlContext*  m_context;        \/\/\/< Platform-specific implementation of the OpenGL context$/;"	m	class:sf::Window
m_continuousPhysics	src/include/Box2D/Dynamics/b2World.h	/^	bool m_continuousPhysics;$/;"	m	class:b2World
m_count	src/include/Box2D/Collision/Shapes/b2ChainShape.h	/^	int32 m_count;$/;"	m	class:b2ChainShape
m_count	src/include/Box2D/Collision/b2Distance.cpp	/^	int32 m_count;$/;"	m	struct:b2Simplex	file:
m_count	src/include/Box2D/Collision/b2Distance.h	/^	int32 m_count;$/;"	m	struct:b2DistanceProxy
m_count	src/include/Box2D/Common/b2GrowableStack.h	/^	int32 m_count;$/;"	m	class:b2GrowableStack
m_count	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	int m_count;$/;"	m	class:b2ContactSolver
m_count	src/include/Box2D/Rope/b2Rope.h	/^	int32 m_count;$/;"	m	class:b2Rope
m_currentTexture	src/include/SFML/Graphics/Shader.hpp	/^    int          m_currentTexture; \/\/\/< Location of the current texture in the shader$/;"	m	class:sf::Shader
m_damping	src/include/Box2D/Rope/b2Rope.h	/^	float32 m_damping;$/;"	m	class:b2Rope
m_dampingRatio	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2DistanceJoint
m_dampingRatio	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2MouseJoint
m_dampingRatio	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2WeldJoint
m_dampingRatio	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2WheelJoint
m_data	src/include/Box2D/Common/b2StackAllocator.h	/^	char m_data[b2_stackSize];$/;"	m	class:b2StackAllocator
m_data	src/include/SFML/Network/Packet.hpp	/^    std::vector<char> m_data;    \/\/\/< Data stored in the packet$/;"	m	class:sf::Packet
m_debugDraw	src/include/Box2D/Dynamics/b2World.h	/^	b2Draw* m_debugDraw;$/;"	m	class:b2World
m_defaultView	src/include/SFML/Graphics/RenderTarget.hpp	/^    View        m_defaultView; \/\/\/< Default view$/;"	m	class:sf::RenderTarget
m_density	src/include/Box2D/Dynamics/b2Fixture.h	/^	float32 m_density;$/;"	m	class:b2Fixture
m_destructionListener	src/include/Box2D/Dynamics/b2World.h	/^	b2DestructionListener* m_destructionListener;$/;"	m	class:b2World
m_directory	src/include/SFML/Network/Ftp.hpp	/^        std::string m_directory; \/\/\/< Directory extracted from the response message$/;"	m	class:sf::Ftp::DirectoryResponse
m_drawFlags	src/include/Box2D/Common/b2Draw.h	/^	uint32 m_drawFlags;$/;"	m	class:b2Draw
m_duration	src/include/SFML/Audio/Music.hpp	/^    Time               m_duration; \/\/\/< Music duration$/;"	m	class:sf::Music
m_duration	src/include/SFML/Audio/SoundBuffer.hpp	/^    Time               m_duration; \/\/\/< Sound duration$/;"	m	class:sf::SoundBuffer
m_edgeA	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointEdge m_edgeA;$/;"	m	class:b2Joint
m_edgeB	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointEdge m_edgeB;$/;"	m	class:b2Joint
m_enableLimit	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	bool m_enableLimit;$/;"	m	class:b2PrismaticJoint
m_enableLimit	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	bool m_enableLimit;$/;"	m	class:b2RevoluteJoint
m_enableMotor	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	bool m_enableMotor;$/;"	m	class:b2PrismaticJoint
m_enableMotor	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	bool m_enableMotor;$/;"	m	class:b2RevoluteJoint
m_enableMotor	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	bool m_enableMotor;$/;"	m	class:b2WheelJoint
m_endBuffers	src/include/SFML/Audio/SoundStream.hpp	/^    bool          m_endBuffers[BufferCount]; \/\/\/< Each buffer is marked as "end buffer" or not, for proper duration calculation$/;"	m	class:sf::SoundStream
m_entries	src/include/Box2D/Common/b2StackAllocator.h	/^	b2StackEntry m_entries[b2_maxStackEntries];$/;"	m	class:b2StackAllocator
m_entryCount	src/include/Box2D/Common/b2StackAllocator.h	/^	int32 m_entryCount;$/;"	m	class:b2StackAllocator
m_entryPoint	src/include/SFML/System/Thread.hpp	/^    priv::ThreadFunc* m_entryPoint; \/\/\/< Abstraction of the function to run$/;"	m	class:sf::Thread
m_face	src/include/SFML/Graphics/Font.hpp	/^    void*                      m_face;        \/\/\/< Pointer to the internal font face (it is typeless to avoid exposing implementation details)$/;"	m	class:sf::Font
m_fields	src/include/SFML/Network/Http.hpp	/^        FieldTable   m_fields;       \/\/\/< Fields of the header associated to their value$/;"	m	class:sf::Http::Request
m_fields	src/include/SFML/Network/Http.hpp	/^        FieldTable   m_fields;       \/\/\/< Fields of the header$/;"	m	class:sf::Http::Response
m_file	src/include/SFML/Audio/Music.hpp	/^    priv::SoundFile*   m_file;     \/\/\/< Sound file$/;"	m	class:sf::Music
m_fillColor	src/include/SFML/Graphics/Shape.hpp	/^    Color          m_fillColor;        \/\/\/< Fill color$/;"	m	class:sf::Shape
m_filter	src/include/Box2D/Dynamics/b2Fixture.h	/^	b2Filter m_filter;$/;"	m	class:b2Fixture
m_fixtureA	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Fixture* m_fixtureA;$/;"	m	class:b2Contact
m_fixtureB	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Fixture* m_fixtureB;$/;"	m	class:b2Contact
m_fixtureCount	src/include/Box2D/Dynamics/b2Body.h	/^	int32 m_fixtureCount;$/;"	m	class:b2Body
m_fixtureList	src/include/Box2D/Dynamics/b2Body.h	/^	b2Fixture* m_fixtureList;$/;"	m	class:b2Body
m_flags	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	uint32 m_flags;$/;"	m	class:b2Contact
m_flags	src/include/Box2D/Dynamics/b2Body.h	/^	uint16 m_flags;$/;"	m	class:b2Body
m_flags	src/include/Box2D/Dynamics/b2World.h	/^	int32 m_flags;$/;"	m	class:b2World
m_font	src/include/SFML/Graphics/Text.hpp	/^    const Font*   m_font;          \/\/\/< Font used to display the string$/;"	m	class:sf::Text
m_force	src/include/Box2D/Dynamics/b2Body.h	/^	b2Vec2 m_force;$/;"	m	class:b2Body
m_format	src/include/SFML/Audio/SoundStream.hpp	/^    Uint32        m_format;                  \/\/\/< Format of the internal sound buffers$/;"	m	class:sf::SoundStream
m_frameTimeLimit	src/include/SFML/Window/Window.hpp	/^    Time              m_frameTimeLimit; \/\/\/< Current framerate limit$/;"	m	class:sf::Window
m_freeList	src/include/Box2D/Collision/b2DynamicTree.h	/^	int32 m_freeList;$/;"	m	class:b2DynamicTree
m_freeLists	src/include/Box2D/Common/b2BlockAllocator.h	/^	b2Block* m_freeLists[b2_blockSizes];$/;"	m	class:b2BlockAllocator
m_frequencyHz	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2DistanceJoint
m_frequencyHz	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2MouseJoint
m_frequencyHz	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2WeldJoint
m_frequencyHz	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2WheelJoint
m_friction	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	float32 m_friction;$/;"	m	class:b2Contact
m_friction	src/include/Box2D/Dynamics/b2Fixture.h	/^	float32 m_friction;$/;"	m	class:b2Fixture
m_front	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	bool m_front;$/;"	m	struct:b2EPCollider	file:
m_gamma	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_gamma;$/;"	m	class:b2DistanceJoint
m_gamma	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_gamma;$/;"	m	class:b2MouseJoint
m_gamma	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_gamma;$/;"	m	class:b2WeldJoint
m_gamma	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_gamma;$/;"	m	class:b2WheelJoint
m_gravity	src/include/Box2D/Dynamics/b2World.h	/^	b2Vec2 m_gravity;$/;"	m	class:b2World
m_gravity	src/include/Box2D/Rope/b2Rope.h	/^	b2Vec2 m_gravity;$/;"	m	class:b2Rope
m_gravityScale	src/include/Box2D/Dynamics/b2Body.h	/^	float32 m_gravityScale;$/;"	m	class:b2Body
m_groundAnchorA	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_groundAnchorA;$/;"	m	class:b2PulleyJoint
m_groundAnchorB	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_groundAnchorB;$/;"	m	class:b2PulleyJoint
m_hasNextVertex	src/include/Box2D/Collision/Shapes/b2ChainShape.h	/^	bool m_hasPrevVertex, m_hasNextVertex;$/;"	m	class:b2ChainShape
m_hasPrevVertex	src/include/Box2D/Collision/Shapes/b2ChainShape.h	/^	bool m_hasPrevVertex, m_hasNextVertex;$/;"	m	class:b2ChainShape
m_hasVertex0	src/include/Box2D/Collision/Shapes/b2EdgeShape.h	/^	bool m_hasVertex0, m_hasVertex3;$/;"	m	class:b2EdgeShape
m_hasVertex3	src/include/Box2D/Collision/Shapes/b2EdgeShape.h	/^	bool m_hasVertex0, m_hasVertex3;$/;"	m	class:b2EdgeShape
m_host	src/include/SFML/Network/Http.hpp	/^    IpAddress      m_host;       \/\/\/< Web host address$/;"	m	class:sf::Http
m_hostName	src/include/SFML/Network/Http.hpp	/^    std::string    m_hostName;   \/\/\/< Web host name$/;"	m	class:sf::Http
m_iA	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint
m_iB	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint
m_iC	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint
m_iD	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint
m_impl	src/include/SFML/Graphics/RenderTexture.hpp	/^    priv::RenderTextureImpl* m_impl;    \/\/\/< Platform\/hardware specific implementation$/;"	m	class:sf::RenderTexture
m_impl	src/include/SFML/Network/SocketSelector.hpp	/^    SocketSelectorImpl* m_impl; \/\/\/< Opaque pointer to the implementation (which requires OS-specific types)$/;"	m	class:sf::SocketSelector
m_impl	src/include/SFML/System/Thread.hpp	/^    priv::ThreadImpl* m_impl;       \/\/\/< OS-specific implementation of the thread$/;"	m	class:sf::Thread
m_impl	src/include/SFML/System/ThreadLocal.hpp	/^    priv::ThreadLocalImpl* m_impl; \/\/\/< Pointer to the OS specific implementation$/;"	m	class:sf::ThreadLocal
m_impl	src/include/SFML/Window/Window.hpp	/^    priv::WindowImpl* m_impl;           \/\/\/< Platform-specific implementation of the window$/;"	m	class:sf::Window
m_impulse	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_impulse;$/;"	m	class:b2DistanceJoint
m_impulse	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_impulse;$/;"	m	class:b2GearJoint
m_impulse	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 m_impulse;$/;"	m	class:b2MouseJoint
m_impulse	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec3 m_impulse;$/;"	m	class:b2PrismaticJoint
m_impulse	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_impulse;$/;"	m	class:b2PulleyJoint
m_impulse	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec3 m_impulse;$/;"	m	class:b2RevoluteJoint
m_impulse	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_impulse;$/;"	m	class:b2RopeJoint
m_impulse	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec3 m_impulse;$/;"	m	class:b2WeldJoint
m_impulse	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_impulse;$/;"	m	class:b2WheelJoint
m_ims	src/include/Box2D/Rope/b2Rope.h	/^	float32* m_ims;$/;"	m	class:b2Rope
m_index	src/include/Box2D/Common/b2StackAllocator.h	/^	int32 m_index;$/;"	m	class:b2StackAllocator
m_index	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	int32 m_index;$/;"	m	class:b2Joint
m_indexA	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	int32 m_indexA;$/;"	m	class:b2Contact
m_indexA	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	int32 m_indexA;$/;"	m	class:b2DistanceJoint
m_indexA	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	int32 m_indexA;$/;"	m	class:b2FrictionJoint
m_indexA	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint
m_indexA	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	int32 m_indexA;$/;"	m	class:b2MouseJoint
m_indexA	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	int32 m_indexA;$/;"	m	class:b2PrismaticJoint
m_indexA	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	int32 m_indexA;$/;"	m	class:b2PulleyJoint
m_indexA	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	int32 m_indexA;$/;"	m	class:b2RevoluteJoint
m_indexA	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	int32 m_indexA;$/;"	m	class:b2RopeJoint
m_indexA	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	int32 m_indexA;$/;"	m	class:b2WeldJoint
m_indexA	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	int32 m_indexA;$/;"	m	class:b2WheelJoint
m_indexB	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	int32 m_indexB;$/;"	m	class:b2Contact
m_indexB	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	int32 m_indexB;$/;"	m	class:b2DistanceJoint
m_indexB	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	int32 m_indexB;$/;"	m	class:b2FrictionJoint
m_indexB	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint
m_indexB	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	int32 m_indexB;$/;"	m	class:b2MouseJoint
m_indexB	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	int32 m_indexB;$/;"	m	class:b2PrismaticJoint
m_indexB	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	int32 m_indexB;$/;"	m	class:b2PulleyJoint
m_indexB	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	int32 m_indexB;$/;"	m	class:b2RevoluteJoint
m_indexB	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	int32 m_indexB;$/;"	m	class:b2RopeJoint
m_indexB	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	int32 m_indexB;$/;"	m	class:b2WeldJoint
m_indexB	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	int32 m_indexB;$/;"	m	class:b2WheelJoint
m_indexC	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint
m_indexD	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint
m_insertionCount	src/include/Box2D/Collision/b2DynamicTree.h	/^	int32 m_insertionCount;$/;"	m	class:b2DynamicTree
m_insideBounds	src/include/SFML/Graphics/Shape.hpp	/^    FloatRect      m_insideBounds;     \/\/\/< Bounding rectangle of the inside (fill)$/;"	m	class:sf::Shape
m_invI	src/include/Box2D/Dynamics/b2Body.h	/^	float32 m_I, m_invI;$/;"	m	class:b2Body
m_invIA	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_invIA;$/;"	m	class:b2DistanceJoint
m_invIA	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_invIA;$/;"	m	class:b2FrictionJoint
m_invIA	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_invIA;$/;"	m	class:b2PrismaticJoint
m_invIA	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_invIA;$/;"	m	class:b2PulleyJoint
m_invIA	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_invIA;$/;"	m	class:b2RevoluteJoint
m_invIA	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_invIA;$/;"	m	class:b2RopeJoint
m_invIA	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_invIA;$/;"	m	class:b2WeldJoint
m_invIA	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_invIA;$/;"	m	class:b2WheelJoint
m_invIB	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_invIB;$/;"	m	class:b2DistanceJoint
m_invIB	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_invIB;$/;"	m	class:b2FrictionJoint
m_invIB	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_invIB;$/;"	m	class:b2MouseJoint
m_invIB	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_invIB;$/;"	m	class:b2PrismaticJoint
m_invIB	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_invIB;$/;"	m	class:b2PulleyJoint
m_invIB	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_invIB;$/;"	m	class:b2RevoluteJoint
m_invIB	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_invIB;$/;"	m	class:b2RopeJoint
m_invIB	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_invIB;$/;"	m	class:b2WeldJoint
m_invIB	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_invIB;$/;"	m	class:b2WheelJoint
m_invMass	src/include/Box2D/Dynamics/b2Body.h	/^	float32 m_mass, m_invMass;$/;"	m	class:b2Body
m_invMassA	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2DistanceJoint
m_invMassA	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2FrictionJoint
m_invMassA	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2PrismaticJoint
m_invMassA	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2PulleyJoint
m_invMassA	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2RevoluteJoint
m_invMassA	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2RopeJoint
m_invMassA	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2WeldJoint
m_invMassA	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2WheelJoint
m_invMassB	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2DistanceJoint
m_invMassB	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2FrictionJoint
m_invMassB	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2MouseJoint
m_invMassB	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2PrismaticJoint
m_invMassB	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2PulleyJoint
m_invMassB	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2RevoluteJoint
m_invMassB	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2RopeJoint
m_invMassB	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2WeldJoint
m_invMassB	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2WheelJoint
m_invTransformUpdated	src/include/SFML/Graphics/View.hpp	/^    mutable bool      m_invTransformUpdated; \/\/\/< Internal state telling if the inverse transform needs to be updated$/;"	m	class:sf::View
m_inv_dt0	src/include/Box2D/Dynamics/b2World.h	/^	float32 m_inv_dt0;$/;"	m	class:b2World
m_inverseTransform	src/include/SFML/Graphics/Transformable.hpp	/^    mutable Transform m_inverseTransform;           \/\/\/< Combined transformation of the object$/;"	m	class:sf::Transformable
m_inverseTransform	src/include/SFML/Graphics/View.hpp	/^    mutable Transform m_inverseTransform;    \/\/\/< Precomputed inverse projection transform corresponding to the view$/;"	m	class:sf::View
m_inverseTransformNeedUpdate	src/include/SFML/Graphics/Transformable.hpp	/^    mutable bool      m_inverseTransformNeedUpdate; \/\/\/< Does the transform need to be recomputed?$/;"	m	class:sf::Transformable
m_isBlocking	src/include/SFML/Network/Socket.hpp	/^    bool         m_isBlocking; \/\/\/< Current blocking mode of the socket$/;"	m	class:sf::Socket
m_isCapturing	src/include/SFML/Audio/SoundRecorder.hpp	/^    bool               m_isCapturing; \/\/\/< Capturing state$/;"	m	class:sf::SoundRecorder
m_isRepeated	src/include/SFML/Graphics/Texture.hpp	/^    bool         m_isRepeated;    \/\/\/< Is the texture in repeat mode?$/;"	m	class:sf::Texture
m_isSensor	src/include/Box2D/Dynamics/b2Fixture.h	/^	bool m_isSensor;$/;"	m	class:b2Fixture
m_isSmooth	src/include/SFML/Graphics/Texture.hpp	/^    bool         m_isSmooth;      \/\/\/< Status of the smooth filter$/;"	m	class:sf::Texture
m_isStreaming	src/include/SFML/Audio/SoundStream.hpp	/^    bool          m_isStreaming;             \/\/\/< Streaming state (true = playing, false = stopped)$/;"	m	class:sf::SoundStream
m_isValid	src/include/SFML/Network/Packet.hpp	/^    bool              m_isValid; \/\/\/< Reading state of the packet$/;"	m	class:sf::Packet
m_islandFlag	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	bool m_islandFlag;$/;"	m	class:b2Joint
m_islandIndex	src/include/Box2D/Dynamics/b2Body.h	/^	int32 m_islandIndex;$/;"	m	class:b2Body
m_joint1	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Joint* m_joint1;$/;"	m	class:b2GearJoint
m_joint2	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Joint* m_joint2;$/;"	m	class:b2GearJoint
m_jointCapacity	src/include/Box2D/Dynamics/b2Island.h	/^	int32 m_jointCapacity;$/;"	m	class:b2Island
m_jointCount	src/include/Box2D/Dynamics/b2Island.h	/^	int32 m_jointCount;$/;"	m	class:b2Island
m_jointCount	src/include/Box2D/Dynamics/b2World.h	/^	int32 m_jointCount;$/;"	m	class:b2World
m_jointList	src/include/Box2D/Dynamics/b2Body.h	/^	b2JointEdge* m_jointList;$/;"	m	class:b2Body
m_jointList	src/include/Box2D/Dynamics/b2World.h	/^	b2Joint* m_jointList;$/;"	m	class:b2World
m_joints	src/include/Box2D/Dynamics/b2Island.h	/^	b2Joint** m_joints;$/;"	m	class:b2Island
m_k2	src/include/Box2D/Rope/b2Rope.h	/^	float32 m_k2;$/;"	m	class:b2Rope
m_k3	src/include/Box2D/Rope/b2Rope.h	/^	float32 m_k3;$/;"	m	class:b2Rope
m_lcA	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint
m_lcB	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint
m_lcC	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint
m_lcD	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint
m_length	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_length;$/;"	m	class:b2DistanceJoint
m_length	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_length;$/;"	m	class:b2RopeJoint
m_lengthA	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_lengthA;$/;"	m	class:b2PulleyJoint
m_lengthB	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_lengthB;$/;"	m	class:b2PulleyJoint
m_library	src/include/SFML/Graphics/Font.hpp	/^    void*                      m_library;     \/\/\/< Pointer to the internal library interface (it is typeless to avoid exposing implementation details)$/;"	m	class:sf::Font
m_limitState	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2LimitState m_limitState;$/;"	m	class:b2PrismaticJoint
m_limitState	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2LimitState m_limitState;$/;"	m	class:b2RevoluteJoint
m_linearDamping	src/include/Box2D/Dynamics/b2Body.h	/^	float32 m_linearDamping;$/;"	m	class:b2Body
m_linearImpulse	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_linearImpulse;$/;"	m	class:b2FrictionJoint
m_linearMass	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Mat22 m_linearMass;$/;"	m	class:b2FrictionJoint
m_linearVelocity	src/include/Box2D/Dynamics/b2Body.h	/^	b2Vec2 m_linearVelocity;$/;"	m	class:b2Body
m_listener	src/include/Box2D/Dynamics/b2Island.h	/^	b2ContactListener* m_listener;$/;"	m	class:b2Island
m_listing	src/include/SFML/Network/Ftp.hpp	/^        std::vector<std::string> m_listing; \/\/\/< Directory\/file names extracted from the data$/;"	m	class:sf::Ftp::ListingResponse
m_localAnchorA	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2DistanceJoint
m_localAnchorA	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2FrictionJoint
m_localAnchorA	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2GearJoint
m_localAnchorA	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2PrismaticJoint
m_localAnchorA	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2PulleyJoint
m_localAnchorA	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2RevoluteJoint
m_localAnchorA	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2RopeJoint
m_localAnchorA	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2WeldJoint
m_localAnchorA	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2WheelJoint
m_localAnchorB	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2DistanceJoint
m_localAnchorB	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2FrictionJoint
m_localAnchorB	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2GearJoint
m_localAnchorB	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2MouseJoint
m_localAnchorB	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2PrismaticJoint
m_localAnchorB	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2PulleyJoint
m_localAnchorB	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2RevoluteJoint
m_localAnchorB	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2RopeJoint
m_localAnchorB	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2WeldJoint
m_localAnchorB	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2WheelJoint
m_localAnchorC	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_localAnchorC;$/;"	m	class:b2GearJoint
m_localAnchorD	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_localAnchorD;$/;"	m	class:b2GearJoint
m_localAxisC	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_localAxisC;$/;"	m	class:b2GearJoint
m_localAxisD	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2Vec2 m_localAxisD;$/;"	m	class:b2GearJoint
m_localCenterA	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2DistanceJoint
m_localCenterA	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2FrictionJoint
m_localCenterA	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2PrismaticJoint
m_localCenterA	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2PulleyJoint
m_localCenterA	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2RevoluteJoint
m_localCenterA	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2RopeJoint
m_localCenterA	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2WeldJoint
m_localCenterA	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2WheelJoint
m_localCenterB	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2DistanceJoint
m_localCenterB	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2FrictionJoint
m_localCenterB	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2MouseJoint
m_localCenterB	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2PrismaticJoint
m_localCenterB	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2PulleyJoint
m_localCenterB	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2RevoluteJoint
m_localCenterB	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2RopeJoint
m_localCenterB	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2WeldJoint
m_localCenterB	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2WheelJoint
m_localPoint	src/include/Box2D/Collision/b2TimeOfImpact.cpp	/^	b2Vec2 m_localPoint;$/;"	m	struct:b2SeparationFunction	file:
m_localXAxisA	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_localXAxisA;$/;"	m	class:b2PrismaticJoint
m_localXAxisA	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_localXAxisA;$/;"	m	class:b2WheelJoint
m_localYAxisA	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_localYAxisA;$/;"	m	class:b2PrismaticJoint
m_localYAxisA	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	b2Vec2 m_localYAxisA;$/;"	m	class:b2WheelJoint
m_loop	src/include/SFML/Audio/SoundStream.hpp	/^    bool          m_loop;                    \/\/\/< Loop flag (true to loop, false to play once)$/;"	m	class:sf::SoundStream
m_lowerAngle	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_lowerAngle;$/;"	m	class:b2RevoluteJoint
m_lowerLimit	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_lowerLimit, m_upperLimit;$/;"	m	struct:b2EPCollider	file:
m_lowerTranslation	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_lowerTranslation;$/;"	m	class:b2PrismaticJoint
m_mA	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint
m_mB	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint
m_mC	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint
m_mD	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint
m_majorVersion	src/include/SFML/Network/Http.hpp	/^        unsigned int m_majorVersion; \/\/\/< Major HTTP version$/;"	m	class:sf::Http::Request
m_majorVersion	src/include/SFML/Network/Http.hpp	/^        unsigned int m_majorVersion; \/\/\/< Major HTTP version$/;"	m	class:sf::Http::Response
m_manifold	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Manifold m_manifold;$/;"	m	class:b2Contact
m_mass	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	float32 m_mass;$/;"	m	class:b2DistanceJoint
m_mass	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_mass;$/;"	m	class:b2GearJoint
m_mass	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Mat22 m_mass;$/;"	m	class:b2MouseJoint
m_mass	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_mass;$/;"	m	class:b2PulleyJoint
m_mass	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Mat33 m_mass;			\/\/ effective mass for point-to-point constraint.$/;"	m	class:b2RevoluteJoint
m_mass	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_mass;$/;"	m	class:b2RopeJoint
m_mass	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Mat33 m_mass;$/;"	m	class:b2WeldJoint
m_mass	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_mass;$/;"	m	class:b2WheelJoint
m_mass	src/include/Box2D/Dynamics/b2Body.h	/^	float32 m_mass, m_invMass;$/;"	m	class:b2Body
m_matrix	src/include/SFML/Graphics/Transform.hpp	/^    float m_matrix[16]; \/\/\/< 4x4 matrix defining the transformation$/;"	m	class:sf::Transform
m_maxAllocation	src/include/Box2D/Common/b2StackAllocator.h	/^	int32 m_maxAllocation;$/;"	m	class:b2StackAllocator
m_maxForce	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_maxForce;$/;"	m	class:b2FrictionJoint
m_maxForce	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 m_maxForce;$/;"	m	class:b2MouseJoint
m_maxLength	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 m_maxLength;$/;"	m	class:b2RopeJoint
m_maxMotorForce	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_maxMotorForce;$/;"	m	class:b2PrismaticJoint
m_maxMotorTorque	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_maxMotorTorque;$/;"	m	class:b2RevoluteJoint
m_maxMotorTorque	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_maxMotorTorque;$/;"	m	class:b2WheelJoint
m_maxTorque	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 m_maxTorque;$/;"	m	class:b2FrictionJoint
m_message	src/include/SFML/Network/Ftp.hpp	/^        std::string m_message; \/\/\/< Last message received from the server$/;"	m	class:sf::Ftp::Response
m_method	src/include/SFML/Network/Http.hpp	/^        Method       m_method;       \/\/\/< Method to use for the request$/;"	m	class:sf::Http::Request
m_microseconds	src/include/SFML/System/Time.hpp	/^    Int64 m_microseconds; \/\/\/< Time value stored as microseconds$/;"	m	class:sf::Time
m_minorVersion	src/include/SFML/Network/Http.hpp	/^        unsigned int m_minorVersion; \/\/\/< Minor HTTP version$/;"	m	class:sf::Http::Request
m_minorVersion	src/include/SFML/Network/Http.hpp	/^        unsigned int m_minorVersion; \/\/\/< Minor HTTP version$/;"	m	class:sf::Http::Response
m_motorImpulse	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_motorImpulse;$/;"	m	class:b2PrismaticJoint
m_motorImpulse	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_motorImpulse;$/;"	m	class:b2RevoluteJoint
m_motorImpulse	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_motorImpulse;$/;"	m	class:b2WheelJoint
m_motorMass	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_motorMass;$/;"	m	class:b2PrismaticJoint
m_motorMass	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_motorMass;	\/\/ effective mass for motor\/limit angular constraint.$/;"	m	class:b2RevoluteJoint
m_motorMass	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_motorMass;$/;"	m	class:b2WheelJoint
m_motorSpeed	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_motorSpeed;$/;"	m	class:b2PrismaticJoint
m_motorSpeed	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_motorSpeed;$/;"	m	class:b2RevoluteJoint
m_motorSpeed	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_motorSpeed;$/;"	m	class:b2WheelJoint
m_moveBuffer	src/include/Box2D/Collision/b2BroadPhase.h	/^	int32* m_moveBuffer;$/;"	m	class:b2BroadPhase
m_moveCapacity	src/include/Box2D/Collision/b2BroadPhase.h	/^	int32 m_moveCapacity;$/;"	m	class:b2BroadPhase
m_moveCount	src/include/Box2D/Collision/b2BroadPhase.h	/^	int32 m_moveCount;$/;"	m	class:b2BroadPhase
m_mutex	src/include/SFML/Audio/Music.hpp	/^    Mutex              m_mutex;    \/\/\/< Mutex protecting the data$/;"	m	class:sf::Music
m_mutex	src/include/SFML/System/Lock.hpp	/^    Mutex& m_mutex; \/\/\/< Mutex to lock \/ unlock$/;"	m	class:sf::Lock
m_mutexImpl	src/include/SFML/System/Mutex.hpp	/^    priv::MutexImpl* m_mutexImpl; \/\/\/< OS-specific implementation$/;"	m	class:sf::Mutex
m_next	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Contact* m_next;$/;"	m	class:b2Contact
m_next	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Joint* m_next;$/;"	m	class:b2Joint
m_next	src/include/Box2D/Dynamics/b2Body.h	/^	b2Body* m_next;$/;"	m	class:b2Body
m_next	src/include/Box2D/Dynamics/b2Fixture.h	/^	b2Fixture* m_next;$/;"	m	class:b2Fixture
m_nextVertex	src/include/Box2D/Collision/Shapes/b2ChainShape.h	/^	b2Vec2 m_prevVertex, m_nextVertex;$/;"	m	class:b2ChainShape
m_nodeA	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2ContactEdge m_nodeA;$/;"	m	class:b2Contact
m_nodeB	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2ContactEdge m_nodeB;$/;"	m	class:b2Contact
m_nodeCapacity	src/include/Box2D/Collision/b2DynamicTree.h	/^	int32 m_nodeCapacity;$/;"	m	class:b2DynamicTree
m_nodeCount	src/include/Box2D/Collision/b2DynamicTree.h	/^	int32 m_nodeCount;$/;"	m	class:b2DynamicTree
m_nodes	src/include/Box2D/Collision/b2DynamicTree.h	/^	b2TreeNode* m_nodes;$/;"	m	class:b2DynamicTree
m_normal	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_normal;$/;"	m	struct:b2EPCollider	file:
m_normal0	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_normal0, m_normal1, m_normal2;$/;"	m	struct:b2EPCollider	file:
m_normal1	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_normal0, m_normal1, m_normal2;$/;"	m	struct:b2EPCollider	file:
m_normal2	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_normal0, m_normal1, m_normal2;$/;"	m	struct:b2EPCollider	file:
m_normals	src/include/Box2D/Collision/Shapes/b2PolygonShape.h	/^	b2Vec2 m_normals[b2_maxPolygonVertices];$/;"	m	class:b2PolygonShape
m_origin	src/include/SFML/Graphics/Transformable.hpp	/^    Vector2f          m_origin;                     \/\/\/< Origin of translation\/rotation\/scaling of the object$/;"	m	class:sf::Transformable
m_outlineColor	src/include/SFML/Graphics/Shape.hpp	/^    Color          m_outlineColor;     \/\/\/< Outline color$/;"	m	class:sf::Shape
m_outlineThickness	src/include/SFML/Graphics/Shape.hpp	/^    float          m_outlineThickness; \/\/\/< Thickness of the shape's outline$/;"	m	class:sf::Shape
m_outlineVertices	src/include/SFML/Graphics/Shape.hpp	/^    VertexArray    m_outlineVertices;  \/\/\/< Vertex array containing the outline geometry$/;"	m	class:sf::Shape
m_p	src/include/Box2D/Collision/Shapes/b2CircleShape.h	/^	b2Vec2 m_p;$/;"	m	class:b2CircleShape
m_p0s	src/include/Box2D/Rope/b2Rope.h	/^	b2Vec2* m_p0s;$/;"	m	class:b2Rope
m_pages	src/include/SFML/Graphics/Font.hpp	/^    mutable PageTable          m_pages;       \/\/\/< Table containing the glyphs pages by character size$/;"	m	class:sf::Font
m_pairBuffer	src/include/Box2D/Collision/b2BroadPhase.h	/^	b2Pair* m_pairBuffer;$/;"	m	class:b2BroadPhase
m_pairCapacity	src/include/Box2D/Collision/b2BroadPhase.h	/^	int32 m_pairCapacity;$/;"	m	class:b2BroadPhase
m_pairCount	src/include/Box2D/Collision/b2BroadPhase.h	/^	int32 m_pairCount;$/;"	m	class:b2BroadPhase
m_path	src/include/Box2D/Collision/b2DynamicTree.h	/^	uint32 m_path;$/;"	m	class:b2DynamicTree
m_pendingPacket	src/include/SFML/Network/TcpSocket.hpp	/^    PendingPacket m_pendingPacket; \/\/\/< Temporary data of the packet currently being received$/;"	m	class:sf::TcpSocket
m_perp	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	b2Vec2 m_axis, m_perp;$/;"	m	class:b2PrismaticJoint
m_pixelBuffer	src/include/SFML/Graphics/Font.hpp	/^    mutable std::vector<Uint8> m_pixelBuffer; \/\/\/< Pixel buffer holding a glyph's pixels before being written to the texture$/;"	m	class:sf::Font
m_pixels	src/include/SFML/Graphics/Image.hpp	/^    std::vector<Uint8> m_pixels; \/\/\/< Pixels of the image$/;"	m	class:sf::Image
m_pixelsFlipped	src/include/SFML/Graphics/Texture.hpp	/^    mutable bool m_pixelsFlipped; \/\/\/< To work around the inconsistency in Y orientation$/;"	m	class:sf::Texture
m_pointCount	src/include/SFML/Graphics/CircleShape.hpp	/^    unsigned int m_pointCount; \/\/\/< Number of points composing the circle$/;"	m	class:sf::CircleShape
m_points	src/include/SFML/Graphics/ConvexShape.hpp	/^    std::vector<Vector2f> m_points; \/\/\/< Points composing the convex polygon$/;"	m	class:sf::ConvexShape
m_polygonB	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2TempPolygon m_polygonB;$/;"	m	struct:b2EPCollider	file:
m_port	src/include/SFML/Network/Http.hpp	/^    unsigned short m_port;       \/\/\/< Port used for connection with host$/;"	m	class:sf::Http
m_position	src/include/SFML/Graphics/Transformable.hpp	/^    Vector2f          m_position;                   \/\/\/< Position of the object in the 2D world$/;"	m	class:sf::Transformable
m_positionConstraints	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2ContactPositionConstraint* m_positionConstraints;$/;"	m	class:b2ContactSolver
m_positions	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Position* m_positions;$/;"	m	class:b2ContactSolver
m_positions	src/include/Box2D/Dynamics/b2Island.h	/^	b2Position* m_positions;$/;"	m	class:b2Island
m_prev	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Contact* m_prev;$/;"	m	class:b2Contact
m_prev	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Joint* m_prev;$/;"	m	class:b2Joint
m_prev	src/include/Box2D/Dynamics/b2Body.h	/^	b2Body* m_prev;$/;"	m	class:b2Body
m_prevVertex	src/include/Box2D/Collision/Shapes/b2ChainShape.h	/^	b2Vec2 m_prevVertex, m_nextVertex;$/;"	m	class:b2ChainShape
m_primitiveType	src/include/SFML/Graphics/VertexArray.hpp	/^    PrimitiveType       m_primitiveType; \/\/\/< Type of primitives to draw$/;"	m	class:sf::VertexArray
m_profile	src/include/Box2D/Dynamics/b2World.h	/^	b2Profile m_profile;$/;"	m	class:b2World
m_proxies	src/include/Box2D/Dynamics/b2Fixture.h	/^	b2FixtureProxy* m_proxies;$/;"	m	class:b2Fixture
m_proxyA	src/include/Box2D/Collision/b2TimeOfImpact.cpp	/^	const b2DistanceProxy* m_proxyA;$/;"	m	struct:b2SeparationFunction	file:
m_proxyB	src/include/Box2D/Collision/b2TimeOfImpact.cpp	/^	const b2DistanceProxy* m_proxyB;$/;"	m	struct:b2SeparationFunction	file:
m_proxyCount	src/include/Box2D/Collision/b2BroadPhase.h	/^	int32 m_proxyCount;$/;"	m	class:b2BroadPhase
m_proxyCount	src/include/Box2D/Dynamics/b2Fixture.h	/^	int32 m_proxyCount;$/;"	m	class:b2Fixture
m_ps	src/include/Box2D/Rope/b2Rope.h	/^	b2Vec2* m_ps;$/;"	m	class:b2Rope
m_queryProxyId	src/include/Box2D/Collision/b2BroadPhase.h	/^	int32 m_queryProxyId;$/;"	m	class:b2BroadPhase
m_rA	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2DistanceJoint
m_rA	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2FrictionJoint
m_rA	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2PulleyJoint
m_rA	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2RevoluteJoint
m_rA	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2RopeJoint
m_rA	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2WeldJoint
m_rB	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2DistanceJoint
m_rB	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2FrictionJoint
m_rB	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2MouseJoint
m_rB	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2PulleyJoint
m_rB	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2RevoluteJoint
m_rB	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2RopeJoint
m_rB	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2WeldJoint
m_radius	src/include/Box2D/Collision/Shapes/b2Shape.h	/^	float32 m_radius;$/;"	m	class:b2Shape
m_radius	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	float32 m_radius;$/;"	m	struct:b2EPCollider	file:
m_radius	src/include/Box2D/Collision/b2Distance.h	/^	float32 m_radius;$/;"	m	struct:b2DistanceProxy
m_radius	src/include/SFML/Graphics/CircleShape.hpp	/^    float        m_radius;     \/\/\/< Radius of the circle$/;"	m	class:sf::CircleShape
m_ratio	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_ratio;$/;"	m	class:b2GearJoint
m_ratio	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 m_ratio;$/;"	m	class:b2PulleyJoint
m_readPos	src/include/SFML/Network/Packet.hpp	/^    std::size_t       m_readPos; \/\/\/< Current reading position in the packet$/;"	m	class:sf::Packet
m_refCount	src/include/SFML/Graphics/Font.hpp	/^    int*                       m_refCount;    \/\/\/< Reference counter used by implicit sharing$/;"	m	class:sf::Font
m_referenceAngle	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_referenceAngle;$/;"	m	class:b2PrismaticJoint
m_referenceAngle	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_referenceAngle;$/;"	m	class:b2RevoluteJoint
m_referenceAngle	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 m_referenceAngle;$/;"	m	class:b2WeldJoint
m_referenceAngleA	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_referenceAngleA;$/;"	m	class:b2GearJoint
m_referenceAngleB	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 m_referenceAngleB;$/;"	m	class:b2GearJoint
m_restitution	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	float32 m_restitution;$/;"	m	class:b2Contact
m_restitution	src/include/Box2D/Dynamics/b2Fixture.h	/^	float32 m_restitution;$/;"	m	class:b2Fixture
m_root	src/include/Box2D/Collision/b2DynamicTree.h	/^	int32 m_root;$/;"	m	class:b2DynamicTree
m_rotation	src/include/SFML/Graphics/Transformable.hpp	/^    float             m_rotation;                   \/\/\/< Orientation of the object, in degrees$/;"	m	class:sf::Transformable
m_rotation	src/include/SFML/Graphics/View.hpp	/^    float             m_rotation;            \/\/\/< Angle of rotation of the view rectangle, in degrees$/;"	m	class:sf::View
m_s1	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_s1, m_s2;$/;"	m	class:b2PrismaticJoint
m_s2	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_s1, m_s2;$/;"	m	class:b2PrismaticJoint
m_sAx	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_sAx, m_sBx;$/;"	m	class:b2WheelJoint
m_sAy	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_sAy, m_sBy;$/;"	m	class:b2WheelJoint
m_sBx	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_sAx, m_sBx;$/;"	m	class:b2WheelJoint
m_sBy	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_sAy, m_sBy;$/;"	m	class:b2WheelJoint
m_sampleRate	src/include/SFML/Audio/SoundRecorder.hpp	/^    unsigned int       m_sampleRate;  \/\/\/< Sample rate$/;"	m	class:sf::SoundRecorder
m_sampleRate	src/include/SFML/Audio/SoundStream.hpp	/^    unsigned int  m_sampleRate;              \/\/\/< Frequency (samples \/ second)$/;"	m	class:sf::SoundStream
m_samples	src/include/SFML/Audio/Music.hpp	/^    std::vector<Int16> m_samples;  \/\/\/< Temporary buffer of samples$/;"	m	class:sf::Music
m_samples	src/include/SFML/Audio/SoundBuffer.hpp	/^    std::vector<Int16> m_samples;  \/\/\/< Samples buffer$/;"	m	class:sf::SoundBuffer
m_samples	src/include/SFML/Audio/SoundBufferRecorder.hpp	/^    std::vector<Int16> m_samples; \/\/\/< Temporary sample buffer to hold the recorded data$/;"	m	class:sf::SoundBufferRecorder
m_samples	src/include/SFML/Audio/SoundRecorder.hpp	/^    std::vector<Int16> m_samples;     \/\/\/< Buffer to store captured samples$/;"	m	class:sf::SoundRecorder
m_samplesProcessed	src/include/SFML/Audio/SoundStream.hpp	/^    Uint64        m_samplesProcessed;        \/\/\/< Number of buffers processed since beginning of the stream$/;"	m	class:sf::SoundStream
m_scale	src/include/SFML/Graphics/Transformable.hpp	/^    Vector2f          m_scale;                      \/\/\/< Scale of the object$/;"	m	class:sf::Transformable
m_shaderProgram	src/include/SFML/Graphics/Shader.hpp	/^    unsigned int m_shaderProgram;  \/\/\/< OpenGL identifier for the program$/;"	m	class:sf::Shader
m_shape	src/include/Box2D/Dynamics/b2Fixture.h	/^	b2Shape* m_shape;$/;"	m	class:b2Fixture
m_size	src/include/SFML/Graphics/Image.hpp	/^    Vector2u           m_size;   \/\/\/< Image size$/;"	m	class:sf::Image
m_size	src/include/SFML/Graphics/RectangleShape.hpp	/^    Vector2f m_size; \/\/\/< Size of the rectangle$/;"	m	class:sf::RectangleShape
m_size	src/include/SFML/Graphics/Texture.hpp	/^    Vector2u     m_size;          \/\/\/< Public texture size$/;"	m	class:sf::Texture
m_size	src/include/SFML/Graphics/View.hpp	/^    Vector2f          m_size;                \/\/\/< Size of the view, in scene coordinates$/;"	m	class:sf::View
m_sleepTime	src/include/Box2D/Dynamics/b2Body.h	/^	float32 m_sleepTime;$/;"	m	class:b2Body
m_socket	src/include/SFML/Network/Socket.hpp	/^    SocketHandle m_socket;     \/\/\/< Socket descriptor$/;"	m	class:sf::Socket
m_sounds	src/include/SFML/Audio/SoundBuffer.hpp	/^    mutable SoundList  m_sounds;   \/\/\/< List of sounds that are using this buffer$/;"	m	class:sf::SoundBuffer
m_source	src/include/SFML/Audio/SoundSource.hpp	/^    unsigned int m_source; \/\/\/< OpenAL source identifier$/;"	m	class:sf::SoundSource
m_springImpulse	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_springImpulse;$/;"	m	class:b2WheelJoint
m_springMass	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 m_springMass;$/;"	m	class:b2WheelJoint
m_stack	src/include/Box2D/Common/b2GrowableStack.h	/^	T* m_stack;$/;"	m	class:b2GrowableStack
m_stackAllocator	src/include/Box2D/Dynamics/b2World.h	/^	b2StackAllocator m_stackAllocator;$/;"	m	class:b2World
m_start	src/include/Box2D/Common/b2Timer.h	/^	float64 m_start;$/;"	m	class:b2Timer
m_startTime	src/include/SFML/System/Clock.hpp	/^    Time m_startTime; \/\/\/< Time of last reset, in microseconds$/;"	m	class:sf::Clock
m_start_msec	src/include/Box2D/Common/b2Timer.h	/^	unsigned long m_start_msec;$/;"	m	class:b2Timer
m_start_sec	src/include/Box2D/Common/b2Timer.h	/^	unsigned long m_start_sec;$/;"	m	class:b2Timer
m_state	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2LimitState m_state;$/;"	m	class:b2RopeJoint
m_status	src/include/SFML/Network/Ftp.hpp	/^        Status      m_status;  \/\/\/< Status code returned from the server$/;"	m	class:sf::Ftp::Response
m_status	src/include/SFML/Network/Http.hpp	/^        Status       m_status;       \/\/\/< Status code$/;"	m	class:sf::Http::Response
m_step	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2TimeStep m_step;$/;"	m	class:b2ContactSolver
m_stepComplete	src/include/Box2D/Dynamics/b2World.h	/^	bool m_stepComplete;$/;"	m	class:b2World
m_streamRec	src/include/SFML/Graphics/Font.hpp	/^    void*                      m_streamRec;   \/\/\/< Pointer to the stream rec instance (it is typeless to avoid exposing implementation details)$/;"	m	class:sf::Font
m_string	src/include/SFML/Graphics/Text.hpp	/^    String        m_string;        \/\/\/< String to display$/;"	m	class:sf::Text
m_string	src/include/SFML/System/String.hpp	/^    std::basic_string<Uint32> m_string; \/\/\/< Internal string of UTF-32 characters$/;"	m	class:sf::String
m_style	src/include/SFML/Graphics/Text.hpp	/^    Uint32        m_style;         \/\/\/< Text style (see Style enum)$/;"	m	class:sf::Text
m_subStepping	src/include/Box2D/Dynamics/b2World.h	/^	bool m_subStepping;$/;"	m	class:b2World
m_sweep	src/include/Box2D/Dynamics/b2Body.h	/^	b2Sweep m_sweep;		\/\/ the swept motion for CCD$/;"	m	class:b2Body
m_sweepA	src/include/Box2D/Collision/b2TimeOfImpact.cpp	/^	b2Sweep m_sweepA, m_sweepB;$/;"	m	struct:b2SeparationFunction	file:
m_sweepB	src/include/Box2D/Collision/b2TimeOfImpact.cpp	/^	b2Sweep m_sweepA, m_sweepB;$/;"	m	struct:b2SeparationFunction	file:
m_targetA	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 m_targetA;$/;"	m	class:b2MouseJoint
m_texture	src/include/SFML/Graphics/RenderTexture.hpp	/^    Texture                  m_texture; \/\/\/< Target texture to draw on$/;"	m	class:sf::RenderTexture
m_texture	src/include/SFML/Graphics/Shape.hpp	/^    const Texture* m_texture;          \/\/\/< Texture of the shape$/;"	m	class:sf::Shape
m_texture	src/include/SFML/Graphics/Sprite.hpp	/^    const Texture* m_texture;     \/\/\/< Texture of the sprite$/;"	m	class:sf::Sprite
m_texture	src/include/SFML/Graphics/Texture.hpp	/^    unsigned int m_texture;       \/\/\/< Internal texture identifier$/;"	m	class:sf::Texture
m_textureRect	src/include/SFML/Graphics/Shape.hpp	/^    IntRect        m_textureRect;      \/\/\/< Rectangle defining the area of the source texture to display$/;"	m	class:sf::Shape
m_textureRect	src/include/SFML/Graphics/Sprite.hpp	/^    IntRect        m_textureRect; \/\/\/< Rectangle defining the area of the source texture to display$/;"	m	class:sf::Sprite
m_textures	src/include/SFML/Graphics/Shader.hpp	/^    TextureTable m_textures;       \/\/\/< Texture variables in the shader, mapped to their location$/;"	m	class:sf::Shader
m_thread	src/include/SFML/Audio/SoundRecorder.hpp	/^    Thread             m_thread;      \/\/\/< Thread running the background recording task$/;"	m	class:sf::SoundRecorder
m_thread	src/include/SFML/Audio/SoundStream.hpp	/^    Thread        m_thread;                  \/\/\/< Thread running the background tasks$/;"	m	class:sf::SoundStream
m_toi	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	float32 m_toi;$/;"	m	class:b2Contact
m_toiCount	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	int32 m_toiCount;$/;"	m	class:b2Contact
m_torque	src/include/Box2D/Dynamics/b2Body.h	/^	float32 m_torque;$/;"	m	class:b2Body
m_transform	src/include/SFML/Graphics/Transformable.hpp	/^    mutable Transform m_transform;                  \/\/\/< Combined transformation of the object$/;"	m	class:sf::Transformable
m_transform	src/include/SFML/Graphics/View.hpp	/^    mutable Transform m_transform;           \/\/\/< Precomputed projection transform corresponding to the view$/;"	m	class:sf::View
m_transformNeedUpdate	src/include/SFML/Graphics/Transformable.hpp	/^    mutable bool      m_transformNeedUpdate;        \/\/\/< Does the transform need to be recomputed?$/;"	m	class:sf::Transformable
m_transformUpdated	src/include/SFML/Graphics/View.hpp	/^    mutable bool      m_transformUpdated;    \/\/\/< Internal state telling if the transform needs to be updated$/;"	m	class:sf::View
m_tree	src/include/Box2D/Collision/b2BroadPhase.h	/^	b2DynamicTree m_tree;$/;"	m	class:b2BroadPhase
m_type	src/include/Box2D/Collision/Shapes/b2Shape.h	/^	Type m_type;$/;"	m	class:b2Shape
m_type	src/include/Box2D/Collision/b2TimeOfImpact.cpp	/^	Type m_type;$/;"	m	struct:b2SeparationFunction	file:
m_type	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointType m_type;$/;"	m	class:b2Joint
m_type	src/include/Box2D/Dynamics/b2Body.h	/^	b2BodyType m_type;$/;"	m	class:b2Body
m_type	src/include/SFML/Network/Socket.hpp	/^    Type         m_type;       \/\/\/< Type of the socket (TCP or UDP)$/;"	m	class:sf::Socket
m_type1	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	VertexType m_type1, m_type2;$/;"	m	struct:b2EPCollider	file:
m_type2	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	VertexType m_type1, m_type2;$/;"	m	struct:b2EPCollider	file:
m_typeA	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2JointType m_typeA;$/;"	m	class:b2GearJoint
m_typeB	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	b2JointType m_typeB;$/;"	m	class:b2GearJoint
m_u	src/include/Box2D/Dynamics/Joints/b2DistanceJoint.h	/^	b2Vec2 m_u;$/;"	m	class:b2DistanceJoint
m_u	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	b2Vec2 m_u;$/;"	m	class:b2RopeJoint
m_uA	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_uA;$/;"	m	class:b2PulleyJoint
m_uB	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	b2Vec2 m_uB;$/;"	m	class:b2PulleyJoint
m_upperAngle	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 m_upperAngle;$/;"	m	class:b2RevoluteJoint
m_upperLimit	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_lowerLimit, m_upperLimit;$/;"	m	struct:b2EPCollider	file:
m_upperTranslation	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 m_upperTranslation;$/;"	m	class:b2PrismaticJoint
m_uri	src/include/SFML/Network/Http.hpp	/^        std::string  m_uri;          \/\/\/< Target URI of the request$/;"	m	class:sf::Http::Request
m_userData	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	void* m_userData;$/;"	m	class:b2Joint
m_userData	src/include/Box2D/Dynamics/b2Body.h	/^	void* m_userData;$/;"	m	class:b2Body
m_userData	src/include/Box2D/Dynamics/b2Fixture.h	/^	void* m_userData;$/;"	m	class:b2Fixture
m_v0	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:
m_v1	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:
m_v1	src/include/Box2D/Collision/b2Distance.cpp	/^	b2SimplexVertex m_v1, m_v2, m_v3;$/;"	m	struct:b2Simplex	file:
m_v2	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:
m_v2	src/include/Box2D/Collision/b2Distance.cpp	/^	b2SimplexVertex m_v1, m_v2, m_v3;$/;"	m	struct:b2Simplex	file:
m_v3	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:
m_v3	src/include/Box2D/Collision/b2Distance.cpp	/^	b2SimplexVertex m_v1, m_v2, m_v3;$/;"	m	struct:b2Simplex	file:
m_velocities	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Velocity* m_velocities;$/;"	m	class:b2ContactSolver
m_velocities	src/include/Box2D/Dynamics/b2Island.h	/^	b2Velocity* m_velocities;$/;"	m	class:b2Island
m_velocityConstraints	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2ContactVelocityConstraint* m_velocityConstraints;$/;"	m	class:b2ContactSolver
m_vertex0	src/include/Box2D/Collision/Shapes/b2EdgeShape.h	/^	b2Vec2 m_vertex0, m_vertex3;$/;"	m	class:b2EdgeShape
m_vertex1	src/include/Box2D/Collision/Shapes/b2EdgeShape.h	/^	b2Vec2 m_vertex1, m_vertex2;$/;"	m	class:b2EdgeShape
m_vertex2	src/include/Box2D/Collision/Shapes/b2EdgeShape.h	/^	b2Vec2 m_vertex1, m_vertex2;$/;"	m	class:b2EdgeShape
m_vertex3	src/include/Box2D/Collision/Shapes/b2EdgeShape.h	/^	b2Vec2 m_vertex0, m_vertex3;$/;"	m	class:b2EdgeShape
m_vertexCount	src/include/Box2D/Collision/Shapes/b2PolygonShape.h	/^	int32 m_vertexCount;$/;"	m	class:b2PolygonShape
m_vertices	src/include/Box2D/Collision/Shapes/b2ChainShape.h	/^	b2Vec2* m_vertices;$/;"	m	class:b2ChainShape
m_vertices	src/include/Box2D/Collision/Shapes/b2PolygonShape.h	/^	b2Vec2 m_vertices[b2_maxPolygonVertices];$/;"	m	class:b2PolygonShape
m_vertices	src/include/Box2D/Collision/b2Distance.h	/^	const b2Vec2* m_vertices;$/;"	m	struct:b2DistanceProxy
m_vertices	src/include/SFML/Graphics/Shape.hpp	/^    VertexArray    m_vertices;         \/\/\/< Vertex array containing the fill geometry$/;"	m	class:sf::Shape
m_vertices	src/include/SFML/Graphics/Sprite.hpp	/^    Vertex         m_vertices[4]; \/\/\/< Vertices defining the sprite's geometry$/;"	m	class:sf::Sprite
m_vertices	src/include/SFML/Graphics/Text.hpp	/^    VertexArray   m_vertices;      \/\/\/< Vertex array containing the text's geometry$/;"	m	class:sf::Text
m_vertices	src/include/SFML/Graphics/VertexArray.hpp	/^    std::vector<Vertex> m_vertices;      \/\/\/< Vertices contained in the array$/;"	m	class:sf::VertexArray
m_view	src/include/SFML/Graphics/RenderTarget.hpp	/^    View        m_view;        \/\/\/< Current view$/;"	m	class:sf::RenderTarget
m_viewport	src/include/SFML/Graphics/View.hpp	/^    FloatRect         m_viewport;            \/\/\/< Viewport rectangle, expressed as a factor of the render-target's size$/;"	m	class:sf::View
m_vs	src/include/Box2D/Rope/b2Rope.h	/^	b2Vec2* m_vs;$/;"	m	class:b2Rope
m_warmStarting	src/include/Box2D/Dynamics/b2World.h	/^	bool m_warmStarting;$/;"	m	class:b2World
m_world	src/include/Box2D/Dynamics/b2Body.h	/^	b2World* m_world;$/;"	m	class:b2Body
m_xf	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Transform m_xf;$/;"	m	struct:b2EPCollider	file:
m_xf	src/include/Box2D/Dynamics/b2Body.h	/^	b2Transform m_xf;		\/\/ the body origin transform$/;"	m	class:b2Body
machineGun	src/game/generators/gunDataGenerator.h	/^		machineGun = 0,$/;"	e	enum:gunDataGenerator::Archetype
main	src/main.cc	/^int main(){$/;"	f
main	tools/beautified.cpp	/^int main ( int argc, char *argv[] ){$/;"	f
main	tools/input.cpp	/^int main(int argc, char *argv[])$/;"	f
mainLoopListener	src/mainLoopListener.h	/^	mainLoopListener(eventMgr &eventManager) : windowClosed(false){$/;"	f	class:mainLoopListener
mainLoopListener	src/mainLoopListener.h	/^class mainLoopListener : public Observer{$/;"	c
mainMenuState	src/game/States/mainMenuState.h	/^	mainMenuState() : State("mainMenuState"){};$/;"	f	class:mainMenuState
mainMenuState	src/game/States/mainMenuState.h	/^class mainMenuState : public State{$/;"	c
major	src/include/Box2D/Common/b2Settings.h	/^	int32 major;		\/\/\/< significant changes$/;"	m	struct:b2Version
majorVersion	src/include/SFML/Window/ContextSettings.hpp	/^    unsigned int majorVersion;      \/\/\/< Major number of the context version to create$/;"	m	struct:sf::ContextSettings
makeInvulnerable	src/game/ObjProcessors/healthProcessor.h	/^	void makeInvulnerable(){$/;"	f	struct:healthData
makeVulnerable	src/game/ObjProcessors/healthProcessor.h	/^	void makeVulnerable(){$/;"	f	struct:healthData
make_default_signals	src/include/backward/backward.hpp	/^   static std::vector<int> make_default_signals() {$/;"	f	class:backward::SignalHandling
managedProp	src/core/Property.h	/^	managedProp(T *value){$/;"	f	class:managedProp
managedProp	src/core/Property.h	/^class managedProp : public baseProperty{$/;"	c
map	src/include/backward/backward.hpp	/^	const map_t& map() const {$/;"	f	class:backward::Variable
map	src/include/backward/backward.hpp	/^	map_t& map() {$/;"	f	class:backward::Variable
map_t	src/include/backward/backward.hpp	/^	typedef std::vector<Variable>    map_t;$/;"	t	class:backward::Variable
maskBits	src/include/Box2D/Dynamics/b2Fixture.h	/^	uint16 maskBits;$/;"	m	struct:b2Filter
mass	src/game/ObjProcessors/groundMoveProcessor.h	/^	float mass;$/;"	m	struct:moveData
mass	src/include/Box2D/Collision/Shapes/b2Shape.h	/^	float32 mass;$/;"	m	struct:b2MassData
masses	src/include/Box2D/Rope/b2Rope.h	/^	float32* masses;$/;"	m	struct:b2RopeDef
maxAccumilation	src/core/Process/worldProcess.h	/^	float maxAccumilation;$/;"	m	class:worldProcess
maxAccumilation	src/game/ObjProcessors/cameraProcessor.h	/^	float maxAccumilation;$/;"	m	class:cameraProcessor
maxCoord	src/game/ObjProcessors/cameraProcessor.h	/^	vector2 maxCoord;$/;"	m	struct:cameraData
maxForce	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 maxForce;$/;"	m	struct:b2FrictionJointDef
maxForce	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	float32 maxForce;$/;"	m	struct:b2MouseJointDef
maxFraction	src/include/Box2D/Collision/b2Collision.h	/^	float32 maxFraction;$/;"	m	struct:b2RayCastInput
maxHP	src/game/ObjProcessors/healthProcessor.h	/^	unsigned int maxHP;$/;"	m	struct:healthData
maxLength	src/include/Box2D/Dynamics/Joints/b2RopeJoint.h	/^	float32 maxLength;$/;"	m	struct:b2RopeJointDef
maxMotorForce	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 maxMotorForce;$/;"	m	struct:b2PrismaticJointDef
maxMotorTorque	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 maxMotorTorque;$/;"	m	struct:b2RevoluteJointDef
maxMotorTorque	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 maxMotorTorque;$/;"	m	struct:b2WheelJointDef
maxMoveAmt	src/game/ObjProcessors/cameraProcessor.h	/^	vector2 maxMoveAmt; $/;"	m	struct:cameraData
maxTorque	src/include/Box2D/Dynamics/Joints/b2FrictionJoint.h	/^	float32 maxTorque;$/;"	m	struct:b2FrictionJointDef
maxVel	src/core/ObjProcessors/phyProcessor.h	/^	vector2 maxVel;$/;"	m	struct:phyData
mediumDamage	src/game/generators/bulletDataGenerator.h	/^		mediumDamage,$/;"	e	enum:bulletDataGenerator::damageProperty
mediumKnockback	src/game/generators/bulletDataGenerator.h	/^		mediumKnockback,$/;"	e	enum:bulletDataGenerator::knockbackProperty
metric	src/include/Box2D/Collision/b2Distance.h	/^	float32 metric;		\/\/\/< length or area$/;"	m	struct:b2SimplexCache
minCoord	src/game/ObjProcessors/cameraProcessor.h	/^	vector2 minCoord;$/;"	m	struct:cameraData
minor	src/include/Box2D/Common/b2Settings.h	/^	int32 minor;		\/\/\/< incremental changes$/;"	m	struct:b2Version
minorVersion	src/include/SFML/Window/ContextSettings.hpp	/^    unsigned int minorVersion;      \/\/\/< Minor number of the context version to create$/;"	m	struct:sf::ContextSettings
motorSpeed	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 motorSpeed;$/;"	m	struct:b2PrismaticJointDef
motorSpeed	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 motorSpeed;$/;"	m	struct:b2RevoluteJointDef
motorSpeed	src/include/Box2D/Dynamics/Joints/b2WheelJoint.h	/^	float32 motorSpeed;$/;"	m	struct:b2WheelJointDef
mouseButton	src/include/SFML/Window/Event.hpp	/^        MouseButtonEvent     mouseButton;     \/\/\/< Mouse button event parameters (Event::MouseButtonPressed, Event::MouseButtonReleased)$/;"	m	union:sf::Event::__anon4
mouseMove	src/include/SFML/Window/Event.hpp	/^        MouseMoveEvent       mouseMove;       \/\/\/< Mouse move event parameters (Event::MouseMoved)$/;"	m	union:sf::Event::__anon4
mouseWheel	src/include/SFML/Window/Event.hpp	/^        MouseWheelEvent      mouseWheel;      \/\/\/< Mouse wheel event parameters (Event::MouseWheelMoved)$/;"	m	union:sf::Event::__anon4
move	src/core/Process/viewProcess.cpp	/^void viewProcess::move(vector2 offset){$/;"	f	class:viewProcess
moveData	src/game/ObjProcessors/groundMoveProcessor.h	/^	moveData() : xVel(0), xAccel(0), jumpRange(0), jumpHeight(0), $/;"	f	struct:moveData
moveData	src/game/ObjProcessors/groundMoveProcessor.h	/^struct moveData{$/;"	s
moveImpulse	src/game/ObjProcessors/groundMoveProcessor.h	/^	vector2 moveImpulse;$/;"	m	struct:moveData
movementDamping	src/game/ObjProcessors/groundMoveProcessor.h	/^	vector2 movementDamping;$/;"	m	struct:moveData
movingLeft	src/game/ObjProcessors/groundMoveProcessor.h	/^	bool movingLeft;$/;"	m	struct:moveData
movingRight	src/game/ObjProcessors/groundMoveProcessor.h	/^	bool movingRight;$/;"	m	struct:moveData
msgLog	src/util/logObject.h	/^		msgLog(){};$/;"	f	class:util::msgLog
msgLog	src/util/logObject.h	/^	class msgLog : public baseLog{$/;"	c	namespace:util
msgLog	tools/beautified.cpp	/^	msgLog (){}$/;"	f	class:util::msgLog
msgLog	tools/beautified.cpp	/^class msgLog : public baseLog$/;"	c	namespace:util	file:
msgLog	tools/input.cpp	/^		msgLog(){};$/;"	f	class:util::msgLog
msgLog	tools/input.cpp	/^	class msgLog : public baseLog{$/;"	c	namespace:util	file:
myApproachVel	src/core/ObjProcessors/objContactListener.h	/^	vector2 myApproachVel;$/;"	m	struct:collisionData
myPhy	src/core/ObjProcessors/objContactListener.h	/^	phyData *myPhy;$/;"	m	struct:collisionData
name	src/core/Messaging/eventMgr.h	/^		const Hash *name;$/;"	m	struct:eventMgr::Event
name	src/core/Object.h	/^	std::string name;$/;"	m	class:Object
name	src/include/backward/backward.hpp	/^	std::string name;$/;"	m	class:backward::Variable
nameHash	src/core/Process/Process.h	/^	const Hash *nameHash;$/;"	m	class:Process
nameIt	src/core/Object.h	/^	typedef std::map<std::string, unsigned int>::iterator nameIt;$/;"	t	class:Object
nameMap	src/core/Object.cpp	/^std::map<std::string, unsigned int> Object::nameMap;$/;"	m	class:Object	file:
nameMap	src/core/Object.h	/^	static std::map<std::string, unsigned int>nameMap;$/;"	m	class:Object
next	src/include/Box2D/Collision/b2BroadPhase.h	/^	int32 next;$/;"	m	struct:b2Pair
next	src/include/Box2D/Collision/b2DynamicTree.h	/^		int32 next;$/;"	m	union:b2TreeNode::__anon11
next	src/include/Box2D/Common/b2BlockAllocator.cpp	/^	b2Block* next;$/;"	m	struct:b2Block	file:
next	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2ContactEdge* next;	\/\/\/< the next contact edge in the body's contact list$/;"	m	struct:b2ContactEdge
next	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointEdge* next;		\/\/\/< the next joint edge in the body's joint list$/;"	m	struct:b2JointEdge
nextRow	src/include/SFML/Graphics/Font.hpp	/^        unsigned int     nextRow; \/\/\/< Y position of the next new row in the texture$/;"	m	struct:sf::Font::Page
nextStateName	src/core/State/State.h	/^	 std::string nextStateName; $/;"	m	class:State
noGravity	src/game/generators/bulletDataGenerator.h	/^		noGravity = 0,$/;"	e	enum:bulletDataGenerator::gravityProperty
noKnockback	src/game/generators/bulletDataGenerator.h	/^		noKnockback = 0,$/;"	e	enum:bulletDataGenerator::knockbackProperty
nodes	src/core/Process/renderProcess.h	/^	std::list<baseRenderNode *> nodes;$/;"	m	class:renderProcess
normal	src/core/ObjProcessors/objContactListener.h	/^	vector2 normal;$/;"	m	struct:collisionData
normal	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 normal;$/;"	m	struct:b2ReferenceFace	file:
normal	src/include/Box2D/Collision/b2Collision.h	/^	b2Vec2 normal;							\/\/\/< world vector pointing from A to B$/;"	m	struct:b2WorldManifold
normal	src/include/Box2D/Collision/b2Collision.h	/^	b2Vec2 normal;$/;"	m	struct:b2RayCastOutput
normal	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 normal;$/;"	m	struct:b2PositionSolverManifold	file:
normal	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Vec2 normal;$/;"	m	struct:b2ContactVelocityConstraint
normalImpulse	src/include/Box2D/Collision/b2Collision.h	/^	float32 normalImpulse;	\/\/\/< the non-penetration impulse$/;"	m	struct:b2ManifoldPoint
normalImpulse	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 normalImpulse;$/;"	m	struct:b2VelocityConstraintPoint
normalImpulses	src/include/Box2D/Dynamics/b2WorldCallbacks.h	/^	float32 normalImpulses[b2_maxManifoldPoints];$/;"	m	struct:b2ContactImpulse
normalMass	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Mat22 normalMass;$/;"	m	struct:b2ContactVelocityConstraint
normalMass	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 normalMass;$/;"	m	struct:b2VelocityConstraintPoint
normals	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 normals[b2_maxPolygonVertices];$/;"	m	struct:b2TempPolygon	file:
not_isempty	src/include/backward/backward.hpp	/^	struct not_isempty {$/;"	s	class:backward::SourceFile
not_isspace	src/include/backward/backward.hpp	/^	struct not_isspace {$/;"	s	class:backward::SourceFile
nullVector	src/core/vector.h	147;"	d
nullVector	tools/beautified.cpp	399;"	d	file:
nullVector	tools/input.cpp	329;"	d	file:
numAbilities	src/game/generators/bulletDataGenerator.h	/^		int numAbilities;$/;"	m	struct:bulletDataGenerator::genData
numChunks	src/game/factory/terrainCreator.h	/^	vector2 bottomLeft, topRight, numChunks;$/;"	m	class:terrainCreator
numTiles	src/game/terrainGen/terrainGenerator.h	/^	float numTiles;$/;"	m	class:terrainGenerator
objContactListener	src/core/ObjProcessors/objContactListener.h	/^	objContactListener(){};$/;"	f	class:objContactListener
objContactListener	src/core/ObjProcessors/objContactListener.h	/^class objContactListener : public b2ContactListener{$/;"	c
objFactory	src/game/States/gameState.h	/^	objectFactory objFactory; $/;"	m	class:gameState
objFactory	tools/beautified.cpp	/^	objectFactory objFactory;$/;"	m	class:gameState	file:
objFactory	tools/input.cpp	/^	objectFactory objFactory; $/;"	m	class:gameState	file:
objManager	src/core/Process/objectMgrProcess.h	/^	objectMgr *objManager;$/;"	m	class:objectMgrProcess
objMap	src/core/objectMgr.h	/^	objectMap objMap;$/;"	m	class:objectMgr
objMap	src/core/objectProcessor.h	/^	  objectMap *objMap;$/;"	m	class:objectProcessor
objMap	tools/beautified.cpp	/^	objectMap objMap;$/;"	m	class:objectMgr	file:
objMap	tools/input.cpp	/^	objectMap objMap;$/;"	m	class:objectMgr	file:
objMapIt	src/core/objectProcessor.h	/^typedef objectMap::iterator objMapIt;$/;"	t
objMoveData	src/game/gameStateHelpers/playerEventHandler.h	/^	moveData *objMoveData;$/;"	m	struct:playerHandlerData
objProcessorIt	src/core/objectMgr.h	/^	typedef std::vector<objectProcessor *>::iterator objProcessorIt;$/;"	t	class:objectMgr
objProcessorIt	tools/beautified.cpp	/^	typedef std::vector< objectProcessor * >::iterator objProcessorIt;$/;"	t	class:objectMgr	file:
objProcessorIt	tools/input.cpp	/^	typedef std::vector<objectProcessor *>::iterator objProcessorIt;$/;"	t	class:objectMgr	file:
objProcessors	src/core/objectMgr.h	/^	std::vector<objectProcessor *> objProcessors;$/;"	m	class:objectMgr
objProcessors	tools/beautified.cpp	/^	std::vector< objectProcessor * > objProcessors;$/;"	m	class:objectMgr	file:
objProcessors	tools/input.cpp	/^	std::vector<objectProcessor *> objProcessors;$/;"	m	class:objectMgr	file:
object	src/include/backward/backward.hpp	/^	bool object;$/;"	m	class:backward::Printer
objectCreator	src/game/factory/objectFactory.h	/^	objectCreator(){}$/;"	f	class:objectCreator
objectCreator	src/game/factory/objectFactory.h	/^class objectCreator{$/;"	c
objectFactory	src/game/factory/objectFactory.h	/^class objectFactory{$/;"	c
objectList	src/core/Object.h	/^typedef std::vector<Object *> objectList;$/;"	t
objectManager	src/game/ObjProcessors/bladeProcessor.h	/^	objectMgr *objectManager;$/;"	m	class:bladeProcessor
objectManager	src/game/ObjProcessors/gunProcessor.h	/^	objectMgr *objectManager;$/;"	m	class:gunProcessor
objectManager	src/game/States/gameState.h	/^	objectMgr *objectManager;$/;"	m	class:gameState
objectManager	src/game/gameStateHelpers/gunsManager.h	/^	objectMgr &objectManager;$/;"	m	class:gunsManager
objectManager	tools/beautified.cpp	/^	objectMgr *objectManager;$/;"	m	class:gameState	file:
objectManager	tools/input.cpp	/^	objectMgr *objectManager;$/;"	m	class:gameState	file:
objectMap	src/core/objectProcessor.h	/^typedef std::map<std::string, Object *> objectMap;$/;"	t
objectMgr	src/core/objectMgr.h	/^	objectMgr(){};$/;"	f	class:objectMgr
objectMgr	src/core/objectMgr.h	/^class objectMgr{$/;"	c
objectMgr	tools/beautified.cpp	/^	objectMgr (){}$/;"	f	class:objectMgr
objectMgr	tools/beautified.cpp	/^class objectMgr$/;"	c	file:
objectMgr	tools/input.cpp	/^	objectMgr(){};$/;"	f	class:objectMgr
objectMgr	tools/input.cpp	/^class objectMgr{$/;"	c	file:
objectMgrProcess	src/core/Process/objectMgrProcess.h	/^	objectMgrProcess(processMgr &processManager, Settings &settings, eventMgr &eventManager) :$/;"	f	class:objectMgrProcess
objectMgrProcess	src/core/Process/objectMgrProcess.h	/^class objectMgrProcess : public Process{$/;"	c
objectProcessor	src/core/objectProcessor.h	/^class objectProcessor{$/;"	c
object_filename	src/include/backward/backward.hpp	/^	std::string                    object_filename;$/;"	m	struct:backward::ResolvedTrace
object_function	src/include/backward/backward.hpp	/^	std::string                    object_function;$/;"	m	struct:backward::ResolvedTrace
observerList	src/core/Messaging/eventMgr.h	/^	typedef std::vector<Observer *> observerList;$/;"	t	class:eventMgr
observerMap	src/core/Messaging/eventMgr.h	/^	std::map<const Hash*, observerList>observerMap;$/;"	m	class:eventMgr
offsetAngle	src/game/ObjProcessors/offsetProcessor.h	/^	bool offsetAngle;$/;"	m	struct:offsetData
offsetData	src/game/ObjProcessors/offsetProcessor.h	/^	offsetData() : offsetPos(true), offsetAngle(true){}$/;"	f	struct:offsetData
offsetData	src/game/ObjProcessors/offsetProcessor.h	/^struct offsetData{$/;"	s
offsetPos	src/game/ObjProcessors/offsetProcessor.h	/^	bool offsetPos;$/;"	m	struct:offsetData
offsetProcessor	src/game/ObjProcessors/offsetProcessor.h	/^	offsetProcessor(processMgr &processManager, Settings &settings, eventMgr &_eventManager){$/;"	f	class:offsetProcessor
offsetProcessor	src/game/ObjProcessors/offsetProcessor.h	/^class offsetProcessor : public objectProcessor{$/;"	c
onBegin	src/core/ObjProcessors/objContactListener.h	/^		onBegin,$/;"	e	enum:collisionData::Type
onCreate	src/game/ObjProcessors/bulletProcessor.h	/^	virtual void onCreate(Object *bullet){};$/;"	f	class:bulletCollider
onCreate	src/game/bulletColliders/bounceCollider.h	/^	void onCreate(Object *bullet){$/;"	f	class:bounceCollider
onDeath	src/game/ObjProcessors/bulletProcessor.h	/^	virtual void onDeath(collisionData &data, Object *bullet){};$/;"	f	class:bulletCollider
onDefaultCollision	src/game/ObjProcessors/bulletProcessor.h	/^	virtual bool onDefaultCollision(collisionData &data, Object *bullet){$/;"	f	class:bulletCollider
onDefaultCollision	src/game/bulletColliders/bounceCollider.h	/^	bool onDefaultCollision(collisionData &collision, Object *bullet){$/;"	f	class:bounceCollider
onDestroyMsg	src/util/logObject.h	/^		std::string onDestroyMsg;$/;"	m	class:util::scopedLog
onDestroyMsg	tools/beautified.cpp	/^	std::string onDestroyMsg;$/;"	m	class:util::scopedLog	file:
onDestroyMsg	tools/input.cpp	/^		std::string onDestroyMsg;$/;"	m	class:util::scopedLog	file:
onEnd	src/core/ObjProcessors/objContactListener.h	/^		onEnd,$/;"	e	enum:collisionData::Type
onEnemyCollision	src/game/bulletColliders/bounceCollider.h	/^	bool onEnemyCollision(collisionData &collision, Object *bullet){$/;"	f	class:bounceCollider
onEnemyCollision	src/game/bulletColliders/damageCollider.h	/^	bool onEnemyCollision(collisionData &collision, Object *bullet){$/;"	f	class:damageCollider
onEnemyCollision	src/game/bulletColliders/pushCollider.h	/^	bool onEnemyCollision(collisionData &collision, Object *bullet){$/;"	f	class:pushCollider
onGround	src/game/ObjProcessors/groundMoveProcessor.h	/^	bool onGround;$/;"	m	struct:moveData
onObjectAdd	src/core/ObjProcessors/phyProcessor.cpp	/^void phyProcessor::onObjectAdd(Object *obj){$/;"	f	class:phyProcessor
onObjectAdd	src/core/ObjProcessors/renderProcessor.cpp	/^void renderProcessor::onObjectAdd(Object *obj){$/;"	f	class:renderProcessor
onObjectAdd	src/core/objectProcessor.h	/^	virtual void onObjectAdd(Object *obj){};$/;"	f	class:objectProcessor
onObjectAdd	src/game/ObjProcessors/bulletProcessor.cpp	/^void bulletProcessor::onObjectAdd(Object *obj){$/;"	f	class:bulletProcessor
onObjectAdd	src/game/ObjProcessors/cameraProcessor.cpp	/^void cameraProcessor::onObjectAdd(Object *obj){$/;"	f	class:cameraProcessor
onObjectAdd	src/game/ObjProcessors/groundMoveProcessor.cpp	/^void groundMoveProcessor::onObjectAdd(Object *obj){$/;"	f	class:groundMoveProcessor
onObjectAdd	src/game/ObjProcessors/offsetProcessor.h	/^	void onObjectAdd(Object *obj){};$/;"	f	class:offsetProcessor
onObjectRemove	src/core/ObjProcessors/phyProcessor.cpp	/^void phyProcessor::onObjectRemove(Object *obj){$/;"	f	class:phyProcessor
onObjectRemove	src/core/ObjProcessors/renderProcessor.cpp	/^void renderProcessor::onObjectRemove(Object *obj){$/;"	f	class:renderProcessor
onObjectRemove	src/core/objectProcessor.h	/^	virtual void onObjectRemove(Object *obj){};$/;"	f	class:objectProcessor
onObjectRemove	src/game/ObjProcessors/pickupProcessor.cpp	/^void pickupProcessor::onObjectRemove(Object *obj){$/;"	f	class:pickupProcessor
onPickupEvent	src/game/ObjProcessors/pickupProcessor.h	/^	const Hash *onPickupEvent;$/;"	m	struct:pickupData
operator !=	src/core/vector.h	/^	inline bool operator != (const vector2& a) const { return (this->x != a.x || this->y != a.y); };$/;"	f	class:vector2
operator !=	src/include/backward/backward.hpp	/^		bool operator!=(const SourceLoc& b) const {$/;"	f	struct:backward::ResolvedTrace::SourceLoc
operator !=	tools/beautified.cpp	/^	inline bool operator != ( const vector2 & a ) const {$/;"	f	class:vector2
operator !=	tools/input.cpp	/^	inline bool operator != (const vector2& a) const { return (this->x != a.x || this->y != a.y); };$/;"	f	class:vector2
operator &	src/include/backward/backward.hpp	/^	T* operator&() {$/;"	f	class:backward::details::handle
operator ()	src/include/Box2D/Common/b2Math.h	/^	float32 operator () (int32 i) const$/;"	f	struct:b2Vec2
operator ()	src/include/Box2D/Common/b2Math.h	/^	float32& operator () (int32 i)$/;"	f	struct:b2Vec2
operator ()	src/include/backward/backward.hpp	/^		bool operator()(char c) {$/;"	f	struct:backward::SourceFile::not_isspace
operator ()	src/include/backward/backward.hpp	/^		bool operator()(const lines_t::value_type& p) {$/;"	f	struct:backward::SourceFile::not_isempty
operator ()	src/include/backward/backward.hpp	/^		void operator()(Dwarf_Die* die) {$/;"	f	struct:backward::TraceResolverLinuxImpl::inliners_search_cb
operator ()	src/include/backward/backward.hpp	/^		void operator()(U& ptr) const {$/;"	f	struct:backward::details::deleter
operator ()	src/include/backward/backward.hpp	/^		void operator()(size_t idx, void* addr) {$/;"	f	struct:backward::StackTraceImpl::callback
operator ()	src/include/backward/backward.hpp	/^		void operator()(size_t idx, void* addr) {$/;"	f	struct:backward::StackTraceWithLocalsImpl::callback
operator ()	src/include/backward/backward.hpp	/^	size_t operator()(F& f, size_t depth) {$/;"	f	class:backward::details::Unwinder
operator ()	src/include/backward/backward.hpp	/^	void operator()(T& ptr) const {$/;"	f	struct:backward::details::default_delete
operator *	src/core/vector.h	/^	inline vector2 operator * (float scale)		 const { return vector2(x * scale, y * scale); };$/;"	f	class:vector2
operator *	src/core/vector.h	/^inline vector2 operator * (const TYPE s, const vector2& a) { return vector2(a.x * s  , a.y * s);    };	$/;"	f
operator *	src/core/vector.h	/^inline vector2 operator * (const vector2& a, const TYPE s) { return vector2(a.x * s  , a.y * s);    };	$/;"	f
operator *	src/core/vector.h	/^inline vector3 operator * (const vector3& a, float s)		   { return vector3(a.x * s  , a.y * s, a.z * s);	 };	$/;"	f
operator *	src/core/vector.h	/^inline vector3 operator * (float s, const vector3& a)		   { return vector3(a.x * s  , a.y * s, a.z * s);    };	$/;"	f
operator *	src/include/Box2D/Common/b2Math.h	/^inline b2Vec2 operator * (float32 s, const b2Vec2& a)$/;"	f
operator *	src/include/Box2D/Common/b2Math.h	/^inline b2Vec3 operator * (float32 s, const b2Vec3& a)$/;"	f
operator *	src/include/backward/backward.hpp	/^	const ref_t operator*() const { return *_val; }$/;"	f	class:backward::details::handle
operator *	src/include/backward/backward.hpp	/^	ref_t operator*() { return *_val; }$/;"	f	class:backward::details::handle
operator *	src/util/mathUtil.h	/^		Angle operator * (const float multiplier){$/;"	f	class:util::Angle
operator *	tools/beautified.cpp	/^	inline vector2 operator * ( float scale )          const { return ( vector2( x * scale, y *$/;"	f	class:vector2
operator *	tools/beautified.cpp	/^inline vector2 operator * ( const TYPE s,$/;"	f
operator *	tools/beautified.cpp	/^inline vector2 operator * ( const vector2 & a,$/;"	f
operator *	tools/beautified.cpp	/^inline vector3 operator * ( const vector3 & a,$/;"	f
operator *	tools/beautified.cpp	/^inline vector3 operator * ( float s,$/;"	f
operator *	tools/input.cpp	/^	inline vector2 operator * (float scale)		 const { return vector2(x * scale, y * scale); };$/;"	f	class:vector2
operator *	tools/input.cpp	/^inline vector2 operator * (const TYPE s, const vector2& a) { return vector2(a.x * s  , a.y * s);    };	$/;"	f
operator *	tools/input.cpp	/^inline vector2 operator * (const vector2& a, const TYPE s) { return vector2(a.x * s  , a.y * s);    };	$/;"	f
operator *	tools/input.cpp	/^inline vector3 operator * (const vector3& a, float s)		   { return vector3(a.x * s  , a.y * s, a.z * s);	 };	$/;"	f
operator *	tools/input.cpp	/^inline vector3 operator * (float s, const vector3& a)		   { return vector3(a.x * s  , a.y * s, a.z * s);    };	$/;"	f
operator *=	src/core/vector.h	/^	inline void operator *= (float a){ x *= a; y *= a; z *= a; };$/;"	f	class:vector3
operator *=	src/core/vector.h	/^	inline void operator *= (float a){ x *= a; y *= a; };$/;"	f	class:vector2
operator *=	src/include/Box2D/Common/b2Math.h	/^	void operator *= (float32 a)$/;"	f	struct:b2Vec2
operator *=	src/include/Box2D/Common/b2Math.h	/^	void operator *= (float32 s)$/;"	f	struct:b2Vec3
operator *=	src/util/mathUtil.h	/^		void  operator *= (const float multiplier){$/;"	f	class:util::Angle
operator *=	tools/beautified.cpp	/^	inline void operator *= ( float a ){ x *= a; y *= a; z *= a; }$/;"	f	class:vector3
operator *=	tools/beautified.cpp	/^	inline void operator *= ( float a ){ x *= a; y *= a; }$/;"	f	class:vector2
operator *=	tools/input.cpp	/^	inline void operator *= (float a){ x *= a; y *= a; z *= a; };$/;"	f	class:vector3
operator *=	tools/input.cpp	/^	inline void operator *= (float a){ x *= a; y *= a; };$/;"	f	class:vector2
operator +	src/core/vector.h	/^	inline vector2 operator + (const vector2& a) const { return vector2(x + a.x, y + a.y); };$/;"	f	class:vector2
operator +	src/core/vector.h	/^	inline vector2 operator + (const vector2& a) { return vector2(x + a.x, y + a.y); };$/;"	f	class:vector3
operator +	src/core/vector.h	/^	inline vector3 operator + (const vector3& a) { return vector3(x + a.x, y + a.y, z + a.z); };$/;"	f	class:vector3
operator +	src/include/Box2D/Common/b2Math.h	/^inline b2Mat22 operator + (const b2Mat22& A, const b2Mat22& B)$/;"	f
operator +	src/include/Box2D/Common/b2Math.h	/^inline b2Vec2 operator + (const b2Vec2& a, const b2Vec2& b)$/;"	f
operator +	src/include/Box2D/Common/b2Math.h	/^inline b2Vec3 operator + (const b2Vec3& a, const b2Vec3& b)$/;"	f
operator +	src/util/mathUtil.h	/^		Angle operator + (const Angle & other){$/;"	f	class:util::Angle
operator +	tools/beautified.cpp	/^	inline vector2 operator + ( const vector2 & a ) const { return ( vector2( x + a.x, y +$/;"	f	class:vector2
operator +	tools/beautified.cpp	/^	inline vector2 operator + ( const vector2 & a ){ return ( vector2( x + a.x, y + a.y ) ); }$/;"	f	class:vector3
operator +	tools/beautified.cpp	/^	inline vector3 operator + ( const vector3 & a ){ return ( vector3( x + a.x, y + a.y, z +$/;"	f	class:vector3
operator +	tools/input.cpp	/^	inline vector2 operator + (const vector2& a) const { return vector2(x + a.x, y + a.y); };$/;"	f	class:vector2
operator +	tools/input.cpp	/^	inline vector2 operator + (const vector2& a) { return vector2(x + a.x, y + a.y); };$/;"	f	class:vector3
operator +	tools/input.cpp	/^	inline vector3 operator + (const vector3& a) { return vector3(x + a.x, y + a.y, z + a.z); };$/;"	f	class:vector3
operator +=	src/core/vector.h	/^	inline void operator += (const vector2& v){ x += v.x; y += v.y; };$/;"	f	class:vector2
operator +=	src/core/vector.h	/^	inline void operator += (const vector2& v){ x += v.x; y += v.y; };$/;"	f	class:vector3
operator +=	src/core/vector.h	/^	inline void operator += (const vector3& v){ x += v.x; y += v.y; z += v.z; };$/;"	f	class:vector3
operator +=	src/include/Box2D/Common/b2Math.h	/^	void operator += (const b2Vec2& v)$/;"	f	struct:b2Vec2
operator +=	src/include/Box2D/Common/b2Math.h	/^	void operator += (const b2Vec3& v)$/;"	f	struct:b2Vec3
operator +=	src/util/mathUtil.h	/^		void operator += (const Angle &other){$/;"	f	class:util::Angle
operator +=	tools/beautified.cpp	/^	inline void operator += ( const vector2 & v ){ x += v.x; y += v.y; }$/;"	f	class:vector2
operator +=	tools/beautified.cpp	/^	inline void operator += ( const vector2 & v ){ x += v.x; y += v.y; }$/;"	f	class:vector3
operator +=	tools/beautified.cpp	/^	inline void operator += ( const vector3 & v ){ x += v.x; y += v.y; z += v.z; }$/;"	f	class:vector3
operator +=	tools/input.cpp	/^	inline void operator += (const vector2& v){ x += v.x; y += v.y; };$/;"	f	class:vector2
operator +=	tools/input.cpp	/^	inline void operator += (const vector2& v){ x += v.x; y += v.y; };$/;"	f	class:vector3
operator +=	tools/input.cpp	/^	inline void operator += (const vector3& v){ x += v.x; y += v.y; z += v.z; };$/;"	f	class:vector3
operator -	src/core/vector.h	/^	inline vector2 operator - (const vector2& a) const { return vector2(x - a.x, y - a.y); };$/;"	f	class:vector2
operator -	src/core/vector.h	/^	inline vector2 operator - (const vector2& a) { return vector2(x - a.x, y - a.y); };$/;"	f	class:vector3
operator -	src/core/vector.h	/^	inline vector2 operator -(){	return vector2(-x, -y); };$/;"	f	class:vector2
operator -	src/core/vector.h	/^	inline vector3 operator - (const vector3& a) { return vector3(x - a.x, y - a.y, z - a.z); };$/;"	f	class:vector3
operator -	src/core/vector.h	/^	inline vector3 operator -(){	return vector3(-x, -y, -z); };$/;"	f	class:vector3
operator -	src/include/Box2D/Common/b2Math.h	/^	b2Vec2 operator -() const { b2Vec2 v; v.Set(-x, -y); return v; }$/;"	f	struct:b2Vec2
operator -	src/include/Box2D/Common/b2Math.h	/^	b2Vec3 operator -() const { b2Vec3 v; v.Set(-x, -y, -z); return v; }$/;"	f	struct:b2Vec3
operator -	src/include/Box2D/Common/b2Math.h	/^inline b2Vec2 operator - (const b2Vec2& a, const b2Vec2& b)$/;"	f
operator -	src/include/Box2D/Common/b2Math.h	/^inline b2Vec3 operator - (const b2Vec3& a, const b2Vec3& b)$/;"	f
operator -	src/util/mathUtil.h	/^		Angle operator - (const Angle & other){$/;"	f	class:util::Angle
operator -	tools/beautified.cpp	/^	inline vector2 operator - ( const vector2 & a ) const { return ( vector2( x - a.x, y -$/;"	f	class:vector2
operator -	tools/beautified.cpp	/^	inline vector2 operator - ( const vector2 & a ){ return ( vector2( x - a.x, y - a.y ) ); }$/;"	f	class:vector3
operator -	tools/beautified.cpp	/^	inline vector2 operator - (){    return ( vector2( -x, -y ) ); }$/;"	f	class:vector2
operator -	tools/beautified.cpp	/^	inline vector3 operator - ( const vector3 & a ){ return ( vector3( x - a.x, y - a.y, z -$/;"	f	class:vector3
operator -	tools/beautified.cpp	/^	inline vector3 operator - (){    return ( vector3( -x, -y, -z ) ); }$/;"	f	class:vector3
operator -	tools/input.cpp	/^	inline vector2 operator - (const vector2& a) const { return vector2(x - a.x, y - a.y); };$/;"	f	class:vector2
operator -	tools/input.cpp	/^	inline vector2 operator - (const vector2& a) { return vector2(x - a.x, y - a.y); };$/;"	f	class:vector3
operator -	tools/input.cpp	/^	inline vector2 operator -(){	return vector2(-x, -y); };$/;"	f	class:vector2
operator -	tools/input.cpp	/^	inline vector3 operator - (const vector3& a) { return vector3(x - a.x, y - a.y, z - a.z); };$/;"	f	class:vector3
operator -	tools/input.cpp	/^	inline vector3 operator -(){	return vector3(-x, -y, -z); };$/;"	f	class:vector3
operator -=	src/core/vector.h	/^	inline void operator -= (const vector2& v){ x -= v.x; y -= v.y; };$/;"	f	class:vector2
operator -=	src/core/vector.h	/^	inline void operator -= (const vector2& v){ x -= v.x; y -= v.y;};$/;"	f	class:vector3
operator -=	src/core/vector.h	/^	inline void operator -= (const vector3& v){ x -= v.x; y -= v.y; z -= v.z;};$/;"	f	class:vector3
operator -=	src/include/Box2D/Common/b2Math.h	/^	void operator -= (const b2Vec2& v)$/;"	f	struct:b2Vec2
operator -=	src/include/Box2D/Common/b2Math.h	/^	void operator -= (const b2Vec3& v)$/;"	f	struct:b2Vec3
operator -=	src/util/mathUtil.h	/^		void operator -= (const Angle &other){$/;"	f	class:util::Angle
operator -=	tools/beautified.cpp	/^	inline void operator -= ( const vector2 & v ){ x -= v.x; y -= v.y; }$/;"	f	class:vector2
operator -=	tools/beautified.cpp	/^	inline void operator -= ( const vector2 & v ){ x -= v.x; y -= v.y; }$/;"	f	class:vector3
operator -=	tools/beautified.cpp	/^	inline void operator -= ( const vector3 & v ){ x -= v.x; y -= v.y; z -= v.z; }$/;"	f	class:vector3
operator -=	tools/input.cpp	/^	inline void operator -= (const vector2& v){ x -= v.x; y -= v.y; };$/;"	f	class:vector2
operator -=	tools/input.cpp	/^	inline void operator -= (const vector2& v){ x -= v.x; y -= v.y;};$/;"	f	class:vector3
operator -=	tools/input.cpp	/^	inline void operator -= (const vector3& v){ x -= v.x; y -= v.y; z -= v.z;};$/;"	f	class:vector3
operator ->	src/include/backward/backward.hpp	/^	T operator->() { return _val; }$/;"	f	class:backward::details::handle
operator ->	src/include/backward/backward.hpp	/^	const T operator->() const { return _val; }$/;"	f	class:backward::details::handle
operator /	src/core/vector.h	/^	inline vector2 operator \/ (const vector2& a) const { return vector2(x \/ a.x, y \/ a.y); };$/;"	f	class:vector2
operator /	src/util/mathUtil.h	/^		Angle operator \/ (const float multiplier){$/;"	f	class:util::Angle
operator /	tools/beautified.cpp	/^	inline vector2 operator \/ ( const vector2 & a ) const { return ( vector2( x \/ a.x, y \/$/;"	f	class:vector2
operator /	tools/input.cpp	/^	inline vector2 operator \/ (const vector2& a) const { return vector2(x \/ a.x, y \/ a.y); };$/;"	f	class:vector2
operator /=	src/util/mathUtil.h	/^		void operator \/= (const float multiplier){$/;"	f	class:util::Angle
operator <	src/core/Hash.cpp	/^bool Hash::operator < (const Hash &other) const{$/;"	f	class:Hash
operator <	src/core/vector.h	/^	inline bool operator < (const vector2& a) const  { return (this->x < a.x && this->y < a.y); };$/;"	f	class:vector2
operator <	src/core/vector.h	/^	inline bool operator < (const vector3& a) { return (this->x < a.x && this->y < a.y && this->z < a.z); };$/;"	f	class:vector3
operator <	tools/beautified.cpp	/^	inline bool operator < ( const vector2 & a ) const {$/;"	f	class:vector2
operator <	tools/beautified.cpp	/^	inline bool operator < ( const vector3 & a ){$/;"	f	class:vector3
operator <	tools/input.cpp	/^	inline bool operator < (const vector2& a) const  { return (this->x < a.x && this->y < a.y); };$/;"	f	class:vector2
operator <	tools/input.cpp	/^	inline bool operator < (const vector3& a) { return (this->x < a.x && this->y < a.y && this->z < a.z); };$/;"	f	class:vector3
operator <<	src/util/logObject.h	/^		msgLog & operator << (T toWrite){$/;"	f	class:util::msgLog
operator <<	src/util/logObject.h	/^		msgLog & operator << (const Hash* toWrite){$/;"	f	class:util::msgLog
operator <<	tools/beautified.cpp	/^	msgLog & operator << ( T toWrite ){$/;"	f	class:util::msgLog
operator <<	tools/beautified.cpp	/^	msgLog & operator << ( const Hash * toWrite ){$/;"	f	class:util::msgLog
operator <<	tools/input.cpp	/^		msgLog & operator << (T toWrite){$/;"	f	class:util::msgLog
operator <<	tools/input.cpp	/^		msgLog & operator << (const Hash* toWrite){$/;"	f	class:util::msgLog
operator <=	src/core/vector.h	/^	inline bool operator <= (const vector2& a) const { return (this->x <= a.x && this->y <= a.y); };$/;"	f	class:vector2
operator <=	src/core/vector.h	/^	inline bool operator <= (const vector3& a) { return (this->x <= a.x && this->y <= a.y  && this->z <= a.z); };$/;"	f	class:vector3
operator <=	tools/beautified.cpp	/^	inline bool operator <= ( const vector2 & a ) const {$/;"	f	class:vector2
operator <=	tools/beautified.cpp	/^	inline bool operator <= ( const vector3 & a ){$/;"	f	class:vector3
operator <=	tools/input.cpp	/^	inline bool operator <= (const vector2& a) const { return (this->x <= a.x && this->y <= a.y); };$/;"	f	class:vector2
operator <=	tools/input.cpp	/^	inline bool operator <= (const vector3& a) { return (this->x <= a.x && this->y <= a.y  && this->z <= a.z); };$/;"	f	class:vector3
operator =	src/include/backward/backward.hpp	/^	SourceFile& operator=(SourceFile&& from) {$/;"	f	class:backward::SourceFile
operator =	src/include/backward/backward.hpp	/^	SourceFile& operator=(const SourceFile& from) {$/;"	f	class:backward::SourceFile
operator =	src/include/backward/backward.hpp	/^	handle& operator=(const handle& from) {$/;"	f	class:backward::details::handle
operator =	src/include/backward/backward.hpp	/^	handle& operator=(handle&& from) {$/;"	f	class:backward::details::handle
operator ==	src/core/Hash.cpp	/^bool Hash::operator == (const Hash &other) const{$/;"	f	class:Hash
operator ==	src/core/vector.h	/^	inline bool operator == (const vector2& a) const { return (this->x == a.x && this->y == a.y); };$/;"	f	class:vector2
operator ==	src/core/vector.h	/^inline bool    operator == (const vector2&a , vector2& b) { return (a.x == a.y) && (b.x == b.y);  };$/;"	f
operator ==	src/core/vector.h	/^inline bool    operator == (const vector3&a , vector3& b)	   { return (a.x == a.y) && (b.x == b.y) && (a.z == b.z);  };$/;"	f
operator ==	src/include/Box2D/Common/b2Math.h	/^inline bool operator == (const b2Vec2& a, const b2Vec2& b)$/;"	f
operator ==	src/include/backward/backward.hpp	/^		bool operator==(const SourceLoc& b) const {$/;"	f	struct:backward::ResolvedTrace::SourceLoc
operator ==	tools/beautified.cpp	/^	inline bool operator == ( const vector2 & a ) const {$/;"	f	class:vector2
operator ==	tools/beautified.cpp	/^inline bool operator == ( const vector2 &a, vector2 & b ){ return ( (a.x == a.y) && (b.x == b.y) );$/;"	f
operator ==	tools/beautified.cpp	/^inline bool operator == ( const vector3 &a,$/;"	f
operator ==	tools/input.cpp	/^	inline bool operator == (const vector2& a) const { return (this->x == a.x && this->y == a.y); };$/;"	f	class:vector2
operator ==	tools/input.cpp	/^inline bool    operator == (const vector2&a , vector2& b) { return (a.x == a.y) && (b.x == b.y);  };$/;"	f
operator ==	tools/input.cpp	/^inline bool    operator == (const vector3&a , vector3& b)	   { return (a.x == a.y) && (b.x == b.y) && (a.z == b.z);  };$/;"	f
operator >	src/core/Hash.cpp	/^bool Hash::operator > (const Hash &other) const{$/;"	f	class:Hash
operator >	src/core/vector.h	/^	inline bool operator > (const vector2& a) const  { return (this->x > a.x && this->y > a.y); };$/;"	f	class:vector2
operator >	src/core/vector.h	/^	inline bool operator > (const vector3& a) { return (this->x > a.x && this->y > a.y && this->z > a.z); };$/;"	f	class:vector3
operator >	tools/beautified.cpp	/^	inline bool operator > ( const vector2 & a ) const {$/;"	f	class:vector2
operator >	tools/beautified.cpp	/^	inline bool operator > ( const vector3 & a ){$/;"	f	class:vector3
operator >	tools/input.cpp	/^	inline bool operator > (const vector2& a) const  { return (this->x > a.x && this->y > a.y); };$/;"	f	class:vector2
operator >	tools/input.cpp	/^	inline bool operator > (const vector3& a) { return (this->x > a.x && this->y > a.y && this->z > a.z); };$/;"	f	class:vector3
operator >=	src/core/vector.h	/^	inline bool operator >= (const vector2& a) const { return (this->x >= a.x && this->y >= a.y); };$/;"	f	class:vector2
operator >=	src/core/vector.h	/^	inline bool operator >= (const vector3& a) { return (this->x >= a.x && this->y >= a.y && this->z >= a.z); };$/;"	f	class:vector3
operator >=	tools/beautified.cpp	/^	inline bool operator >= ( const vector2 & a ) const {$/;"	f	class:vector2
operator >=	tools/beautified.cpp	/^	inline bool operator >= ( const vector3 & a ){$/;"	f	class:vector3
operator >=	tools/input.cpp	/^	inline bool operator >= (const vector2& a) const { return (this->x >= a.x && this->y >= a.y); };$/;"	f	class:vector2
operator >=	tools/input.cpp	/^	inline bool operator >= (const vector3& a) { return (this->x >= a.x && this->y >= a.y && this->z >= a.z); };$/;"	f	class:vector3
operator []	src/include/backward/backward.hpp	/^	Trace operator[](size_t idx) {$/;"	f	class:backward::StackTraceLinuxImplHolder
operator []	src/include/backward/backward.hpp	/^	Trace operator[](size_t) { return Trace(); }$/;"	f	class:backward::StackTraceImpl
operator []	src/include/backward/backward.hpp	/^	const TraceWithLocals& operator[](size_t idx) {$/;"	f	class:backward::StackTraceWithLocalsImpl
operator []	src/include/backward/backward.hpp	/^	ref_t operator[](size_t idx) { return _val[idx]; }$/;"	f	class:backward::details::handle
operator b2Vec2	src/core/vector.h	/^	inline operator b2Vec2(){ return b2Vec2(this->x, this->y); }$/;"	f	class:vector2
operator b2Vec2	tools/beautified.cpp	/^	inline operator b2Vec2 (){ return ( b2Vec2( this->x, this->y ) ); }$/;"	f	class:vector2
operator b2Vec2	tools/input.cpp	/^	inline operator b2Vec2(){ return b2Vec2(this->x, this->y); }$/;"	f	class:vector2
operator const dummy*	src/include/backward/backward.hpp	/^	operator const dummy*() const {$/;"	f	class:backward::details::handle
operator otherPhyVect2	src/core/vector.h	/^	template<class otherPhyVect2> inline operator otherPhyVect2(){ return otherPhyVect2(this->x, this->y); }$/;"	f	class:vector3
operator otherPhyVect2	tools/beautified.cpp	/^	inline operator otherPhyVect2 (){ return ( otherPhyVect2( this->x, this->y ) ); }$/;"	f	class:vector3
operator otherPhyVect2	tools/input.cpp	/^	template<class otherPhyVect2> inline operator otherPhyVect2(){ return otherPhyVect2(this->x, this->y); }$/;"	f	class:vector3
operator sf::Vector2< T >	tools/beautified.cpp	/^	inline operator sf::Vector2< T > (){$/;"	f	class:vector2
operator sf::Vector2<T>	src/core/vector.h	/^	inline operator sf::Vector2<T>(){ return sf::Vector2<T>(this->x, this->y); }$/;"	f	class:vector2
operator sf::Vector2<T>	tools/input.cpp	/^	inline operator sf::Vector2<T>(){ return sf::Vector2<T>(this->x, this->y); }$/;"	f	class:vector2
operator vector2	src/core/vector.h	/^	inline operator vector2(){ return vector2(this->x, this->y); }$/;"	f	class:vector3
operator vector2	tools/beautified.cpp	/^	inline operator vector2 (){ return ( vector2( this->x, this->y ) ); }$/;"	f	class:vector3
operator vector2	tools/input.cpp	/^	inline operator vector2(){ return vector2(this->x, this->y); }$/;"	f	class:vector3
other	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2Body* other;			\/\/\/< provides quick access to the other body attached.$/;"	m	struct:b2ContactEdge
other	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2Body* other;			\/\/\/< provides quick access to the other body attached.$/;"	m	struct:b2JointEdge
otherObj	src/core/ObjProcessors/objContactListener.h	/^	Object *otherObj;	$/;"	m	struct:collisionData
otherPhy	src/core/ObjProcessors/objContactListener.h	/^	phyData *otherPhy;$/;"	m	struct:collisionData
p	src/include/Box2D/Common/b2Math.h	/^	b2Vec2 p;$/;"	m	struct:b2Transform
p1	src/include/Box2D/Collision/b2Collision.h	/^	b2Vec2 p1, p2;$/;"	m	struct:b2RayCastInput
p2	src/include/Box2D/Collision/b2Collision.h	/^	b2Vec2 p1, p2;$/;"	m	struct:b2RayCastInput
parent	src/game/ObjProcessors/offsetProcessor.h	/^	Object *parent;$/;"	m	struct:offsetData
parent	src/game/factory/bladeCreator.h	/^	Object *parent;$/;"	m	class:bladeCreator
parent	src/game/factory/gunCreator.h	/^	Object *parent;$/;"	m	class:gunCreator
parent	src/include/Box2D/Collision/b2DynamicTree.h	/^		int32 parent;$/;"	m	union:b2TreeNode::__anon11
paused	src/core/Process/worldProcess.h	/^	bool paused = false;$/;"	m	class:worldProcess
phyData	src/core/ObjProcessors/phyProcessor.h	/^struct phyData{$/;"	s
phyProcessor	src/core/ObjProcessors/phyProcessor.cpp	/^phyProcessor::phyProcessor(processMgr &processManager, Settings &settings, eventMgr &_eventManager) $/;"	f	class:phyProcessor
phyProcessor	src/core/ObjProcessors/phyProcessor.h	/^class phyProcessor : public objectProcessor{$/;"	c
physicsData	src/game/gameStateHelpers/playerEventHandler.h	/^	phyData *physicsData;$/;"	m	struct:playerHandlerData
pickup	src/game/factory/pickupCreator.h	/^	pickupData pickup;$/;"	m	class:pickupCreator
pickupCollisionTypes	src/game/ObjProcessors/pickupProcessor.h	/^	std::unordered_set<const Hash *> pickupCollisionTypes;$/;"	m	struct:pickupData
pickupCreator	src/game/factory/pickupCreator.h	/^	pickupCreator(viewProcess *_viewProc) : viewProc(_viewProc), radius(0){}$/;"	f	class:pickupCreator
pickupCreator	src/game/factory/pickupCreator.h	/^class pickupCreator : public objectCreator{$/;"	c
pickupData	src/game/ObjProcessors/pickupProcessor.h	/^	pickupData(){$/;"	f	struct:pickupData
pickupData	src/game/ObjProcessors/pickupProcessor.h	/^struct pickupData{$/;"	s
pickupProcessor	src/game/ObjProcessors/pickupProcessor.cpp	/^pickupProcessor::pickupProcessor(processMgr &processManager, Settings &settings,$/;"	f	class:pickupProcessor
pickupProcessor	src/game/ObjProcessors/pickupProcessor.h	/^class pickupProcessor : public objectProcessor{$/;"	c
player	src/game/gameStateHelpers/gunsManager.h	/^	Object *player;$/;"	m	class:gunsManager
player	src/game/gameStateHelpers/playerController.h	/^	Object *player;$/;"	m	class:playerController
player	src/game/gameStateHelpers/playerEventHandler.h	/^	Object *player;$/;"	m	struct:playerHandlerData
playerController	src/game/gameStateHelpers/playerController.cpp	/^playerController::playerController(eventMgr *eventManager, objectMgr *objectManager,$/;"	f	class:playerController
playerController	src/game/gameStateHelpers/playerController.h	/^class playerController{$/;"	c
playerCreator	src/game/factory/playerCreator.h	/^	playerCreator(viewProcess *_viewProc) : viewProc(_viewProc){}$/;"	f	class:playerCreator
playerCreator	src/game/factory/playerCreator.h	/^class playerCreator : public objectCreator{$/;"	c
playerData	src/game/gameStateHelpers/playerEventHandler.h	/^	playerHandlerData playerData;$/;"	m	class:playerEventHandler
playerEventHandler	src/game/gameStateHelpers/playerEventHandler.cpp	/^playerEventHandler::playerEventHandler(eventMgr *_eventManager, playerHandlerData playerData) : $/;"	f	class:playerEventHandler
playerEventHandler	src/game/gameStateHelpers/playerEventHandler.h	/^class playerEventHandler : public Observer{$/;"	c
playerHandler	src/game/gameStateHelpers/playerController.h	/^	playerEventHandler *playerHandler;$/;"	m	class:playerController
playerHandlerData	src/game/gameStateHelpers/playerEventHandler.h	/^struct playerHandlerData{$/;"	s
playerPos	src/game/gameStateHelpers/playerEventHandler.h	/^	vector2 *playerPos;$/;"	m	struct:playerHandlerData
point	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Vec2 point;$/;"	m	struct:b2PositionSolverManifold	file:
pointA	src/include/Box2D/Collision/b2Distance.h	/^	b2Vec2 pointA;		\/\/\/< closest point on shapeA$/;"	m	struct:b2DistanceOutput
pointB	src/include/Box2D/Collision/b2Distance.h	/^	b2Vec2 pointB;		\/\/\/< closest point on shapeB$/;"	m	struct:b2DistanceOutput
pointCount	src/include/Box2D/Collision/b2Collision.h	/^	int32 pointCount;								\/\/\/< the number of manifold points$/;"	m	struct:b2Manifold
pointCount	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	int32 pointCount;$/;"	m	struct:b2ContactPositionConstraint	file:
pointCount	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	int32 pointCount;$/;"	m	struct:b2ContactVelocityConstraint
points	src/include/Box2D/Collision/b2Collision.h	/^	b2ManifoldPoint points[b2_maxManifoldPoints];	\/\/\/< the points of contact$/;"	m	struct:b2Manifold
points	src/include/Box2D/Collision/b2Collision.h	/^	b2Vec2 points[b2_maxManifoldPoints];	\/\/\/< world contact point (point of intersection)$/;"	m	struct:b2WorldManifold
points	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2VelocityConstraintPoint points[b2_maxManifoldPoints];$/;"	m	struct:b2ContactVelocityConstraint
polarProjection	src/util/mathUtil.h	/^		vector2 polarProjection(float radius){$/;"	f	class:util::Angle
posOffset	src/game/ObjProcessors/offsetProcessor.h	/^	vector2 posOffset;$/;"	m	struct:offsetData
position	src/include/Box2D/Dynamics/b2Body.h	/^	b2Vec2 position;$/;"	m	struct:b2BodyDef
position	src/include/SFML/Graphics/Vertex.hpp	/^    Vector2f  position;  \/\/\/< 2D position of the vertex$/;"	m	class:sf::Vertex
position	src/include/SFML/Window/Event.hpp	/^        float          position;   \/\/\/< New position on the axis (in range [-100 .. 100])$/;"	m	struct:sf::Event::JoystickMoveEvent
positionIterations	src/include/Box2D/Dynamics/b2TimeStep.h	/^	int32 positionIterations;$/;"	m	struct:b2TimeStep
positions	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Position* positions;$/;"	m	struct:b2ContactSolverDef
positions	src/include/Box2D/Dynamics/b2TimeStep.h	/^	b2Position* positions;$/;"	m	struct:b2SolverData
postDraw	src/core/Process/Process.h	/^	virtual void postDraw(){};$/;"	f	class:Process
postDraw	src/core/Process/objectMgrProcess.h	/^	void postDraw(){$/;"	f	class:objectMgrProcess
postDraw	src/core/Process/processMgr.cpp	/^void processMgr::postDraw(){$/;"	f	class:processMgr
postDraw	src/core/Process/windowProcess.h	/^	void postDraw(){$/;"	f	class:windowProcess
postProcess	src/core/ObjProcessors/phyProcessor.cpp	/^void phyProcessor::postProcess(){$/;"	f	class:phyProcessor
postProcess	src/core/objectMgr.h	/^	void postProcess(){$/;"	f	class:objectMgr
postProcess	src/core/objectProcessor.h	/^	virtual void postProcess(){};$/;"	f	class:objectProcessor
postProcess	src/game/ObjProcessors/gunProcessor.cpp	/^void gunProcessor::postProcess(){};$/;"	f	class:gunProcessor
postProcess	src/game/ObjProcessors/healthProcessor.cpp	/^void healthProcessor::postProcess(){$/;"	f	class:healthProcessor
postProcess	tools/beautified.cpp	/^	void postProcess (){$/;"	f	class:objectMgr
postProcess	tools/input.cpp	/^	void postProcess(){$/;"	f	class:objectMgr
power	src/game/generators/bulletDataGenerator.h	/^	unsigned int power;$/;"	m	class:bulletDataGenerator
power	src/game/generators/gunDataGenerator.h	/^	unsigned int power;$/;"	m	class:gunDataGenerator
preProcess	src/core/ObjProcessors/phyProcessor.cpp	/^void phyProcessor::preProcess(){$/;"	f	class:phyProcessor
preProcess	src/core/objectMgr.h	/^	void preProcess(){$/;"	f	class:objectMgr
preProcess	src/core/objectProcessor.h	/^	virtual void preProcess(){};$/;"	f	class:objectProcessor
preProcess	tools/beautified.cpp	/^	void preProcess (){$/;"	f	class:objectMgr
preProcess	tools/input.cpp	/^	void preProcess(){$/;"	f	class:objectMgr
preUpdate	src/core/Process/Process.h	/^	virtual void preUpdate(){};$/;"	f	class:Process
preUpdate	src/core/Process/eventProcess.cpp	/^void eventProcess::preUpdate(){$/;"	f	class:eventProcess
preUpdate	src/core/Process/objectMgrProcess.h	/^	void preUpdate(){$/;"	f	class:objectMgrProcess
preUpdate	src/core/Process/processMgr.cpp	/^void processMgr::preUpdate(){$/;"	f	class:processMgr
preUpdate	src/core/Process/windowProcess.h	/^	virtual void preUpdate(){$/;"	f	class:windowProcess
preUpdate	tools/beautified.cpp	/^void eventProcess::preUpdate (){$/;"	f	class:eventProcess
preUpdate	tools/input.cpp	/^void eventProcess::preUpdate(){$/;"	f	class:eventProcess
prev	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	b2ContactEdge* prev;	\/\/\/< the previous contact edge in the body's contact list$/;"	m	struct:b2ContactEdge
prev	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointEdge* prev;		\/\/\/< the previous joint edge in the body's joint list$/;"	m	struct:b2JointEdge
primary	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	bool primary;$/;"	m	struct:b2ContactRegister
print	src/include/backward/backward.hpp	/^		FILE* print(StackTrace& st, FILE* os = stderr) {$/;"	f	class:backward::Printer
print_locals	src/include/backward/backward.hpp	/^	void print_locals(FILE* os, const char* indent,$/;"	f	class:backward::Printer
print_snippet	src/include/backward/backward.hpp	/^	void print_snippet(FILE* os, const char* indent,$/;"	f	class:backward::Printer
print_source_loc	src/include/backward/backward.hpp	/^	void print_source_loc(FILE* os, const char* indent,$/;"	f	class:backward::Printer
print_var	src/include/backward/backward.hpp	/^	void print_var(FILE* os, const char* base_indent, int indent,$/;"	f	class:backward::Printer
priv	src/include/SFML/Audio/Music.hpp	/^namespace priv$/;"	n	namespace:sf
priv	src/include/SFML/Audio/SoundBuffer.hpp	/^namespace priv$/;"	n	namespace:sf
priv	src/include/SFML/Graphics/RenderTexture.hpp	/^namespace priv$/;"	n	namespace:sf
priv	src/include/SFML/System/Mutex.hpp	/^namespace priv$/;"	n	namespace:sf
priv	src/include/SFML/System/Thread.hpp	/^namespace priv$/;"	n	namespace:sf
priv	src/include/SFML/System/ThreadLocal.hpp	/^namespace priv$/;"	n	namespace:sf
priv	src/include/SFML/Window/Context.hpp	/^namespace priv$/;"	n	namespace:sf
priv	src/include/SFML/Window/Window.hpp	/^namespace priv$/;"	n	namespace:sf
processManager	src/core/Process/stateProcess.h	/^	processMgr &processManager;$/;"	m	class:stateProcess
processManager	src/core/State/State.h	/^	processMgr *processManager;$/;"	m	class:State
processMgr	src/core/Process/processMgr.h	/^class processMgr{$/;"	c
processes	src/core/Process/processMgr.h	/^	std::map<const Hash*, Process *>processes;$/;"	m	class:processMgr
projectOn	src/core/vector.h	/^	vector2 projectOn(vector2 projectDir){$/;"	f	class:vector2
projectOn	tools/beautified.cpp	/^	vector2 projectOn ( vector2 projectDir ){$/;"	f	class:vector2
projectOn	tools/input.cpp	/^	vector2 projectOn(vector2 projectDir){$/;"	f	class:vector2
propertyIt	src/core/Object.h	/^	typedef std::map<const Hash*, baseProperty* >::iterator propertyIt;$/;"	t	class:Object
propertyMap	src/core/Object.h	/^	std::map<const Hash*, baseProperty* > propertyMap; $/;"	m	class:Object
proxyA	src/include/Box2D/Collision/b2Distance.h	/^	b2DistanceProxy proxyA;$/;"	m	struct:b2DistanceInput
proxyA	src/include/Box2D/Collision/b2TimeOfImpact.h	/^	b2DistanceProxy proxyA;$/;"	m	struct:b2TOIInput
proxyB	src/include/Box2D/Collision/b2Distance.h	/^	b2DistanceProxy proxyB;$/;"	m	struct:b2DistanceInput
proxyB	src/include/Box2D/Collision/b2TimeOfImpact.h	/^	b2DistanceProxy proxyB;$/;"	m	struct:b2TOIInput
proxyId	src/include/Box2D/Dynamics/b2Fixture.h	/^	int32 proxyId;$/;"	m	struct:b2FixtureProxy
proxyIdA	src/include/Box2D/Collision/b2BroadPhase.h	/^	int32 proxyIdA;$/;"	m	struct:b2Pair
proxyIdB	src/include/Box2D/Collision/b2BroadPhase.h	/^	int32 proxyIdB;$/;"	m	struct:b2Pair
ptrProp	src/core/Property.h	/^	ptrProp(T *value){$/;"	f	class:ptrProp
ptrProp	src/core/Property.h	/^class ptrProp : public baseProperty{$/;"	c
purple	src/include/backward/backward.hpp	/^		purple = 0,$/;"	e	enum:backward::Color::type
purple	src/include/backward/backward.hpp	/^		purple = 35,$/;"	e	enum:backward::Color::type
push	git.py	/^def push():$/;"	f
pushCollider	src/game/bulletColliders/pushCollider.h	/^	pushCollider(float impulseMagnitude){$/;"	f	class:pushCollider
pushCollider	src/game/bulletColliders/pushCollider.h	/^class pushCollider : public bulletCollider{$/;"	c
q	src/include/Box2D/Common/b2Math.h	/^	b2Rot q;$/;"	m	struct:b2Transform
r	src/include/Box2D/Common/b2Draw.h	/^	float32 r, g, b;$/;"	m	struct:b2Color
r	src/include/SFML/Graphics/Color.hpp	/^    Uint8 r; \/\/\/< Red component$/;"	m	class:sf::Color
rA	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Vec2 rA;$/;"	m	struct:b2VelocityConstraintPoint
rB	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Vec2 rB;$/;"	m	struct:b2VelocityConstraintPoint
radius	src/game/factory/bladeCreator.h	/^	float radius;$/;"	m	class:bladeCreator
radius	src/game/factory/bulletCreator.h	/^	float radius;$/;"	m	class:bulletCreator
radius	src/game/factory/dummyCreator.h	/^	float radius;$/;"	m	class:dummyCreator
radius	src/game/factory/gunCreator.h	/^	float radius;$/;"	m	class:gunCreator
radius	src/game/factory/pickupCreator.h	/^	float radius;$/;"	m	class:pickupCreator
radiusA	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 radiusA, radiusB;$/;"	m	struct:b2ContactPositionConstraint	file:
radiusB	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 radiusA, radiusB;$/;"	m	struct:b2ContactPositionConstraint	file:
ratio	src/include/Box2D/Dynamics/Joints/b2GearJoint.h	/^	float32 ratio;$/;"	m	struct:b2GearJointDef
ratio	src/include/Box2D/Dynamics/Joints/b2PulleyJoint.h	/^	float32 ratio;$/;"	m	struct:b2PulleyJointDef
recieveEvent	src/core/Process/viewProcess.cpp	/^void viewProcess::recieveEvent(const Hash *eventName, baseProperty *eventData){$/;"	f	class:viewProcess
recieveEvent	src/game/gameStateHelpers/gunsManager.cpp	/^void gunsManager::recieveEvent(const Hash *eventName, baseProperty *eventData){$/;"	f	class:gunsManager
recieveEvent	src/game/gameStateHelpers/playerEventHandler.cpp	/^void playerEventHandler::recieveEvent(const Hash *eventName, baseProperty *eventData){$/;"	f	class:playerEventHandler
recieveEvent	src/mainLoopListener.h	/^	void recieveEvent(const Hash *eventName, baseProperty *eventData){$/;"	f	class:mainLoopListener
ref_t	src/include/backward/backward.hpp	/^	typedef typename rm_ptr<T>::type& ref_t;$/;"	t	class:backward::details::handle
referenceAngle	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 referenceAngle;$/;"	m	struct:b2PrismaticJointDef
referenceAngle	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 referenceAngle;$/;"	m	struct:b2RevoluteJointDef
referenceAngle	src/include/Box2D/Dynamics/Joints/b2WeldJoint.h	/^	float32 referenceAngle;$/;"	m	struct:b2WeldJointDef
release	src/include/backward/backward.hpp	/^	T release() {$/;"	f	class:backward::details::handle
removeCollision	src/core/ObjProcessors/phyProcessor.cpp	/^void phyData::removeCollision(Object *obj){$/;"	f	class:phyData
removeObject	src/core/objectMgr.h	/^	void removeObject(Object &obj){$/;"	f	class:objectMgr
removeObject	src/core/objectMgr.h	/^	void removeObject(Object *obj){$/;"	f	class:objectMgr
removeObject	src/core/objectMgr.h	/^	void removeObject(std::string name){$/;"	f	class:objectMgr
removeObject	tools/beautified.cpp	/^	void removeObject ( Object &obj ){$/;"	f	class:objectMgr
removeObject	tools/beautified.cpp	/^	void removeObject ( Object *obj ){$/;"	f	class:objectMgr
removeObject	tools/beautified.cpp	/^	void removeObject ( std::string name ){$/;"	f	class:objectMgr
removeObject	tools/input.cpp	/^	void removeObject(Object &obj){$/;"	f	class:objectMgr
removeObject	tools/input.cpp	/^	void removeObject(Object *obj){$/;"	f	class:objectMgr
removeObject	tools/input.cpp	/^	void removeObject(std::string name){$/;"	f	class:objectMgr
removeObjectProcessor	src/core/objectMgr.h	/^	void removeObjectProcessor(objectProcessor *processor){$/;"	f	class:objectMgr
removeObjectProcessor	tools/beautified.cpp	/^	void removeObjectProcessor ( objectProcessor *processor ){$/;"	f	class:objectMgr
removeObjectProcessor	tools/input.cpp	/^	void removeObjectProcessor(objectProcessor *processor){$/;"	f	class:objectMgr
removeRenderNode	src/core/Process/renderProcess.cpp	/^void renderProcess::removeRenderNode(renderProcess::baseRenderNode *toRemove){$/;"	f	class:renderProcess
render	src/core/ObjProcessors/renderProcessor.h	/^	renderProcess *render;$/;"	m	class:renderProcessor
render2ScreeenCoord	src/core/Process/viewProcess.cpp	/^vector2 viewProcess::render2ScreeenCoord(vector2 renderCoord){$/;"	f	class:viewProcess
render2ViewCoord	src/core/Process/viewProcess.cpp	/^vector2 viewProcess::render2ViewCoord(vector2 screenCoord){$/;"	f	class:viewProcess
renderData	src/core/ObjProcessors/renderProcessor.h	/^	renderData() : centered(false){};$/;"	f	class:renderData
renderData	src/core/ObjProcessors/renderProcessor.h	/^class renderData{$/;"	c
renderNode	src/core/Process/renderProcess.h	/^		renderNode(T *_drawable) : drawable(_drawable){$/;"	f	class:renderProcess::renderNode
renderNode	src/core/Process/renderProcess.h	/^		renderNode(T *_drawable, int z) : drawable(_drawable){$/;"	f	class:renderProcess::renderNode
renderNode	src/core/Process/renderProcess.h	/^	class renderNode : public baseRenderNode{$/;"	c	class:renderProcess
renderProcess	src/core/Process/renderProcess.cpp	/^renderProcess::renderProcess(processMgr &processManager, Settings &settings, eventMgr &_eventManager) :$/;"	f	class:renderProcess
renderProcess	src/core/Process/renderProcess.h	/^class renderProcess: public Process{$/;"	c
renderProcessor	src/core/ObjProcessors/renderProcessor.cpp	/^renderProcessor::renderProcessor(processMgr &processManager, $/;"	f	class:renderProcessor
renderProcessor	src/core/ObjProcessors/renderProcessor.h	/^class renderProcessor : public objectProcessor{$/;"	c
renderUtil	src/core/renderUtil.h	/^class renderUtil{$/;"	c
renderers	src/core/ObjProcessors/renderProcessor.h	/^	std::vector< renderProcess::baseRenderNode *>renderers;$/;"	m	class:renderData
renderingLayers	src/game/defines/renderingLayers.h	/^enum renderingLayers{$/;"	g
reserveRectSpace	src/game/factory/terrainCreator.cpp	/^void terrainCreator::reserveRectSpace(vector2 center, vector2 halfDim){$/;"	f	class:terrainCreator
reset	src/include/backward/backward.hpp	/^		reset  = 0$/;"	e	enum:backward::Color::type
reset	src/include/backward/backward.hpp	/^		reset  = 39$/;"	e	enum:backward::Color::type
reset	src/include/backward/backward.hpp	/^	void reset(T new_val) {$/;"	f	class:backward::details::handle
resetJump	src/game/ObjProcessors/groundMoveProcessor.cpp	/^void moveData::resetJump(){$/;"	f	class:moveData
resolve	src/include/backward/backward.hpp	/^	ResolvedTrace resolve(ResolvedTrace t) {$/;"	f	class:backward::TraceResolverImpl
resolve	src/include/backward/backward.hpp	/^	ResolvedTrace resolve(ResolvedTrace trace) {$/;"	f	class:backward::TraceResolverLinuxImpl
resolve_trace	src/include/backward/backward.hpp	/^	void resolve_trace(TraceWithLocals& trace) {$/;"	f	class:backward::StackTraceWithLocalsImpl
restitution	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 restitution;$/;"	m	struct:b2ContactVelocityConstraint
restitution	src/include/Box2D/Dynamics/b2Fixture.h	/^	float32 restitution;$/;"	m	struct:b2FixtureDef
result	src/include/backward/backward.hpp	/^		find_sym_result result;$/;"	m	struct:backward::TraceResolverLinuxImpl::find_sym_context
revision	src/include/Box2D/Common/b2Settings.h	/^	int32 revision;		\/\/\/< bug fixes$/;"	m	struct:b2Version
right	src/game/gameStateHelpers/playerEventHandler.h	/^	sf::Keyboard::Key right;$/;"	m	struct:playerHandlerData
rm_ptr	src/include/backward/backward.hpp	/^	struct rm_ptr { typedef T type; };$/;"	s	namespace:backward::details
rm_ptr	src/include/backward/backward.hpp	/^	struct rm_ptr<T*> { typedef T type; };$/;"	s	namespace:backward::details
rm_ptr	src/include/backward/backward.hpp	/^	struct rm_ptr<const T*> { typedef const T type; };$/;"	s	namespace:backward::details
rows	src/include/SFML/Graphics/Font.hpp	/^        std::vector<Row> rows;    \/\/\/< List containing the position of all the existing rows$/;"	m	struct:sf::Font::Page
s	src/include/Box2D/Common/b2Math.h	/^	float32 s, c;$/;"	m	struct:b2Rot
s1	src/include/backward/backward.hpp	/^		char s1[sizeof (std::string)];$/;"	m	union:backward::Variable::__anon14
s2	src/include/backward/backward.hpp	/^		char s2[sizeof (list_t)];$/;"	m	union:backward::Variable::__anon14
s3	src/include/backward/backward.hpp	/^		char s3[sizeof (map_t)];$/;"	m	union:backward::Variable::__anon14
sProp	src/core/Property.h	/^typedef Prop<std::string> sProp;$/;"	t
s_blockSizeLookup	src/include/Box2D/Common/b2BlockAllocator.cpp	/^uint8 b2BlockAllocator::s_blockSizeLookup[b2_maxBlockSize + 1];$/;"	m	class:b2BlockAllocator	file:
s_blockSizeLookup	src/include/Box2D/Common/b2BlockAllocator.h	/^	static uint8 s_blockSizeLookup[b2_maxBlockSize + 1];$/;"	m	class:b2BlockAllocator
s_blockSizeLookupInitialized	src/include/Box2D/Common/b2BlockAllocator.cpp	/^bool b2BlockAllocator::s_blockSizeLookupInitialized;$/;"	m	class:b2BlockAllocator	file:
s_blockSizeLookupInitialized	src/include/Box2D/Common/b2BlockAllocator.h	/^	static bool s_blockSizeLookupInitialized;$/;"	m	class:b2BlockAllocator
s_blockSizes	src/include/Box2D/Common/b2BlockAllocator.h	/^	static int32 s_blockSizes[b2_blockSizes];$/;"	m	class:b2BlockAllocator
s_initialized	src/include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^bool b2Contact::s_initialized = false;$/;"	m	class:b2Contact	file:
s_initialized	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	static bool s_initialized;$/;"	m	class:b2Contact
s_invFrequency	src/include/Box2D/Common/b2Timer.cpp	/^float64 b2Timer::s_invFrequency = 0.0f;$/;"	m	class:b2Timer	file:
s_invFrequency	src/include/Box2D/Common/b2Timer.h	/^	static float64 s_invFrequency;$/;"	m	class:b2Timer
s_registers	src/include/Box2D/Dynamics/Contacts/b2Contact.cpp	/^b2ContactRegister b2Contact::s_registers[b2Shape::e_typeCount][b2Shape::e_typeCount];$/;"	m	class:b2Contact	file:
s_registers	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	static b2ContactRegister s_registers[b2Shape::e_typeCount][b2Shape::e_typeCount];$/;"	m	class:b2Contact
sampleCount	src/include/SFML/Audio/SoundStream.hpp	/^        std::size_t  sampleCount; \/\/\/< Number of samples pointed by Samples$/;"	m	struct:sf::SoundStream::Chunk
samples	src/include/SFML/Audio/SoundStream.hpp	/^        const Int16* samples;     \/\/\/< Pointer to the audio samples$/;"	m	struct:sf::SoundStream::Chunk
scopedLog	src/util/logObject.h	/^		scopedLog(std::string onCreateMsg, std::string onDestroyMsg, logLevel level = logLevelInfo){$/;"	f	class:util::scopedLog
scopedLog	src/util/logObject.h	/^	class scopedLog : public baseLog{$/;"	c	namespace:util
scopedLog	tools/beautified.cpp	/^	scopedLog ( std::string onCreateMsg, std::string onDestroyMsg, logLevel level =$/;"	f	class:util::scopedLog
scopedLog	tools/beautified.cpp	/^class scopedLog : public baseLog$/;"	c	namespace:util	file:
scopedLog	tools/input.cpp	/^		scopedLog(std::string onCreateMsg, std::string onDestroyMsg, logLevel level = logLevelInfo){$/;"	f	class:util::scopedLog
scopedLog	tools/input.cpp	/^	class scopedLog : public baseLog{$/;"	c	namespace:util	file:
screen2RenderCoord	src/core/Process/viewProcess.cpp	/^vector2 viewProcess::screen2RenderCoord(vector2 screenCoord){$/;"	f	class:viewProcess
seed	src/core/Hash.cpp	/^unsigned int Hash::seed;$/;"	m	class:Hash	file:
seed	src/core/Hash.h	/^	static unsigned int seed;$/;"	m	class:Hash
seed	src/game/generators/bulletDataGenerator.h	/^	unsigned long seed;$/;"	m	class:bulletDataGenerator
seed	src/game/generators/gunDataGenerator.h	/^	unsigned long seed;$/;"	m	class:gunDataGenerator
seed	src/game/terrainGen/terrainGenerator.h	/^	unsigned int seed;$/;"	m	class:terrainGenerator
segment	src/game/States/gameSegmentLoader.h	/^	gameSegment *segment;$/;"	m	class:gameSegmentLoader
segmentName	src/game/States/gameSegmentLoader.h	/^	std::string segmentName;$/;"	m	class:gameSegmentLoader
self	src/include/backward/backward.hpp	/^		StackTraceImpl& self;$/;"	m	struct:backward::StackTraceImpl::callback
self	src/include/backward/backward.hpp	/^		StackTraceWithLocalsImpl& self;$/;"	m	struct:backward::StackTraceWithLocalsImpl::callback
self	src/include/backward/backward.hpp	/^		TraceResolverLinuxImpl* self;$/;"	m	struct:backward::TraceResolverLinuxImpl::find_sym_context
sendEvent	src/core/Messaging/eventMgr.h	/^	void sendEvent(const Hash *eventName){$/;"	f	class:eventMgr
sendEvent	src/core/Messaging/eventMgr.h	/^	void sendEvent(const Hash *eventName, T &eventData){$/;"	f	class:eventMgr
sendEvent_	src/core/Messaging/eventMgr.h	/^	void sendEvent_(const Hash *eventName, baseProperty *eventData){$/;"	f	class:eventMgr
separation	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	float32 separation;$/;"	m	struct:b2EPAxis	file:
separation	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	float32 separation;$/;"	m	struct:b2PositionSolverManifold	file:
setBoundaryThickness	src/game/factory/boundaryCreator.h	/^	void setBoundaryThickness(float thickness){$/;"	f	class:boundaryCreator
setBounds	src/game/factory/terrainCreator.cpp	/^void terrainCreator::setBounds(vector2 bottomLeft, vector2 topRight, $/;"	f	class:terrainCreator
setBulletCreator	src/game/ObjProcessors/gunProcessor.h	/^	void setBulletCreator(bulletCreator *creator){$/;"	f	struct:gunData
setBulletData	src/game/ObjProcessors/gunProcessor.h	/^	void setBulletData(bulletData &data){$/;"	f	struct:gunData
setBulletData	src/game/factory/bulletCreator.h	/^	void setBulletData(bulletData data){$/;"	f	class:bulletCreator
setBulletPos	src/game/ObjProcessors/gunProcessor.h	/^	void setBulletPos(vector2 pos){$/;"	f	struct:gunData
setBulletRadius	src/game/ObjProcessors/gunProcessor.h	/^	void setBulletRadius(float radius){$/;"	f	struct:gunData
setBulletVel	src/game/ObjProcessors/gunProcessor.h	/^	void setBulletVel(float vel){$/;"	f	struct:gunData
setCameraData	src/game/factory/playerCreator.h	/^	void setCameraData(cameraData &camData){$/;"	f	class:playerCreator
setCenter	src/core/Process/viewProcess.cpp	/^void viewProcess::setCenter(vector2 center){$/;"	f	class:viewProcess
setClearColor	src/core/Process/windowProcess.h	/^	void setClearColor(sf::Color color){$/;"	f	class:windowProcess
setClipCooldown	src/game/ObjProcessors/gunProcessor.h	/^	void setClipCooldown(int totalClipCooldown){$/;"	f	struct:gunData
setClipSize	src/game/ObjProcessors/gunProcessor.h	/^	void setClipSize(int totalClipSize){$/;"	f	struct:gunData
setCollisionRadius	src/game/factory/bulletCreator.h	/^	void setCollisionRadius(float radius){$/;"	f	class:bulletCreator
setCollisionRadius	src/game/factory/pickupCreator.h	/^	void setCollisionRadius(float radius){$/;"	f	class:pickupCreator
setDim	src/game/terrainGen/terrainGenerator.cpp	/^void terrainGenerator::setDim(vector2 levelDim){$/;"	f	class:terrainGenerator
setDimensions	src/game/factory/boundaryCreator.h	/^	void setDimensions(vector2 levelDim){$/;"	f	class:boundaryCreator
setFacing	src/game/ObjProcessors/gunProcessor.h	/^	void setFacing(util::Angle facing){$/;"	f	struct:gunData
setGunData	src/game/factory/bladeCreator.h	/^	void setGunData(bladeData blade){$/;"	f	class:bladeCreator
setGunData	src/game/factory/gunCreator.h	/^	void setGunData(gunData gun){$/;"	f	class:gunCreator
setHP	src/game/ObjProcessors/healthProcessor.h	/^	void setHP(unsigned int HP){$/;"	f	struct:healthData
setMoveLeft	src/game/ObjProcessors/groundMoveProcessor.cpp	/^void moveData::setMoveLeft(bool enabled){$/;"	f	class:moveData
setMoveRight	src/game/ObjProcessors/groundMoveProcessor.cpp	/^void moveData::setMoveRight(bool enabled){$/;"	f	class:moveData
setOffset	src/game/factory/gunCreator.h	/^	void setOffset(float radius){$/;"	f	class:gunCreator
setParent	src/game/factory/bladeCreator.h	/^	void setParent(Object *parent){$/;"	f	class:bladeCreator
setParent	src/game/factory/gunCreator.h	/^	void setParent(Object *parent){$/;"	f	class:gunCreator
setPickupData	src/game/factory/pickupCreator.h	/^	void setPickupData(pickupData data){$/;"	f	class:pickupCreator
setPosition	src/core/Process/renderProcess.h	/^		void setPosition(vector2 position){$/;"	f	class:renderProcess::renderNode
setProp	src/core/Object.h	/^	void setProp(const Hash *name, Type *value){$/;"	f	class:Object
setProp	src/core/Object.h	/^	void setProp(const Hash *name, Type value){$/;"	f	class:Object
setRad	src/util/mathUtil.h	/^		void setRad(float angleInRad){$/;"	f	class:util::Angle
setRadius	src/game/factory/dummyCreator.h	/^	void setRadius(float gRadius){$/;"	f	class:dummyCreator
setRotation	src/core/Process/renderProcess.h	/^		void setRotation(util::Angle angle){$/;"	f	class:renderProcess::renderNode
setRotation	src/core/Process/viewProcess.cpp	/^void viewProcess::setRotation(util::Angle angle){$/;"	f	class:viewProcess
setSeed	src/core/Hash.cpp	/^void Hash::setSeed(unsigned int seed){$/;"	f	class:Hash
setShotCooldown	src/game/ObjProcessors/gunProcessor.h	/^	void setShotCooldown(int totalShotCooldown){$/;"	f	struct:gunData
setThreshold	src/util/logObject.h	/^		static void setThreshold(logLevel logThreshold){$/;"	f	class:util::baseLog
setThreshold	tools/beautified.cpp	/^	static void setThreshold ( logLevel logThreshold ){$/;"	f	class:util::baseLog
setThreshold	tools/input.cpp	/^		static void setThreshold(logLevel logThreshold){$/;"	f	class:util::baseLog
setVal	src/core/Property.h	/^	void setVal(T &val){$/;"	f	class:Prop
setValStack	src/core/Property.h	/^	void setValStack(T val){$/;"	f	class:Prop
set_color	src/include/backward/backward.hpp	/^	void set_color(Color::type ccode) {$/;"	f	class:backward::Colorize
set_color	src/include/backward/backward.hpp	/^	void set_color(Color::type) {}$/;"	f	class:backward::Colorize
settings	src/core/Process/stateProcess.h	/^	Settings &settings;$/;"	m	class:stateProcess
settings	src/core/State/State.h	/^	Settings *settings;$/;"	m	class:State
settingsMap	src/core/Settings.h	/^	std::map<const Hash *, baseProperty*>settingsMap; $/;"	m	class:Settings
sf	src/include/SFML/Audio/Listener.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Audio/Music.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Audio/Sound.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Audio/SoundBuffer.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Audio/SoundBufferRecorder.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Audio/SoundRecorder.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Audio/SoundSource.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Audio/SoundStream.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Config.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/BlendMode.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/CircleShape.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/Color.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/ConvexShape.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/Drawable.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/Font.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/Glyph.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/Image.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/PrimitiveType.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/Rect.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/RectangleShape.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/RenderStates.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/RenderTarget.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/RenderTexture.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/RenderWindow.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/Shader.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/Shape.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/Sprite.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/Text.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/Texture.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/Transform.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/Transformable.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/Vertex.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/VertexArray.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Graphics/View.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Network/Ftp.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Network/Http.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Network/IpAddress.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Network/Packet.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Network/Socket.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Network/SocketHandle.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Network/SocketSelector.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Network/TcpListener.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Network/TcpSocket.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Network/UdpSocket.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/System/Clock.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/System/Err.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/System/InputStream.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/System/Lock.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/System/Mutex.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/System/NonCopyable.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/System/Sleep.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/System/String.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/System/Thread.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/System/ThreadLocal.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/System/ThreadLocalPtr.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/System/Time.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/System/Utf.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/System/Vector2.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/System/Vector3.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Window/Context.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Window/ContextSettings.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Window/Event.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Window/GlResource.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Window/Joystick.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Window/Keyboard.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Window/Mouse.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Window/VideoMode.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Window/Window.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Window/WindowHandle.hpp	/^namespace sf$/;"	n
sf	src/include/SFML/Window/WindowStyle.hpp	/^namespace sf$/;"	n
sgn	src/util/mathUtil.h	/^	int sgn(T  num){$/;"	f	namespace:util
sh	src/include/backward/backward.cpp	/^backward::SignalHandling sh;$/;"	m	namespace:backward	file:
shader	src/include/SFML/Graphics/RenderStates.hpp	/^    const Shader*  shader;    \/\/\/< Shader$/;"	m	class:sf::RenderStates
shape	src/include/Box2D/Dynamics/b2Fixture.h	/^	const b2Shape* shape;$/;"	m	struct:b2FixtureDef
shapeRenderNode	src/core/Process/renderProcess.h	/^typedef renderProcess::renderNode<sf::Shape> shapeRenderNode;$/;"	t
shift	src/include/SFML/Window/Event.hpp	/^        bool          shift;   \/\/\/< Is the Shift key pressed?$/;"	m	struct:sf::Event::KeyEvent
shotOnCooldown	src/game/ObjProcessors/gunProcessor.h	/^	bool shotOnCooldown;$/;"	m	struct:gunData
shouldChangeState	src/core/State/State.h	/^	bool shouldChangeState(){$/;"	f	class:State
sideNormal1	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 sideNormal1;$/;"	m	struct:b2ReferenceFace	file:
sideNormal2	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 sideNormal2;$/;"	m	struct:b2ReferenceFace	file:
sideOffset1	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	float32 sideOffset1;$/;"	m	struct:b2ReferenceFace	file:
sideOffset2	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	float32 sideOffset2;$/;"	m	struct:b2ReferenceFace	file:
sig_handler	src/include/backward/backward.hpp	/^	static void sig_handler(int, siginfo_t* info, void* _ctx) {$/;"	f	class:backward::SignalHandling
sin	src/util/mathUtil.h	/^		float sin(){$/;"	f	class:util::Angle
singleQuote	runner.py	/^singleQuote = " ' "$/;"	v
size	src/include/Box2D/Common/b2StackAllocator.h	/^	int32 size;$/;"	m	struct:b2StackEntry
size	src/include/SFML/Window/Event.hpp	/^        SizeEvent            size;            \/\/\/< Size event parameters (Event::Resized)$/;"	m	union:sf::Event::__anon4
size	src/include/backward/backward.hpp	/^	size_t size() const { return 0; }$/;"	f	class:backward::StackTraceImpl
size	src/include/backward/backward.hpp	/^	size_t size() const {$/;"	f	class:backward::StackTraceLinuxImplHolder
size	src/include/backward/backward.hpp	/^	size_t size() const {$/;"	f	class:backward::StackTraceWithLocalsImpl
skip_n_firsts	src/include/backward/backward.hpp	/^	size_t skip_n_firsts() const { return _skip; }$/;"	f	class:backward::StackTraceLinuxImplBase
skip_n_firsts	src/include/backward/backward.hpp	/^	void skip_n_firsts(size_t n) { _skip = n; }$/;"	f	class:backward::StackTraceLinuxImplBase
snippet	src/include/backward/backward.hpp	/^	bool snippet;$/;"	m	class:backward::Printer
solve	src/include/Box2D/Dynamics/b2TimeStep.h	/^	float32 solve;$/;"	m	struct:b2Profile
solveInit	src/include/Box2D/Dynamics/b2TimeStep.h	/^	float32 solveInit;$/;"	m	struct:b2Profile
solvePosition	src/include/Box2D/Dynamics/b2TimeStep.h	/^	float32 solvePosition;$/;"	m	struct:b2Profile
solveTOI	src/include/Box2D/Dynamics/b2TimeStep.h	/^	float32 solveTOI;$/;"	m	struct:b2Profile
solveVelocity	src/include/Box2D/Dynamics/b2TimeStep.h	/^	float32 solveVelocity;$/;"	m	struct:b2Profile
sortFn	src/core/Process/renderProcess.h	/^	static bool sortFn(baseRenderNode *first, baseRenderNode *second){$/;"	f	class:renderProcess
source	src/include/backward/backward.hpp	/^	SourceLoc                      source;$/;"	m	struct:backward::ResolvedTrace
source_locs_t	src/include/backward/backward.hpp	/^	typedef std::vector<SourceLoc> source_locs_t;$/;"	t	struct:backward::ResolvedTrace
spriteRenderNode	src/core/Process/renderProcess.h	/^typedef renderProcess::renderNode<sf::Shape> spriteRenderNode;$/;"	t
src_files_t	src/include/backward/backward.hpp	/^	typedef details::hashtable<std::string, SourceFile>::type src_files_t;$/;"	t	class:backward::SnippetFactory
stacktrace_tag	src/include/backward/backward.hpp	/^namespace stacktrace_tag {$/;"	n	namespace:backward
state	src/include/Box2D/Collision/b2TimeOfImpact.h	/^	State state;$/;"	m	struct:b2TOIOutput
stateProcess	src/core/Process/stateProcess.h	/^	stateProcess(processMgr &_processManager, Settings &_settings, eventMgr &_eventManager) :$/;"	f	class:stateProcess
stateProcess	src/core/Process/stateProcess.h	/^class stateProcess : public Process{$/;"	c
stateSaveLoader	src/core/State/stateSaveLoader.h	/^	stateSaveLoader(State *state){$/;"	f	class:stateSaveLoader
stateSaveLoader	src/core/State/stateSaveLoader.h	/^class stateSaveLoader{$/;"	c
states	src/core/Process/stateProcess.h	/^	std::map<const Hash*, State*> states;$/;"	m	class:stateProcess
stencilBits	src/include/SFML/Window/ContextSettings.hpp	/^    unsigned int stencilBits;       \/\/\/< Bits of the stencil buffer$/;"	m	struct:sf::ContextSettings
step	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2TimeStep step;$/;"	m	struct:b2ContactSolverDef
step	src/include/Box2D/Dynamics/b2TimeStep.h	/^	b2TimeStep step;$/;"	m	struct:b2SolverData
step	src/include/Box2D/Dynamics/b2TimeStep.h	/^	float32 step;$/;"	m	struct:b2Profile
stepSize	src/core/Process/worldProcess.h	/^	float stepSize;$/;"	m	class:worldProcess
stepSize	src/game/ObjProcessors/cameraProcessor.h	/^	float stepSize;$/;"	m	class:cameraProcessor
storage	src/include/backward/backward.hpp	/^	} storage;$/;"	m	class:backward::Variable	typeref:union:backward::Variable::__anon14
strHelper	src/util/strHelper.h	/^	class strHelper{$/;"	c	namespace:util
swap	src/include/backward/backward.hpp	/^	void swap(SourceFile& b) {$/;"	f	class:backward::SourceFile
swap	src/include/backward/backward.hpp	/^	void swap(handle& b) {$/;"	f	class:backward::details::handle
sweepA	src/include/Box2D/Collision/b2TimeOfImpact.h	/^	b2Sweep sweepA;$/;"	m	struct:b2TOIInput
sweepB	src/include/Box2D/Collision/b2TimeOfImpact.h	/^	b2Sweep sweepB;$/;"	m	struct:b2TOIInput
symtab	src/include/backward/backward.hpp	/^		bfd_symtab_t symtab;$/;"	m	struct:backward::TraceResolverLinuxImpl::bfd_fileobject
system	src/include/SFML/Window/Event.hpp	/^        bool          system;  \/\/\/< Is the System key pressed?$/;"	m	struct:sf::Event::KeyEvent
system_tag	src/include/backward/backward.hpp	/^namespace system_tag {$/;"	n	namespace:backward
t	src/include/Box2D/Collision/b2TimeOfImpact.h	/^	float32 t;$/;"	m	struct:b2TOIOutput
tMax	src/include/Box2D/Collision/b2TimeOfImpact.h	/^	float32 tMax;		\/\/ defines sweep interval [0, tMax]$/;"	m	struct:b2TOIInput
tan	src/util/mathUtil.h	/^		float tan(){$/;"	f	class:util::Angle
tangentImpulse	src/include/Box2D/Collision/b2Collision.h	/^	float32 tangentImpulse;	\/\/\/< the friction impulse$/;"	m	struct:b2ManifoldPoint
tangentImpulse	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 tangentImpulse;$/;"	m	struct:b2VelocityConstraintPoint
tangentImpulses	src/include/Box2D/Dynamics/b2WorldCallbacks.h	/^	float32 tangentImpulses[b2_maxManifoldPoints];$/;"	m	struct:b2ContactImpulse
tangentMass	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 tangentMass;$/;"	m	struct:b2VelocityConstraintPoint
target	src/include/Box2D/Dynamics/Joints/b2MouseJoint.h	/^	b2Vec2 target;$/;"	m	struct:b2MouseJointDef
terrain	src/game/defines/renderingLayers.h	/^	terrain = -1,$/;"	e	enum:renderingLayers
terrainCreator	src/game/factory/terrainCreator.cpp	/^terrainCreator::terrainCreator(viewProcess *viewProc){$/;"	f	class:terrainCreator
terrainCreator	src/game/factory/terrainCreator.h	/^class terrainCreator : public objectCreator{$/;"	c
terrainGen	src/game/factory/terrainCreator.h	/^	terrainGenerator terrainGen;$/;"	m	class:terrainCreator
terrainGenerator	src/game/terrainGen/terrainGenerator.h	/^class terrainGenerator{$/;"	c
terrainProcessor	src/game/ObjProcessors/terrainProcessor.h	/^	terrainProcessor(processMgr &processManager, Settings &settings, eventMgr &_eventManager){$/;"	f	class:terrainProcessor
terrainProcessor	src/game/ObjProcessors/terrainProcessor.h	/^class terrainProcessor : public objectProcessor{$/;"	c
texCoords	src/include/SFML/Graphics/Vertex.hpp	/^    Vector2f  texCoords; \/\/\/< Coordinates of the texture's pixel to map to the vertex$/;"	m	class:sf::Vertex
text	src/include/SFML/Window/Event.hpp	/^        TextEvent            text;            \/\/\/< Text event parameters (Event::TextEntered)$/;"	m	union:sf::Event::__anon4
textRenderNode	src/core/Process/renderProcess.h	/^typedef renderProcess::renderNode<sf::Shape> textRenderNode;$/;"	t
texture	src/include/SFML/Graphics/Font.hpp	/^        sf::Texture      texture; \/\/\/< Texture containing the pixels of the glyphs$/;"	m	struct:sf::Font::Page
texture	src/include/SFML/Graphics/RenderStates.hpp	/^    const Texture* texture;   \/\/\/< Texture$/;"	m	class:sf::RenderStates
textureRect	src/include/SFML/Graphics/Glyph.hpp	/^    IntRect textureRect; \/\/\/< Texture coordinates of the glyph inside the font's texture$/;"	m	class:sf::Glyph
thickness	src/game/factory/boundaryCreator.h	/^	float thickness;$/;"	m	class:boundaryCreator
thread_id	src/include/backward/backward.hpp	/^	unsigned thread_id() const { return 0; }$/;"	f	class:backward::StackTraceImpl
thread_id	src/include/backward/backward.hpp	/^	unsigned thread_id() const {$/;"	f	class:backward::StackTraceLinuxImplBase
thresholdLevel	src/util/logObject.cpp	/^util::logLevel util::baseLog::thresholdLevel;$/;"	m	class:util::baseLog	file:
thresholdLevel	src/util/logObject.h	/^		static logLevel thresholdLevel; $/;"	m	class:util::baseLog
thresholdLevel	tools/beautified.cpp	/^	static logLevel thresholdLevel;$/;"	m	class:util::baseLog	file:
thresholdLevel	tools/input.cpp	/^		static logLevel thresholdLevel; $/;"	m	class:util::baseLog	file:
toAngle	src/core/vector.h	/^	float toAngle() const{$/;"	f	class:vector2
toAngle	tools/beautified.cpp	/^	float toAngle () const {$/;"	f	class:vector2
toAngle	tools/input.cpp	/^	float toAngle() const{$/;"	f	class:vector2
toDeg	src/util/mathUtil.h	/^		float toDeg(){$/;"	f	class:util::Angle
toRad	src/util/mathUtil.h	/^		float toRad(){$/;"	f	class:util::Angle
toStr	src/util/strHelper.h	/^		static std::string toStr(const T &value){$/;"	f	class:util::strHelper
toVector	src/util/mathUtil.h	/^		vector2 toVector(){$/;"	f	class:util::Angle
token_names	tools/beautified.cpp	/^const char *token_names[] = {$/;"	v
token_names	tools/input.cpp	/^const char *token_names[] =$/;"	v
top	src/include/SFML/Graphics/Font.hpp	/^        unsigned int top;    \/\/\/< Y position of the row into the texture$/;"	m	struct:sf::Font::Row
top	src/include/SFML/Graphics/Rect.hpp	/^    T top;    \/\/\/< Top coordinate of the rectangle$/;"	m	class:sf::Rect
topRight	src/game/factory/terrainCreator.h	/^	vector2 bottomLeft, topRight, numChunks;$/;"	m	class:terrainCreator
totalBounces	src/game/bulletColliders/bounceCollider.h	/^	int totalBounces;$/;"	m	class:bounceCollider
totalChunkCount	src/game/factory/terrainCreator.h	/^	int totalChunkCount;$/;"	m	class:terrainCreator
totalClipCooldown	src/game/ObjProcessors/gunProcessor.h	/^	int totalClipCooldown;$/;"	m	struct:gunData
totalClipSize	src/game/ObjProcessors/gunProcessor.h	/^	int totalClipSize;$/;"	m	struct:gunData
totalShotCooldown	src/game/ObjProcessors/gunProcessor.h	/^	int totalShotCooldown;$/;"	m	struct:gunData
trace	src/include/backward/backward.hpp	/^		ResolvedTrace& trace;$/;"	m	struct:backward::TraceResolverLinuxImpl::inliners_search_cb
trace_resolver_tag	src/include/backward/backward.hpp	/^namespace trace_resolver_tag {$/;"	n	namespace:backward
transform	src/include/SFML/Graphics/RenderStates.hpp	/^    Transform      transform; \/\/\/< Transform$/;"	m	class:sf::RenderStates
transformA	src/include/Box2D/Collision/b2Distance.h	/^	b2Transform transformA;$/;"	m	struct:b2DistanceInput
transformB	src/include/Box2D/Collision/b2Distance.h	/^	b2Transform transformB;$/;"	m	struct:b2DistanceInput
transitioning	src/core/Process/stateProcess.h	/^	bool transitioning;$/;"	m	class:stateProcess
triBottomLeft	src/game/terrainGen/terrainGenerator.h	/^		triBottomLeft,$/;"	e	enum:terrainGenerator::chunkType
triBottomRight	src/game/terrainGen/terrainGenerator.h	/^		triBottomRight,$/;"	e	enum:terrainGenerator::chunkType
triTopLeft	src/game/terrainGen/terrainGenerator.h	/^		triTopLeft,$/;"	e	enum:terrainGenerator::chunkType
triTopRight	src/game/terrainGen/terrainGenerator.h	/^		triTopRight,$/;"	e	enum:terrainGenerator::chunkType
type	src/core/ObjProcessors/objContactListener.h	/^	} type;$/;"	m	struct:collisionData	typeref:enum:collisionData::Type
type	src/game/terrainGen/terrainGenerator.h	/^		chunkType type;$/;"	m	struct:terrainGenerator::Chunk
type	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	Type type;$/;"	m	struct:b2EPAxis	file:
type	src/include/Box2D/Collision/b2Collision.h	/^	Type type;$/;"	m	struct:b2Manifold
type	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^	b2Manifold::Type type;$/;"	m	struct:b2ContactPositionConstraint	file:
type	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	b2JointType type;$/;"	m	struct:b2JointDef
type	src/include/Box2D/Dynamics/b2Body.h	/^	b2BodyType type;$/;"	m	struct:b2BodyDef
type	src/include/SFML/Window/Event.hpp	/^    EventType type; \/\/\/< Type of the event$/;"	m	class:sf::Event
type	src/include/backward/backward.hpp	/^			typedef std::unordered_map<K, V> type;$/;"	t	struct:backward::details::hashtable
type	src/include/backward/backward.hpp	/^	enum type {$/;"	g	namespace:backward::Color
type	src/include/backward/backward.hpp	/^	struct rm_ptr { typedef T type; };$/;"	t	struct:backward::details::rm_ptr
type	src/include/backward/backward.hpp	/^	struct rm_ptr<T*> { typedef T type; };$/;"	t	struct:backward::details::rm_ptr
type	src/include/backward/backward.hpp	/^	struct rm_ptr<const T*> { typedef const T type; };$/;"	t	struct:backward::details::rm_ptr
typeA	src/include/Box2D/Collision/b2Collision.h	/^	uint8 typeA;		\/\/\/< The feature type on shapeA$/;"	m	struct:b2ContactFeature
typeB	src/include/Box2D/Collision/b2Collision.h	/^	uint8 typeB;		\/\/\/< The feature type on shapeB$/;"	m	struct:b2ContactFeature
uint16	src/include/Box2D/Common/b2Settings.h	/^typedef unsigned short uint16;$/;"	t
uint32	src/include/Box2D/Common/b2Settings.h	/^typedef unsigned int uint32;$/;"	t
uint64_t	src/core/Hash.h	/^typedef unsigned long long uint64_t;$/;"	t
uint8	src/include/Box2D/Common/b2Settings.h	/^typedef unsigned char uint8;$/;"	t
unicode	src/include/SFML/Window/Event.hpp	/^        Uint32 unicode; \/\/\/< UTF-32 unicode value of the character$/;"	m	struct:sf::Event::TextEvent
unwind	src/include/backward/backward.hpp	/^size_t unwind(F f, size_t depth) {$/;"	f	namespace:backward::details
up	src/game/gameStateHelpers/playerEventHandler.h	/^	sf::Keyboard::Key up;$/;"	m	struct:playerHandlerData
upperAngle	src/include/Box2D/Dynamics/Joints/b2RevoluteJoint.h	/^	float32 upperAngle;$/;"	m	struct:b2RevoluteJointDef
upperBound	src/include/Box2D/Collision/b2Collision.h	/^	b2Vec2 upperBound;	\/\/\/< the upper vertex$/;"	m	struct:b2AABB
upperTranslation	src/include/Box2D/Dynamics/Joints/b2PrismaticJoint.h	/^	float32 upperTranslation;$/;"	m	struct:b2PrismaticJointDef
useRadii	src/include/Box2D/Collision/b2Distance.h	/^	bool useRadii;$/;"	m	struct:b2DistanceInput
useVertexCache	src/include/SFML/Graphics/RenderTarget.hpp	/^        bool      useVertexCache; \/\/\/< Did we previously use the vertex cache?$/;"	m	struct:sf::RenderTarget::StatesCache
usedMalloc	src/include/Box2D/Common/b2StackAllocator.h	/^	bool usedMalloc;$/;"	m	struct:b2StackEntry
userData	src/include/Box2D/Collision/b2DynamicTree.h	/^	void* userData;$/;"	m	struct:b2TreeNode
userData	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	void* userData;$/;"	m	struct:b2JointDef
userData	src/include/Box2D/Dynamics/b2Body.h	/^	void* userData;$/;"	m	struct:b2BodyDef
userData	src/include/Box2D/Dynamics/b2Fixture.h	/^	void* userData;$/;"	m	struct:b2FixtureDef
util	src/util/logObject.h	/^namespace util{$/;"	n
util	src/util/mathUtil.h	/^namespace util{$/;"	n
util	src/util/strHelper.h	/^namespace util{$/;"	n
util	tools/beautified.cpp	/^namespace util$/;"	n	file:
util	tools/input.cpp	/^namespace util{$/;"	n	file:
v	src/game/ObjProcessors/cameraProcessor.h	/^	vector2 v;$/;"	m	struct:cameraData
v	src/include/Box2D/Collision/b2Collision.h	/^	b2Vec2 v;$/;"	m	struct:b2ClipVertex
v	src/include/Box2D/Dynamics/b2TimeStep.h	/^	b2Vec2 v;$/;"	m	struct:b2Velocity
v1	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 v1, v2;$/;"	m	struct:b2ReferenceFace	file:
v2	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 v1, v2;$/;"	m	struct:b2ReferenceFace	file:
v2Prop	src/core/Property.h	/^typedef Prop<vector2> v2Prop;$/;"	t
val	src/core/Property.h	/^		T val;$/;"	m	class:Prop
val	src/core/Property.h	/^	T *val;$/;"	m	class:managedProp
val	src/core/Property.h	/^	T* val;$/;"	m	class:ptrProp
value	src/include/backward/backward.hpp	/^	const std::string& value() const {$/;"	f	class:backward::Variable
value	src/include/backward/backward.hpp	/^	std::string& value() {$/;"	f	class:backward::Variable
vector2	src/core/vector.h	/^	\/*inline*\/ vector2(float x, float y){$/;"	f	class:vector2
vector2	src/core/vector.h	/^	inline vector2(const vector2& other){$/;"	f	class:vector2
vector2	src/core/vector.h	/^	vector2(){ this->x = this->y = 0;};$/;"	f	class:vector2
vector2	src/core/vector.h	/^class vector2{$/;"	c
vector2	tools/beautified.cpp	/^	\/*inline*\/ vector2 ( float x, float y ){$/;"	f	class:vector2
vector2	tools/beautified.cpp	/^	inline vector2 ( const vector2 & other ){$/;"	f	class:vector2
vector2	tools/beautified.cpp	/^	vector2 (){ this->x = this->y = 0; }$/;"	f	class:vector2
vector2	tools/beautified.cpp	/^class vector2$/;"	c	file:
vector2	tools/input.cpp	/^	\/*inline*\/ vector2(float x, float y){$/;"	f	class:vector2
vector2	tools/input.cpp	/^	inline vector2(const vector2& other){$/;"	f	class:vector2
vector2	tools/input.cpp	/^	vector2(){ this->x = this->y = 0;};$/;"	f	class:vector2
vector2	tools/input.cpp	/^class vector2{$/;"	c	file:
vector3	src/core/vector.h	/^	vector3(){ this->x = this->y = this->z = 0;};$/;"	f	class:vector3
vector3	src/core/vector.h	/^	vector3(float x, float y, float z){$/;"	f	class:vector3
vector3	src/core/vector.h	/^	vector3(vector2 vec2, float z){$/;"	f	class:vector3
vector3	src/core/vector.h	/^class vector3{$/;"	c
vector3	tools/beautified.cpp	/^	vector3 ( float x, float y, float z ){$/;"	f	class:vector3
vector3	tools/beautified.cpp	/^	vector3 ( vector2 vec2, float z ){$/;"	f	class:vector3
vector3	tools/beautified.cpp	/^	vector3 (){ this->x = this->y = this->z = 0; }$/;"	f	class:vector3
vector3	tools/beautified.cpp	/^class vector3$/;"	c	file:
vector3	tools/input.cpp	/^	vector3(){ this->x = this->y = this->z = 0;};$/;"	f	class:vector3
vector3	tools/input.cpp	/^	vector3(float x, float y, float z){$/;"	f	class:vector3
vector3	tools/input.cpp	/^	vector3(vector2 vec2, float z){$/;"	f	class:vector3
vector3	tools/input.cpp	/^class vector3{$/;"	c	file:
velClamped	src/core/ObjProcessors/phyProcessor.h	/^	bool velClamped;$/;"	m	struct:phyData
velIterations	src/core/Process/worldProcess.h	/^	float velIterations, collisionIterations;$/;"	m	class:worldProcess
velocities	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	b2Velocity* velocities;$/;"	m	struct:b2ContactSolverDef
velocities	src/include/Box2D/Dynamics/b2TimeStep.h	/^	b2Velocity* velocities;$/;"	m	struct:b2SolverData
velocityBias	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.h	/^	float32 velocityBias;$/;"	m	struct:b2VelocityConstraintPoint
velocityIterations	src/include/Box2D/Dynamics/b2TimeStep.h	/^	int32 velocityIterations;$/;"	m	struct:b2TimeStep
vertexCache	src/include/SFML/Graphics/RenderTarget.hpp	/^        Vertex    vertexCache[VertexCacheSize]; \/\/\/< Pre-transformed vertices cache$/;"	m	struct:sf::RenderTarget::StatesCache
vertices	src/include/Box2D/Collision/b2CollideEdge.cpp	/^	b2Vec2 vertices[b2_maxPolygonVertices];$/;"	m	struct:b2TempPolygon	file:
vertices	src/include/Box2D/Rope/b2Rope.h	/^	b2Vec2* vertices;$/;"	m	struct:b2RopeDef
view	src/core/ObjProcessors/phyProcessor.h	/^	viewProcess *view;$/;"	m	class:phyProcessor
view	src/core/ObjProcessors/renderProcessor.h	/^	viewProcess *view;$/;"	m	class:renderProcessor
view	src/game/ObjProcessors/cameraProcessor.h	/^	viewProcess *view;$/;"	m	class:cameraProcessor
view	src/game/ObjProcessors/terrainProcessor.h	/^	viewProcess *view;$/;"	m	class:terrainProcessor
view2GameCoord	src/core/Process/viewProcess.cpp	/^vector2 viewProcess::view2GameCoord(vector2 renderCoord){$/;"	f	class:viewProcess
view2RenderCoord	src/core/Process/viewProcess.cpp	/^vector2 viewProcess::view2RenderCoord(vector2 renderCoord){$/;"	f	class:viewProcess
viewChanged	src/include/SFML/Graphics/RenderTarget.hpp	/^        bool      viewChanged;    \/\/\/< Has the current view changed since last draw?$/;"	m	struct:sf::RenderTarget::StatesCache
viewProc	src/game/States/gameState.h	/^	viewProcess *viewProc;$/;"	m	class:gameState
viewProc	src/game/factory/bladeCreator.h	/^	viewProcess *viewProc;$/;"	m	class:bladeCreator
viewProc	src/game/factory/boundaryCreator.h	/^	viewProcess *viewProc;$/;"	m	class:boundaryCreator
viewProc	src/game/factory/bulletCreator.h	/^	viewProcess *viewProc;$/;"	m	class:bulletCreator
viewProc	src/game/factory/dummyCreator.h	/^	viewProcess *viewProc;$/;"	m	class:dummyCreator
viewProc	src/game/factory/gunCreator.h	/^	viewProcess *viewProc;$/;"	m	class:gunCreator
viewProc	src/game/factory/pickupCreator.h	/^	viewProcess *viewProc;$/;"	m	class:pickupCreator
viewProc	src/game/factory/playerCreator.h	/^	viewProcess *viewProc;$/;"	m	class:playerCreator
viewProc	src/game/factory/terrainCreator.h	/^	viewProcess *viewProc;$/;"	m	class:terrainCreator
viewProc	src/game/gameStateHelpers/playerController.h	/^	viewProcess *viewProc;$/;"	m	class:playerController
viewProc	tools/beautified.cpp	/^	viewProcess *viewProc;$/;"	m	class:gameState	file:
viewProc	tools/input.cpp	/^	viewProcess *viewProc;$/;"	m	class:gameState	file:
viewProcess	src/core/Process/viewProcess.cpp	/^viewProcess::viewProcess(processMgr &processManager, Settings &settings, eventMgr &_eventManager) :$/;"	f	class:viewProcess
viewProcess	src/core/Process/viewProcess.h	/^class viewProcess : public Process, public Observer{$/;"	c
w	src/include/Box2D/Collision/b2Distance.cpp	/^	b2Vec2 w;		\/\/ wB - wA$/;"	m	struct:b2SimplexVertex	file:
w	src/include/Box2D/Dynamics/b2TimeStep.h	/^	float32 w;$/;"	m	struct:b2Velocity
wA	src/include/Box2D/Collision/b2Distance.cpp	/^	b2Vec2 wA;		\/\/ support point in proxyA$/;"	m	struct:b2SimplexVertex	file:
wB	src/include/Box2D/Collision/b2Distance.cpp	/^	b2Vec2 wB;		\/\/ support point in proxyB$/;"	m	struct:b2SimplexVertex	file:
waitCmd	runner.py	/^waitCmd = "read -n 1 c"$/;"	v
warmStarting	src/include/Box2D/Dynamics/b2TimeStep.h	/^	bool warmStarting;$/;"	m	struct:b2TimeStep
warningLog	src/util/logObject.h	/^	static 	util::msgLog<logLevelWarning> warningLog;$/;"	m	namespace:util
warningLog	tools/beautified.cpp	/^	static util::msgLog< logLevelWarning > warningLog;$/;"	m	namespace:util	file:
warningLog	tools/input.cpp	/^	static 	util::msgLog<logLevelWarning> warningLog;$/;"	m	namespace:util	file:
width	src/include/SFML/Graphics/Font.hpp	/^        unsigned int width;  \/\/\/< Current width of the row$/;"	m	struct:sf::Font::Row
width	src/include/SFML/Graphics/Rect.hpp	/^    T width;  \/\/\/< Width of the rectangle$/;"	m	class:sf::Rect
width	src/include/SFML/Window/Event.hpp	/^        unsigned int width;  \/\/\/< New width, in pixels$/;"	m	struct:sf::Event::SizeEvent
width	src/include/SFML/Window/VideoMode.hpp	/^    unsigned int width;        \/\/\/< Video mode width, in pixels$/;"	m	class:sf::VideoMode
window	src/core/ObjProcessors/renderProcessor.h	/^	sf::RenderWindow *window;$/;"	m	class:renderProcessor
window	src/core/Process/eventProcess.h	/^ 	sf::RenderWindow *window;$/;"	m	class:eventProcess
window	src/core/Process/renderProcess.h	/^	sf::RenderWindow *window;$/;"	m	class:renderProcess
window	src/core/Process/viewProcess.h	/^	sf::RenderWindow *window;$/;"	m	class:viewProcess
window	src/core/Process/windowProcess.h	/^	sf::RenderWindow *window;$/;"	m	class:windowProcess
window	src/game/ObjProcessors/cameraProcessor.h	/^	sf::RenderWindow *window;$/;"	m	class:cameraProcessor
window	src/game/ObjProcessors/terrainProcessor.h	/^	sf::RenderWindow *window;$/;"	m	class:terrainProcessor
windowClosed	src/mainLoopListener.h	/^	bool windowClosed;$/;"	m	class:mainLoopListener
windowHeight	src/core/Process/viewProcess.h	/^	float windowHeight;$/;"	m	class:viewProcess
windowProcess	src/core/Process/windowProcess.h	/^	windowProcess(processMgr &processManager, Settings &settings, eventMgr &eventManager) : $/;"	f	class:windowProcess
windowProcess	src/core/Process/windowProcess.h	/^class windowProcess : public Process{$/;"	c
world	src/core/ObjProcessors/phyProcessor.h	/^	b2World *world;$/;"	m	class:phyProcessor
world	src/core/Process/worldProcess.h	/^	b2World *world;$/;"	m	class:worldProcess
world	src/game/ObjProcessors/bulletProcessor.h	/^	b2World *world;$/;"	m	class:bulletProcessor
world	src/game/ObjProcessors/groundMoveProcessor.h	/^	b2World *world;$/;"	m	class:groundMoveProcessor
world	src/game/ObjProcessors/terrainProcessor.h	/^	b2World *world;$/;"	m	class:terrainProcessor
worldProcess	src/core/Process/worldProcess.h	/^	worldProcess(processMgr &processManager, Settings &settings, eventMgr &eventManager) :$/;"	f	class:worldProcess
worldProcess	src/core/Process/worldProcess.h	/^class worldProcess : public Process{$/;"	c
x	src/core/vector.h	/^	float x, y, z;$/;"	m	class:vector3
x	src/core/vector.h	/^	float x, y;$/;"	m	class:vector2
x	src/include/Box2D/Common/b2Math.h	/^	float32 x, y, z;$/;"	m	struct:b2Vec3
x	src/include/Box2D/Common/b2Math.h	/^	float32 x, y;$/;"	m	struct:b2Vec2
x	src/include/SFML/System/Vector2.hpp	/^    T x; \/\/\/< X coordinate of the vector$/;"	m	class:sf::Vector2
x	src/include/SFML/System/Vector3.hpp	/^    T x; \/\/\/< X coordinate of the vector$/;"	m	class:sf::Vector3
x	src/include/SFML/Window/Event.hpp	/^        int           x;      \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseButtonEvent
x	src/include/SFML/Window/Event.hpp	/^        int x;     \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseWheelEvent
x	src/include/SFML/Window/Event.hpp	/^        int x; \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseMoveEvent
x	tools/beautified.cpp	/^	float x, y, z;$/;"	m	class:vector3	file:
x	tools/beautified.cpp	/^	float x, y;$/;"	m	class:vector2	file:
x	tools/input.cpp	/^	float x, y, z;$/;"	m	class:vector3	file:
x	tools/input.cpp	/^	float x, y;$/;"	m	class:vector2	file:
xAccel	src/game/ObjProcessors/groundMoveProcessor.h	/^	float xAccel;$/;"	m	struct:moveData
xTermCmd	runner.py	/^xTermCmd = "xterm -e"$/;"	v
xVel	src/game/ObjProcessors/groundMoveProcessor.h	/^	float xVel;$/;"	m	struct:moveData
y	src/core/vector.h	/^	float x, y, z;$/;"	m	class:vector3
y	src/core/vector.h	/^	float x, y;$/;"	m	class:vector2
y	src/include/Box2D/Common/b2Math.h	/^	float32 x, y, z;$/;"	m	struct:b2Vec3
y	src/include/Box2D/Common/b2Math.h	/^	float32 x, y;$/;"	m	struct:b2Vec2
y	src/include/SFML/System/Vector2.hpp	/^    T y; \/\/\/< Y coordinate of the vector$/;"	m	class:sf::Vector2
y	src/include/SFML/System/Vector3.hpp	/^    T y; \/\/\/< Y coordinate of the vector$/;"	m	class:sf::Vector3
y	src/include/SFML/Window/Event.hpp	/^        int           y;      \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseButtonEvent
y	src/include/SFML/Window/Event.hpp	/^        int y;     \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseWheelEvent
y	src/include/SFML/Window/Event.hpp	/^        int y; \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseMoveEvent
y	tools/beautified.cpp	/^	float x, y, z;$/;"	m	class:vector3	file:
y	tools/beautified.cpp	/^	float x, y;$/;"	m	class:vector2	file:
y	tools/input.cpp	/^	float x, y, z;$/;"	m	class:vector3	file:
y	tools/input.cpp	/^	float x, y;$/;"	m	class:vector2	file:
yellow	src/include/backward/backward.hpp	/^		yellow = 0,$/;"	e	enum:backward::Color::type
yellow	src/include/backward/backward.hpp	/^		yellow = 33,$/;"	e	enum:backward::Color::type
z	src/core/Process/renderProcess.h	/^		int z;$/;"	m	class:renderProcess::baseRenderNode
z	src/core/vector.h	/^	float x, y, z;$/;"	m	class:vector3
z	src/include/Box2D/Common/b2Math.h	/^	float32 x, y, z;$/;"	m	struct:b2Vec3
z	src/include/SFML/System/Vector3.hpp	/^    T z; \/\/\/< Z coordinate of the vector$/;"	m	class:sf::Vector3
z	tools/beautified.cpp	/^	float x, y, z;$/;"	m	class:vector3	file:
z	tools/input.cpp	/^	float x, y, z;$/;"	m	class:vector3	file:
zeroVector	src/core/vector.h	146;"	d
zeroVector	tools/beautified.cpp	398;"	d	file:
zeroVector	tools/input.cpp	328;"	d	file:
~Colorize	src/include/backward/backward.hpp	/^	~Colorize() {$/;"	f	class:backward::Colorize
~Drawable	src/include/SFML/Graphics/Drawable.hpp	/^    virtual ~Drawable() {}$/;"	f	class:sf::Drawable
~Generator	src/game/generators/Generator.h	/^		virtual ~Generator(){};$/;"	f	class:Generator
~InputStream	src/include/SFML/System/InputStream.hpp	/^    virtual ~InputStream() {}$/;"	f	class:sf::InputStream
~Object	src/core/Object.cpp	/^Object::~Object(){$/;"	f	class:Object
~Process	src/core/Process/Process.h	/^	virtual ~Process(){};$/;"	f	class:Process
~Prop	src/core/Property.h	/^	~Prop(){$/;"	f	class:Prop
~State	src/core/State/State.h	/^	virtual ~State(){};$/;"	f	class:State
~b2BlockAllocator	src/include/Box2D/Common/b2BlockAllocator.cpp	/^b2BlockAllocator::~b2BlockAllocator()$/;"	f	class:b2BlockAllocator
~b2Body	src/include/Box2D/Dynamics/b2Body.cpp	/^b2Body::~b2Body()$/;"	f	class:b2Body
~b2BroadPhase	src/include/Box2D/Collision/b2BroadPhase.cpp	/^b2BroadPhase::~b2BroadPhase()$/;"	f	class:b2BroadPhase
~b2ChainAndCircleContact	src/include/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.h	/^	~b2ChainAndCircleContact() {}$/;"	f	class:b2ChainAndCircleContact
~b2ChainAndPolygonContact	src/include/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.h	/^	~b2ChainAndPolygonContact() {}$/;"	f	class:b2ChainAndPolygonContact
~b2ChainShape	src/include/Box2D/Collision/Shapes/b2ChainShape.cpp	/^b2ChainShape::~b2ChainShape()$/;"	f	class:b2ChainShape
~b2CircleContact	src/include/Box2D/Dynamics/Contacts/b2CircleContact.h	/^	~b2CircleContact() {}$/;"	f	class:b2CircleContact
~b2Contact	src/include/Box2D/Dynamics/Contacts/b2Contact.h	/^	virtual ~b2Contact() {}$/;"	f	class:b2Contact
~b2ContactFilter	src/include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual ~b2ContactFilter() {}$/;"	f	class:b2ContactFilter
~b2ContactListener	src/include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual ~b2ContactListener() {}$/;"	f	class:b2ContactListener
~b2ContactSolver	src/include/Box2D/Dynamics/Contacts/b2ContactSolver.cpp	/^b2ContactSolver::~b2ContactSolver()$/;"	f	class:b2ContactSolver
~b2DestructionListener	src/include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual ~b2DestructionListener() {}$/;"	f	class:b2DestructionListener
~b2Draw	src/include/Box2D/Common/b2Draw.h	/^	virtual ~b2Draw() {}$/;"	f	class:b2Draw
~b2DynamicTree	src/include/Box2D/Collision/b2DynamicTree.cpp	/^b2DynamicTree::~b2DynamicTree()$/;"	f	class:b2DynamicTree
~b2EdgeAndCircleContact	src/include/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.h	/^	~b2EdgeAndCircleContact() {}$/;"	f	class:b2EdgeAndCircleContact
~b2EdgeAndPolygonContact	src/include/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.h	/^	~b2EdgeAndPolygonContact() {}$/;"	f	class:b2EdgeAndPolygonContact
~b2GrowableStack	src/include/Box2D/Common/b2GrowableStack.h	/^	~b2GrowableStack()$/;"	f	class:b2GrowableStack
~b2Island	src/include/Box2D/Dynamics/b2Island.cpp	/^b2Island::~b2Island()$/;"	f	class:b2Island
~b2Joint	src/include/Box2D/Dynamics/Joints/b2Joint.h	/^	virtual ~b2Joint() {}$/;"	f	class:b2Joint
~b2PolygonAndCircleContact	src/include/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.h	/^	~b2PolygonAndCircleContact() {}$/;"	f	class:b2PolygonAndCircleContact
~b2PolygonContact	src/include/Box2D/Dynamics/Contacts/b2PolygonContact.h	/^	~b2PolygonContact() {}$/;"	f	class:b2PolygonContact
~b2QueryCallback	src/include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual ~b2QueryCallback() {}$/;"	f	class:b2QueryCallback
~b2RayCastCallback	src/include/Box2D/Dynamics/b2WorldCallbacks.h	/^	virtual ~b2RayCastCallback() {}$/;"	f	class:b2RayCastCallback
~b2Rope	src/include/Box2D/Rope/b2Rope.cpp	/^b2Rope::~b2Rope()$/;"	f	class:b2Rope
~b2Shape	src/include/Box2D/Collision/Shapes/b2Shape.h	/^	virtual ~b2Shape() {}$/;"	f	class:b2Shape
~b2StackAllocator	src/include/Box2D/Common/b2StackAllocator.cpp	/^b2StackAllocator::~b2StackAllocator()$/;"	f	class:b2StackAllocator
~b2World	src/include/Box2D/Dynamics/b2World.cpp	/^b2World::~b2World()$/;"	f	class:b2World
~baseLog	src/util/logObject.cpp	/^util::baseLog::~baseLog(){}/;"	f	class:util::baseLog
~baseProperty	src/core/Property.h	/^	virtual ~baseProperty(){};$/;"	f	class:baseProperty
~bounceCollider	src/game/bulletColliders/bounceCollider.h	/^	~bounceCollider(){};$/;"	f	class:bounceCollider
~bulletCollider	src/game/ObjProcessors/bulletProcessor.h	/^	virtual ~bulletCollider(){};$/;"	f	class:bulletCollider
~damageCollider	src/game/bulletColliders/damageCollider.h	/^	~damageCollider(){};$/;"	f	class:damageCollider
~dummyProp	src/core/Property.h	/^	~dummyProp(){};$/;"	f	class:dummyProp
~dummyStateSaveLoader	src/core/State/dummyStateSaveLoader.h	/^	~dummyStateSaveLoader(){};$/;"	f	class:dummyStateSaveLoader
~handle	src/include/backward/backward.hpp	/^	~handle() {$/;"	f	class:backward::details::handle
~managedProp	src/core/Property.h	/^	~managedProp(){$/;"	f	class:managedProp
~objContactListener	src/core/ObjProcessors/objContactListener.h	/^	~objContactListener(){};$/;"	f	class:objContactListener
~objectCreator	src/game/factory/objectFactory.h	/^	virtual ~objectCreator(){};$/;"	f	class:objectCreator
~objectMgr	src/core/objectMgr.h	/^	~objectMgr(){};$/;"	f	class:objectMgr
~objectMgr	tools/beautified.cpp	/^	~objectMgr (){}$/;"	f	class:objectMgr
~objectMgr	tools/input.cpp	/^	~objectMgr(){};$/;"	f	class:objectMgr
~objectProcessor	src/core/objectProcessor.h	/^	virtual ~objectProcessor(){};$/;"	f	class:objectProcessor
~pushCollider	src/game/bulletColliders/pushCollider.h	/^	~pushCollider(){};$/;"	f	class:pushCollider
~scopedLog	src/util/logObject.h	/^		~scopedLog(){$/;"	f	class:util::scopedLog
~scopedLog	tools/beautified.cpp	/^	~scopedLog (){$/;"	f	class:util::scopedLog
~scopedLog	tools/input.cpp	/^		~scopedLog(){$/;"	f	class:util::scopedLog
~stateSaveLoader	src/core/State/stateSaveLoader.h	/^	virtual ~stateSaveLoader(){};$/;"	f	class:stateSaveLoader
~vector2	src/core/vector.h	/^	~vector2(){};$/;"	f	class:vector2
~vector2	tools/beautified.cpp	/^	~vector2 (){}$/;"	f	class:vector2
~vector2	tools/input.cpp	/^	~vector2(){};$/;"	f	class:vector2
